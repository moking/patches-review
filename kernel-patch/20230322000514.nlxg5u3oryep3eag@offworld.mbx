From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 148BDC6FD20
	for <linux-cxl@archiver.kernel.org>; Wed, 22 Mar 2023 00:35:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229694AbjCVAfJ (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 21 Mar 2023 20:35:09 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:54912 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229629AbjCVAfI (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 21 Mar 2023 20:35:08 -0400
Received: from bee.birch.relay.mailchannels.net (bee.birch.relay.mailchannels.net [23.83.209.14])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B02AD574E1
        for <linux-cxl@vger.kernel.org>; Tue, 21 Mar 2023 17:35:07 -0700 (PDT)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id D16203C284A;
        Wed, 22 Mar 2023 00:35:06 +0000 (UTC)
Received: from pdx1-sub0-mail-a273.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 3C2083C2E11;
        Wed, 22 Mar 2023 00:35:06 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1679445306; a=rsa-sha256;
        cv=none;
        b=OBsxZpy/TLeiN7paDbKQuHYsfm62PEX0oEWmHN3ByRXoulogBLkaGy3MkoQNTFP0D0HRnU
        mcxlX8UOj4wXwI+RdgckT4lAulW2tgJRn+E4Q4Y678FMRIpT8lI9mWX/WyqPZdm9Nj7RTw
        4B3k6W46+puk3oOlIuZkeim5D4rlJRu5fOuAKwKjIKSo2079bjJTdEmCQk1+sVlQIVDpQJ
        tEMK6HSVuSDEtcued5ElXGETQ2kxRsVtXBr4+2lB06DW+HLbjBdFQzRAUjplabGaK8t1wx
        wnoPWzNyu+3exGxs6d6e9wOEc0n01DvklrVkVei259+IAjkphcFDgmsLoYS/UQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1679445306;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=LHl8Ycm5DtFIhQfcd3H5apDVy6yPkxbG0UAMI5K+ejg=;
        b=aadJlu49rcCGLyDdzl+beMXRDvlWDd9+L9SV9ta2KFvImt85FEY26cTE/mhj0wuCpRKGrQ
        54Qg727nfWvUTmwqGqeEtuRK9JaX+HE194SQYFcDexVMMXElmRBtaaDoTbXYwnYWgcr2x7
        +HXihLODMScjWQPRpUcKtg0YE/P0/0iH7c/45Du2w+1yefd8WHJekNNwIZpK7F+jd1R0//
        YwUEdFEZIvslH7SKIEAjaoONpffD2TfMKhHvNiIO1Crranl7Y7EXuPOFJhbAIOA5u2qBAI
        Y0ZTAcG/1tKawpFfbSR07uPPo+u+Qpdqn2KG9+osBq/BWxew1BKePA+oEtrqTg==
ARC-Authentication-Results: i=1;
        rspamd-766d96cb5b-l7sxs;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Slimy-Arithmetic: 18ffe9961b2eb66b_1679445306643_2275959767
X-MC-Loop-Signature: 1679445306643:3369902498
X-MC-Ingress-Time: 1679445306643
Received: from pdx1-sub0-mail-a273.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.104.253.212 (trex/6.7.2);
        Wed, 22 Mar 2023 00:35:06 +0000
Received: from offworld (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange ECDHE (P-256) server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a273.dreamhost.com (Postfix) with ESMTPSA id 4Ph8d54CL8z2F;
        Tue, 21 Mar 2023 17:35:05 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1679445306;
        bh=LHl8Ycm5DtFIhQfcd3H5apDVy6yPkxbG0UAMI5K+ejg=;
        h=Date:From:To:Cc:Subject:Content-Type;
        b=Jv/cYzEjxIwuAiNIpL+g6g5CwpRjnHWAuX556pAlStouW6BHLgr/GeTfk5ipvfavz
         LActfK45yvXyDhdAqQN3izWZcNISCZXN/5Jd2zOL/M9GJdqJrbP5TqUE7WdDcfotYH
         KsBbedbs+yj99Wml5q/Bdv37apNcSoTCdE8RiVsuMQFs3z/WbHhBbjX0+vfjwn34dP
         CR6kWnywYiV3dbmQ3kRfKcJvWtCxT5AUo5ajUizCmbbRHoHUUds5duJ8B3TcW1V+Pb
         DkjWaF8rBxuCgTCyqBVwYtw4IBnWAstNOyk0wtWpFtRFClMRQ/0OO1S6yP+00WEmwm
         TIsQQ1xFALA6g==
Date: Tue, 21 Mar 2023 17:05:14 -0700
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave.jiang@intel.com
Subject: Re: [PATCH v3 0/7] cxl: Background cmds and device sanitation
Message-ID: <20230322000514.nlxg5u3oryep3eag@offworld>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Disposition: inline
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
User-Agent: NeoMutt/20220429
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

On Fri, 24 Feb 2023, Davidlohr Bueso wrote:

>Hello,
>
>This series adds support for the rest of the security related cxl operations
>which are not strictly dependent on PMEM.
>
>Patch 1 adds the required background cmd handling bits (polling and irq).
>This is really the main motivation of the series as there are various
>features that will need this regardless of sanitation.
>
>Patch 2 adds a new sysfs 'security/state' file, which shows "disabled" if
>no security features are available - which is more intuitive than no showing
>it.
>
>Patch 3 adds a way to check if the device is actively used by tracking regions
>with target the memdevice to sanitize. I realize this might not be what is
>desired and wanted to get the expectations for this. This is more of a RFC
>patch.
>
>Patches 4-7 add the Sanitation and Secure Erase support, per CXL3.0 specs.
>
>These changes have been tested with both the mock device as well as with qemu[0,1].
>
>Changes from v2 (https://lore.kernel.org/linux-cxl/20221206011501.464916-1-dave@stgolabs.net/):
>- Redid the bacground cmd handling to use a syncronous approach instead.
>- Added cxl_memdev_active_region() to check if the memdevice is being used
>  (actively decoding any HPA ranges).
>- Create a new security sysfs directory with a 'state' file which is always visible.
>- The sysfs files' to trigger the security commands is only visible if
>  cpu_cache_has_invalidate_memregion().
>- Added a sanitize test for the mock device.
>
>Please consider for v6.4.

Hi Dan, ping? I would like to see were we stand with this series and hopefully
still time for 6.4 material - but that's not important. The open points which
imo would best be answered before attempting a v4 based on the current input:

- Are you ok with the approach in patch 1?

- Are you ok with security directory always showing at least the state file? As
Dave mentions this differs somewhat with nfit, but for that matter so does the
whole security semantics (this is now a directory vs a single, multiplexed file).

- Regarding ensuring the device is not actively decoding, would Alison/Fan's suggestion
to use commit_end/hdm_end instead of my hacky patch 3 be feasible? Or did you
have something else in mind?

Thanks,
Davidlohr

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 460CFC76195
	for <linux-cxl@archiver.kernel.org>; Mon, 27 Mar 2023 21:57:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229477AbjC0V5u (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Mon, 27 Mar 2023 17:57:50 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:38368 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229471AbjC0V5t (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Mon, 27 Mar 2023 17:57:49 -0400
Received: from mga18.intel.com (mga18.intel.com [134.134.136.126])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B36F012E
        for <linux-cxl@vger.kernel.org>; Mon, 27 Mar 2023 14:57:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1679954267; x=1711490267;
  h=date:from:to:cc:subject:message-id:references:
   in-reply-to:mime-version;
  bh=mJ1WAo/rtYBn6ykLtDX9Rfx7Ausl0RqG+NvAu+Ukcik=;
  b=Ux+x3DmZMohw5LOOB0lq63cf4UlMGw/E5hD/FKKbBmmPneI4XulcK15x
   AzWjbdiysWvR8P1dJWGuVOa6GJLuDlKFwjIr+02Nppx+Rw5azLF969Ai5
   jxe7NK/t3KwxFv4dcUDB3nilu2DBeB44676dUxx+dRAtr6PVzHeyxIDIT
   AWfEzFcTCveKP/1uyH9iT3xjNbB5QZjqXMztajdWP+1dudR1o+8CjITrB
   vchFhyo9HHZOlwDazt398BhwIm2Pgt21Sl582jRB4N7/5DjMFab/3W1Mn
   DnNFojBFZ2MEf91Hc8ly/P0w+briZdO3x6RkQHB0t3xrpn9rt5k05cGJQ
   Q==;
X-IronPort-AV: E=McAfee;i="6600,9927,10662"; a="324285267"
X-IronPort-AV: E=Sophos;i="5.98,295,1673942400"; 
   d="scan'208";a="324285267"
Received: from orsmga001.jf.intel.com ([10.7.209.18])
  by orsmga106.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 27 Mar 2023 14:57:40 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=McAfee;i="6600,9927,10662"; a="716233913"
X-IronPort-AV: E=Sophos;i="5.98,295,1673942400"; 
   d="scan'208";a="716233913"
Received: from orsmsx601.amr.corp.intel.com ([10.22.229.14])
  by orsmga001.jf.intel.com with ESMTP; 27 Mar 2023 14:57:40 -0700
Received: from orsmsx611.amr.corp.intel.com (10.22.229.24) by
 ORSMSX601.amr.corp.intel.com (10.22.229.14) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21; Mon, 27 Mar 2023 14:57:39 -0700
Received: from orsmsx612.amr.corp.intel.com (10.22.229.25) by
 ORSMSX611.amr.corp.intel.com (10.22.229.24) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21; Mon, 27 Mar 2023 14:57:39 -0700
Received: from ORSEDG601.ED.cps.intel.com (10.7.248.6) by
 orsmsx612.amr.corp.intel.com (10.22.229.25) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21 via Frontend Transport; Mon, 27 Mar 2023 14:57:39 -0700
Received: from NAM02-DM3-obe.outbound.protection.outlook.com (104.47.56.48) by
 edgegateway.intel.com (134.134.137.102) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.21; Mon, 27 Mar 2023 14:57:39 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=PfwRIBfAcZfvU+wqDWeDYffWPWmfrjubTpIlLIncnHE0RTrx2nmwoy1dlJ143210LhkDkROiQBa7pdZqKMuKW2jhc05IYSSaR8fhqxE3jitzIzuWcfn56O0FS7h25iaaupAHtLM2tw71WwRuFlKXFRq484tiCRa7F6ZVCsdUIMObi3HFFy1+46CzsKA2K6zz7fnEaPK3hqodIlCJubWMWYVWmEAfWIFemz8dXnWNyLchRNoQ/FzRcxmsYayfNnIpXXA0V7rBYsmYqZo+Fr1XoLd1jKMosCxjPnmNuJOZ0OtwC0x6JjzgUL+NwCa+LkZQVEmL4y1Vvx4R3A8m6mp33Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=AKTRopzEycm3ozWBTxqfHNIiJ1UhT2uxRoRryic4sAQ=;
 b=SVTm71MFCauOK6DVXLjEI3XmONQb8bgGdi9okPEVW/T8iNQ2r693qeuvQ9wyPgvnNcWIxlQWFihUnCeyX9E4Pa4n09GscZioJVUh7aWFoBC6M80ZmrumQYnvfZnzDpPfgTWkHj6rLToQzmZ5iaR8ij0SUQ8oQzc4iBZc7DBmvNuQjfX9DhQwF+AEgoDKBU9nljbxiVHKD2vinYM5UgR6+UuCbi8GWjqh5aiToCtFJA867lfLSW68dDKoM4xA74ZQuYWugCBsHlg3ABRJtNONC8SYHaeGa3T70b/aoAoX0hGTIXMSk/72vhPkIdBo6SJT11smUGwtbBy6+Ga5RamZ7w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from PH8PR11MB8107.namprd11.prod.outlook.com (2603:10b6:510:256::6)
 by MN0PR11MB6207.namprd11.prod.outlook.com (2603:10b6:208:3c5::21) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.6222.32; Mon, 27 Mar
 2023 21:57:37 +0000
Received: from PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233]) by PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233%6]) with mapi id 15.20.6178.041; Mon, 27 Mar 2023
 21:57:37 +0000
Date: Mon, 27 Mar 2023 14:57:34 -0700
From: Dan Williams <dan.j.williams@intel.com>
To: Davidlohr Bueso <dave@stgolabs.net>, <dan.j.williams@intel.com>
CC: <jonathan.cameron@huawei.com>, <ira.weiny@intel.com>,
        <fan.ni@samsung.com>, <a.manzanares@samsung.com>,
        <linux-cxl@vger.kernel.org>, <dave@stgolabs.net>
Subject: RE: [PATCH 1/7] cxl/mbox: Add background cmd handling machinery
Message-ID: <6422114e9b764_21a8294bc@dwillia2-xfh.jf.intel.com.notmuch>
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-2-dave@stgolabs.net>
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20230224194652.1990604-2-dave@stgolabs.net>
X-ClientProxiedBy: SJ0PR03CA0282.namprd03.prod.outlook.com
 (2603:10b6:a03:39e::17) To PH8PR11MB8107.namprd11.prod.outlook.com
 (2603:10b6:510:256::6)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: PH8PR11MB8107:EE_|MN0PR11MB6207:EE_
X-MS-Office365-Filtering-Correlation-Id: 35a23af4-2f8f-4613-b97a-08db2f0e4720
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: zb59XNEkmSG6ysjE8Su4jYF0FPNSyv5p3AVUC1+bvCtLNhS2Jt1AH7m+70CyE5gXjRBxV6lQbLcgyjmRJTtYjPZlCu27uXLT6ycocDrktlPK9I6Il/nrAOVvY7ml9bpatyk1pU/FivSGUHD3LMvKR2No2Olsw3bpayfazz/ju4x2Sv8nxjPyJVDIZP2sVhc/gPony8MHaGokU5CjS69IgynIqfpcxHlYad/BeMXkqeEhJXRD86oSAgED/KI3Tnjr7DQpyPfEhUhoU5zsGvayeKO9P9IeBdm5Wd45VNby9DTYljybIw7YlqRRhAqU5ZN5KfrfYDle9b6B0ycqED6am4lZDL3W2cmXTkmUkLa3bhgIINnPauGajhtXV+aPWJoRZr6wIudAvzuvG0oppKCIV+5NYYAjBEWL5hOrd+oyqxeINvQYnBjYhxK/epIttYjZ3fuecHbKloL9l8RxoQObBvJQWwc8jJhAPwkt9aDOgp1hkRhJe8GLHeY3DE6gCYQIoXY69n0/KkTo/1ERMzSGDo8wiFeSf4CRj4yv6yh2Td76Sslx6+V8/EHl26zYqL+T
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:PH8PR11MB8107.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230028)(376002)(346002)(366004)(396003)(39860400002)(136003)(451199021)(66556008)(66476007)(8676002)(4326008)(66946007)(316002)(8936002)(5660300002)(30864003)(41300700001)(26005)(82960400001)(186003)(6506007)(83380400001)(6512007)(6666004)(478600001)(6486002)(38100700002)(9686003)(86362001)(2906002)(66899021);DIR:OUT;SFP:1102;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?us-ascii?Q?Bd5u42KeE6evxum8OPRCJPjI2bqzu/0CJNTtBv72zccorWjyeCT70xAntunL?=
 =?us-ascii?Q?jAVoiG+ddEqAk3XRFIxG6F3aScHMcqrIIxooq4/0OEV/OlS8t85SkrIWj9Ib?=
 =?us-ascii?Q?VqU5ZV1KT1LqD+m9IVF/C6AGORA/8sRwlCNml2dtlwsrkPRZ9uDdrWlukSyr?=
 =?us-ascii?Q?XiSlbdPiNS6bG83g/zjgrhgr4fTjfAp7cDn5Kn0Kwsoyv830V9pWIp4ne86e?=
 =?us-ascii?Q?SVPgGe0ewvUELGXhXFEh/obtf6fb0+WdaE14gEy5xz3zHjPR2LibF42SnG8o?=
 =?us-ascii?Q?r5PbRK0F7EgSFGiHriukiLc/wkwvEtqzx8x2EI6uMVsvXvrjWbZPB/wTIRC7?=
 =?us-ascii?Q?8MuTZt3j+zxBmf7ipLVMkgjEA4SY3AKi1jsMVMWHkuvgX3P6GyOnVphQtMF0?=
 =?us-ascii?Q?irFDcCLsk/TTaUBkpgJMAX/TQCqcPXie8AyOQn/7CvAoz1w23PlkH+BdJVMk?=
 =?us-ascii?Q?KT0FRoml0kU6xWkuj5XuY5OuKs3l7seqB42/p20BvOOFFz2hOQcdbe1bTWR4?=
 =?us-ascii?Q?SEDxm307anlYC+cnG02CseTuhv72lVcCkyNgAQirKdtHCOG/Si01Gv01AZF1?=
 =?us-ascii?Q?/6SIwh7WJcJtTIflimM52z3Vn5M1QmCu/QqAUNwKRnKL+SV0Jlm3Nm6/rdwu?=
 =?us-ascii?Q?xTSSCddfeKPhL2DEGEFPZv35+15toVHz4KRjmIH0UYB3Sl8GVu87BgBz3iVL?=
 =?us-ascii?Q?bUA2KtYkPFnPJmF26S5MG2tGQ98XvuIFY2kIso+plgOzZu2XCARFxnfLGZoB?=
 =?us-ascii?Q?IK3eL017rv0YQiH6VG/OAiCjoP/FlBUMEQXhk95g2Geab8UVRMUArwLeLLub?=
 =?us-ascii?Q?rh5/PXAXKxgbJf631h6BnT7Y1zhxi1dP9NaLMCEcstQiSYN9yIap8HJcVMtP?=
 =?us-ascii?Q?DtlluvVMIfs/gsjHYgyfrBr/2WBqS1YgAl/4Pfp1+L+hrFE4ypuogFDIMUpK?=
 =?us-ascii?Q?7IvQH1T8Mjq7KYFjlJj4bwxoV0p30RzXJet9gDlYVjTCh4aOv5NE4ZEHSO+o?=
 =?us-ascii?Q?Y6hOb6s3AMwe3H+d0S/9SJ4raH36tX8kRbYKSwndlSCqPBAQFfhIqKhuXLie?=
 =?us-ascii?Q?dJTNdONZS7u/bgCq0TKFiXkwrJ9Pyn0E7uJ2IKZM+zHjbisRT4BQ/9ujNGKr?=
 =?us-ascii?Q?wuYBtjtDp+raNBUj0UI/nt24ie9546D9nm7+9hyT+nc3J2XubRY2EFS+ZjXb?=
 =?us-ascii?Q?bIzGDAhfT44jUlMu8lgmLg40B+4AUzII/XoRSKIXwhq6C1sxakOmL0iF8hqr?=
 =?us-ascii?Q?asNDyd93tl6zdATQiWX1W9yMtxHmR1oum4FXvMkejW2mDkKpUuiGKewYeSRo?=
 =?us-ascii?Q?stFxw+IaCIAZSTJ198YAN4WDJaZpOaegyQBNBa20fkx/VmeAn3RKRoiFy925?=
 =?us-ascii?Q?EkA1HPTWE+ZY2+Aa6idYuuIM6Y1A3U0OF4QCrWkqKLJb27QqQ94Um/YTcV9r?=
 =?us-ascii?Q?d9QE+2jJYlR6YdKQ4I1AnynCtm1MO8TAUbwZIxCLND9r4khhwrZHIpu0T5Fa?=
 =?us-ascii?Q?ORg6am3PJll/c3TJJHDwBllJPYfbipuYMJiHY1FZSeG51pKeIVh5HPFs/KKL?=
 =?us-ascii?Q?SQPJ9EyT9V/jMqGZrKaKWpaAkOe5KJEBPzFhXh3ZBvNrRDqZH7BGEMRWrEAd?=
 =?us-ascii?Q?jA=3D=3D?=
X-MS-Exchange-CrossTenant-Network-Message-Id: 35a23af4-2f8f-4613-b97a-08db2f0e4720
X-MS-Exchange-CrossTenant-AuthSource: PH8PR11MB8107.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 27 Mar 2023 21:57:37.4463
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: tXoGPwEwG9nTJTkDpxQek1oxTYPnekmXwrvj2O4wuQ9Xz3WoQHGssD8vsTk44Vc7akoTNkaLYr8ucmk38jD1kHTf+YJuZHwLAE4p2Doeeak=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MN0PR11MB6207
X-OriginatorOrg: intel.com
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Davidlohr Bueso wrote:

Hi Davidlohr, I am finally circling back to this, some comments below,
but I think this is looking good.

> This adds support for handling background operations, as defined in
> the CXL 3.0 spec. Commands that can take too long (over ~2 seconds)
> can run in the background asynchronously (to the hardware). Currently
> these are limited to Maintenance, transfer/activate Firmware, Scan
> Media, Sanitize (aka overwrite), and VPPB bind/unbind.
> 
> The driver will deal with such commands synchronously, blocking
> all other incoming commands for a specified period of time, allowing
> time-slicing the command such that the caller can send incremental
> requests to avoid monopolizing the driver/device. This approach
> makes the code simpler, where any out of sync (timeout) between the
> driver and hardware is just disregarded as an invalid state until
> the next successful submission.
> 
> On devices where mbox interrupts are supported, this will still use
> a poller that will wakeup in the specified wait intervals. The irq
> handler will simply awake a blocked cmd, which is also safe vs a
> task that is either waking (timing out) or already awoken.
> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
> ---
>  drivers/cxl/cxl.h    |   7 +++
>  drivers/cxl/cxlmem.h |   6 +++
>  drivers/cxl/pci.c    | 100 +++++++++++++++++++++++++++++++++++++++++--
>  3 files changed, 109 insertions(+), 4 deletions(-)
> 
> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
> index d853a0238ad7..b834e55375e3 100644
> --- a/drivers/cxl/cxl.h
> +++ b/drivers/cxl/cxl.h
> @@ -176,14 +176,21 @@ static inline int ways_to_eiw(unsigned int ways, u8 *eiw)
>  /* CXL 2.0 8.2.8.4 Mailbox Registers */
>  #define CXLDEV_MBOX_CAPS_OFFSET 0x00
>  #define   CXLDEV_MBOX_CAP_PAYLOAD_SIZE_MASK GENMASK(4, 0)
> +#define   CXLDEV_MBOX_CAP_IRQ_MSGNUM_MASK GENMASK(10, 7)
> +#define   CXLDEV_MBOX_CAP_BG_CMD_IRQ BIT(6)
>  #define CXLDEV_MBOX_CTRL_OFFSET 0x04
>  #define   CXLDEV_MBOX_CTRL_DOORBELL BIT(0)
> +#define   CXLDEV_MBOX_CTRL_BG_CMD_IRQ BIT(2)
>  #define CXLDEV_MBOX_CMD_OFFSET 0x08
>  #define   CXLDEV_MBOX_CMD_COMMAND_OPCODE_MASK GENMASK_ULL(15, 0)
>  #define   CXLDEV_MBOX_CMD_PAYLOAD_LENGTH_MASK GENMASK_ULL(36, 16)
>  #define CXLDEV_MBOX_STATUS_OFFSET 0x10
> +#define   CXLDEV_MBOX_STATUS_BG_CMD BIT(0)
>  #define   CXLDEV_MBOX_STATUS_RET_CODE_MASK GENMASK_ULL(47, 32)
>  #define CXLDEV_MBOX_BG_CMD_STATUS_OFFSET 0x18
> +#define   CXLDEV_MBOX_BG_CMD_COMMAND_OPCODE_MASK GENMASK_ULL(15, 0)
> +#define   CXLDEV_MBOX_BG_CMD_COMMAND_PCT_MASK GENMASK_ULL(22, 16)
> +#define   CXLDEV_MBOX_BG_CMD_COMMAND_RC_MASK GENMASK_ULL(47, 32)
>  #define CXLDEV_MBOX_PAYLOAD_OFFSET 0x20
>  
>  /*
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index ccbafc05a636..934076254d52 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -108,6 +108,9 @@ static inline struct cxl_ep *cxl_ep_load(struct cxl_port *port,
>   *            variable sized output commands, it tells the exact number of bytes
>   *            written.
>   * @min_out: (input) internal command output payload size validation
> + * @poll_count: (input)  Number of timeouts to attempt.
> + * @poll_interval: (input) Number of ms between mailbox background command
> + *                 polling intervals timeouts.
>   * @return_code: (output) Error code returned from hardware.
>   *
>   * This is the primary mechanism used to send commands to the hardware.
> @@ -123,6 +126,8 @@ struct cxl_mbox_cmd {
>  	size_t size_in;
>  	size_t size_out;
>  	size_t min_out;
> +	int poll_count;
> +	u64 poll_interval;

An int will do, right? This value should likely never be above 1000.

>  	u16 return_code;
>  };
>  
> @@ -322,6 +327,7 @@ enum cxl_opcode {
>  	CXL_MBOX_OP_GET_SCAN_MEDIA_CAPS	= 0x4303,
>  	CXL_MBOX_OP_SCAN_MEDIA		= 0x4304,
>  	CXL_MBOX_OP_GET_SCAN_MEDIA	= 0x4305,
> +	CXL_MBOX_OP_SANITIZE		= 0x4400,
>  	CXL_MBOX_OP_GET_SECURITY_STATE	= 0x4500,
>  	CXL_MBOX_OP_SET_PASSPHRASE	= 0x4501,
>  	CXL_MBOX_OP_DISABLE_PASSPHRASE	= 0x4502,
> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> index 60b23624d167..26b6105e2797 100644
> --- a/drivers/cxl/pci.c
> +++ b/drivers/cxl/pci.c
> @@ -52,6 +52,8 @@ static unsigned short mbox_ready_timeout = 60;
>  module_param(mbox_ready_timeout, ushort, 0644);
>  MODULE_PARM_DESC(mbox_ready_timeout, "seconds to wait for mailbox ready");
>  
> +static DECLARE_WAIT_QUEUE_HEAD(mbox_wait);
> +
>  static int cxl_pci_mbox_wait_for_doorbell(struct cxl_dev_state *cxlds)
>  {
>  	const unsigned long start = jiffies;
> @@ -85,6 +87,25 @@ static int cxl_pci_mbox_wait_for_doorbell(struct cxl_dev_state *cxlds)
>  			    status & CXLMDEV_DEV_FATAL ? " fatal" : "",        \
>  			    status & CXLMDEV_FW_HALT ? " firmware-halt" : "")
>  
> +static irqreturn_t cxl_mbox_irq(int irq, void *id)
> +{
> +	/* short-circuit the wait in __cxl_pci_mbox_send_cmd() */
> +	wake_up(&mbox_wait);
> +	return IRQ_HANDLED;
> +}
> +
> +static bool cxl_mbox_background_complete(struct cxl_dev_state *cxlds)
> +{
> +	u64 bgcmd_status_reg;
> +	u32 pct;
> +
> +	bgcmd_status_reg = readq(cxlds->regs.mbox +
> +				 CXLDEV_MBOX_BG_CMD_STATUS_OFFSET);
> +	pct = FIELD_GET(CXLDEV_MBOX_BG_CMD_COMMAND_PCT_MASK, bgcmd_status_reg);
> +
> +	return pct == 100;
> +}
> +
>  /**
>   * __cxl_pci_mbox_send_cmd() - Execute a mailbox command
>   * @cxlds: The device state to communicate with.
> @@ -178,6 +199,56 @@ static int __cxl_pci_mbox_send_cmd(struct cxl_dev_state *cxlds,
>  	mbox_cmd->return_code =
>  		FIELD_GET(CXLDEV_MBOX_STATUS_RET_CODE_MASK, status_reg);
>  
> +	/*
> +	 * Handle the background command in a synchronous manner.
> +	 *
> +	 * All other mailbox commands will serialize/queue on the mbox_mutex,
> +	 * which we currently hold. Furthermore this also guarantees that
> +	 * cxl_mbox_background_complete() checks are safe amongst each other,
> +	 * in that no new bg operation can occur in between.
> +	 *
> +	 * With the exception of special cases that merit monopolizing the
> +	 * driver/device, bg operations are timesliced in accordance with
> +	 * the nature of the command being sent.
> +	 *
> +	 * In the event of timeout, the mailbox state is indeterminate
> +	 * until the next successful command submission and the driver
> +	 * can get back in sync with the hardware state.
> +	 */
> +	if (mbox_cmd->return_code == CXL_MBOX_CMD_RC_BACKGROUND) {
> +		u64 bg_status_reg;
> +		const bool timeslice = mbox_cmd->opcode != CXL_MBOX_OP_SANITIZE;

I understand that sanitize is special, but it feels out of place for
this to never give up polling when sanitize is in progress.

Yes, sanitize is a special case because the device is media disabled and
not much else can happen with it. However because of that I expect the
admin thread that submitted it may be different than the thread that
wants to check the status and re-enable the device.

cxl disable-memdev memX
echo 1 > /sys/bus/cxl/devices/memX/security/sanitize
<select()/poll() on /sys/bus/cxl/devices/memX/security/sanitize>
cxl enable-memdev memX

Per the spec other foreground commands can be allowed through while
sanitize is in flight and the device is expected to fail them. With
background commands I think the need to be careful and queue them up to
avoid clobbering the background status goes away with santize. If the
device has sanitize in progress the driver can just reject/fail new
commands with the "Background Operation" effect until it has had a
chance to reap the sanitize result.

> +
> +		dev_dbg(dev, "Mailbox background operation started\n");
> +
> +		while (1) {
> +			if (wait_event_interruptible_timeout(
> +				mbox_wait, cxl_mbox_background_complete(cxlds),
> +				msecs_to_jiffies(mbox_cmd->poll_interval)) > 0)
> +				break;

Given that this does not check for -EINTR what is the rationale for
making the wait interruptible?

> +
> +			if (timeslice && !--mbox_cmd->poll_count)
> +				break;

Per-above all commands that the kernel would synchronously wait for are
always timesliced, and sanitize has special behavior.

> +		}
> +
> +		if (!cxl_mbox_background_complete(cxlds)) {
> +			u64 md_status =
> +				readq(cxlds->regs.memdev + CXLMDEV_STATUS_OFFSET);
> +
> +			cxl_cmd_err(cxlds->dev, mbox_cmd, md_status,
> +				    "background timeout");
> +			return -ETIMEDOUT;
> +		}
> +
> +		bg_status_reg = readq(cxlds->regs.mbox +
> +				      CXLDEV_MBOX_BG_CMD_STATUS_OFFSET);
> +		mbox_cmd->return_code =
> +			FIELD_GET(CXLDEV_MBOX_BG_CMD_COMMAND_RC_MASK,
> +				  bg_status_reg);
> +
> +		dev_dbg(dev, "Mailbox background operation completed\n");

Might be nice to include the opcode here and the other dev_dbg() above.

> +	}
> +
>  	if (mbox_cmd->return_code != CXL_MBOX_CMD_RC_SUCCESS) {
>  		dev_dbg(dev, "Mailbox operation had an error: %s\n",
>  			cxl_mbox_cmd_rc2str(mbox_cmd));
> @@ -222,8 +293,11 @@ static int cxl_pci_mbox_send(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *c
>  static int cxl_pci_setup_mailbox(struct cxl_dev_state *cxlds)
>  {
>  	const int cap = readl(cxlds->regs.mbox + CXLDEV_MBOX_CAPS_OFFSET);
> +	struct device *dev = cxlds->dev;
> +	struct pci_dev *pdev = to_pci_dev(dev);
>  	unsigned long timeout;
>  	u64 md_status;
> +	int rc, irq;
>  
>  	timeout = jiffies + mbox_ready_timeout * HZ;
>  	do {
> @@ -272,6 +346,24 @@ static int cxl_pci_setup_mailbox(struct cxl_dev_state *cxlds)
>  	dev_dbg(cxlds->dev, "Mailbox payload sized %zu",
>  		cxlds->payload_size);
>  
> +	if (!(cap & CXLDEV_MBOX_CAP_BG_CMD_IRQ)) {
> +		dev_dbg(dev, "Only Mailbox polling is supported");
> +		return 0;
> +	}
> +
> +	irq = pci_irq_vector(pdev,
> +			     FIELD_GET(CXLDEV_MBOX_CAP_IRQ_MSGNUM_MASK, cap));
> +	if (irq < 0)
> +		return irq;
> +
> +	rc = devm_request_irq(dev, irq, cxl_mbox_irq,
> +			      IRQF_SHARED, "mailbox", cxlds);
> +	if (rc)
> +		return rc;
> +
> +	writel(CXLDEV_MBOX_CTRL_BG_CMD_IRQ,
> +	       cxlds->regs.mbox + CXLDEV_MBOX_CTRL_OFFSET);
> +
>  	return 0;
>  }
>  
> @@ -757,6 +849,10 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
>  	if (rc)
>  		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");
>  
> +	rc = cxl_alloc_irq_vectors(pdev);
> +	if (rc)
> +		return rc;
> +
>  	rc = cxl_pci_setup_mailbox(cxlds);
>  	if (rc)
>  		return rc;
> @@ -777,10 +873,6 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
>  	if (rc)
>  		return rc;
>  
> -	rc = cxl_alloc_irq_vectors(pdev);
> -	if (rc)
> -		return rc;
> -

This hunk wants to be its own lead-in patch so it can be bisected
independently of introducing background command support.

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 06A71C6FD1D
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Mar 2023 01:11:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230187AbjC1BLt (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Mon, 27 Mar 2023 21:11:49 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:50758 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229611AbjC1BLs (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Mon, 27 Mar 2023 21:11:48 -0400
Received: from mga03.intel.com (mga03.intel.com [134.134.136.65])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id D4E8A1991
        for <linux-cxl@vger.kernel.org>; Mon, 27 Mar 2023 18:11:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1679965907; x=1711501907;
  h=date:from:to:cc:subject:message-id:references:
   in-reply-to:mime-version;
  bh=+fbXya11Agca/9Zax0YfbPHq03tCbly9m7IW8lnK7tA=;
  b=Z3/nTust7dLegT11kS67+kjWsrRm17UnKd65uqPwj9srZmHTYWgqAepE
   0rJmoYbW90yD4iY3Jg2YaI2fAwwhYJeh+zsYCS3POFHH0nOl0rM5nJJOs
   KtjzhEbd3vh3rI3BcpSH7Jk6WtORX/NrwQxOt3VyyfkyHzSdotw46fh/y
   z86W682qfscDUDyjV1njPJ3zFffve248n8ffFUrzVErR/lwN8kWmxn5xi
   NKAdeYUYEXiVsnxZZp/mMX7IlCJw6giZiMgHTE+JGhJQ0uXUo9w8GG4cn
   ZUl71sFqWozEIqZ/o1Kjy9L0emurD3oh5drKjblf5950BAQ6dPG4DxjdH
   g==;
X-IronPort-AV: E=McAfee;i="6600,9927,10662"; a="342839620"
X-IronPort-AV: E=Sophos;i="5.98,295,1673942400"; 
   d="scan'208";a="342839620"
Received: from orsmga002.jf.intel.com ([10.7.209.21])
  by orsmga103.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 27 Mar 2023 18:11:47 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=McAfee;i="6600,9927,10662"; a="683659773"
X-IronPort-AV: E=Sophos;i="5.98,295,1673942400"; 
   d="scan'208";a="683659773"
Received: from fmsmsx601.amr.corp.intel.com ([10.18.126.81])
  by orsmga002.jf.intel.com with ESMTP; 27 Mar 2023 18:11:47 -0700
Received: from fmsmsx610.amr.corp.intel.com (10.18.126.90) by
 fmsmsx601.amr.corp.intel.com (10.18.126.81) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21; Mon, 27 Mar 2023 18:11:46 -0700
Received: from FMSEDG603.ED.cps.intel.com (10.1.192.133) by
 fmsmsx610.amr.corp.intel.com (10.18.126.90) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21 via Frontend Transport; Mon, 27 Mar 2023 18:11:46 -0700
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (104.47.55.174)
 by edgegateway.intel.com (192.55.55.68) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.21; Mon, 27 Mar 2023 18:11:46 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=VAJQrcP59iPRY6Tv+gb5azkIRaqqoJhOvhnue/i0Qw7dMTjXSPS5WksKJ151rPGwh/KICRFB9LxZhTFYppnvXfMSUwjJ8LNp8kEfAdFKpXQtWa2M3hwcVfhERYGacWXhZETxq5vm6UhP/WIGNt9aY43pKZCT4Zm2TYv6FdLPMwBNuj5wE28IicETNccuFpPc/mgFJiSEklgeviGBMSPU3AN9MAryfbSEv8ZrSdbSCeBqx8SOeJtWzBOdTS84hudTTxJAQNZaiZl4Cj7mF/IIu5v5Oz4k3OENd0tzmmYVMLv/z5RP8UWxkIr+8uQkZbzyfidIBSvcmmWQbLRuteCfgQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=40oOKpLMkC3FsKZqaRTi69JcF5t0lxpa7IBPPpo0Kq4=;
 b=MKwybr29ujeV4H5SmPU0iVzmf4L1jDTZIrEh6Jyvlo86h9/Wxhc1ZhWt8KTWsKXy9ekE+0czCojHbcSoAacBVUY5FNfvPUgOiufZmht/SOvInP1VaKGkDXOnDvxjPhoTFgpZziVxJ0Y7bj72DJSquzOLd2XyWfuzznThc0QyC76cLda4JTCv1TGjOIJ44IKbcvZn6HGB+WrB53lsj97dQxxGLzGU2NRs/a7Dm8n3hq4EHZsf+Wvd4vHAE9F7Tu6HcoD5fgNlqfjRX7qyiVCASp/aL3O2egy+QJGdDFWT6i1nR8fuTeKTgf6e8VIZfcxI5EHV7AYU3MoDXuSDFa/G+g==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from PH8PR11MB8107.namprd11.prod.outlook.com (2603:10b6:510:256::6)
 by SA0PR11MB4558.namprd11.prod.outlook.com (2603:10b6:806:9e::12) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.6222.29; Tue, 28 Mar
 2023 01:11:44 +0000
Received: from PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233]) by PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233%6]) with mapi id 15.20.6178.041; Tue, 28 Mar 2023
 01:11:44 +0000
Date: Mon, 27 Mar 2023 18:11:41 -0700
From: Dan Williams <dan.j.williams@intel.com>
To: Davidlohr Bueso <dave@stgolabs.net>, <dan.j.williams@intel.com>
CC: <jonathan.cameron@huawei.com>, <ira.weiny@intel.com>,
        <fan.ni@samsung.com>, <a.manzanares@samsung.com>,
        <linux-cxl@vger.kernel.org>, <dave@stgolabs.net>
Subject: RE: [PATCH 2/7] cxl/security: Add security state sysfs ABI
Message-ID: <64223ecd8b2e0_21a829454@dwillia2-xfh.jf.intel.com.notmuch>
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-3-dave@stgolabs.net>
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20230224194652.1990604-3-dave@stgolabs.net>
X-ClientProxiedBy: SJ2PR07CA0018.namprd07.prod.outlook.com
 (2603:10b6:a03:505::22) To PH8PR11MB8107.namprd11.prod.outlook.com
 (2603:10b6:510:256::6)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: PH8PR11MB8107:EE_|SA0PR11MB4558:EE_
X-MS-Office365-Filtering-Correlation-Id: 6434330e-fe15-4090-0ff1-08db2f296508
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: ZJaEbCwMB+3YvHKR4ImMSl0OOI78/xEyCaDWkDYOz0cwlfDuOkta0gRTCL0SsDuorUVqquVWNaL1osprK0TpAyOqFygkJlbpU4J1WHiTEjrhZlz4v2ct99vyYZ7zzzPWVcP/Fpq6lb09b4pDhNl16ptrjuoRclbG9aGqac6S1wPR5/Lsdz2ZmKULTs+kQBIdILuoICNEc11CZ3hQtG1TFJN8nds8dSEbFuMhv0JoA4vnGx3L3Y44t+8NWmNnLxkJqTYLmEptuWGwB4ikZxmbkAg2Oco0BULb94iwZgUAxj9nX9IzjjsU8Jn2Izz05HzmfHG8+LbMAx4HHBzrZn6ey1zA6DmMn2BJCAvem/bC+FbvWWRtAGe/yCteTj4F7QnGFUuSkPzXbAYCTwqOk+UM/LjJID69TMhqpC/6jpCxrEOxY7NfYBKm0Fr+Djrkf7mUk+YnBeLMn0N+boajduv2BxkLF76U9+DjtbkX8cSbj30EfXGYrhHt+OtZ5HKTzGX/cjTkP61gN9zlkFNSSeSg/QhmAY2oQoObrxq3UcNcZ7MI31rwsnSY865FWnyrnL2/cXCzL0i22rVIpOjgpeDos2sYkM6+Fe9HICmZnHFdHZs=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:PH8PR11MB8107.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230028)(346002)(366004)(39860400002)(396003)(376002)(136003)(451199021)(83380400001)(41300700001)(86362001)(5660300002)(38100700002)(8936002)(6486002)(82960400001)(478600001)(8676002)(66946007)(66556008)(4326008)(2906002)(66476007)(6512007)(15650500001)(6666004)(6506007)(9686003)(316002)(186003)(26005);DIR:OUT;SFP:1102;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?us-ascii?Q?yXGjNYqCs5CSjOE6Ask40MSwX5unUPnI5nUr888GfJMxE5ZZ6D7ML0LLxLfK?=
 =?us-ascii?Q?7rfhFHeEctWxw16+ejalEw7F9DS6cxdpJIauhgNAYxV0/fCcIIfMI8ZhYYoI?=
 =?us-ascii?Q?cmvQk/5kYEiA+CwTuFxJMCpPMmuHHk4G8v/zDYzh4YuvU3XKf1CmUjpueraK?=
 =?us-ascii?Q?y8XR5vcsH52yRx14nHrHJB3Y7JuSPXMgURZMz8dE2hD70zjupJSYKa8FVwMc?=
 =?us-ascii?Q?cOxuI9W3M8M5/L9s1CA8SjiAzzAqWY+gBTcr/eQayU3fwV2IBlHwQkONyhxW?=
 =?us-ascii?Q?w76o9rfVQmFpgd0zB2T3Yui1Ozxu/k62WEkjlyzsKCWUtJuc0rmKW/XFYbTN?=
 =?us-ascii?Q?bhlVGrWD7GQurs3yyxszkBBx2XlKyQ/K3KqiHkuXpHr8tZV69LX0RgEdliAf?=
 =?us-ascii?Q?+t6FWFYdzhx4HG6Hy+ZvQcDXL0YDqGivKf+nJTGUzVxrrv1x0npQ9OUbf314?=
 =?us-ascii?Q?jRie9gMklqqkvH8n+kLi11YS/OTNjV1bTA6sS8ZFujM1qyKL7xA+G8Kmn3ZB?=
 =?us-ascii?Q?NQYbgAeWtUIvZ5o9SU3Kal/5qQMZ641Ss+DUuabREUNHPmQOpHYobmGr/rIO?=
 =?us-ascii?Q?IibLEOJQVvbvGpqlTncdR7uVlZBtQb9BOK4WRLAyy3M0Jgli+ATqqMWIID4T?=
 =?us-ascii?Q?6PKzL+wOUcOo7mKAEBXhgxVvPRuyCSIyVK2bEYTysz4nTVMtmnxXpZHatP/G?=
 =?us-ascii?Q?3TUL3LBln0aaXnY9ciIi0Cshq3EgwDZMeNBUwuFZTafyRbaqZMJHYhycNV2i?=
 =?us-ascii?Q?nqH2virfl+iMlBtJfEuNT/gIsxaIUydyuA4/p4N9D5H12/d+OT8mO3zxHweh?=
 =?us-ascii?Q?x0uVqhu0ajdjhO159UA6IYljuICIXanW3OvQOopKcznXc2s5PVZRV5s3dY0L?=
 =?us-ascii?Q?3U91g5EiMXCWX89T9YJwafG3korrlJ554NfaGjv3QPuF2UJnkg4SAD6bcm+E?=
 =?us-ascii?Q?kNgWmoHA0c+1Nn/Ww3mnqmPTk9HOg+qOF62QrUA/kEfztbsboBb9miBVffYO?=
 =?us-ascii?Q?lGNumqj9H+Q1EjYKAtiDb5W0QyZpyvcZJplwmYfn2cXAPSfVfc2Bg9XDzVTR?=
 =?us-ascii?Q?kpvb11TIp3FtiGHDYdXtywbyQQWRrpjKVe3T8eEcMR8FD3a9sz04VJO5ZQKk?=
 =?us-ascii?Q?t6yuPKoKC36flYJ1Ur8QSpa1kQ/KscayTMJSdnKQn2skvKdN7OjgWx83wbmc?=
 =?us-ascii?Q?hORFIdt6Rx5H4RiCXo0orkujx6QjIPi92aiQC0RC34SX1lYLCXwzogjc7vqF?=
 =?us-ascii?Q?/RIMKjCdZcVW3HkcBCJrmv9NwI1pmwdlYz8/xxPSu0YkhqmZsYESLvDRg3ea?=
 =?us-ascii?Q?Q3cFGHhcfMm6r/+/cw0wF75KMYflZahDgFxqNFJcjbI4ffWQ0adJ+uiemWC/?=
 =?us-ascii?Q?oUsxNpN5aRugxW1QayzpclYDJZVaMFtgzNjY2x+TTV79ssVEHkv8s5jOoJRO?=
 =?us-ascii?Q?jFatafOgrLeMYZ57oK/zc7V+HVDVqjkGweBgfyFZHGIAmmVEVTizxXohTxfz?=
 =?us-ascii?Q?SP3qPioB2J9nirXznpx5dNxYFPmnThR9mFhCVErO29paagA/ji2HQV6YU0TC?=
 =?us-ascii?Q?lJXMBsCd5KP6zkaMSyVi5Fzf1JLAm2EqEA7uk4RdErY3nVCWzc89t1GFw5bX?=
 =?us-ascii?Q?eA=3D=3D?=
X-MS-Exchange-CrossTenant-Network-Message-Id: 6434330e-fe15-4090-0ff1-08db2f296508
X-MS-Exchange-CrossTenant-AuthSource: PH8PR11MB8107.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Mar 2023 01:11:43.9186
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 3k0Wb98UUIu4jLJA2iw67WVC/sz2r1Rn2j5bNC7DqOI3YXxK0IkX0G0dg9tqJAP0MFsyXVuRfDWJL/OP+lM8kSjiQFmifCXkLYdqkGzRiVk=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA0PR11MB4558
X-OriginatorOrg: intel.com
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Davidlohr Bueso wrote:
> This adds the sysfs memdev's security/ directory with
> a single 'state' file, which is always visible. In the
> case of unsupported security features, this will show
> disabled.
> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
> ---
>  Documentation/ABI/testing/sysfs-bus-cxl |  8 ++++
>  drivers/cxl/core/memdev.c               | 49 +++++++++++++++++++++++++
>  2 files changed, 57 insertions(+)
> 
> diff --git a/Documentation/ABI/testing/sysfs-bus-cxl b/Documentation/ABI/testing/sysfs-bus-cxl
> index 3acf2f17a73f..e9c432a5a841 100644
> --- a/Documentation/ABI/testing/sysfs-bus-cxl
> +++ b/Documentation/ABI/testing/sysfs-bus-cxl
> @@ -57,6 +57,14 @@ Description:
>  		host PCI device for this memory device, emit the CPU node
>  		affinity for this device.
>  
> +What:		/sys/bus/cxl/devices/memX/security/state
> +Date:		February, 2023
> +KernelVersion:	v6.4
> +Contact:	linux-cxl@vger.kernel.org
> +Description:
> +		(RO) The security state for that device. The following states
> +		are available: frozen, locked, unlocked and disabled (which
> +		is also the case for any unsupported security features).
>  
>  What:		/sys/bus/cxl/devices/*/devtype
>  Date:		June, 2021
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 0af8856936dc..47cc625bb1b0 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -1,6 +1,7 @@
>  // SPDX-License-Identifier: GPL-2.0-only
>  /* Copyright(c) 2020 Intel Corporation. */
>  
> +#include <linux/memregion.h>
>  #include <linux/device.h>
>  #include <linux/slab.h>
>  #include <linux/idr.h>
> @@ -89,6 +90,43 @@ static ssize_t pmem_size_show(struct device *dev, struct device_attribute *attr,
>  static struct device_attribute dev_attr_pmem_size =
>  	__ATTR(size, 0444, pmem_size_show, NULL);
>  
> +static ssize_t security_state_show(struct device *dev,
> +				   struct device_attribute *attr, char *buf)
> +{
> +	u32 sec_out;
> +	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
> +	struct cxl_dev_state *cxlds = cxlmd->cxlds;
> +	struct cxl_get_security_output {
> +		__le32 flags;
> +	} out;
> +	struct cxl_mbox_cmd mbox_cmd = {
> +		.opcode = CXL_MBOX_OP_GET_SECURITY_STATE,
> +		.payload_out = &out,
> +		.size_out = sizeof(out),
> +	};
> +
> +	if (!cpu_cache_has_invalidate_memregion())
> +		goto disabled;

I think this can go as security state can still be read even if
unlocking is not safely possible.

> +
> +	if (cxl_internal_send_cmd(cxlds, &mbox_cmd) < 0)
> +		goto disabled;

I would prefer to not have an any-user triggerable way to spam mailbox
commands. Security state should be read from a cached value that gets
updated when security operations are run.

> +
> +	sec_out = le32_to_cpu(out.flags);
> +	if (!(sec_out & CXL_PMEM_SEC_STATE_USER_PASS_SET))
> +		goto disabled;
> +	if (sec_out & CXL_PMEM_SEC_STATE_FROZEN)
> +		return sysfs_emit(buf, "frozen\n");
> +	if (sec_out & CXL_PMEM_SEC_STATE_LOCKED)
> +		return sysfs_emit(buf, "locked\n");
> +	else
> +		return sysfs_emit(buf, "unlocked\n");
> +disabled:
> +	return sysfs_emit(buf, "disabled\n");
> +}
> +
> +static struct device_attribute dev_attr_security_state =
> +	__ATTR(state, 0444, security_state_show, NULL);

This looks copied from pmem_size above, however that one is using
open-coded __ATTR() because the attribute name, "size", does not match
the prefix of the show() handler, "pmem_size_show()". In this case the
shorter DEVICE_ATTR_RO() helper can be used.

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 9E5B7C76195
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Mar 2023 01:15:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229658AbjC1BPW (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Mon, 27 Mar 2023 21:15:22 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:51974 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229611AbjC1BPV (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Mon, 27 Mar 2023 21:15:21 -0400
Received: from mga05.intel.com (mga05.intel.com [192.55.52.43])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 33F4A1997
        for <linux-cxl@vger.kernel.org>; Mon, 27 Mar 2023 18:15:18 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1679966118; x=1711502118;
  h=date:from:to:cc:subject:message-id:references:
   in-reply-to:mime-version;
  bh=dzuSgux1M8Z/fYkLE9V0+hs8Xdr8Jj4ZaZsUtY4LVoA=;
  b=L0IDL7hGqSnuY/cbdqmuzdO5hGlkK/NSxn0QI5pgIleBexILKd8BEWnJ
   PMlmYs8Hd5n8p2fm9tUV+ms/uvx3QgyCplFhQQelUhJycddEHtmlUbm9T
   QqX+68k6HAabs4CdGcm1/VYTJ0zScvYKyx3dvkvfsXOBZQAnOiXxe0vhJ
   NZnrPt+xcUorOvY/MJnghV9BuBS86GIWglarKp1HH6M7lLEnUob9wBqAd
   rMEo9l10Q+r5bPGi3KkBKvpN29aFAeJaaT8g00XxeGq0urxOwKtIgE7sC
   Fa1J9IR7fCdHzaIlHZzZAskBDNwzkAowYdum+qMbMaATmmBzxeuEVM+Pe
   w==;
X-IronPort-AV: E=McAfee;i="6600,9927,10662"; a="426699515"
X-IronPort-AV: E=Sophos;i="5.98,295,1673942400"; 
   d="scan'208";a="426699515"
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
  by fmsmga105.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 27 Mar 2023 18:15:14 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=McAfee;i="6600,9927,10662"; a="794587697"
X-IronPort-AV: E=Sophos;i="5.98,295,1673942400"; 
   d="scan'208";a="794587697"
Received: from orsmsx602.amr.corp.intel.com ([10.22.229.15])
  by fmsmga002.fm.intel.com with ESMTP; 27 Mar 2023 18:15:12 -0700
Received: from orsmsx610.amr.corp.intel.com (10.22.229.23) by
 ORSMSX602.amr.corp.intel.com (10.22.229.15) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21; Mon, 27 Mar 2023 18:15:11 -0700
Received: from ORSEDG602.ED.cps.intel.com (10.7.248.7) by
 orsmsx610.amr.corp.intel.com (10.22.229.23) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21 via Frontend Transport; Mon, 27 Mar 2023 18:15:11 -0700
Received: from NAM04-BN8-obe.outbound.protection.outlook.com (104.47.74.45) by
 edgegateway.intel.com (134.134.137.103) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.21; Mon, 27 Mar 2023 18:15:11 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=WGXJKpPUEYn1ro7baSE4Ar7wGmtMsC/HDbsmOEy+/05qxZCbCpCqkKDOtT1y8FvwaK7AanGox8aTjhIWtQTXxCzPKwYqLDdfcza6UfJiOPITDZOxQMVGNEwDt4PbhO2qczQ/M3ZtK/AFmkcYLo83LMrz8G3mYub9JwCYd8NEl2PlWWcoGwkpcBlrMcVBznIGk4fTL31x4a+Wi8YApFSB6PT6oPPTpgxpwSZ6TGpM0PkKn28GqXap1wxnZwNVCjSAdVSmaEPIdYGiJ8qfeHX2UIakMc46pl9KPM97/Q6gP3nWIK8RN1G1jL/2NUeQrZ5GMCwceNxfdIOfkeLZj6+zwA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=0wbsfNGjiHXND4vFUh7idGcHKTDmJOp9WF/OTF8QoBA=;
 b=Oi3R2b2gtkCh/s33Puq2TMuxZBCLy+QyJhwVyRnAi6YsSumgIRIGEPUdSLp6r8cnV4gJD25UWvXKNUns6FCvB/dNx1o6iM3uIz3OQApn+YqEUlBSVv4W+7v4IvixL1+i1MYjrgm+5K709P77w37GP683u6xgMjeDy6Qhuks4hbtoh8AmebCLh7C4j8dD7rb+so/qOM2E0gxfw9qZlrlm4GXnzgyQUaETdHvRA11t96JdyCSCDiE7nPwTLeeKhdWlrNAcxxgR12swBhijukwAWQxFHctJTMrc7OkVTvjzUaoDUjuUAk+MNWDEP8LSvTAJzIFrHgU/7Uytbr8KkmHmCw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from PH8PR11MB8107.namprd11.prod.outlook.com (2603:10b6:510:256::6)
 by SA0PR11MB4558.namprd11.prod.outlook.com (2603:10b6:806:9e::12) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.6222.29; Tue, 28 Mar
 2023 01:15:09 +0000
Received: from PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233]) by PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233%6]) with mapi id 15.20.6178.041; Tue, 28 Mar 2023
 01:15:09 +0000
Date: Mon, 27 Mar 2023 18:15:06 -0700
From: Dan Williams <dan.j.williams@intel.com>
To: Davidlohr Bueso <dave@stgolabs.net>,
        Alison Schofield <alison.schofield@intel.com>
CC: <dan.j.williams@intel.com>, <jonathan.cameron@huawei.com>,
        <ira.weiny@intel.com>, <fan.ni@samsung.com>,
        <a.manzanares@samsung.com>, <linux-cxl@vger.kernel.org>
Subject: Re: [PATCH 3/7] cxl/region: Add cxl_memdev_active_region()
Message-ID: <64223f9ae65fe_21a8294a0@dwillia2-xfh.jf.intel.com.notmuch>
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-4-dave@stgolabs.net>
 <Y/wno8C4bK3XNoUD@aschofie-mobl2>
 <20230228202623.ceytv4ecryxcloxc@offworld>
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20230228202623.ceytv4ecryxcloxc@offworld>
X-ClientProxiedBy: SJ0P220CA0007.NAMP220.PROD.OUTLOOK.COM
 (2603:10b6:a03:41b::15) To PH8PR11MB8107.namprd11.prod.outlook.com
 (2603:10b6:510:256::6)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: PH8PR11MB8107:EE_|SA0PR11MB4558:EE_
X-MS-Office365-Filtering-Correlation-Id: c7b0f2bf-eeee-4d48-57c7-08db2f29df50
X-LD-Processed: 46c98d88-e344-4ed4-8496-4ed7712e255d,ExtAddr
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: Njyvl6QTfm0meBFkdSCbJVSAnlNwj6P1FI1dlGQvEqbOv6ROjiwhxZKlkabqn4sqqoghy/eLOQMebqLXv4tI11Axiz9QNr+kZ5Z4A9dKgO3kFYxDP8vEjD5rp+oU7r84hNVtwa3t20pUPGtuzeZZBT44J5gSyz2+yoz/6Jz1bXtcxMOfFeuLmWxsXThgP04cHTriVQVp/I8uqfJZ88WYcPdgNSV3vuHmt4GT6GRfJq/TPRsEqsY+UzruJ/HGcS43a4nIqby4WJAtmGRwjakDqnHgbFlutYOs3DueEPbAOnMWYMG2+298FfwQ020Qoc/PKSoXUKSdePtcJgtoKWlh0vQXiUfgLVyuHAFOiHTcapP7dN+I3qNDDahk5iFVIqk4PRz7VRCVuLUtVuFJEH0OIZ7ND94Z3+cPUWUrwGqp1ePNMI9FOGEeeqfqrQekYBU6D2kzSVEmz+c7OAfjTce0DkTYFWi0pGIz/4Z1GgOqJjHIFFXpgZFDfcY0FMx/jfHjknLQyHmxPcrMWsFG7tY91rIZxmyYKQslcCZM/KkYxZIPFeCW4lM5pMCWnsot2Ot+Zl2sBufr4CCRRr42HuHZ+HYgZNEfaKxvxlZ4MuyL42o=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:PH8PR11MB8107.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230028)(346002)(366004)(39860400002)(396003)(376002)(136003)(451199021)(41300700001)(86362001)(5660300002)(38100700002)(8936002)(6486002)(82960400001)(6636002)(478600001)(8676002)(66946007)(66556008)(4326008)(2906002)(66476007)(6512007)(4744005)(6666004)(6506007)(9686003)(316002)(186003)(26005)(110136005);DIR:OUT;SFP:1102;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?us-ascii?Q?OigLXLqQqH5elFL3Ply4zmtdsXs8pR6gS0VHq+f4RsisPBJk/88HcNa1GyxO?=
 =?us-ascii?Q?a7IsWe4iz+EqS1RsRy1YMjDFE5z5Hj5lFmY0gzkWsZBLZ142IPxGl7WWLEzH?=
 =?us-ascii?Q?zcOgYkfziEQduGokX1yH6Ieu/TxfFT9nUdT8WFaO2fEoe0hEitsvU+IWxWJp?=
 =?us-ascii?Q?AQ2l3QnzB2q/ItRDELxoVA2iVxe27O5AtqhwzqJ4xohj7PMgrIHzbKprACa7?=
 =?us-ascii?Q?vePt+tiwJs4MQQKqjSls/GyifJJeeb5puyr/9NUzbWddGn2CBWeIzt03m+Az?=
 =?us-ascii?Q?x53d+JioABMxjdI3f192twamb2G5BcMVRj2J6rBBVQGkDNoOQ7YjOsSrsC1M?=
 =?us-ascii?Q?UZOimOPYuS/0D0rcJZ34hcCp5m65l+II/CBERFiMWMiCfLCE+5pd/O4R+pQI?=
 =?us-ascii?Q?tKrhzLc4QCLC0P9YP6SfktwZhkqgn6/iQVGmKbgA4WpV30banzeJsOzE80PO?=
 =?us-ascii?Q?/OdObBcAB1XGWPNdTs6PN5CJLG8wEn6jbvQ/EtUcKiXkIYLJ0K94QsS05iOG?=
 =?us-ascii?Q?LP+wOku+jwHvSlPPfjfwLGCOvDixTn6RnItjjog++XNLDATa2ZFSANuZJvBg?=
 =?us-ascii?Q?sZf310afr2zCF1xLY0ACz3iEEzERg1n2bnVdq1fh+DzZA8LUoLljRr6a81wR?=
 =?us-ascii?Q?MJSbVi1rH5KLkU9jBExwWQhF1HxilbLN63SQSPZV1cDXzmEO/TKLkIDGjXWq?=
 =?us-ascii?Q?ucHQB3w93w8zkt4hzL83n1L8ayi9DfJYnm822aChB0Tm/zBksLwl16Kkk94t?=
 =?us-ascii?Q?T2AgUKFgwOiEZm6eEYMC2RcLgrglPOCwI5IOCfGObL9toAmqFJjL/OyAEcMc?=
 =?us-ascii?Q?NfN9yegGBrm0CIpmFeGZiq8Be+OZxd5tXoTWj9j1k7i26837U8Dy+9bqmaMx?=
 =?us-ascii?Q?8+EJiXoxXdlCjxzogUnhBOHQfsyI4Skv1GmDw49oLrXPW27iYVM2Zysp96Rm?=
 =?us-ascii?Q?7FHnrkyOtGsZUt7OUhy/StBp2bXvQGCzuDeKLlPxxGbRbYlKsUWe6bBZnitE?=
 =?us-ascii?Q?6I8TojDB6PYrC2YoXcgP/t6iZWF4w/ZZkB8EmhAkgUfQI2pGX7svm3JxCjDM?=
 =?us-ascii?Q?XK7lLhwtytDeXlCLEkxYlt+fo0nNeNIVl5rQi8y6gqxkfhaJYrpJ24MRk2kJ?=
 =?us-ascii?Q?Us8FHvrxrtFQSqtcq+VnBrB7E73Vv4tQhKxbi0YtIgNFSlock3o16y7Jv5Mh?=
 =?us-ascii?Q?l4jBqRg0GCaufG+Aiw7+YURAz6b2JESS5JgvQ3tap/cMuj/pNjyL43Jlkkgp?=
 =?us-ascii?Q?2J+8tYAc6M5hMw/LFpSLC+gtu5N8S4wE/UcI41mNUlwi3q4EGrK2rbriLFZl?=
 =?us-ascii?Q?BANOcgQCfPiyzw75n/xKKBdxk6cooJz5F+CoQh7tGnMfVXMtmmLStOBdHj5W?=
 =?us-ascii?Q?Bq2yCOoPQkLJQlsSbH5EBqAGopBTNDfsuV8cfmDjt8EPteUhIb6uaLQKEccu?=
 =?us-ascii?Q?aw2ZrJ0dFgza+aYEbnGwnKsV6Nklm1NwXTL8kIXm0b2nnldQ5ouPv8qcYqXD?=
 =?us-ascii?Q?pN+dBhhiyl29ZWe8G0HFwD4Iqa/qNKzV2TWAeXYQZbu0obY0375C3K1tEgRP?=
 =?us-ascii?Q?KhzIWB2rKNg7LpGAHkVZTLo/Yf/tu5X9kHpYi1hwEJU+4xvi09iLkYPLavJ6?=
 =?us-ascii?Q?TQ=3D=3D?=
X-MS-Exchange-CrossTenant-Network-Message-Id: c7b0f2bf-eeee-4d48-57c7-08db2f29df50
X-MS-Exchange-CrossTenant-AuthSource: PH8PR11MB8107.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Mar 2023 01:15:09.0743
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: EQWbieNtBPFpMRdboUIxO3JXTFZGO1rrzc6E6lEsTWcuHAS9VrGWgMcdxyNin69lClEMbMh4zPNGDHw+xNL3qYrRfpOahLT1GbFg6sQGZsE=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA0PR11MB4558
X-OriginatorOrg: intel.com
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Davidlohr Bueso wrote:
[..]
> >If we only need to know that this memdev is mapped in any region,
> >so don't touch it, we can look at it's port->commit_end. If that
> >commit_end >= 0, we can look at each endpoint to find the regions
> >it's mapped to.
> 
> I think this is a lot better than using the list approach.

Seconded, thanks Alison!

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 47677C76195
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Mar 2023 06:27:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232706AbjC1G1d (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Mar 2023 02:27:33 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:45160 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229654AbjC1G07 (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Mar 2023 02:26:59 -0400
Received: from mga04.intel.com (mga04.intel.com [192.55.52.120])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 34CCA106
        for <linux-cxl@vger.kernel.org>; Mon, 27 Mar 2023 23:26:26 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1679984786; x=1711520786;
  h=date:from:to:cc:subject:message-id:references:
   in-reply-to:mime-version;
  bh=NJIX7poHyQfq5/cPs6pUIZ/lFQv43tWGIbJOk++FYug=;
  b=R6KX4UebUUOxn2EhY2wO9/Bbp44d61gQlS3rS89jNcYRRPfQ1UpDheg5
   3cDcpHNi8RRI9WyFdL+DYsMmeaYtYRVpUtvMCj8syZImjPo4vm+gPNyZy
   aMjTZvO9aEaFDiQGy1Pc2brD1j/yjA9nM8je6YrFTKUfiquLJG/+faVXb
   +d7isYUHNt+ylLgLwDRVLqg9lsQ6Q7H/XqssTSszUnIiIPHrvKvUZLwZ8
   mZ2ApSVngtF/g5ZfRZgGSBQ66s0NVh3IzzvlOQC2ZDnJ43KvM3YOO3rnV
   ZTyAg3qgCe+59FEuZnYnIOQSuS8ikbmVUF+60qJKPP/IusGODYJxJn44O
   w==;
X-IronPort-AV: E=McAfee;i="6600,9927,10662"; a="339209109"
X-IronPort-AV: E=Sophos;i="5.98,296,1673942400"; 
   d="scan'208";a="339209109"
Received: from fmsmga005.fm.intel.com ([10.253.24.32])
  by fmsmga104.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 27 Mar 2023 23:26:25 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=McAfee;i="6600,9927,10662"; a="1013421941"
X-IronPort-AV: E=Sophos;i="5.98,296,1673942400"; 
   d="scan'208";a="1013421941"
Received: from orsmsx602.amr.corp.intel.com ([10.22.229.15])
  by fmsmga005.fm.intel.com with ESMTP; 27 Mar 2023 23:26:25 -0700
Received: from orsmsx610.amr.corp.intel.com (10.22.229.23) by
 ORSMSX602.amr.corp.intel.com (10.22.229.15) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21; Mon, 27 Mar 2023 23:26:24 -0700
Received: from orsmsx610.amr.corp.intel.com (10.22.229.23) by
 ORSMSX610.amr.corp.intel.com (10.22.229.23) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21; Mon, 27 Mar 2023 23:26:24 -0700
Received: from ORSEDG602.ED.cps.intel.com (10.7.248.7) by
 orsmsx610.amr.corp.intel.com (10.22.229.23) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21 via Frontend Transport; Mon, 27 Mar 2023 23:26:24 -0700
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (104.47.55.108)
 by edgegateway.intel.com (134.134.137.103) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.21; Mon, 27 Mar 2023 23:26:23 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=NTOBbaEuJ6cTRmKz/sSm6DBE8ho5mdY5WSLgCiMXkJUXI8xWrU3juxH9WkEV1mVHLdTX1sPR3UFaSZ9ukOaPErZ3xMHYb5iCb5OU2Uq0iOQPaMeT1CAlpPh8850F6Pi0Fu2R/3mjoZkXJcjQIh3dTeuiL+iiFEhwGj2tG5odMpMRuPW2/M9U2k8bhe2qDMDHZsHChddc1+VhlQwL6B6fJPcVwS6UIcTKX27/inY0Ib4Yp04x0sE7TzXTN2SeOApFDYt59uPwOZOS0lST0gP3tqmauFmwWyegEC0MkPhmy+3t3dSotjm2vG0hu091PQz+7VuGs7E9YPdOWGPyECl1Ow==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=0YXIlmm/eRuM1SVSIwnDauqIlpfHXilpKNiiEkvglus=;
 b=V7u3DNhWoLAy52M6PRyHGd5NQL5L/tGt53dtD/Qk0Edscl/YuvAvgW30KuI6hxYV11DzzWY/o3Lz5ogsXEWk4w9yYrT0albaq3W+l7FLuijtm8BkwGby+7LRWHpFpSYbmOAKLFys+UAsHyydKCcnu44en5e+c2QXvKVV61PucCUZQmXqt/4t3DD2PWMjy78urfxTQ4OPE1/SwQYCAAJP51rJogJAt4XmeydewaiJMeiNcVNhi6JCHb+HSytu61uxoPHEh/bYeBZ9NBHv9Slr5IwWF+BVCYLUfNT6knXuHdRyXX9B72zsKgskFvBhl/K7J8YVodp3IVjDa0Utct8m+A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from PH8PR11MB8107.namprd11.prod.outlook.com (2603:10b6:510:256::6)
 by DS7PR11MB6013.namprd11.prod.outlook.com (2603:10b6:8:70::21) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.6222.30; Tue, 28 Mar
 2023 06:26:21 +0000
Received: from PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233]) by PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233%6]) with mapi id 15.20.6178.041; Tue, 28 Mar 2023
 06:26:21 +0000
Date: Mon, 27 Mar 2023 23:26:19 -0700
From: Dan Williams <dan.j.williams@intel.com>
To: Davidlohr Bueso <dave@stgolabs.net>, <dan.j.williams@intel.com>
CC: <jonathan.cameron@huawei.com>, <ira.weiny@intel.com>,
        <fan.ni@samsung.com>, <a.manzanares@samsung.com>,
        <linux-cxl@vger.kernel.org>, <dave@stgolabs.net>
Subject: RE: [PATCH 4/7] cxl/mem: Support Sanitation
Message-ID: <6422888b688fd_21a8294a3@dwillia2-xfh.jf.intel.com.notmuch>
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-5-dave@stgolabs.net>
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <20230224194652.1990604-5-dave@stgolabs.net>
X-ClientProxiedBy: SJ0PR03CA0143.namprd03.prod.outlook.com
 (2603:10b6:a03:33c::28) To PH8PR11MB8107.namprd11.prod.outlook.com
 (2603:10b6:510:256::6)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: PH8PR11MB8107:EE_|DS7PR11MB6013:EE_
X-MS-Office365-Filtering-Correlation-Id: 2bfb1afc-f0fb-4937-0051-08db2f5558f9
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 30FAFFFuR16czm+vB8aEGWsNWdWDCI/iMISDcGWg4tlZxTMSead+JMAbgxsBKoygBwQEUWr0+uoCp8vtKQwIymDWRwOFBXWU8xJ2QhFzQfubto5cZ+qD3Wm1Fp4pFQEFn0VUL/Mt5FKL+QrkHTSnlkTc7HuliCXr9sKcOUQnJju+z+sHh6uyxavJFoABzpcq/aZGs6paADv79OeX1I+swrc7TIWGbCDop+VCj0tGeWJsfKc611nufCAmLqI5R+3E2nb5ziKVRQnnspWBB3gTnrQFnnaV7R6XZlhT5Gj7fliZO64ArvXxeblxienKrXc13gLQSapHA0IfUmxf/vQIwe69c4E0P12TeJ9IhXaQ4jAoLXWZ008g97cumbl3u9975HOjyQB3pGFn/BuvkcAjXd9DzwhlAD2fplixSOR1BH3Dxbfp6rj20NAPn6hd5UZt1185cWgcnOATyNhcoHSTle0z4sqfu+/FgSHW1iFuSQ34GOYGv72TxrjIHcOpGSFtx0AuTqdnLgZDV00Q3r5yWuxokZpQMIB3AhISQUrJMZe4+TEuGsSBh6KrbeStIGu63ZpMdq6rtG3YFklz205UNkpsZ+Xh7dziNf5uVziTz/0=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:PH8PR11MB8107.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230028)(136003)(346002)(366004)(396003)(39860400002)(376002)(451199021)(6512007)(26005)(9686003)(6506007)(316002)(6486002)(4326008)(186003)(66556008)(66476007)(8676002)(66946007)(478600001)(41300700001)(5660300002)(82960400001)(38100700002)(2906002)(83380400001)(86362001)(8936002)(47845001);DIR:OUT;SFP:1102;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?us-ascii?Q?TyYvHJIdbl712VsPHGNoEo1DE6ZyOtpIMSjyjYvT7gxE+LsMFUeYvYX4vIFw?=
 =?us-ascii?Q?uJ4sL5A+oB1d9CHPcEKVKe1FpKkA/CAdTNFwaqxrVSeiT9ZjtEF3oUQFtoO3?=
 =?us-ascii?Q?8nOqGEZG3yPrI0z9kNABRYwDI/h+HIFocuZkqK/QEBnhFmgPi1klKaFNg9dp?=
 =?us-ascii?Q?xE02Spv6wzrXxfHXJM/wlYvosb8TE8WPjxSe39mN21qqvApjDK1Pg7nSYQFl?=
 =?us-ascii?Q?Zoy9a+1cIpTqSKkOasaN+BUNJARllcM2PMBQsMHiCFSTC21MN+hJLVg+RL9U?=
 =?us-ascii?Q?GckYoPNde9/RAZFkzfEcdSPUP+MN/5KWCIaEre+oYHXO/Swl9EZU6L5TeIDy?=
 =?us-ascii?Q?YW0ESXXvftlmIPEGhW7Tg51Lg+PDnno4xYhUJJm9ppbRb3GCcNZWrhIxwJu4?=
 =?us-ascii?Q?WqYZ4DmyYZThR3W7w/VLHYEfKyW9W5lIjfqPh4f5aTBAnEZLxGCH7zDt7hcg?=
 =?us-ascii?Q?PziXNxrTTblU/lX7umEUuNUPsV9QcZeAnGdzyZoidVvEz3Tr2hYVzhhZu8/f?=
 =?us-ascii?Q?pl5v6+ONc1xcQ1+AhvTAY3KqUVYN0mqKEjcM/DM6oHXFJbJbsSYZoLwdLN9D?=
 =?us-ascii?Q?DeXcgcqZZKDYpwp1/gztK6bQcmY2RDCO3W3NefXkHCd4+gIkdePHGA5Q7o+B?=
 =?us-ascii?Q?Dl2/LpbYy2yvGgMNVIcdxqlK9S9B0b0k+bjhN2J8nH/8NxCWxB6hx+nhCVHq?=
 =?us-ascii?Q?5uZKX5DsXeYkekmhqo7/gUn9RwODlTqWfY5QKvN+7HZkfTPjQmJjcSU2bwVL?=
 =?us-ascii?Q?KBRojLGQYlMz0qmy+MDwPZ6zkjXE5KCZViJKI0/3Lgyjk+Z6Lanu25rZKM/4?=
 =?us-ascii?Q?3tb2v6aTSlxOLVNfrNft3z9wmuzY7ARm2Ji98PlUpoVPGwFW0uyqpMhs8RfX?=
 =?us-ascii?Q?7wIhwxKmOwBXijyXcuL+t/hgRUw72OF4B31HX06V460SU+jm7gWiXMuwtb5w?=
 =?us-ascii?Q?kWTqurzicb3xv5H/4ush68aicncCt5w0DW8cURTDo0Isk4eOgNkNq8K4y1zT?=
 =?us-ascii?Q?Zx/VfWVvdh+x871Qr970YvpKwluoSVEQhTVVKRcGPzc8husMtaipp2sfTgEO?=
 =?us-ascii?Q?J9uufD8xG9m9KcP0jMQXrm+I4W2rba4epB7Xmh0IQeIgziXfiDiDI1zFe3XA?=
 =?us-ascii?Q?R79RZmvCoxIjQnhau+GtNLFRSg1OOcNVntN3RefQOBrru6D54nBMSznwc/pG?=
 =?us-ascii?Q?PxZN0G2EyYA4gGplpMZBDNAfU+pecvNI0rSUymw0xJ0jxvq7WUATqzB9NhSI?=
 =?us-ascii?Q?Pn9ZyDcPKqpzGjfkwHq6uZdBQmWyUFtqq0xPdKoUckv2nV9iBGW1f/kngSxO?=
 =?us-ascii?Q?R1UdH60inC+FJhh8dvEA9hszgRd7NhmW+pKRU4lC3IpzgAYa6PbOGeJD3f78?=
 =?us-ascii?Q?Yni9L3CshwIsOLPC9aglMoq3j92TSE0vx+GpTQdTmmFKCI9csCMVrPKz1kIc?=
 =?us-ascii?Q?/Kd1IgySTYGAV3kFcfJ1O2609MynbS+rv+RRVOOGDc3nzkXmvR78eSxNHbLO?=
 =?us-ascii?Q?DiyeQpZCSZ/VffkqH73ASACFyFUJxnHHWu8OF+oQrr2YV0Qm2F9eyRuacgYr?=
 =?us-ascii?Q?l0vIoIGNlGav7aH7LJ7WmKZ62917ABnlS6AK6ODPS71GrGJtRRYoWc4QILqt?=
 =?us-ascii?Q?Fg=3D=3D?=
X-MS-Exchange-CrossTenant-Network-Message-Id: 2bfb1afc-f0fb-4937-0051-08db2f5558f9
X-MS-Exchange-CrossTenant-AuthSource: PH8PR11MB8107.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Mar 2023 06:26:21.6059
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: GWtty7jP594XdHMggBpwYbRgcber5JMoJ4MQOi51CFNyrJqypTTZeptfhqxpLh0EXe72x7Gw4a6iXQyjbwVsOvieJ0gtygS1mjxPaRQu7AE=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS7PR11MB6013
X-OriginatorOrg: intel.com
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Hi Davidlohr,

Davidlohr Bueso wrote:
> Implement support for the non-pmem exclusive sanitize (aka overwrite),
> per CXL specs. This is the baseline for the sanitize-on-release
> functionality.

Wait, what sanitize-on-release functionality? The DCD facility to
sanitize-on-release (CXL 3.0 Table 8-126.  DC Region Configuration) is
indepdent of background command functionality, i.e. "Release Dynamic
Capacity" is a foreground operation.

> To properly support this feature, create a 'security/sanitize' sysfs
> file that when read will list the current pmem security state and
> when written to, perform the requested operation.

Sanitize (command set 0x44) is independent of the pmem security state
(command set 0x45), and I thought patch2 will list the current pmem
security state via security/state. 

> This operation can run in the background and the driver must wait
> for completion (no timeout), where the poller will awake every
> ~10 seconds (this could be further based on the size of the device).

Per the feedback on 1 this changes to be a facility that returns
immediately and signals completion via sysfs_notify_dirent() because if
it takes seconds and is hardware uninterruptible then that warrants
userspace being able to poll for completion if it wants.

> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
> ---
>  Documentation/ABI/testing/sysfs-bus-cxl | 14 ++++++
>  drivers/cxl/core/mbox.c                 | 61 +++++++++++++++++++++++++
>  drivers/cxl/core/memdev.c               | 39 ++++++++++++++++
>  drivers/cxl/cxlmem.h                    |  2 +
>  4 files changed, 116 insertions(+)
> 
> diff --git a/Documentation/ABI/testing/sysfs-bus-cxl b/Documentation/ABI/testing/sysfs-bus-cxl
> index e9c432a5a841..b315d78b7e91 100644
> --- a/Documentation/ABI/testing/sysfs-bus-cxl
> +++ b/Documentation/ABI/testing/sysfs-bus-cxl
> @@ -66,6 +66,20 @@ Description:
>  		are available: frozen, locked, unlocked and disabled (which
>  		is also the case for any unsupported security features).
>  
> +What:          /sys/bus/cxl/devices/memX/security/sanitize
> +Date:          February, 2023
> +KernelVersion: v6.4
> +Contact:       linux-cxl@vger.kernel.org
> +Description:
> +	       (WO) Write a boolean 'true' string value to this attribute to
> +	       sanitize the device to securely re-purpose or decommission it.
> +	       This is done by ensuring that all user data and meta-data,
> +	       whether it resides in persistent capacity, volatile capacity,
> +	       or the LSA, is made permanently unavailable by whatever means
> +	       is appropriate for the media type. This causes all CPU caches
> +	       to be flushed. If this sysfs entry is not present then the
> +	       architecture does not support security features.
> +
>  What:		/sys/bus/cxl/devices/*/devtype
>  Date:		June, 2021
>  KernelVersion:	v5.14
> diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
> index f2addb457172..885de3506735 100644
> --- a/drivers/cxl/core/mbox.c
> +++ b/drivers/cxl/core/mbox.c
> @@ -1,6 +1,7 @@
>  // SPDX-License-Identifier: GPL-2.0-only
>  /* Copyright(c) 2020 Intel Corporation. All rights reserved. */
>  #include <linux/io-64-nonatomic-lo-hi.h>
> +#include <linux/memregion.h>
>  #include <linux/security.h>
>  #include <linux/debugfs.h>
>  #include <linux/ktime.h>
> @@ -1021,6 +1022,66 @@ int cxl_dev_state_identify(struct cxl_dev_state *cxlds)
>  }
>  EXPORT_SYMBOL_NS_GPL(cxl_dev_state_identify, CXL);
>  
> +/**
> + * cxl_mem_sanitize() - Send sanitation (aka overwrite) command to the device.
> + * @cxlds: The device data for the operation
> + *
> + * Return: 0 if the command was executed successfully, regardless of
> + * whether or not the actual security operation is done in the background.
> + * Upon error, return the result of the mailbox command or -EINVAL if
> + * security requirements are not met. CPU caches are flushed before and
> + * after succesful completion of each command.
> + *
> + * See CXL 3.0 @8.2.9.8.5.1 Sanitize.
> + */
> +int cxl_mem_sanitize(struct cxl_dev_state *cxlds)
> +{
> +	int rc;
> +	u32 sec_out = 0;
> +	struct cxl_get_security_output {
> +		__le32 flags;
> +	} out;
> +	struct cxl_mbox_cmd sec_cmd = {
> +		.opcode = CXL_MBOX_OP_GET_SECURITY_STATE,
> +		.payload_out = &out,
> +		.size_out = sizeof(out),
> +	};
> +	struct cxl_mbox_cmd mbox_cmd = {
> +		.opcode = CXL_MBOX_OP_SANITIZE,
> +		.poll_interval = 10000UL,
> +	};
> +
> +	if (!cpu_cache_has_invalidate_memregion())
> +		return -EINVAL;

Given that the regions are already offline I think there is no
additional damage to allow santize to go through, because they could not
be dynamically re-enabled.

> +
> +	rc = cxl_internal_send_cmd(cxlds, &sec_cmd);
> +	if (rc < 0) {
> +		dev_err(cxlds->dev, "Failed to get security state : %d", rc);
> +		return rc;
> +	}
> +
> +	/*
> +	 * Prior to using these commands, any security applied to
> +	 * the user data areas of the device shall be DISABLED (or
> +	 * UNLOCKED for secure erase case).
> +	 */
> +	sec_out = le32_to_cpu(out.flags);
> +	if (sec_out & CXL_PMEM_SEC_STATE_USER_PASS_SET)
> +		return -EINVAL;
> +
> +	cpu_cache_invalidate_memregion(IORES_DESC_CXL);

Given that sanitize mandates bouncing the decoders the reconnect will
set CXL_REGION_F_INCOHERENT in attach_target(), I think it is safe to
assume that caches will be managed before the sanitized data will be
ingested by anything.

Specifically, I notice that attach_target() sets CXL_REGION_F_INCOHERENT
in the region creation and autodiscovery case.  The latter is a bug that
I'll fix up. It should only be set when the chance the HPA-to-DPA
mapping has changed, or the contents of the DPA has changed in a cache
incoherent manner. The fact that sanitize mandates what appears to be an
HPA-to-DPA change then no need to manage caches explicitly.

> +
> +	rc = cxl_internal_send_cmd(cxlds, &mbox_cmd);
> +	if (rc < 0) {
> +		dev_err(cxlds->dev, "Failed to sanitize device : %d", rc);
> +		return rc;
> +	}
> +
> +	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
> +	return 0;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_mem_sanitize, CXL);
> +
>  static int add_dpa_res(struct device *dev, struct resource *parent,
>  		       struct resource *res, resource_size_t start,
>  		       resource_size_t size, const char *type)
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 68c0ab06b999..a1bb095d081c 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -127,6 +127,34 @@ static ssize_t security_state_show(struct device *dev,
>  static struct device_attribute dev_attr_security_state =
>  	__ATTR(state, 0444, security_state_show, NULL);
>  
> +static ssize_t security_sanitize_store(struct device *dev,
> +				       struct device_attribute *attr,
> +				       const char *buf, size_t len)
> +{
> +	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
> +	struct cxl_dev_state *cxlds = cxlmd->cxlds;
> +	ssize_t rc;
> +	bool sanitize;
> +
> +	rc = kstrtobool(buf, &sanitize);
> +	if (rc)
> +		return rc;
> +
> +	if (sanitize) {
> +		if (cxl_memdev_active_region(cxlmd))
> +			return -EBUSY;
> +
> +		rc = cxl_mem_sanitize(cxlds);
> +	}
> +
> +	if (rc == 0)
> +		rc = len;
> +	return rc;
> +}
> +
> +static struct device_attribute dev_attr_security_sanitize =
> +	__ATTR(sanitize, 0200, NULL, security_sanitize_store);
> +

DEVICE_ATTR_RW() to poll(2) for completion.

>  static ssize_t serial_show(struct device *dev, struct device_attribute *attr,
>  			   char *buf)
>  {
> @@ -188,11 +216,22 @@ static struct attribute_group cxl_memdev_pmem_attribute_group = {
>  
>  static struct attribute *cxl_memdev_security_attributes[] = {
>  	&dev_attr_security_state.attr,
> +	&dev_attr_security_sanitize.attr,
>  	NULL,
>  };
>  
> +static umode_t cxl_security_visible(struct kobject *kobj,
> +				    struct attribute *a, int n)
> +{
> +	if (!cpu_cache_has_invalidate_memregion() &&
> +	    a == &dev_attr_security_sanitize.attr)

No need to hide the attribute given the above discussion about
invalidation being done somewhere else.

> +		return 0;
> +	return a->mode;
> +}
> +
>  static struct attribute_group cxl_memdev_security_attribute_group = {
>  	.name = "security",
> +	.is_visible = cxl_security_visible,
>  	.attrs = cxl_memdev_security_attributes,
>  };
>  
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index 4e31f3234519..0d2009b36933 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -631,6 +631,8 @@ static inline void cxl_mem_active_dec(void)
>  }
>  #endif
>  
> +int cxl_mem_sanitize(struct cxl_dev_state *cxlds);
> +
>  struct cxl_hdm {
>  	struct cxl_component_regs regs;
>  	unsigned int decoder_count;
> -- 
> 2.39.2
> 



From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 9B5C0C6FA8E
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:47:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229470AbjBXTrG (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:47:06 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39758 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229452AbjBXTrG (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:47:06 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 5C9AF6C194
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:47:04 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id CBF0B3E1F01;
        Fri, 24 Feb 2023 19:47:01 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 42B7A3E0713;
        Fri, 24 Feb 2023 19:47:01 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268021; a=rsa-sha256;
        cv=none;
        b=Orq6m1Zt1Ya18LkPonoWgnC5ZtI/nLGy8SNrIJ3BNTWJOwNiHvrROQDCoXuwr3PEKL4xh2
        wzuQvkbFbnByny2JelYzXZChFyVofCTMKFDDtskZ/HsgYMj1D1yourj1MU40oqB5dFWMYw
        Zil26GkMOcxvpG90NYu6UnU2u6wPdwNr2eH7Bv1X06QJURVpltJTcIWBIZnnI3R0MiUtGV
        lwvBQE8tzr+j2GnAs2nQ18yFiTQpo2/9AGUK/fYbfaZiaDngm79aVar4+QiAJjZ+LcyODd
        +dqQscHbYw7TjyCqu/uBmZViMEjOb8Jxvp2oPdgcke5C0iS0nPfB9321TRGqcw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268021;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:dkim-signature;
        bh=F4Jc5TcKAbnR5DVr9J553kxy6Mm8mdJuCIjQXMkrxAU=;
        b=GVikO9IAlmt9y8HfcQj+Yc2di10LZ1mzRa/ds6jgIlZcpPev3RDIDCW6rEj5Adls0BcTdT
        oU9Ybs54Eaw9+ODTn67qm17dxl+xubTG6MXHT5kvX5S8AZikdqr23DihIMsoX/RDwN5kqh
        ow515vGVCRc4HjYJ79M7r1htyRIQalaCzYQ2WJguAPKiwj1J6jhx4r9NHDOru7QfkAGMr5
        kzpH+dIGqkmOxI/TAl66T5+uDmWOix8d6cwFWX4S5rZSFZ0oZGrnZ4vJR+Y9s2xgGM7dnD
        +pJGVfDyMvCPRvuTHAWa5uOgMUqeYs8gFg9owCZYmpijHfRbLH41AgOjxC8urQ==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-l9rxh;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Reaction-Stop: 40feec6a2c1f7c58_1677268021611_1383636726
X-MC-Loop-Signature: 1677268021611:2535244679
X-MC-Ingress-Time: 1677268021611
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.97.74.37 (trex/6.7.1);
        Fri, 24 Feb 2023 19:47:01 +0000
Received: from offworld.. (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgQB2vc9z2d;
        Fri, 24 Feb 2023 11:46:58 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268020;
        bh=F4Jc5TcKAbnR5DVr9J553kxy6Mm8mdJuCIjQXMkrxAU=;
        h=From:To:Cc:Subject:Date:Content-Transfer-Encoding;
        b=coFg6pqwJbzZZEPbjYHxVFuOnLO0A5+IbhQO/Nc5/bUulK3AUrhJNgZ+Xv7LDHSpd
         gSJT+/D99G9+UY0lFXSuLhnEIyWBpkDs8cTqtF6ke32R3b3Qg1CdLlPk+P6BmyzI26
         YPYe0AxM1Jk4hhnXdkk/+SAR6rchhWiamcN0bb4proXB755s/F4hfEhfqAGuFP7g6b
         9K3lKWCtUCdZ3T0c/2a4CcSEcMP0ttSQLwWiEUOFeM51ZTTPMy7UbwrDiFW7/LJbAS
         hqlZyvsGk1kXwCZFyPTuwr/0CAqZ+QAQHXDvdzOo/AKeFGCs9BCnNa1dEQdhgJm3bs
         Gy3sZPa3HWydQ==
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave@stgolabs.net
Subject: [PATCH v3 0/7] cxl: Background cmds and device sanitation
Date: Fri, 24 Feb 2023 11:46:45 -0800
Message-Id: <20230224194652.1990604-1-dave@stgolabs.net>
X-Mailer: git-send-email 2.39.2
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Hello,

This series adds support for the rest of the security related cxl operations
which are not strictly dependent on PMEM.

Patch 1 adds the required background cmd handling bits (polling and irq).
This is really the main motivation of the series as there are various
features that will need this regardless of sanitation.

Patch 2 adds a new sysfs 'security/state' file, which shows "disabled" if
no security features are available - which is more intuitive than no showing
it.

Patch 3 adds a way to check if the device is actively used by tracking regions
with target the memdevice to sanitize. I realize this might not be what is
desired and wanted to get the expectations for this. This is more of a RFC
patch.

Patches 4-7 add the Sanitation and Secure Erase support, per CXL3.0 specs.

These changes have been tested with both the mock device as well as with qemu[0,1].

Changes from v2 (https://lore.kernel.org/linux-cxl/20221206011501.464916-1-dave@stgolabs.net/):
- Redid the bacground cmd handling to use a syncronous approach instead.
- Added cxl_memdev_active_region() to check if the memdevice is being used
  (actively decoding any HPA ranges).
- Create a new security sysfs directory with a 'state' file which is always visible.
- The sysfs files' to trigger the security commands is only visible if
  cpu_cache_has_invalidate_memregion().
- Added a sanitize test for the mock device.

Please consider for v6.4.

Thanks!

[0]: https://github.com/davidlohr/qemu/commit/64a93a5b824b59d3b547f06f7fbb1269fb4790ce
[1]: https://lore.kernel.org/linux-cxl/20230224194443.1990440-1-dave@stgolabs.net

Davidlohr Bueso (7):
  cxl/mbox: Add background cmd handling machinery
  cxl/security: Add security state sysfs ABI
  cxl/region: Add cxl_memdev_active_region()
  cxl/mem: Support Sanitation
  cxl/test: Add "Sanitize" opcode support
  cxl/mem: Support Secure Erase
  cxl/test: Add "Secure Erase" opcode support

 Documentation/ABI/testing/sysfs-bus-cxl |  34 +++++++
 drivers/cxl/core/mbox.c                 | 117 +++++++++++++++++++++++
 drivers/cxl/core/memdev.c               | 119 ++++++++++++++++++++++++
 drivers/cxl/core/region.c               |  33 ++++++-
 drivers/cxl/cxl.h                       |  13 +++
 drivers/cxl/cxlmem.h                    |  14 +++
 drivers/cxl/pci.c                       | 100 +++++++++++++++++++-
 tools/testing/cxl/test/mem.c            |  52 +++++++++++
 8 files changed, 476 insertions(+), 6 deletions(-)

--
2.39.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 4C5F1C64ED8
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:47:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229489AbjBXTrI (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:47:08 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39774 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229452AbjBXTrH (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:47:07 -0500
Received: from bee.birch.relay.mailchannels.net (bee.birch.relay.mailchannels.net [23.83.209.14])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id E25A56C198
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:47:05 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id C4DC5413C8;
        Fri, 24 Feb 2023 19:47:04 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 340DC41E34;
        Fri, 24 Feb 2023 19:47:04 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268024; a=rsa-sha256;
        cv=none;
        b=ogOSPOatlOxMBYtZDHKh18DJsGO9byyKDs1OzJPBBh0DAe9+33Nb6C2+pG0qSJCKAbwkQJ
        3sRtuEr0XRhsNHE0NCrzXwJ8+/wyE2EFVYeF15w5vEYA0fMgTfgh4E5Bn8iWTEqamLyDh6
        4Axp5JdW4No0MWYI/eJNLke0CJnoR16jq31iU8AsUkl+nV7235zUiruCXxuF0CDRkzxcs6
        +0g3sZGQoVysKLhxNqkcUKMcnsYTH7q2iMXYHvm3Oa9MMpAoLV748o7KvPAypE4evb/xSs
        TNhrY+VMtWV6Geuv/MN/Gk+XwldKm2EEFcHmjavPnsC8OrnFwFrGCIuKqH1kNA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268024;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=V2I++juXSCA0Nxo7T8cxpd5bOdVDAFjngnMd/Z/exmk=;
        b=DciKW+rNfQRDWQqDP7e7ilH9S9+ybeFgPdg0IsEN5ZZsvtJDPCFrCdCE6WjE47qhTg9oGX
        tRKnUeEGKFpvq+7DwouoJrMw4Ce7prG6qNjFfLwrysHSiAexl5wjokBseGT5AZFvgYN6x+
        hWLJDQoIw1bDRsoozH/SZJa4UOfP8qfrXcl/8Ylxg/rLX/j60ZLXLbhg3B+W2ZjIgttyNq
        lc/d8rgp9KrvUE9Gk6DtHEw8ZxNE+bEvSi1jgZSZU3eJKdJ7QI5JsMhmkesDwBOu8MWKVz
        VQN9zptZSCggbE/epxHMOIQcmbsWNvaCIXEie/Vb7W5EoMZFjbuLVQMZctKg0g==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-pxv92;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Chief-Interest: 0d0fa5cc58b96e0f_1677268024626_306224221
X-MC-Loop-Signature: 1677268024626:2631171739
X-MC-Ingress-Time: 1677268024626
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.116.179.67 (trex/6.7.1);
        Fri, 24 Feb 2023 19:47:04 +0000
Received: from offworld.. (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgQF10jcz2Q;
        Fri, 24 Feb 2023 11:47:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268022;
        bh=V2I++juXSCA0Nxo7T8cxpd5bOdVDAFjngnMd/Z/exmk=;
        h=From:To:Cc:Subject:Date:Content-Transfer-Encoding;
        b=KbLxIkPKnPg7ZhGnbWP3nJglTNRZLVOaX89oJvmPs3hbxcferBcCY3C/JftYosW0j
         w8cz8oeRJX6Dh66moHKN2qRQQ74mSOzfO93r6Bb6KCc+SGx6zPMJdYCbD1KNan8N9D
         mZw2EgjjWWinAwhCOlmzWojDe+cB37nvNKFD82qbGCl3FLk7mffpqpVCIIGspK/9du
         hByibqHWw5CCQyeu5k5xRbOf4p/Kx9v7dOJ8kNmhpifgkEom9cbd2onEeai/GmywPy
         8yKYhvAIO0lIs3jGXFHk6FjEKvznUFerIO10aXeevhAHUtNEl8x8YH9m4rhE88O8EB
         Qxt85Bd0K91XA==
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave@stgolabs.net
Subject: [PATCH 1/7] cxl/mbox: Add background cmd handling machinery
Date: Fri, 24 Feb 2023 11:46:46 -0800
Message-Id: <20230224194652.1990604-2-dave@stgolabs.net>
X-Mailer: git-send-email 2.39.2
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

This adds support for handling background operations, as defined in
the CXL 3.0 spec. Commands that can take too long (over ~2 seconds)
can run in the background asynchronously (to the hardware). Currently
these are limited to Maintenance, transfer/activate Firmware, Scan
Media, Sanitize (aka overwrite), and VPPB bind/unbind.

The driver will deal with such commands synchronously, blocking
all other incoming commands for a specified period of time, allowing
time-slicing the command such that the caller can send incremental
requests to avoid monopolizing the driver/device. This approach
makes the code simpler, where any out of sync (timeout) between the
driver and hardware is just disregarded as an invalid state until
the next successful submission.

On devices where mbox interrupts are supported, this will still use
a poller that will wakeup in the specified wait intervals. The irq
handler will simply awake a blocked cmd, which is also safe vs a
task that is either waking (timing out) or already awoken.

Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
---
 drivers/cxl/cxl.h    |   7 +++
 drivers/cxl/cxlmem.h |   6 +++
 drivers/cxl/pci.c    | 100 +++++++++++++++++++++++++++++++++++++++++--
 3 files changed, 109 insertions(+), 4 deletions(-)

diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
index d853a0238ad7..b834e55375e3 100644
--- a/drivers/cxl/cxl.h
+++ b/drivers/cxl/cxl.h
@@ -176,14 +176,21 @@ static inline int ways_to_eiw(unsigned int ways, u8 *eiw)
 /* CXL 2.0 8.2.8.4 Mailbox Registers */
 #define CXLDEV_MBOX_CAPS_OFFSET 0x00
 #define   CXLDEV_MBOX_CAP_PAYLOAD_SIZE_MASK GENMASK(4, 0)
+#define   CXLDEV_MBOX_CAP_IRQ_MSGNUM_MASK GENMASK(10, 7)
+#define   CXLDEV_MBOX_CAP_BG_CMD_IRQ BIT(6)
 #define CXLDEV_MBOX_CTRL_OFFSET 0x04
 #define   CXLDEV_MBOX_CTRL_DOORBELL BIT(0)
+#define   CXLDEV_MBOX_CTRL_BG_CMD_IRQ BIT(2)
 #define CXLDEV_MBOX_CMD_OFFSET 0x08
 #define   CXLDEV_MBOX_CMD_COMMAND_OPCODE_MASK GENMASK_ULL(15, 0)
 #define   CXLDEV_MBOX_CMD_PAYLOAD_LENGTH_MASK GENMASK_ULL(36, 16)
 #define CXLDEV_MBOX_STATUS_OFFSET 0x10
+#define   CXLDEV_MBOX_STATUS_BG_CMD BIT(0)
 #define   CXLDEV_MBOX_STATUS_RET_CODE_MASK GENMASK_ULL(47, 32)
 #define CXLDEV_MBOX_BG_CMD_STATUS_OFFSET 0x18
+#define   CXLDEV_MBOX_BG_CMD_COMMAND_OPCODE_MASK GENMASK_ULL(15, 0)
+#define   CXLDEV_MBOX_BG_CMD_COMMAND_PCT_MASK GENMASK_ULL(22, 16)
+#define   CXLDEV_MBOX_BG_CMD_COMMAND_RC_MASK GENMASK_ULL(47, 32)
 #define CXLDEV_MBOX_PAYLOAD_OFFSET 0x20
 
 /*
diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
index ccbafc05a636..934076254d52 100644
--- a/drivers/cxl/cxlmem.h
+++ b/drivers/cxl/cxlmem.h
@@ -108,6 +108,9 @@ static inline struct cxl_ep *cxl_ep_load(struct cxl_port *port,
  *            variable sized output commands, it tells the exact number of bytes
  *            written.
  * @min_out: (input) internal command output payload size validation
+ * @poll_count: (input)  Number of timeouts to attempt.
+ * @poll_interval: (input) Number of ms between mailbox background command
+ *                 polling intervals timeouts.
  * @return_code: (output) Error code returned from hardware.
  *
  * This is the primary mechanism used to send commands to the hardware.
@@ -123,6 +126,8 @@ struct cxl_mbox_cmd {
 	size_t size_in;
 	size_t size_out;
 	size_t min_out;
+	int poll_count;
+	u64 poll_interval;
 	u16 return_code;
 };
 
@@ -322,6 +327,7 @@ enum cxl_opcode {
 	CXL_MBOX_OP_GET_SCAN_MEDIA_CAPS	= 0x4303,
 	CXL_MBOX_OP_SCAN_MEDIA		= 0x4304,
 	CXL_MBOX_OP_GET_SCAN_MEDIA	= 0x4305,
+	CXL_MBOX_OP_SANITIZE		= 0x4400,
 	CXL_MBOX_OP_GET_SECURITY_STATE	= 0x4500,
 	CXL_MBOX_OP_SET_PASSPHRASE	= 0x4501,
 	CXL_MBOX_OP_DISABLE_PASSPHRASE	= 0x4502,
diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
index 60b23624d167..26b6105e2797 100644
--- a/drivers/cxl/pci.c
+++ b/drivers/cxl/pci.c
@@ -52,6 +52,8 @@ static unsigned short mbox_ready_timeout = 60;
 module_param(mbox_ready_timeout, ushort, 0644);
 MODULE_PARM_DESC(mbox_ready_timeout, "seconds to wait for mailbox ready");
 
+static DECLARE_WAIT_QUEUE_HEAD(mbox_wait);
+
 static int cxl_pci_mbox_wait_for_doorbell(struct cxl_dev_state *cxlds)
 {
 	const unsigned long start = jiffies;
@@ -85,6 +87,25 @@ static int cxl_pci_mbox_wait_for_doorbell(struct cxl_dev_state *cxlds)
 			    status & CXLMDEV_DEV_FATAL ? " fatal" : "",        \
 			    status & CXLMDEV_FW_HALT ? " firmware-halt" : "")
 
+static irqreturn_t cxl_mbox_irq(int irq, void *id)
+{
+	/* short-circuit the wait in __cxl_pci_mbox_send_cmd() */
+	wake_up(&mbox_wait);
+	return IRQ_HANDLED;
+}
+
+static bool cxl_mbox_background_complete(struct cxl_dev_state *cxlds)
+{
+	u64 bgcmd_status_reg;
+	u32 pct;
+
+	bgcmd_status_reg = readq(cxlds->regs.mbox +
+				 CXLDEV_MBOX_BG_CMD_STATUS_OFFSET);
+	pct = FIELD_GET(CXLDEV_MBOX_BG_CMD_COMMAND_PCT_MASK, bgcmd_status_reg);
+
+	return pct == 100;
+}
+
 /**
  * __cxl_pci_mbox_send_cmd() - Execute a mailbox command
  * @cxlds: The device state to communicate with.
@@ -178,6 +199,56 @@ static int __cxl_pci_mbox_send_cmd(struct cxl_dev_state *cxlds,
 	mbox_cmd->return_code =
 		FIELD_GET(CXLDEV_MBOX_STATUS_RET_CODE_MASK, status_reg);
 
+	/*
+	 * Handle the background command in a synchronous manner.
+	 *
+	 * All other mailbox commands will serialize/queue on the mbox_mutex,
+	 * which we currently hold. Furthermore this also guarantees that
+	 * cxl_mbox_background_complete() checks are safe amongst each other,
+	 * in that no new bg operation can occur in between.
+	 *
+	 * With the exception of special cases that merit monopolizing the
+	 * driver/device, bg operations are timesliced in accordance with
+	 * the nature of the command being sent.
+	 *
+	 * In the event of timeout, the mailbox state is indeterminate
+	 * until the next successful command submission and the driver
+	 * can get back in sync with the hardware state.
+	 */
+	if (mbox_cmd->return_code == CXL_MBOX_CMD_RC_BACKGROUND) {
+		u64 bg_status_reg;
+		const bool timeslice = mbox_cmd->opcode != CXL_MBOX_OP_SANITIZE;
+
+		dev_dbg(dev, "Mailbox background operation started\n");
+
+		while (1) {
+			if (wait_event_interruptible_timeout(
+				mbox_wait, cxl_mbox_background_complete(cxlds),
+				msecs_to_jiffies(mbox_cmd->poll_interval)) > 0)
+				break;
+
+			if (timeslice && !--mbox_cmd->poll_count)
+				break;
+		}
+
+		if (!cxl_mbox_background_complete(cxlds)) {
+			u64 md_status =
+				readq(cxlds->regs.memdev + CXLMDEV_STATUS_OFFSET);
+
+			cxl_cmd_err(cxlds->dev, mbox_cmd, md_status,
+				    "background timeout");
+			return -ETIMEDOUT;
+		}
+
+		bg_status_reg = readq(cxlds->regs.mbox +
+				      CXLDEV_MBOX_BG_CMD_STATUS_OFFSET);
+		mbox_cmd->return_code =
+			FIELD_GET(CXLDEV_MBOX_BG_CMD_COMMAND_RC_MASK,
+				  bg_status_reg);
+
+		dev_dbg(dev, "Mailbox background operation completed\n");
+	}
+
 	if (mbox_cmd->return_code != CXL_MBOX_CMD_RC_SUCCESS) {
 		dev_dbg(dev, "Mailbox operation had an error: %s\n",
 			cxl_mbox_cmd_rc2str(mbox_cmd));
@@ -222,8 +293,11 @@ static int cxl_pci_mbox_send(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *c
 static int cxl_pci_setup_mailbox(struct cxl_dev_state *cxlds)
 {
 	const int cap = readl(cxlds->regs.mbox + CXLDEV_MBOX_CAPS_OFFSET);
+	struct device *dev = cxlds->dev;
+	struct pci_dev *pdev = to_pci_dev(dev);
 	unsigned long timeout;
 	u64 md_status;
+	int rc, irq;
 
 	timeout = jiffies + mbox_ready_timeout * HZ;
 	do {
@@ -272,6 +346,24 @@ static int cxl_pci_setup_mailbox(struct cxl_dev_state *cxlds)
 	dev_dbg(cxlds->dev, "Mailbox payload sized %zu",
 		cxlds->payload_size);
 
+	if (!(cap & CXLDEV_MBOX_CAP_BG_CMD_IRQ)) {
+		dev_dbg(dev, "Only Mailbox polling is supported");
+		return 0;
+	}
+
+	irq = pci_irq_vector(pdev,
+			     FIELD_GET(CXLDEV_MBOX_CAP_IRQ_MSGNUM_MASK, cap));
+	if (irq < 0)
+		return irq;
+
+	rc = devm_request_irq(dev, irq, cxl_mbox_irq,
+			      IRQF_SHARED, "mailbox", cxlds);
+	if (rc)
+		return rc;
+
+	writel(CXLDEV_MBOX_CTRL_BG_CMD_IRQ,
+	       cxlds->regs.mbox + CXLDEV_MBOX_CTRL_OFFSET);
+
 	return 0;
 }
 
@@ -757,6 +849,10 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (rc)
 		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");
 
+	rc = cxl_alloc_irq_vectors(pdev);
+	if (rc)
+		return rc;
+
 	rc = cxl_pci_setup_mailbox(cxlds);
 	if (rc)
 		return rc;
@@ -777,10 +873,6 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (rc)
 		return rc;
 
-	rc = cxl_alloc_irq_vectors(pdev);
-	if (rc)
-		return rc;
-
 	cxlmd = devm_cxl_add_memdev(cxlds);
 	if (IS_ERR(cxlmd))
 		return PTR_ERR(cxlmd);
-- 
2.39.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 486B9C7EE2F
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:47:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229452AbjBXTrJ (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:47:09 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39794 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229495AbjBXTrI (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:47:08 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id DDF276C19D
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:47:06 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 24E435021B6;
        Fri, 24 Feb 2023 19:47:06 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 8DEB7500EDC;
        Fri, 24 Feb 2023 19:47:05 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268025; a=rsa-sha256;
        cv=none;
        b=G3pC/r4vkO8Pr0PAROWvmuWSOIEptfT/dAtLM/8JCrmzyDAq5q4QmZKxsbUWPxRmuhUVAn
        DB74mBN1Cs62C87XMIArrPVlOSfsfGWycFJFTGYKmW436HIN6AD3mYiV6/ikijlMfoxZOE
        UVLuIMwH5vk6NFF+CSJBgvHWqDvLjl+la05sut5taXJE8sXAuZj21LbNsQY4EKK8T58RJJ
        RyILAlwTxVZkj33bpDFLCDDC/ZPlMAMTeZ16JeCn8XO7hUKD86kIbrPUxHEZVDWPWTZbq1
        FT2WXSOaxQ2afjWThw3uK1x0WDeiMyt8lROSUH8jM+zOOTqqrVI9fqkGT2Tngg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268025;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=DjzZAOO4awNY+j0vnzloQLKua0xzw1hNI/cCA000ioA=;
        b=cqjvHeiS/JXggDVE+ULkElaxGi3ISifhBAjMcGUKV+Cqx1QIC/HFacM4JoUZAjF1sUW9XZ
        BdIGvA9RSm1sdB1EJvB+R/xKCVVlzfPXvDseoSadqljo2aXS1Je6+luNzQMHelbMRG5S1Z
        wqxW14cjA5zd/FvMglZCDtSeGaSxJ/KtASgJdWQcmmRqcDhKtU7qIwEDFm3tQvd5jIcpse
        nL9A2WS/iBX8rTlUPQbp1e0Y0GroGEIT7x6yun3Y/ZmG1mz6+Y8rtYJ+fRqmANGWRv1i3F
        MPAyXjBEp8SLtiCYaewNxfGejMfrkIvwHJkTfHMFbVrc02y+lmcjKBUObHxpBw==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-pxv92;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Shoe-Versed: 70a2da9b4e4083a2_1677268025934_1900094114
X-MC-Loop-Signature: 1677268025934:4203468878
X-MC-Ingress-Time: 1677268025933
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.123.200.110 (trex/6.7.1);
        Fri, 24 Feb 2023 19:47:05 +0000
Received: from offworld.. (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgQJ0dc5zMP;
        Fri, 24 Feb 2023 11:47:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268024;
        bh=DjzZAOO4awNY+j0vnzloQLKua0xzw1hNI/cCA000ioA=;
        h=From:To:Cc:Subject:Date:Content-Transfer-Encoding;
        b=hHqgOFDYCbIivObTDIBKI8cuw+K328KA4QAHdirW2iWIP538AEa8xEqZKopMYeYAW
         cXc0MgkiNbfH6rGAQfRfTITqA9V8yThNWOX9y0iayjdz0gSf7FSh4nvkdWQl+CCpha
         3xhlRQ2lqz6nxFvmMqXdj4W34Q3l9imeTFbCHbWiFVXsj71cqTTHXII9ajudZDMIo2
         hDWcq4yvBTwPSrl0y3hxFJ+7kru0AeZpjznsEZcXj0S9CP653DgTurlqwOaBSoPoJc
         SIP9aAPTLHFdhMy2hhpheWaBMLwlIDGKuY6AE/UZlk9SRSvRI4i+ht+nj2oRoZK0Sp
         G90AlX0X8Ywxw==
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave@stgolabs.net
Subject: [PATCH 2/7] cxl/security: Add security state sysfs ABI
Date: Fri, 24 Feb 2023 11:46:47 -0800
Message-Id: <20230224194652.1990604-3-dave@stgolabs.net>
X-Mailer: git-send-email 2.39.2
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

This adds the sysfs memdev's security/ directory with
a single 'state' file, which is always visible. In the
case of unsupported security features, this will show
disabled.

Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
---
 Documentation/ABI/testing/sysfs-bus-cxl |  8 ++++
 drivers/cxl/core/memdev.c               | 49 +++++++++++++++++++++++++
 2 files changed, 57 insertions(+)

diff --git a/Documentation/ABI/testing/sysfs-bus-cxl b/Documentation/ABI/testing/sysfs-bus-cxl
index 3acf2f17a73f..e9c432a5a841 100644
--- a/Documentation/ABI/testing/sysfs-bus-cxl
+++ b/Documentation/ABI/testing/sysfs-bus-cxl
@@ -57,6 +57,14 @@ Description:
 		host PCI device for this memory device, emit the CPU node
 		affinity for this device.
 
+What:		/sys/bus/cxl/devices/memX/security/state
+Date:		February, 2023
+KernelVersion:	v6.4
+Contact:	linux-cxl@vger.kernel.org
+Description:
+		(RO) The security state for that device. The following states
+		are available: frozen, locked, unlocked and disabled (which
+		is also the case for any unsupported security features).
 
 What:		/sys/bus/cxl/devices/*/devtype
 Date:		June, 2021
diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index 0af8856936dc..47cc625bb1b0 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /* Copyright(c) 2020 Intel Corporation. */
 
+#include <linux/memregion.h>
 #include <linux/device.h>
 #include <linux/slab.h>
 #include <linux/idr.h>
@@ -89,6 +90,43 @@ static ssize_t pmem_size_show(struct device *dev, struct device_attribute *attr,
 static struct device_attribute dev_attr_pmem_size =
 	__ATTR(size, 0444, pmem_size_show, NULL);
 
+static ssize_t security_state_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	u32 sec_out;
+	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
+	struct cxl_dev_state *cxlds = cxlmd->cxlds;
+	struct cxl_get_security_output {
+		__le32 flags;
+	} out;
+	struct cxl_mbox_cmd mbox_cmd = {
+		.opcode = CXL_MBOX_OP_GET_SECURITY_STATE,
+		.payload_out = &out,
+		.size_out = sizeof(out),
+	};
+
+	if (!cpu_cache_has_invalidate_memregion())
+		goto disabled;
+
+	if (cxl_internal_send_cmd(cxlds, &mbox_cmd) < 0)
+		goto disabled;
+
+	sec_out = le32_to_cpu(out.flags);
+	if (!(sec_out & CXL_PMEM_SEC_STATE_USER_PASS_SET))
+		goto disabled;
+	if (sec_out & CXL_PMEM_SEC_STATE_FROZEN)
+		return sysfs_emit(buf, "frozen\n");
+	if (sec_out & CXL_PMEM_SEC_STATE_LOCKED)
+		return sysfs_emit(buf, "locked\n");
+	else
+		return sysfs_emit(buf, "unlocked\n");
+disabled:
+	return sysfs_emit(buf, "disabled\n");
+}
+
+static struct device_attribute dev_attr_security_state =
+	__ATTR(state, 0444, security_state_show, NULL);
+
 static ssize_t serial_show(struct device *dev, struct device_attribute *attr,
 			   char *buf)
 {
@@ -148,10 +186,21 @@ static struct attribute_group cxl_memdev_pmem_attribute_group = {
 	.attrs = cxl_memdev_pmem_attributes,
 };
 
+static struct attribute *cxl_memdev_security_attributes[] = {
+	&dev_attr_security_state.attr,
+	NULL,
+};
+
+static struct attribute_group cxl_memdev_security_attribute_group = {
+	.name = "security",
+	.attrs = cxl_memdev_security_attributes,
+};
+
 static const struct attribute_group *cxl_memdev_attribute_groups[] = {
 	&cxl_memdev_attribute_group,
 	&cxl_memdev_ram_attribute_group,
 	&cxl_memdev_pmem_attribute_group,
+	&cxl_memdev_security_attribute_group,
 	NULL,
 };
 
-- 
2.39.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D9561C6FA8E
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:47:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229495AbjBXTrK (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:47:10 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39800 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229532AbjBXTrJ (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:47:09 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id BC3686C1A7
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:47:07 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id E78F041C64;
        Fri, 24 Feb 2023 19:47:06 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 6AF3641D30;
        Fri, 24 Feb 2023 19:47:06 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268026; a=rsa-sha256;
        cv=none;
        b=CtSQ4lFyXAYVw2+Rzg3FRZzWnKKaM2g4ZXpA8kdi04x6mF6t96jpoSuB0cpW0MYbkHex0P
        PBBVwIRKco9pWYlx3/ORk5s/WYdTKBZIO80cECktw6E8s3nMBo96GTOgkbSwKdfLUCLQGQ
        9jcoopOE7kBmGESG6ubh9hm91aIn+rzr5AiB6X8vhvrx5JJoVbj9BOoztwtO8n+XfNLYZ/
        qVTkclI2vnsHuKvoF5beePsl0m5Kchaib3XLs43b933gRlEKKOj0sqwcS71HMc5yHXRof9
        dohOOwL05SNZjzmowW0v9w8VgLFUSAP9QZZcopoM8iV4k897P52BHFQIy98cWw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268026;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=NZUKbFkQhmzwX/XIY66T6M+R2xD4t4IwbUDe6lPcZLc=;
        b=uLK/luq7Z9ujVFPWTpW4kiACNTRh0c89c6/aN4bHceU4OPERDraW25LoGDfOBOUGmi215T
        O3KFmHW/A7Sw1S6KPFM7JVCVk+eniNmUS6zFRWeKOEyeQBD5OPA2onnOvL1+1ixBrpJx8P
        ue6vrJ8ldWygbIAVnE26jtaDgufuSchXhnCF4JwNWnTsOraTF+WdIDmwqxHoTXIzTYzl6Q
        lhx71HWtvkGN3SMfsXsT/qfeEFiUmxB7ZiRznDTDmllMG57rZ8yfkoz3AK4Iw+NxSR99Dx
        MBVgYKZeN2aZ1Hxo0d5QGTT5RRlvNqhcgAEY7ARDXuQaGFTlaKJsgm64Bq2wFw==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-mldnf;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Lyrical-Company: 785f337656f19f58_1677268026781_3588991372
X-MC-Loop-Signature: 1677268026781:2446644040
X-MC-Ingress-Time: 1677268026781
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.97.74.37 (trex/6.7.1);
        Fri, 24 Feb 2023 19:47:06 +0000
Received: from offworld.. (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgQK2SvNz2Q;
        Fri, 24 Feb 2023 11:47:05 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268026;
        bh=NZUKbFkQhmzwX/XIY66T6M+R2xD4t4IwbUDe6lPcZLc=;
        h=From:To:Cc:Subject:Date:Content-Transfer-Encoding;
        b=pGXZIXJ073EoaYBAknYQTP4EeoqbIFeEduSAc/hetNHFRpo9guUYwUXtziHmRN/sK
         /2PxHEWELdPpNjk5/F8jpmpfhSqjpMcF6GxI0bFXmpFNQFdBOxAeKbSaFzyRgOwfSP
         hjtm5d//12/a8p7c2GW/s6BJj9IT+s6PkGGsr97Y3KYUIW1PC0woWOqev9evaqQIYL
         WqA2kZpX4QdMRX8mlaCVYVH5NVQvzxMfvvxkiO6XxIWkgsC95QuXdNEPd24Y+21oYz
         hSnzP4wCbX8vrn8bNgwq1KKV/0L7a/PI3Wdou3pvE0ZhilJ8sxsyFL7up2wxYXLtvY
         FILCXZn9wJcDg==
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave@stgolabs.net
Subject: [PATCH 3/7] cxl/region: Add cxl_memdev_active_region()
Date: Fri, 24 Feb 2023 11:46:48 -0800
Message-Id: <20230224194652.1990604-4-dave@stgolabs.net>
X-Mailer: git-send-email 2.39.2
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Track all regions associated to a memdev in order to
tell if the device might be in active use.

Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
---
 drivers/cxl/core/memdev.c |  1 +
 drivers/cxl/core/region.c | 33 +++++++++++++++++++++++++++++++--
 drivers/cxl/cxl.h         |  6 ++++++
 drivers/cxl/cxlmem.h      |  4 ++++
 4 files changed, 42 insertions(+), 2 deletions(-)

diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index 47cc625bb1b0..68c0ab06b999 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -306,6 +306,7 @@ static struct cxl_memdev *cxl_memdev_alloc(struct cxl_dev_state *cxlds,
 	dev->type = &cxl_memdev_type;
 	device_set_pm_not_required(dev);
 	INIT_WORK(&cxlmd->detach_work, detach_memdev);
+	INIT_LIST_HEAD(&cxlmd->region_list);
 
 	cdev = &cxlmd->cdev;
 	cdev_init(cdev, fops);
diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
index f29028148806..cea9de6457b9 100644
--- a/drivers/cxl/core/region.c
+++ b/drivers/cxl/core/region.c
@@ -1730,7 +1730,10 @@ void cxl_decoder_kill_region(struct cxl_endpoint_decoder *cxled)
 {
 	down_write(&cxl_region_rwsem);
 	cxled->mode = CXL_DECODER_DEAD;
-	cxl_region_detach(cxled);
+	if (!cxl_region_detach(cxled)) {
+		struct cxl_region *cxlr = cxled->cxld.region;
+		list_del(&cxlr->node);
+	}
 	up_write(&cxl_region_rwsem);
 }
 
@@ -1749,8 +1752,12 @@ static int attach_target(struct cxl_region *cxlr,
 
 	down_read(&cxl_dpa_rwsem);
 	rc = cxl_region_attach(cxlr, cxled, pos);
-	if (rc == 0)
+	if (rc == 0) {
+		struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
+
 		set_bit(CXL_REGION_F_INCOHERENT, &cxlr->flags);
+		list_add_tail(&cxlr->node, &cxlmd->region_list);
+	}
 	up_read(&cxl_dpa_rwsem);
 	up_write(&cxl_region_rwsem);
 	return rc;
@@ -1778,6 +1785,8 @@ static int detach_target(struct cxl_region *cxlr, int pos)
 	}
 
 	rc = cxl_region_detach(p->targets[pos]);
+	if (rc == 0)
+		list_del(&cxlr->node);
 out:
 	up_write(&cxl_region_rwsem);
 	return rc;
@@ -2654,6 +2663,26 @@ int cxl_add_to_region(struct cxl_port *root, struct cxl_endpoint_decoder *cxled)
 }
 EXPORT_SYMBOL_NS_GPL(cxl_add_to_region, CXL);
 
+bool cxl_memdev_active_region(struct cxl_memdev *cxlmd)
+{
+	bool ret = false;
+	struct cxl_region *cxlr;
+
+	down_read(&cxl_region_rwsem);
+	list_for_each_entry(cxlr, &cxlmd->region_list, node) {
+		struct cxl_region_params *p = &cxlr->params;
+
+		if (p->state >= CXL_CONFIG_ACTIVE) {
+			ret = true;
+			break;
+		}
+	}
+	up_read(&cxl_region_rwsem);
+
+	return ret;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_memdev_active_region, CXL);
+
 static int cxl_region_invalidate_memregion(struct cxl_region *cxlr)
 {
 	if (!test_bit(CXL_REGION_F_INCOHERENT, &cxlr->flags))
diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
index b834e55375e3..e211241b079b 100644
--- a/drivers/cxl/cxl.h
+++ b/drivers/cxl/cxl.h
@@ -502,6 +502,7 @@ struct cxl_region {
 	struct cxl_pmem_region *cxlr_pmem;
 	unsigned long flags;
 	struct cxl_region_params params;
+	struct list_head node;
 };
 
 struct cxl_nvdimm_bridge {
@@ -773,6 +774,7 @@ struct cxl_pmem_region *to_cxl_pmem_region(struct device *dev);
 int cxl_add_to_region(struct cxl_port *root,
 		      struct cxl_endpoint_decoder *cxled);
 struct cxl_dax_region *to_cxl_dax_region(struct device *dev);
+bool cxl_memdev_active_region(struct cxl_memdev *cxlmd);
 #else
 static inline bool is_cxl_pmem_region(struct device *dev)
 {
@@ -791,6 +793,10 @@ static inline struct cxl_dax_region *to_cxl_dax_region(struct device *dev)
 {
 	return NULL;
 }
+static inline bool cxl_memdev_active_region(struct cxl_memdev *cxlmd)
+{
+	return false;
+}
 #endif
 
 /*
diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
index 934076254d52..4e31f3234519 100644
--- a/drivers/cxl/cxlmem.h
+++ b/drivers/cxl/cxlmem.h
@@ -5,6 +5,7 @@
 #include <uapi/linux/cxl_mem.h>
 #include <linux/cdev.h>
 #include <linux/uuid.h>
+#include <linux/list.h>
 #include "cxl.h"
 
 /* CXL 2.0 8.2.8.5.1.1 Memory Device Status Register */
@@ -40,6 +41,8 @@
  * @cxl_nvd: optional bridge to an nvdimm if the device supports pmem
  * @id: id number of this memdev instance.
  * @depth: endpoint port depth
+ * @region_list: List of regions that have as target the endpoint
+ *               decoder associated with this memdev
  */
 struct cxl_memdev {
 	struct device dev;
@@ -50,6 +53,7 @@ struct cxl_memdev {
 	struct cxl_nvdimm *cxl_nvd;
 	int id;
 	int depth;
+	struct list_head region_list;
 };
 
 static inline struct cxl_memdev *to_cxl_memdev(struct device *dev)
-- 
2.39.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id ED723C7EE31
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:47:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229491AbjBXTrL (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:47:11 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39818 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229525AbjBXTrK (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:47:10 -0500
Received: from bee.birch.relay.mailchannels.net (bee.birch.relay.mailchannels.net [23.83.209.14])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id A3F286C198
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:47:09 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 2010A502021;
        Fri, 24 Feb 2023 19:47:09 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 783E35020D7;
        Fri, 24 Feb 2023 19:47:08 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268028; a=rsa-sha256;
        cv=none;
        b=X3nL9BUb/3JsEpxLlNflbob7AQP5z7E6cl204FLt4hdNoq1NySkE4GX96jeHOYVvWHkjgo
        Cewq9pDbdd0B2KHqq2iBXMEZUJfO4us5pVYtaFIh+u4sWgOSuhkHa6w89N4zyEVPwT8IZ0
        iV6QmhApOl/MW5Nh+Cd8u/z69t5lH3kW8v1Ab6Qd5mpN6+tjAqnmBQu/wxkwvubhSkq+ph
        NgFABD/3NzJeFloh34y6JaH2BX1IkAsbMMTqtohTCJfUzd8kb88jc1v+an1kduJsgBMJAC
        kHYhkQkU7cJ5Ohyr3w+b/71BGdKG380L+PzxHPnpCwfOIVtsHhtLfXxTJcPlgg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268028;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=V5tX9bU4PXyDcIBGDeJkgwU79PnzSt35DBkXyyj3TIk=;
        b=BXRikArfGOoS7k2wRtCqjrYmfs+UC7KjNwPFy0Xs+0KjXWDTn/wlKttTZXr/iV/cXB5c6/
        q7xsZODhAkMPi6pYyuAOgdupXQ0HSuX6fC9MxDGjqxsKtoEOEzlUfk/4cd+08bSY0XNx79
        fjCSYJ02rHcf6CTZgi2s/AH0AsuiPt9PxKYaGPlhaWWWlTlhAhMnsoZrEZjjY89JIIL4dZ
        63TR8hfoCt+7aBOV2CetAeLfTv33Cs7+uCE1svnrNIYcC8hJlZYpAVuJmIFJ9VqsJIze6p
        9oZH+BONv+rrTS8l/PQn1ee5eb6CZ32gglJSLbN6oqRfWLKLcdMLxXh9xVbtfQ==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-vj54m;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Trouble-Cold: 5325c312441a9da7_1677268028895_479796182
X-MC-Loop-Signature: 1677268028895:2149259742
X-MC-Ingress-Time: 1677268028895
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.99.229.15 (trex/6.7.1);
        Fri, 24 Feb 2023 19:47:08 +0000
Received: from offworld.. (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgQM3FFSz2Q;
        Fri, 24 Feb 2023 11:47:07 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268028;
        bh=V5tX9bU4PXyDcIBGDeJkgwU79PnzSt35DBkXyyj3TIk=;
        h=From:To:Cc:Subject:Date:Content-Transfer-Encoding;
        b=kRLJ/XO+IRyhFRfxOJC7dD0yp/YwVrsdH7GVz7QvPXn+Jebm1Q+L/Tnijp0dtVu7H
         VUFggEeKA1i1eR34AyqGjm492iLMEPDtNwHTtQ24mENbqYgpINdoKDtPPNarUmwiBR
         SPsm7+rZcAoyXjRKWbsUbdffFPa4l4Hecu/fBXCuZEdt9wE/7VUVN9IxKbzFsWRLjo
         cfSW02avLb9ALQakw8nJz8vbI+Ve0UKnJzaHdJ3yczeAfODRfipAH8aojEVYh+sqZM
         FF8Av0oMU9fv1NJARO5GFXDNAWyFmUs0Xw549N1EOndnBFtN0nGoVYfyAAuB8OSaKz
         zY1kkKuR8gWdQ==
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave@stgolabs.net
Subject: [PATCH 5/7] cxl/test: Add "Sanitize" opcode support
Date: Fri, 24 Feb 2023 11:46:50 -0800
Message-Id: <20230224194652.1990604-6-dave@stgolabs.net>
X-Mailer: git-send-email 2.39.2
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Add support to emulate a CXL mem device support the "Sanitize"
operation, without incurring in the background.

Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
---
 tools/testing/cxl/test/mem.c | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/tools/testing/cxl/test/mem.c b/tools/testing/cxl/test/mem.c
index 9263b04d35f7..d4466cb27947 100644
--- a/tools/testing/cxl/test/mem.c
+++ b/tools/testing/cxl/test/mem.c
@@ -497,6 +497,28 @@ static int mock_partition_info(struct cxl_dev_state *cxlds,
 	return 0;
 }
 
+static int mock_sanitize(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *cmd)
+{
+	struct cxl_mockmem_data *mdata = dev_get_drvdata(cxlds->dev);
+
+	if (cmd->size_in != 0)
+		return -EINVAL;
+
+	if (cmd->size_out != 0)
+		return -EINVAL;
+
+	if (mdata->security_state & CXL_PMEM_SEC_STATE_USER_PASS_SET) {
+		cmd->return_code = CXL_MBOX_CMD_RC_SECURITY;
+		return -ENXIO;
+	}
+	if (mdata->security_state & CXL_PMEM_SEC_STATE_LOCKED) {
+		cmd->return_code = CXL_MBOX_CMD_RC_SECURITY;
+		return -ENXIO;
+	}
+
+	return 0; /* assume less than 2 secs, no bg */
+}
+
 static int mock_get_security_state(struct cxl_dev_state *cxlds,
 				   struct cxl_mbox_cmd *cmd)
 {
@@ -924,6 +946,9 @@ static int cxl_mock_mbox_send(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *
 	case CXL_MBOX_OP_GET_HEALTH_INFO:
 		rc = mock_health_info(cxlds, cmd);
 		break;
+	case CXL_MBOX_OP_SANITIZE:
+		rc = mock_sanitize(cxlds, cmd);
+		break;
 	case CXL_MBOX_OP_GET_SECURITY_STATE:
 		rc = mock_get_security_state(cxlds, cmd);
 		break;
-- 
2.39.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 9A813C7EE30
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:47:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229532AbjBXTrK (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:47:10 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39812 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229491AbjBXTrK (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:47:10 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id A58256C1A2
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:47:08 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 035013E1274;
        Fri, 24 Feb 2023 19:47:08 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 7311D3E171F;
        Fri, 24 Feb 2023 19:47:07 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268027; a=rsa-sha256;
        cv=none;
        b=WS3oOlFknCr2w7q7ifO6qj6w6doOHbK/I+SthvAZlvv6SvaKESGVGMMxokOQVFmkWe/chF
        wmDA5VvDq97RwOuPmJVBSGpVg9HjEXXqt8DiFRp7k+i6PyeJC5HMmgQh/WmWZIpfGKzJ6m
        PWx4vmUnZhQC9/a70abtjFfxifVy7jg35+nzxlo1VM8Ec9YxXvehXIMmnozW+QFS3KSa/N
        d5bZoidgW+k5RRK7H0VUoFzFVzVpC5fji/oFlnnPDT8mC2lNySuf/Q39mhErDTifCwEiya
        OVh3gvMoVQYVYEG2OUmo67FTZTmUD3QfyMlMrbTmo79jOilXCrBPYkN8nOmZ6g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268027;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=pQp/N3Eufw05PzXNXa9+lQfLf0rhBWb4ZP5pKq1qTQo=;
        b=GBgAjn1uz8IWQVIgI/umKLmEybhOh5BUaXha6u9uI6md3OHj40s1o1DXaEsYuwyz/GdNn0
        8vFKvyBKD38chHddJmoGdLJIQi4V706IGDPRpXRpM51Z3Cl+YZ/mZrsvEkZ3c/5cpfSEFp
        TrJ3JL6rPsS+EF3AteVkQ9u8pRwqef5ayDl4JVprfr7LhB/TCKxpJdZcXWZDCJJOxfZYFo
        kwYEqllN70fHc4o4LGvm+z5fkc71y6xwjQNr5SKREupUvC+rMzn1/IhtfYOhOOmt1L9y12
        SGo0Nwq5/CkNyOomzkahSmcTM6l9iwhBH9EFrIjkAASRFaCD207CtHii01G+CQ==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-jddqq;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Trouble-Tasty: 536211f31e3eec65_1677268027837_2074064300
X-MC-Loop-Signature: 1677268027837:3779901095
X-MC-Ingress-Time: 1677268027837
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.109.196.241 (trex/6.7.1);
        Fri, 24 Feb 2023 19:47:07 +0000
Received: from offworld.. (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgQL2LYSz2d;
        Fri, 24 Feb 2023 11:47:06 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268027;
        bh=pQp/N3Eufw05PzXNXa9+lQfLf0rhBWb4ZP5pKq1qTQo=;
        h=From:To:Cc:Subject:Date:Content-Transfer-Encoding;
        b=q0dcms7cDxLEkznkEBjIzCj/ateOoE4W1B45nMmx5VKyS4I8+Z2xQcqkyBOFijvQG
         37h9eruP9bcFnVNsL2impD4mVM6PIsKD8/wUvr7aO+UrdVMZOdO/IAfRjdePzYTxm9
         DqtwG6VWMV5HLEfW/rN8oTr3DN5Ta/WLV3oayzHSeSuPhP0fdWm3uOWr5M8ETqC4Kv
         4UUXfA0KJQl85DsU6Pwj/iScJfzU0zQdwTVNOxHMdjg2CIE55JaOZ/vmOdk+WfK5rY
         UA/DZSQpwKm4Y577bIusAgjIWoOXEKCrSZ5va8EbW/8RSieMHBAFDP9HlIJ5+FooGk
         f+S7rkXLQDwgg==
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave@stgolabs.net
Subject: [PATCH 4/7] cxl/mem: Support Sanitation
Date: Fri, 24 Feb 2023 11:46:49 -0800
Message-Id: <20230224194652.1990604-5-dave@stgolabs.net>
X-Mailer: git-send-email 2.39.2
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Implement support for the non-pmem exclusive sanitize (aka overwrite),
per CXL specs. This is the baseline for the sanitize-on-release
functionality.

To properly support this feature, create a 'security/sanitize' sysfs
file that when read will list the current pmem security state and
when written to, perform the requested operation.

This operation can run in the background and the driver must wait
for completion (no timeout), where the poller will awake every
~10 seconds (this could be further based on the size of the device).

Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
---
 Documentation/ABI/testing/sysfs-bus-cxl | 14 ++++++
 drivers/cxl/core/mbox.c                 | 61 +++++++++++++++++++++++++
 drivers/cxl/core/memdev.c               | 39 ++++++++++++++++
 drivers/cxl/cxlmem.h                    |  2 +
 4 files changed, 116 insertions(+)

diff --git a/Documentation/ABI/testing/sysfs-bus-cxl b/Documentation/ABI/testing/sysfs-bus-cxl
index e9c432a5a841..b315d78b7e91 100644
--- a/Documentation/ABI/testing/sysfs-bus-cxl
+++ b/Documentation/ABI/testing/sysfs-bus-cxl
@@ -66,6 +66,20 @@ Description:
 		are available: frozen, locked, unlocked and disabled (which
 		is also the case for any unsupported security features).
 
+What:          /sys/bus/cxl/devices/memX/security/sanitize
+Date:          February, 2023
+KernelVersion: v6.4
+Contact:       linux-cxl@vger.kernel.org
+Description:
+	       (WO) Write a boolean 'true' string value to this attribute to
+	       sanitize the device to securely re-purpose or decommission it.
+	       This is done by ensuring that all user data and meta-data,
+	       whether it resides in persistent capacity, volatile capacity,
+	       or the LSA, is made permanently unavailable by whatever means
+	       is appropriate for the media type. This causes all CPU caches
+	       to be flushed. If this sysfs entry is not present then the
+	       architecture does not support security features.
+
 What:		/sys/bus/cxl/devices/*/devtype
 Date:		June, 2021
 KernelVersion:	v5.14
diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
index f2addb457172..885de3506735 100644
--- a/drivers/cxl/core/mbox.c
+++ b/drivers/cxl/core/mbox.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /* Copyright(c) 2020 Intel Corporation. All rights reserved. */
 #include <linux/io-64-nonatomic-lo-hi.h>
+#include <linux/memregion.h>
 #include <linux/security.h>
 #include <linux/debugfs.h>
 #include <linux/ktime.h>
@@ -1021,6 +1022,66 @@ int cxl_dev_state_identify(struct cxl_dev_state *cxlds)
 }
 EXPORT_SYMBOL_NS_GPL(cxl_dev_state_identify, CXL);
 
+/**
+ * cxl_mem_sanitize() - Send sanitation (aka overwrite) command to the device.
+ * @cxlds: The device data for the operation
+ *
+ * Return: 0 if the command was executed successfully, regardless of
+ * whether or not the actual security operation is done in the background.
+ * Upon error, return the result of the mailbox command or -EINVAL if
+ * security requirements are not met. CPU caches are flushed before and
+ * after succesful completion of each command.
+ *
+ * See CXL 3.0 @8.2.9.8.5.1 Sanitize.
+ */
+int cxl_mem_sanitize(struct cxl_dev_state *cxlds)
+{
+	int rc;
+	u32 sec_out = 0;
+	struct cxl_get_security_output {
+		__le32 flags;
+	} out;
+	struct cxl_mbox_cmd sec_cmd = {
+		.opcode = CXL_MBOX_OP_GET_SECURITY_STATE,
+		.payload_out = &out,
+		.size_out = sizeof(out),
+	};
+	struct cxl_mbox_cmd mbox_cmd = {
+		.opcode = CXL_MBOX_OP_SANITIZE,
+		.poll_interval = 10000UL,
+	};
+
+	if (!cpu_cache_has_invalidate_memregion())
+		return -EINVAL;
+
+	rc = cxl_internal_send_cmd(cxlds, &sec_cmd);
+	if (rc < 0) {
+		dev_err(cxlds->dev, "Failed to get security state : %d", rc);
+		return rc;
+	}
+
+	/*
+	 * Prior to using these commands, any security applied to
+	 * the user data areas of the device shall be DISABLED (or
+	 * UNLOCKED for secure erase case).
+	 */
+	sec_out = le32_to_cpu(out.flags);
+	if (sec_out & CXL_PMEM_SEC_STATE_USER_PASS_SET)
+		return -EINVAL;
+
+	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
+
+	rc = cxl_internal_send_cmd(cxlds, &mbox_cmd);
+	if (rc < 0) {
+		dev_err(cxlds->dev, "Failed to sanitize device : %d", rc);
+		return rc;
+	}
+
+	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
+	return 0;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_mem_sanitize, CXL);
+
 static int add_dpa_res(struct device *dev, struct resource *parent,
 		       struct resource *res, resource_size_t start,
 		       resource_size_t size, const char *type)
diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index 68c0ab06b999..a1bb095d081c 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -127,6 +127,34 @@ static ssize_t security_state_show(struct device *dev,
 static struct device_attribute dev_attr_security_state =
 	__ATTR(state, 0444, security_state_show, NULL);
 
+static ssize_t security_sanitize_store(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t len)
+{
+	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
+	struct cxl_dev_state *cxlds = cxlmd->cxlds;
+	ssize_t rc;
+	bool sanitize;
+
+	rc = kstrtobool(buf, &sanitize);
+	if (rc)
+		return rc;
+
+	if (sanitize) {
+		if (cxl_memdev_active_region(cxlmd))
+			return -EBUSY;
+
+		rc = cxl_mem_sanitize(cxlds);
+	}
+
+	if (rc == 0)
+		rc = len;
+	return rc;
+}
+
+static struct device_attribute dev_attr_security_sanitize =
+	__ATTR(sanitize, 0200, NULL, security_sanitize_store);
+
 static ssize_t serial_show(struct device *dev, struct device_attribute *attr,
 			   char *buf)
 {
@@ -188,11 +216,22 @@ static struct attribute_group cxl_memdev_pmem_attribute_group = {
 
 static struct attribute *cxl_memdev_security_attributes[] = {
 	&dev_attr_security_state.attr,
+	&dev_attr_security_sanitize.attr,
 	NULL,
 };
 
+static umode_t cxl_security_visible(struct kobject *kobj,
+				    struct attribute *a, int n)
+{
+	if (!cpu_cache_has_invalidate_memregion() &&
+	    a == &dev_attr_security_sanitize.attr)
+		return 0;
+	return a->mode;
+}
+
 static struct attribute_group cxl_memdev_security_attribute_group = {
 	.name = "security",
+	.is_visible = cxl_security_visible,
 	.attrs = cxl_memdev_security_attributes,
 };
 
diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
index 4e31f3234519..0d2009b36933 100644
--- a/drivers/cxl/cxlmem.h
+++ b/drivers/cxl/cxlmem.h
@@ -631,6 +631,8 @@ static inline void cxl_mem_active_dec(void)
 }
 #endif
 
+int cxl_mem_sanitize(struct cxl_dev_state *cxlds);
+
 struct cxl_hdm {
 	struct cxl_component_regs regs;
 	unsigned int decoder_count;
-- 
2.39.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id DCD17C64ED8
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:47:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229547AbjBXTrO (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:47:14 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39846 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229525AbjBXTrN (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:47:13 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 292396C194
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:47:11 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 5F80B200F97;
        Fri, 24 Feb 2023 19:47:11 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id BC753201248;
        Fri, 24 Feb 2023 19:47:10 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268030; a=rsa-sha256;
        cv=none;
        b=uMO8i8LqTYXMMAgK0LE79KLpd0h1v1HatK2i/cRENtF9GJcDfSOKXuxBiRxpRy/F1rLCpn
        U4wktnbG7fVBx2R8yFnPGsUXGPAdz0pP+9mQQYeOZchcvGYwRbeHfA5OZPDXC4cfO/Gb8F
        y7150dNPx7F3fElM72C2PJedqI0PbvhNaAn2TNVh1wQ/z3hLTzyhg0WjoBpNUbJ5xiLzZF
        BdkU6tuHDZMbIspRuAsi1o1MQARYsAKedBuu46tXNxT9D0GQ5p62Vi8hkbgvbGtM3Vkr20
        V1Y8fcKDDDcUr2jey5HR/Oh8IKVL7tgSXeY4HUGb3OLygEkLlEY31YL5Lljvvg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268030;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=ankyqMP5oBsP3OoxQ0mKfhsnHGElQxwf0AyjpHp4i0E=;
        b=Um4qde9NRpKU0daFwyGTSZEpxcdu7hg2PJ1V4zDV7EnMKVe/g8SRtQXQwmA8iyQeXBGn5q
        1BlwEJZKXrDfK3PiLuClse+S+OjnQjqzKaPgcxlWTYL8KMtLBbnMrY2b9zdmLjYc9UUXPR
        f/El0leJhfFm433c7yk6fSg2fsBqUKcBVEcVcBri1PPvnEjmUCANGaTrAoJIelyAD8wwCM
        B4IVGd3P2HEs5jxzREmlzbQmCP+kouCkQXI6XWl1rasUjEWowoO8L+epuOTz9wfDbNeXHr
        B8MRY4AsTVukVVQ0UIt3yNiLRhHXiv73oI3WT+mM3LzfEIOLndEemsBpnsZtJA==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-c6rpd;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Lettuce-Whispering: 371ae32d1a393fb6_1677268031175_819311173
X-MC-Loop-Signature: 1677268031175:2119673856
X-MC-Ingress-Time: 1677268031175
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.97.48.87 (trex/6.7.1);
        Fri, 24 Feb 2023 19:47:11 +0000
Received: from offworld.. (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgQP2kLVz2Q;
        Fri, 24 Feb 2023 11:47:09 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268030;
        bh=ankyqMP5oBsP3OoxQ0mKfhsnHGElQxwf0AyjpHp4i0E=;
        h=From:To:Cc:Subject:Date:Content-Transfer-Encoding;
        b=BIKI7cz6lAVA6Ti1w84JHLbQrGk6wq2RB0Y2xvgPhFUn/7dT3a13LINcPE19uXTxQ
         CceJiw04DXzbJidugodutLono5NsF1FZkKUhJTeAZ/m41p4DKEcF0ZHz38a/5I3Olv
         j6GKMkzUjsSTRAiZiQ0v6sgAsghhBina/AYtz8u5J7RAMxQEJuELYKgrr3aif8OV1E
         a+OpPwZV4FQEJS4oBStg4xxTQ+gf/a+AbY+APhui3pBEw60wSK4c5WAT0iY431x5Sw
         67fOj6PjOP5r7MkdGfefgLEM4A59YYot/EC1v4pG2Pg6OVCxRQYnkFI4L4kl/0lk4e
         7tOvg6JiZQPCQ==
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave@stgolabs.net
Subject: [PATCH 7/7] cxl/test: Add "Secure Erase" opcode support
Date: Fri, 24 Feb 2023 11:46:52 -0800
Message-Id: <20230224194652.1990604-8-dave@stgolabs.net>
X-Mailer: git-send-email 2.39.2
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Add support to emulate a CXL mem device support the "Secure Erase"
operation.

Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
---
 tools/testing/cxl/test/mem.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/tools/testing/cxl/test/mem.c b/tools/testing/cxl/test/mem.c
index d4466cb27947..8a22a4e592c6 100644
--- a/tools/testing/cxl/test/mem.c
+++ b/tools/testing/cxl/test/mem.c
@@ -519,6 +519,30 @@ static int mock_sanitize(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *cmd)
 	return 0; /* assume less than 2 secs, no bg */
 }
 
+static int mock_secure_erase(struct cxl_dev_state *cxlds,
+			     struct cxl_mbox_cmd *cmd)
+{
+	struct cxl_mockmem_data *mdata = dev_get_drvdata(cxlds->dev);
+
+	if (cmd->size_in != 0)
+		return -EINVAL;
+
+	if (cmd->size_out != 0)
+		return -EINVAL;
+
+	if (mdata->security_state & CXL_PMEM_SEC_STATE_USER_PASS_SET) {
+		cmd->return_code = CXL_MBOX_CMD_RC_SECURITY;
+		return -ENXIO;
+	}
+
+	if (mdata->security_state & CXL_PMEM_SEC_STATE_LOCKED) {
+		cmd->return_code = CXL_MBOX_CMD_RC_SECURITY;
+		return -ENXIO;
+	}
+
+	return 0;
+}
+
 static int mock_get_security_state(struct cxl_dev_state *cxlds,
 				   struct cxl_mbox_cmd *cmd)
 {
@@ -949,6 +973,9 @@ static int cxl_mock_mbox_send(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *
 	case CXL_MBOX_OP_SANITIZE:
 		rc = mock_sanitize(cxlds, cmd);
 		break;
+	case CXL_MBOX_OP_SECURE_ERASE:
+		rc = mock_secure_erase(cxlds, cmd);
+		break;
 	case CXL_MBOX_OP_GET_SECURITY_STATE:
 		rc = mock_get_security_state(cxlds, cmd);
 		break;
-- 
2.39.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 87DBEC64ED8
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:54:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229670AbjBXTyT (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:54:19 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:45730 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229709AbjBXTyT (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:54:19 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 44B7831E02
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:54:02 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 5974E7E1BD7;
        Fri, 24 Feb 2023 19:54:01 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 7CFEC7E1936;
        Fri, 24 Feb 2023 19:54:00 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268440; a=rsa-sha256;
        cv=none;
        b=c+6RVOWyKN3xGRzFzfTtroLMK0C9ReIU4tfK9SYtpj7EVk+tAkCyqXjzg+fgW78BktAvgF
        aHXuzZr6YxwA5lZKstUIzbI9AImVq/DvuOxquLs7+zzW899hSpxpQWqYY5WO1W8i5Idamr
        oc0jZINJA8LtPw6EL9RhEx+W4WHCuAoRElMhfRNUHhDYRUrY+v9SNdxOkDW749GHGvwFPV
        m4kAyX3c1uaBhdgb9VLWoMBNfyd2gLodXnrdxLg2CPMW/O19KmyhThxJLw5EC3yj7RDxQx
        ebKEZcQzSWnv7Zdcu0P4R9DR2aU90nPn6fbE3IMTvmfjTWkFviv7uqban01Abg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268440;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=ks1BIS73vSFTP4WP3oyu3+LzlgtHANuVIUGPpKRWzDg=;
        b=5XaqQOC89MrSTJIpFSk2jyYaUQmPZWBkVrCRIUVWhycHyRNqPmX8vhbJLk/srK1w9y25rn
        yBkwUhhnSmf82Rdnz0Zox1TIBU3ceW2SwMjjESqBxwIzU6lzbiFFtcjFKbss1SGyNByJ8h
        liLSW9Scpfsz2rYBCZSwm9mFm6a7RoLAhXklrxt8CXQ95GTNKHC3bHsCRin1gYNIdbtaKQ
        KBZsLqRve5bFMEsOqpORzYuxHBSCS6Cnwk95CKDRc1CtOShvvO9ZNZ8Autx6doHcjbisFs
        4T04uFjUgKm79EinEpTnvW2bOpg2qSONrG7MD1YmmcdW5oySdZsJoEHp9oUTAw==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-mldnf;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Eight-Battle: 35bb38347990090c_1677268440917_249620734
X-MC-Loop-Signature: 1677268440917:2454546175
X-MC-Ingress-Time: 1677268440917
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.123.200.110 (trex/6.7.1);
        Fri, 24 Feb 2023 19:54:00 +0000
Received: from offworld (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange ECDHE (P-256) server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgZH0gLxz2Q;
        Fri, 24 Feb 2023 11:53:58 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268440;
        bh=ks1BIS73vSFTP4WP3oyu3+LzlgtHANuVIUGPpKRWzDg=;
        h=Date:From:To:Cc:Subject:Content-Type;
        b=E49j/XA4mvbSB+wQ+2441Fsg5VZqYj41cMcHP6qbCAHYK50ZH+ap13lin+dk2izHH
         /DhPyvKDR0/w5AW7a719xOUHWc6eFTzZ6xt+AHCRYQG9pkxFcejbCrqHMP54ac3I8N
         MLQgdh8HNrmHmI6dUclKsHnas4CuIP6xbml1Ns53/alK5ITX+WgvLWMY7n1wwg9vwY
         RF2ZacO2OzAb06tgc+Xltj7rObLpSPnM3msZoeqwSHgyczA6O35ER5bQeyPmvEyQ6T
         BBdZuzttgxuyGPj5yuzS7HSA59Tft/4PcIL7mx5ixSeWKD6YDuMV69N06fSn7TpJSa
         XbuvMsMuyZBFw==
Date: Fri, 24 Feb 2023 11:25:31 -0800
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave.jiang@intel.com
Subject: Re: [PATCH v3 0/7] cxl: Background cmds and device sanitation
Message-ID: <20230224192531.ahohjuzrtp5flkec@offworld>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Disposition: inline
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
User-Agent: NeoMutt/20220429
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

+Cc Dave (sorry).

On Fri, 24 Feb 2023, Davidlohr Bueso wrote:

>Hello,
>
>This series adds support for the rest of the security related cxl operations
>which are not strictly dependent on PMEM.
>
>Patch 1 adds the required background cmd handling bits (polling and irq).
>This is really the main motivation of the series as there are various
>features that will need this regardless of sanitation.
>
>Patch 2 adds a new sysfs 'security/state' file, which shows "disabled" if
>no security features are available - which is more intuitive than no showing
>it.
>
>Patch 3 adds a way to check if the device is actively used by tracking regions
>with target the memdevice to sanitize. I realize this might not be what is
>desired and wanted to get the expectations for this. This is more of a RFC
>patch.
>
>Patches 4-7 add the Sanitation and Secure Erase support, per CXL3.0 specs.
>
>These changes have been tested with both the mock device as well as with qemu[0,1].
>
>Changes from v2 (https://lore.kernel.org/linux-cxl/20221206011501.464916-1-dave@stgolabs.net/):
>- Redid the bacground cmd handling to use a syncronous approach instead.
>- Added cxl_memdev_active_region() to check if the memdevice is being used
>  (actively decoding any HPA ranges).
>- Create a new security sysfs directory with a 'state' file which is always visible.
>- The sysfs files' to trigger the security commands is only visible if
>  cpu_cache_has_invalidate_memregion().
>- Added a sanitize test for the mock device.
>
>Please consider for v6.4.
>
>Thanks!
>
>[0]: https://github.com/davidlohr/qemu/commit/64a93a5b824b59d3b547f06f7fbb1269fb4790ce
>[1]: https://lore.kernel.org/linux-cxl/20230224194443.1990440-1-dave@stgolabs.net
>
>Davidlohr Bueso (7):
>  cxl/mbox: Add background cmd handling machinery
>  cxl/security: Add security state sysfs ABI
>  cxl/region: Add cxl_memdev_active_region()
>  cxl/mem: Support Sanitation
>  cxl/test: Add "Sanitize" opcode support
>  cxl/mem: Support Secure Erase
>  cxl/test: Add "Secure Erase" opcode support
>
> Documentation/ABI/testing/sysfs-bus-cxl |  34 +++++++
> drivers/cxl/core/mbox.c                 | 117 +++++++++++++++++++++++
> drivers/cxl/core/memdev.c               | 119 ++++++++++++++++++++++++
> drivers/cxl/core/region.c               |  33 ++++++-
> drivers/cxl/cxl.h                       |  13 +++
> drivers/cxl/cxlmem.h                    |  14 +++
> drivers/cxl/pci.c                       | 100 +++++++++++++++++++-
> tools/testing/cxl/test/mem.c            |  52 +++++++++++
> 8 files changed, 476 insertions(+), 6 deletions(-)
>
>--
>2.39.2
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id ED595C6FA8E
	for <linux-cxl@archiver.kernel.org>; Fri, 24 Feb 2023 19:54:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229580AbjBXTyw (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Fri, 24 Feb 2023 14:54:52 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:46160 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229638AbjBXTyv (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Fri, 24 Feb 2023 14:54:51 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id DA12E628FC
        for <linux-cxl@vger.kernel.org>; Fri, 24 Feb 2023 11:54:49 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 29A403C1F46;
        Fri, 24 Feb 2023 19:47:10 +0000 (UTC)
Received: from pdx1-sub0-mail-a250.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 901A93C1F5C;
        Fri, 24 Feb 2023 19:47:09 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677268029; a=rsa-sha256;
        cv=none;
        b=JjULwDOF8mhC7wVOgllUnm9o4Cl+eQmWpvsZL7fPIO7EKhTZCBLOU8oNsP+quB02rLIhfq
        0j6OlKS/UtGn7l3p7aSFWl8ti3kAyJLHZg26S++zEVfElWEX7n/lfgC79TZUfZKcxtagng
        PvnfgcuJWqonM6k9lgll9xSLdjfoeMW2/lpufz3RgruX8BNJo9lq2rallrQA4jh6iZDgyd
        EiPO5aqkzKrbk/YoCsJkUn2dr9iQXLSlnoraFvQRHz0LcirBS5KqjgxqEB0KgcqL+mVBlk
        3AdZorkTIMbRJvCgXZpDwJh6W7N8LX+1Ys/gqxbf2pwtjHCGzfNhCOuwioJecQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677268029;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=GiOeG5lrocXfUVyExHZRoYMiICaJ3EVxSwc8oBrFE+8=;
        b=uWoB1YNN+pKqg+oVu8ywgUvuiYsLGIRHYy2dTDiJKKRK+jclBCE62EofxPNPIoFKROht8X
        hDbx5CIQUhmGncV3NqDCdhynhH3fX0GluyAJDajrT6MAW9kd+gv52lX32xsnmi3vE8foM6
        zJVBZ2QavPU3+6aXPKCJywrViZt8hbP2Iy1zJRrloEjs7sIvyO06WQ4walkeGdFstVCK+H
        HZiUUleGaEVNEODDTnYGufYQ6HEtI7b+E3JJZHGA21pV95jwXHc6PZQW09hi1I5bgY4R0K
        HUOheCIkBzcmpZH2fr/cvOg7CJwzsoeB7WLmpRNNssnq1CG74CNGlCS+FNmgzA==
ARC-Authentication-Results: i=1;
        rspamd-9788b98bc-x62tj;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Versed-Tart: 0317de5f04cc1a46_1677268029943_6978840
X-MC-Loop-Signature: 1677268029943:48012232
X-MC-Ingress-Time: 1677268029943
Received: from pdx1-sub0-mail-a250.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.116.179.67 (trex/6.7.1);
        Fri, 24 Feb 2023 19:47:09 +0000
Received: from offworld.. (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a250.dreamhost.com (Postfix) with ESMTPSA id 4PNgQN2DWqz2d;
        Fri, 24 Feb 2023 11:47:08 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677268029;
        bh=GiOeG5lrocXfUVyExHZRoYMiICaJ3EVxSwc8oBrFE+8=;
        h=From:To:Cc:Subject:Date:Content-Transfer-Encoding;
        b=mpMYESCo8OrAaWMufta4RtYCKwsEuM9G0rpz5p7wA3IKnVJ8AV5E9IT7bq8CBdJo9
         1Hm9EsMrkyvEVYYcrg8Fbll/i5kuyut6j5QZtWyGEC9UtwxRCXC1tnMXWLKmtOru6e
         MBv+US/TW8Qw6Y/iqiyzD2LXzc1naDVlL37MHyFV7/1UCs7Oq167uUvlbTCnsdSnhL
         6GclikV/0Hc1M5MZXwKyYcre62Krj1nKlSPRGY0ncvjHT/LQ6CrZuHpThQxqjjoo7G
         zmOodOmHL8yW4beqibdQXkjeMLOg6xyFijpgcIaMejZJn9GC62I/7scJoRJ/MQq4Rr
         hKkfaH0MQGV8Q==
From: Davidlohr Bueso <dave@stgolabs.net>
To: dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org, dave@stgolabs.net
Subject: [PATCH 6/7] cxl/mem: Support Secure Erase
Date: Fri, 24 Feb 2023 11:46:51 -0800
Message-Id: <20230224194652.1990604-7-dave@stgolabs.net>
X-Mailer: git-send-email 2.39.2
In-Reply-To: <20230224194652.1990604-1-dave@stgolabs.net>
References: <20230224194652.1990604-1-dave@stgolabs.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Implement support for the non-pmem exclusive secure erase, per
CXL specs.

To properly support this feature, create a 'security/erase' sysfs
file that when read will list the current pmem security state and
when written to, perform the requested operation.

Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
---
 Documentation/ABI/testing/sysfs-bus-cxl | 12 ++++++
 drivers/cxl/core/mbox.c                 | 56 +++++++++++++++++++++++++
 drivers/cxl/core/memdev.c               | 32 +++++++++++++-
 drivers/cxl/cxlmem.h                    |  2 +
 4 files changed, 101 insertions(+), 1 deletion(-)

diff --git a/Documentation/ABI/testing/sysfs-bus-cxl b/Documentation/ABI/testing/sysfs-bus-cxl
index b315d78b7e91..91a74e27f248 100644
--- a/Documentation/ABI/testing/sysfs-bus-cxl
+++ b/Documentation/ABI/testing/sysfs-bus-cxl
@@ -80,6 +80,18 @@ Description:
 	       to be flushed. If this sysfs entry is not present then the
 	       architecture does not support security features.
 
+What:          /sys/bus/cxl/devices/memX/security/erase
+Date:          February, 2023
+KernelVersion: v6.4
+Contact:       linux-cxl@vger.kernel.org
+Description:
+	       (WO) Write a boolean 'true' string value to this attribute to
+	       secure erase the device to securely re-purpose or decommission
+	       it. This is done by hanging the media encryption keys for all
+	       user data areas of the device. This causes all CPU caches to
+	       be flushed. If this sysfs entry is not present then the
+	       architecture does not support security features.
+
 What:		/sys/bus/cxl/devices/*/devtype
 Date:		June, 2021
 KernelVersion:	v5.14
diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
index 885de3506735..bf206fe26839 100644
--- a/drivers/cxl/core/mbox.c
+++ b/drivers/cxl/core/mbox.c
@@ -1082,6 +1082,62 @@ int cxl_mem_sanitize(struct cxl_dev_state *cxlds)
 }
 EXPORT_SYMBOL_NS_GPL(cxl_mem_sanitize, CXL);
 
+/**
+ * cxl_mem_secure_erase() - Send secure erase command to the device.
+ * @cxlds: The device data for the operation
+ *
+ * Return: 0 if the command was executed successfully.
+ * Upon error, return the result of the mailbox command or -EINVAL if
+ * security requirements are not met. CPU caches are flushed before and
+ * after succesful completion of each command.
+ *
+ * See CXL 3.0 @8.2.9.8.5.2 Secure Erase.
+ */
+int cxl_mem_secure_erase(struct cxl_dev_state *cxlds)
+{
+	int rc;
+	u32 sec_out = 0;
+	struct cxl_get_security_output {
+		__le32 flags;
+	} out;
+	struct cxl_mbox_cmd sec_cmd = {
+		.opcode = CXL_MBOX_OP_GET_SECURITY_STATE,
+		.payload_out = &out,
+		.size_out = sizeof(out),
+	};
+	struct cxl_mbox_cmd mbox_cmd = {
+		.opcode = CXL_MBOX_OP_SECURE_ERASE,
+	};
+
+	if (!cpu_cache_has_invalidate_memregion())
+		return -EINVAL;
+
+	rc = cxl_internal_send_cmd(cxlds, &sec_cmd);
+	if (rc < 0) {
+		dev_err(cxlds->dev, "Failed to get security state : %d", rc);
+		return rc;
+	}
+
+	sec_out = le32_to_cpu(out.flags);
+	if (sec_out & CXL_PMEM_SEC_STATE_USER_PASS_SET)
+		return -EINVAL;
+
+	if (sec_out & CXL_PMEM_SEC_STATE_LOCKED)
+		return -EINVAL;
+
+	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
+
+	rc = cxl_internal_send_cmd(cxlds, &mbox_cmd);
+	if (rc < 0) {
+		dev_err(cxlds->dev, "Failed to secure erase device : %d", rc);
+		return rc;
+	}
+
+	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
+	return 0;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_mem_secure_erase, CXL);
+
 static int add_dpa_res(struct device *dev, struct resource *parent,
 		       struct resource *res, resource_size_t start,
 		       resource_size_t size, const char *type)
diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index a1bb095d081c..6334a0d1a925 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -155,6 +155,34 @@ static ssize_t security_sanitize_store(struct device *dev,
 static struct device_attribute dev_attr_security_sanitize =
 	__ATTR(sanitize, 0200, NULL, security_sanitize_store);
 
+static ssize_t security_erase_store(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t len)
+{
+	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
+	struct cxl_dev_state *cxlds = cxlmd->cxlds;
+	ssize_t rc;
+	bool erase;
+
+	rc = kstrtobool(buf, &erase);
+	if (rc)
+		return rc;
+
+	if (erase) {
+		if (cxl_memdev_active_region(cxlmd))
+			return -EBUSY;
+
+		rc = cxl_mem_secure_erase(cxlds);
+	}
+
+	if (rc == 0)
+		rc = len;
+	return rc;
+}
+
+static struct device_attribute dev_attr_security_erase =
+	__ATTR(sanitize, 0200, NULL, security_erase_store);
+
 static ssize_t serial_show(struct device *dev, struct device_attribute *attr,
 			   char *buf)
 {
@@ -217,6 +245,7 @@ static struct attribute_group cxl_memdev_pmem_attribute_group = {
 static struct attribute *cxl_memdev_security_attributes[] = {
 	&dev_attr_security_state.attr,
 	&dev_attr_security_sanitize.attr,
+	&dev_attr_security_erase.attr,
 	NULL,
 };
 
@@ -224,7 +253,8 @@ static umode_t cxl_security_visible(struct kobject *kobj,
 				    struct attribute *a, int n)
 {
 	if (!cpu_cache_has_invalidate_memregion() &&
-	    a == &dev_attr_security_sanitize.attr)
+	    (a == &dev_attr_security_sanitize.attr ||
+	     a == &dev_attr_security_erase.attr))
 		return 0;
 	return a->mode;
 }
diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
index 0d2009b36933..2cf9ec3242a6 100644
--- a/drivers/cxl/cxlmem.h
+++ b/drivers/cxl/cxlmem.h
@@ -332,6 +332,7 @@ enum cxl_opcode {
 	CXL_MBOX_OP_SCAN_MEDIA		= 0x4304,
 	CXL_MBOX_OP_GET_SCAN_MEDIA	= 0x4305,
 	CXL_MBOX_OP_SANITIZE		= 0x4400,
+	CXL_MBOX_OP_SECURE_ERASE	= 0x4401,
 	CXL_MBOX_OP_GET_SECURITY_STATE	= 0x4500,
 	CXL_MBOX_OP_SET_PASSPHRASE	= 0x4501,
 	CXL_MBOX_OP_DISABLE_PASSPHRASE	= 0x4502,
@@ -632,6 +633,7 @@ static inline void cxl_mem_active_dec(void)
 #endif
 
 int cxl_mem_sanitize(struct cxl_dev_state *cxlds);
+int cxl_mem_secure_erase(struct cxl_dev_state *cxlds);
 
 struct cxl_hdm {
 	struct cxl_component_regs regs;
-- 
2.39.2


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 20CAFC64ED6
	for <linux-cxl@archiver.kernel.org>; Mon, 27 Feb 2023 03:46:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229751AbjB0Dqu (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Sun, 26 Feb 2023 22:46:50 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:54404 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229711AbjB0Dqt (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Sun, 26 Feb 2023 22:46:49 -0500
Received: from mga03.intel.com (mga03.intel.com [134.134.136.65])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B2F911CAFE
        for <linux-cxl@vger.kernel.org>; Sun, 26 Feb 2023 19:46:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1677469607; x=1709005607;
  h=date:from:to:cc:subject:message-id:references:
   mime-version:in-reply-to;
  bh=JFJhPpVA4adnYLS1eEsWvuzd7nJTu1KuJcA0IdpvaZU=;
  b=XCvvAm1YiBSXIR4gOZjYtcFKPxEoGDrjGr6E32SP70w7ulZi7a4BGtU6
   UUUakOsOsGnrWuW78fgzO2GES6mT59O6XYCZ2u7BA/EdZDD2+WkmzpFql
   f01DuILRXPyhfwV7rl0Ollygk/OBKY9I7OSLHYhPGRiv5Q1gm9J2FiDg7
   f7dR+I5mygeGwQFUvqmiLhUGy2Hvaf0sMj82T6UTH/6PTK0Wn2A28KNPI
   K0DgJvWeCwqdkqTVE7ZiARU1WyPkY5kJ+k2uCKnhhFP0GXU2vx8tjV5o9
   iF8vQhl4m0Jh5RvY/n7o0862BzprwJ3cK+fjzBpAvfEGBOjzfR5JtTrc1
   A==;
X-IronPort-AV: E=McAfee;i="6500,9779,10633"; a="336050913"
X-IronPort-AV: E=Sophos;i="5.97,330,1669104000"; 
   d="scan'208";a="336050913"
Received: from fmsmga006.fm.intel.com ([10.253.24.20])
  by orsmga103.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 26 Feb 2023 19:46:46 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10633"; a="919134954"
X-IronPort-AV: E=Sophos;i="5.97,330,1669104000"; 
   d="scan'208";a="919134954"
Received: from aschofie-mobl2.amr.corp.intel.com (HELO aschofie-mobl2) ([10.209.83.169])
  by fmsmga006-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 26 Feb 2023 19:46:45 -0800
Date: Sun, 26 Feb 2023 19:46:43 -0800
From: Alison Schofield <alison.schofield@intel.com>
To: Davidlohr Bueso <dave@stgolabs.net>
Cc: dan.j.williams@intel.com, jonathan.cameron@huawei.com,
        ira.weiny@intel.com, fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
Subject: Re: [PATCH 3/7] cxl/region: Add cxl_memdev_active_region()
Message-ID: <Y/wno8C4bK3XNoUD@aschofie-mobl2>
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-4-dave@stgolabs.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20230224194652.1990604-4-dave@stgolabs.net>
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

On Fri, Feb 24, 2023 at 11:46:48AM -0800, Davidlohr Bueso wrote:
> Track all regions associated to a memdev in order to
> tell if the device might be in active use.

Hi David,

I took a look here as I've been poked around in this space when looking
for 'region' names to associate with memdev poison trace events. [1]

How does the list created get used?

If we only need to know that this memdev is mapped in any region,
so don't touch it, we can look at it's port->commit_end. If that
commit_end >= 0, we can look at each endpoint to find the regions
it's mapped to.

Not sure if any of that is useful for what you need to do, but
it sounded familiar.

[1] https://lore.kernel.org/linux-cxl/62d24b380514c8c39b651aca79c81a424f0b5b37.1676685180.git.alison.schofield@intel.com/

Alison

> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
> ---
>  drivers/cxl/core/memdev.c |  1 +
>  drivers/cxl/core/region.c | 33 +++++++++++++++++++++++++++++++--
>  drivers/cxl/cxl.h         |  6 ++++++
>  drivers/cxl/cxlmem.h      |  4 ++++
>  4 files changed, 42 insertions(+), 2 deletions(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 47cc625bb1b0..68c0ab06b999 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -306,6 +306,7 @@ static struct cxl_memdev *cxl_memdev_alloc(struct cxl_dev_state *cxlds,
>  	dev->type = &cxl_memdev_type;
>  	device_set_pm_not_required(dev);
>  	INIT_WORK(&cxlmd->detach_work, detach_memdev);
> +	INIT_LIST_HEAD(&cxlmd->region_list);
>  
>  	cdev = &cxlmd->cdev;
>  	cdev_init(cdev, fops);
> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
> index f29028148806..cea9de6457b9 100644
> --- a/drivers/cxl/core/region.c
> +++ b/drivers/cxl/core/region.c
> @@ -1730,7 +1730,10 @@ void cxl_decoder_kill_region(struct cxl_endpoint_decoder *cxled)
>  {
>  	down_write(&cxl_region_rwsem);
>  	cxled->mode = CXL_DECODER_DEAD;
> -	cxl_region_detach(cxled);
> +	if (!cxl_region_detach(cxled)) {
> +		struct cxl_region *cxlr = cxled->cxld.region;
> +		list_del(&cxlr->node);
> +	}
>  	up_write(&cxl_region_rwsem);
>  }
>  
> @@ -1749,8 +1752,12 @@ static int attach_target(struct cxl_region *cxlr,
>  
>  	down_read(&cxl_dpa_rwsem);
>  	rc = cxl_region_attach(cxlr, cxled, pos);
> -	if (rc == 0)
> +	if (rc == 0) {
> +		struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
> +
>  		set_bit(CXL_REGION_F_INCOHERENT, &cxlr->flags);
> +		list_add_tail(&cxlr->node, &cxlmd->region_list);
> +	}
>  	up_read(&cxl_dpa_rwsem);
>  	up_write(&cxl_region_rwsem);
>  	return rc;
> @@ -1778,6 +1785,8 @@ static int detach_target(struct cxl_region *cxlr, int pos)
>  	}
>  
>  	rc = cxl_region_detach(p->targets[pos]);
> +	if (rc == 0)
> +		list_del(&cxlr->node);
>  out:
>  	up_write(&cxl_region_rwsem);
>  	return rc;
> @@ -2654,6 +2663,26 @@ int cxl_add_to_region(struct cxl_port *root, struct cxl_endpoint_decoder *cxled)
>  }
>  EXPORT_SYMBOL_NS_GPL(cxl_add_to_region, CXL);
>  
> +bool cxl_memdev_active_region(struct cxl_memdev *cxlmd)
> +{
> +	bool ret = false;
> +	struct cxl_region *cxlr;
> +
> +	down_read(&cxl_region_rwsem);
> +	list_for_each_entry(cxlr, &cxlmd->region_list, node) {
> +		struct cxl_region_params *p = &cxlr->params;
> +
> +		if (p->state >= CXL_CONFIG_ACTIVE) {
> +			ret = true;
> +			break;
> +		}
> +	}
> +	up_read(&cxl_region_rwsem);
> +
> +	return ret;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_memdev_active_region, CXL);
> +
>  static int cxl_region_invalidate_memregion(struct cxl_region *cxlr)
>  {
>  	if (!test_bit(CXL_REGION_F_INCOHERENT, &cxlr->flags))
> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
> index b834e55375e3..e211241b079b 100644
> --- a/drivers/cxl/cxl.h
> +++ b/drivers/cxl/cxl.h
> @@ -502,6 +502,7 @@ struct cxl_region {
>  	struct cxl_pmem_region *cxlr_pmem;
>  	unsigned long flags;
>  	struct cxl_region_params params;
> +	struct list_head node;
>  };
>  
>  struct cxl_nvdimm_bridge {
> @@ -773,6 +774,7 @@ struct cxl_pmem_region *to_cxl_pmem_region(struct device *dev);
>  int cxl_add_to_region(struct cxl_port *root,
>  		      struct cxl_endpoint_decoder *cxled);
>  struct cxl_dax_region *to_cxl_dax_region(struct device *dev);
> +bool cxl_memdev_active_region(struct cxl_memdev *cxlmd);
>  #else
>  static inline bool is_cxl_pmem_region(struct device *dev)
>  {
> @@ -791,6 +793,10 @@ static inline struct cxl_dax_region *to_cxl_dax_region(struct device *dev)
>  {
>  	return NULL;
>  }
> +static inline bool cxl_memdev_active_region(struct cxl_memdev *cxlmd)
> +{
> +	return false;
> +}
>  #endif
>  
>  /*
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index 934076254d52..4e31f3234519 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -5,6 +5,7 @@
>  #include <uapi/linux/cxl_mem.h>
>  #include <linux/cdev.h>
>  #include <linux/uuid.h>
> +#include <linux/list.h>
>  #include "cxl.h"
>  
>  /* CXL 2.0 8.2.8.5.1.1 Memory Device Status Register */
> @@ -40,6 +41,8 @@
>   * @cxl_nvd: optional bridge to an nvdimm if the device supports pmem
>   * @id: id number of this memdev instance.
>   * @depth: endpoint port depth
> + * @region_list: List of regions that have as target the endpoint
> + *               decoder associated with this memdev
>   */
>  struct cxl_memdev {
>  	struct device dev;
> @@ -50,6 +53,7 @@ struct cxl_memdev {
>  	struct cxl_nvdimm *cxl_nvd;
>  	int id;
>  	int depth;
> +	struct list_head region_list;
>  };
>  
>  static inline struct cxl_memdev *to_cxl_memdev(struct device *dev)
> -- 
> 2.39.2
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 9CAD3C64ED6
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 16:28:05 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229633AbjB1Q2E (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 11:28:04 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:50552 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229509AbjB1Q2D (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 11:28:03 -0500
Received: from mga06.intel.com (mga06b.intel.com [134.134.136.31])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 910325584
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 08:27:16 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1677601636; x=1709137636;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=MXtLUF543DcqBkx8tKuuMD7myNhisfWawP0Bs17rC5I=;
  b=b29GPUnJdFJZ4AQcB0h3PshDM8xaiYOdvRjbfj9oRDU5yWNujoVER2N7
   N6xvFEZRTWHG1nRYqD2FNQPu1EbtYn6XqxCOI7De1x9vW12Tr5MWqX2zP
   8OO7mekqfagslgmg7oJ5v7V/7qEzACRXbGwlzlLcHV+n8EPOvyN3X3jl1
   KuLn+mqJVcnervimF+bhIffzOp0AWGEoW/Sg4yQu2p8UBpaPWmXVn4p9H
   zhr9cr+tBQxfEZSJi1j8RjDuJOx7VYYNDyfd0VwuaaKkCKLDmyY91dO04
   bBYIH8nyiQH3Zgcdd2RZhCexb9pj2q6w9+89sNN1uyP7UrDf6rGs+pTZn
   Q==;
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="396750588"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="396750588"
Received: from orsmga004.jf.intel.com ([10.7.209.38])
  by orsmga104.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 08:27:02 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="798106578"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="798106578"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.212.1.236]) ([10.212.1.236])
  by orsmga004-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 08:27:02 -0800
Message-ID: <029b177d-7b91-77f7-a830-5f5ebe3ab0b8@intel.com>
Date: Tue, 28 Feb 2023 09:27:01 -0700
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Firefox/102.0 Thunderbird/102.6.0
Subject: Re: [PATCH 1/7] cxl/mbox: Add background cmd handling machinery
Content-Language: en-US
To: Davidlohr Bueso <dave@stgolabs.net>, dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-2-dave@stgolabs.net>
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20230224194652.1990604-2-dave@stgolabs.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org



On 2/24/23 12:46 PM, Davidlohr Bueso wrote:
> This adds support for handling background operations, as defined in
> the CXL 3.0 spec. Commands that can take too long (over ~2 seconds)
> can run in the background asynchronously (to the hardware). Currently
> these are limited to Maintenance, transfer/activate Firmware, Scan
> Media, Sanitize (aka overwrite), and VPPB bind/unbind.
> 
> The driver will deal with such commands synchronously, blocking
> all other incoming commands for a specified period of time, allowing
> time-slicing the command such that the caller can send incremental
> requests to avoid monopolizing the driver/device. This approach
> makes the code simpler, where any out of sync (timeout) between the
> driver and hardware is just disregarded as an invalid state until
> the next successful submission.
> 
> On devices where mbox interrupts are supported, this will still use
> a poller that will wakeup in the specified wait intervals. The irq
> handler will simply awake a blocked cmd, which is also safe vs a
> task that is either waking (timing out) or already awoken.
> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>

Just a minor comment inline. Otherwise
Reviewed-by: Dave Jiang <dave.jiang@intel.com>

> ---
>   drivers/cxl/cxl.h    |   7 +++
>   drivers/cxl/cxlmem.h |   6 +++
>   drivers/cxl/pci.c    | 100 +++++++++++++++++++++++++++++++++++++++++--
>   3 files changed, 109 insertions(+), 4 deletions(-)
> 
> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
> index d853a0238ad7..b834e55375e3 100644
> --- a/drivers/cxl/cxl.h
> +++ b/drivers/cxl/cxl.h
> @@ -176,14 +176,21 @@ static inline int ways_to_eiw(unsigned int ways, u8 *eiw)
>   /* CXL 2.0 8.2.8.4 Mailbox Registers */
>   #define CXLDEV_MBOX_CAPS_OFFSET 0x00
>   #define   CXLDEV_MBOX_CAP_PAYLOAD_SIZE_MASK GENMASK(4, 0)
> +#define   CXLDEV_MBOX_CAP_IRQ_MSGNUM_MASK GENMASK(10, 7)
> +#define   CXLDEV_MBOX_CAP_BG_CMD_IRQ BIT(6)
>   #define CXLDEV_MBOX_CTRL_OFFSET 0x04
>   #define   CXLDEV_MBOX_CTRL_DOORBELL BIT(0)
> +#define   CXLDEV_MBOX_CTRL_BG_CMD_IRQ BIT(2)
>   #define CXLDEV_MBOX_CMD_OFFSET 0x08
>   #define   CXLDEV_MBOX_CMD_COMMAND_OPCODE_MASK GENMASK_ULL(15, 0)
>   #define   CXLDEV_MBOX_CMD_PAYLOAD_LENGTH_MASK GENMASK_ULL(36, 16)
>   #define CXLDEV_MBOX_STATUS_OFFSET 0x10
> +#define   CXLDEV_MBOX_STATUS_BG_CMD BIT(0)
>   #define   CXLDEV_MBOX_STATUS_RET_CODE_MASK GENMASK_ULL(47, 32)
>   #define CXLDEV_MBOX_BG_CMD_STATUS_OFFSET 0x18
> +#define   CXLDEV_MBOX_BG_CMD_COMMAND_OPCODE_MASK GENMASK_ULL(15, 0)
> +#define   CXLDEV_MBOX_BG_CMD_COMMAND_PCT_MASK GENMASK_ULL(22, 16)
> +#define   CXLDEV_MBOX_BG_CMD_COMMAND_RC_MASK GENMASK_ULL(47, 32)
>   #define CXLDEV_MBOX_PAYLOAD_OFFSET 0x20
>   
>   /*
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index ccbafc05a636..934076254d52 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -108,6 +108,9 @@ static inline struct cxl_ep *cxl_ep_load(struct cxl_port *port,
>    *            variable sized output commands, it tells the exact number of bytes
>    *            written.
>    * @min_out: (input) internal command output payload size validation
> + * @poll_count: (input)  Number of timeouts to attempt.
> + * @poll_interval: (input) Number of ms between mailbox background command
> + *                 polling intervals timeouts.
>    * @return_code: (output) Error code returned from hardware.
>    *
>    * This is the primary mechanism used to send commands to the hardware.
> @@ -123,6 +126,8 @@ struct cxl_mbox_cmd {
>   	size_t size_in;
>   	size_t size_out;
>   	size_t min_out;
> +	int poll_count;
> +	u64 poll_interval;
>   	u16 return_code;
>   };
>   
> @@ -322,6 +327,7 @@ enum cxl_opcode {
>   	CXL_MBOX_OP_GET_SCAN_MEDIA_CAPS	= 0x4303,
>   	CXL_MBOX_OP_SCAN_MEDIA		= 0x4304,
>   	CXL_MBOX_OP_GET_SCAN_MEDIA	= 0x4305,
> +	CXL_MBOX_OP_SANITIZE		= 0x4400,
>   	CXL_MBOX_OP_GET_SECURITY_STATE	= 0x4500,
>   	CXL_MBOX_OP_SET_PASSPHRASE	= 0x4501,
>   	CXL_MBOX_OP_DISABLE_PASSPHRASE	= 0x4502,
> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> index 60b23624d167..26b6105e2797 100644
> --- a/drivers/cxl/pci.c
> +++ b/drivers/cxl/pci.c
> @@ -52,6 +52,8 @@ static unsigned short mbox_ready_timeout = 60;
>   module_param(mbox_ready_timeout, ushort, 0644);
>   MODULE_PARM_DESC(mbox_ready_timeout, "seconds to wait for mailbox ready");
>   
> +static DECLARE_WAIT_QUEUE_HEAD(mbox_wait);
> +
>   static int cxl_pci_mbox_wait_for_doorbell(struct cxl_dev_state *cxlds)
>   {
>   	const unsigned long start = jiffies;
> @@ -85,6 +87,25 @@ static int cxl_pci_mbox_wait_for_doorbell(struct cxl_dev_state *cxlds)
>   			    status & CXLMDEV_DEV_FATAL ? " fatal" : "",        \
>   			    status & CXLMDEV_FW_HALT ? " firmware-halt" : "")
>   
> +static irqreturn_t cxl_mbox_irq(int irq, void *id)
> +{
> +	/* short-circuit the wait in __cxl_pci_mbox_send_cmd() */
> +	wake_up(&mbox_wait);
> +	return IRQ_HANDLED;
> +}
> +
> +static bool cxl_mbox_background_complete(struct cxl_dev_state *cxlds)
> +{
> +	u64 bgcmd_status_reg;
> +	u32 pct;
> +
> +	bgcmd_status_reg = readq(cxlds->regs.mbox +
> +				 CXLDEV_MBOX_BG_CMD_STATUS_OFFSET);
> +	pct = FIELD_GET(CXLDEV_MBOX_BG_CMD_COMMAND_PCT_MASK, bgcmd_status_reg);
> +
> +	return pct == 100;
> +}
> +
>   /**
>    * __cxl_pci_mbox_send_cmd() - Execute a mailbox command
>    * @cxlds: The device state to communicate with.
> @@ -178,6 +199,56 @@ static int __cxl_pci_mbox_send_cmd(struct cxl_dev_state *cxlds,
>   	mbox_cmd->return_code =
>   		FIELD_GET(CXLDEV_MBOX_STATUS_RET_CODE_MASK, status_reg);
>   
> +	/*
> +	 * Handle the background command in a synchronous manner.
> +	 *
> +	 * All other mailbox commands will serialize/queue on the mbox_mutex,
> +	 * which we currently hold. Furthermore this also guarantees that
> +	 * cxl_mbox_background_complete() checks are safe amongst each other,
> +	 * in that no new bg operation can occur in between.
> +	 *
> +	 * With the exception of special cases that merit monopolizing the
> +	 * driver/device, bg operations are timesliced in accordance with
> +	 * the nature of the command being sent.
> +	 *
> +	 * In the event of timeout, the mailbox state is indeterminate
> +	 * until the next successful command submission and the driver
> +	 * can get back in sync with the hardware state.
> +	 */
> +	if (mbox_cmd->return_code == CXL_MBOX_CMD_RC_BACKGROUND) {
> +		u64 bg_status_reg;
> +		const bool timeslice = mbox_cmd->opcode != CXL_MBOX_OP_SANITIZE;
> +
> +		dev_dbg(dev, "Mailbox background operation started\n");
> +
> +		while (1) {
> +			if (wait_event_interruptible_timeout(
> +				mbox_wait, cxl_mbox_background_complete(cxlds),
> +				msecs_to_jiffies(mbox_cmd->poll_interval)) > 0)
> +				break;
> +
> +			if (timeslice && !--mbox_cmd->poll_count)
> +				break;
> +		}
> +
> +		if (!cxl_mbox_background_complete(cxlds)) {
> +			u64 md_status =
> +				readq(cxlds->regs.memdev + CXLMDEV_STATUS_OFFSET);
> +
> +			cxl_cmd_err(cxlds->dev, mbox_cmd, md_status,
> +				    "background timeout");
> +			return -ETIMEDOUT;
> +		}
> +
> +		bg_status_reg = readq(cxlds->regs.mbox +
> +				      CXLDEV_MBOX_BG_CMD_STATUS_OFFSET);
> +		mbox_cmd->return_code =
> +			FIELD_GET(CXLDEV_MBOX_BG_CMD_COMMAND_RC_MASK,
> +				  bg_status_reg);
> +
> +		dev_dbg(dev, "Mailbox background operation completed\n");

May be helpful to also emit the return_code in case of errors.

DJ

> +	}
> +
>   	if (mbox_cmd->return_code != CXL_MBOX_CMD_RC_SUCCESS) {
>   		dev_dbg(dev, "Mailbox operation had an error: %s\n",
>   			cxl_mbox_cmd_rc2str(mbox_cmd));
> @@ -222,8 +293,11 @@ static int cxl_pci_mbox_send(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *c
>   static int cxl_pci_setup_mailbox(struct cxl_dev_state *cxlds)
>   {
>   	const int cap = readl(cxlds->regs.mbox + CXLDEV_MBOX_CAPS_OFFSET);
> +	struct device *dev = cxlds->dev;
> +	struct pci_dev *pdev = to_pci_dev(dev);
>   	unsigned long timeout;
>   	u64 md_status;
> +	int rc, irq;
>   
>   	timeout = jiffies + mbox_ready_timeout * HZ;
>   	do {
> @@ -272,6 +346,24 @@ static int cxl_pci_setup_mailbox(struct cxl_dev_state *cxlds)
>   	dev_dbg(cxlds->dev, "Mailbox payload sized %zu",
>   		cxlds->payload_size);
>   
> +	if (!(cap & CXLDEV_MBOX_CAP_BG_CMD_IRQ)) {
> +		dev_dbg(dev, "Only Mailbox polling is supported");
> +		return 0;
> +	}
> +
> +	irq = pci_irq_vector(pdev,
> +			     FIELD_GET(CXLDEV_MBOX_CAP_IRQ_MSGNUM_MASK, cap));
> +	if (irq < 0)
> +		return irq;
> +
> +	rc = devm_request_irq(dev, irq, cxl_mbox_irq,
> +			      IRQF_SHARED, "mailbox", cxlds);
> +	if (rc)
> +		return rc;
> +
> +	writel(CXLDEV_MBOX_CTRL_BG_CMD_IRQ,
> +	       cxlds->regs.mbox + CXLDEV_MBOX_CTRL_OFFSET);
> +
>   	return 0;
>   }
>   
> @@ -757,6 +849,10 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
>   	if (rc)
>   		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");
>   
> +	rc = cxl_alloc_irq_vectors(pdev);
> +	if (rc)
> +		return rc;
> +
>   	rc = cxl_pci_setup_mailbox(cxlds);
>   	if (rc)
>   		return rc;
> @@ -777,10 +873,6 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
>   	if (rc)
>   		return rc;
>   
> -	rc = cxl_alloc_irq_vectors(pdev);
> -	if (rc)
> -		return rc;
> -
>   	cxlmd = devm_cxl_add_memdev(cxlds);
>   	if (IS_ERR(cxlmd))
>   		return PTR_ERR(cxlmd);

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 4DE7AC6FA8E
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 16:48:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229751AbjB1QsS (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 11:48:18 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39092 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229569AbjB1QsR (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 11:48:17 -0500
Received: from mga14.intel.com (mga14.intel.com [192.55.52.115])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 1FD4A34F58
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 08:47:42 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1677602862; x=1709138862;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=n9uaDmIcKlKwHCL793MAr/1gB+f9o+2Knaox8BR3CzM=;
  b=f1lBe9WTHBiBnwlJuz+3YqmmHR4wlBkceU9n/MP2WwemfYU6/aSuT1qq
   3DEbV6M+YtTzmonQd5IMF8emwLdQl56ecVdDmrVBegZGX3Kw6YnGzVMZh
   /GQhsytl1a83W1cruw9lJ3lZqXHGlT73+KQigRlDXfxTmRZfcpEYXjdeK
   U8UcA7jcEkgSMZ08HlhqfMUEXX7cFKAqi8PMPbEvNPlYbp+FZk2okR//Z
   vgcB7ehwNVcBAsWUV+WH8io4hAwiWyoBKVH4Jq/CZvWDUhEH1wu96o4n1
   B0txBnvr3SlLaeOMMXUsj5B6E16bYtFAg+lZhapGX0YimXFLKoc9Bnf0s
   g==;
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="334227440"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="334227440"
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
  by fmsmga103.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 08:47:41 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="738251637"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="738251637"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.212.1.236]) ([10.212.1.236])
  by fmsmga008-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 08:47:41 -0800
Message-ID: <44d17cd5-a580-1f1d-980c-137834ed6125@intel.com>
Date: Tue, 28 Feb 2023 09:47:40 -0700
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Firefox/102.0 Thunderbird/102.6.0
Subject: Re: [PATCH 2/7] cxl/security: Add security state sysfs ABI
Content-Language: en-US
To: Davidlohr Bueso <dave@stgolabs.net>, dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-3-dave@stgolabs.net>
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20230224194652.1990604-3-dave@stgolabs.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org



On 2/24/23 12:46 PM, Davidlohr Bueso wrote:
> This adds the sysfs memdev's security/ directory with
> a single 'state' file, which is always visible. In the
> case of unsupported security features, this will show
> disabled.
> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>

I don't have strong opinion on whether the state attrib should be 
visible if there's no security support, but this deviates from the 
nvdimm security state behavior.

Reviewed-by: Dave Jiang <dave.jiang@intel.com>

> ---
>   Documentation/ABI/testing/sysfs-bus-cxl |  8 ++++
>   drivers/cxl/core/memdev.c               | 49 +++++++++++++++++++++++++
>   2 files changed, 57 insertions(+)
> 
> diff --git a/Documentation/ABI/testing/sysfs-bus-cxl b/Documentation/ABI/testing/sysfs-bus-cxl
> index 3acf2f17a73f..e9c432a5a841 100644
> --- a/Documentation/ABI/testing/sysfs-bus-cxl
> +++ b/Documentation/ABI/testing/sysfs-bus-cxl
> @@ -57,6 +57,14 @@ Description:
>   		host PCI device for this memory device, emit the CPU node
>   		affinity for this device.
>   
> +What:		/sys/bus/cxl/devices/memX/security/state
> +Date:		February, 2023
> +KernelVersion:	v6.4
> +Contact:	linux-cxl@vger.kernel.org
> +Description:
> +		(RO) The security state for that device. The following states
> +		are available: frozen, locked, unlocked and disabled (which
> +		is also the case for any unsupported security features).
>   
>   What:		/sys/bus/cxl/devices/*/devtype
>   Date:		June, 2021
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 0af8856936dc..47cc625bb1b0 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -1,6 +1,7 @@
>   // SPDX-License-Identifier: GPL-2.0-only
>   /* Copyright(c) 2020 Intel Corporation. */
>   
> +#include <linux/memregion.h>
>   #include <linux/device.h>
>   #include <linux/slab.h>
>   #include <linux/idr.h>
> @@ -89,6 +90,43 @@ static ssize_t pmem_size_show(struct device *dev, struct device_attribute *attr,
>   static struct device_attribute dev_attr_pmem_size =
>   	__ATTR(size, 0444, pmem_size_show, NULL);
>   
> +static ssize_t security_state_show(struct device *dev,
> +				   struct device_attribute *attr, char *buf)
> +{
> +	u32 sec_out;
> +	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
> +	struct cxl_dev_state *cxlds = cxlmd->cxlds;
> +	struct cxl_get_security_output {
> +		__le32 flags;
> +	} out;
> +	struct cxl_mbox_cmd mbox_cmd = {
> +		.opcode = CXL_MBOX_OP_GET_SECURITY_STATE,
> +		.payload_out = &out,
> +		.size_out = sizeof(out),
> +	};
> +
> +	if (!cpu_cache_has_invalidate_memregion())
> +		goto disabled;
> +
> +	if (cxl_internal_send_cmd(cxlds, &mbox_cmd) < 0)
> +		goto disabled;
> +
> +	sec_out = le32_to_cpu(out.flags);
> +	if (!(sec_out & CXL_PMEM_SEC_STATE_USER_PASS_SET))
> +		goto disabled;
> +	if (sec_out & CXL_PMEM_SEC_STATE_FROZEN)
> +		return sysfs_emit(buf, "frozen\n");
> +	if (sec_out & CXL_PMEM_SEC_STATE_LOCKED)
> +		return sysfs_emit(buf, "locked\n");
> +	else
> +		return sysfs_emit(buf, "unlocked\n");
> +disabled:
> +	return sysfs_emit(buf, "disabled\n");
> +}
> +
> +static struct device_attribute dev_attr_security_state =
> +	__ATTR(state, 0444, security_state_show, NULL);
> +
>   static ssize_t serial_show(struct device *dev, struct device_attribute *attr,
>   			   char *buf)
>   {
> @@ -148,10 +186,21 @@ static struct attribute_group cxl_memdev_pmem_attribute_group = {
>   	.attrs = cxl_memdev_pmem_attributes,
>   };
>   
> +static struct attribute *cxl_memdev_security_attributes[] = {
> +	&dev_attr_security_state.attr,
> +	NULL,
> +};
> +
> +static struct attribute_group cxl_memdev_security_attribute_group = {
> +	.name = "security",
> +	.attrs = cxl_memdev_security_attributes,
> +};
> +
>   static const struct attribute_group *cxl_memdev_attribute_groups[] = {
>   	&cxl_memdev_attribute_group,
>   	&cxl_memdev_ram_attribute_group,
>   	&cxl_memdev_pmem_attribute_group,
> +	&cxl_memdev_security_attribute_group,
>   	NULL,
>   };
>   

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 55C2EC64ED6
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 17:28:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229520AbjB1R2c (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 12:28:32 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:49918 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229635AbjB1R2a (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 12:28:30 -0500
Received: from mga04.intel.com (mga04.intel.com [192.55.52.120])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B02B61E1DC
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 09:28:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1677605308; x=1709141308;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=7u2e5ZdUrxxj3A0Fs5cHBpKSd//x5dSo3IoLacMmaUI=;
  b=R2xQlrwtWNZXAP2h7oYr2VQ97Eg9LGdmSEVaV4UGqf9Qs+mH02Og9Nop
   IMut51nqJ7cwFPObh9pKqFs9rieZKxgi9Dgo79sEQB5KBEj1V60xpVSbu
   lAiy+U5Q+oe82YZ+sSdEkNlcM3uhxIe+3INDTZZlmLAiB0YfnuGUFe2Q1
   ziCMN203nf2TTY2HeH9nE8wODgxESxDaZc6M8jSbntx0h5wAfkn67rqpB
   vK351eJ0B92+U6+QYY0qq728jS+a7L3G1cHzMIXoLUQxFdgScwetfu/vv
   nb+p+DDws+q5hVxAvDB8Tq9ZUMgbli6MLoPsyw+ZPUdZkNqx8+3JfA7c/
   A==;
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="332927983"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="332927983"
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
  by fmsmga104.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 09:28:28 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="783948486"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="783948486"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.212.1.236]) ([10.212.1.236])
  by fmsmga002-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 09:28:28 -0800
Message-ID: <7333903c-4ef9-6f1f-9767-e32f228149b3@intel.com>
Date: Tue, 28 Feb 2023 10:28:27 -0700
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Firefox/102.0 Thunderbird/102.6.0
Subject: Re: [PATCH 4/7] cxl/mem: Support Sanitation
Content-Language: en-US
To: Davidlohr Bueso <dave@stgolabs.net>, dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-5-dave@stgolabs.net>
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20230224194652.1990604-5-dave@stgolabs.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org



On 2/24/23 12:46 PM, Davidlohr Bueso wrote:
> Implement support for the non-pmem exclusive sanitize (aka overwrite),
> per CXL specs. This is the baseline for the sanitize-on-release
> functionality.
> 
> To properly support this feature, create a 'security/sanitize' sysfs
> file that when read will list the current pmem security state and
> when written to, perform the requested operation.

I think this segment needs to be updated? The attrib is write only from 
the code below.

DJ

> 
> This operation can run in the background and the driver must wait
> for completion (no timeout), where the poller will awake every
> ~10 seconds (this could be further based on the size of the device).
> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
> ---
>   Documentation/ABI/testing/sysfs-bus-cxl | 14 ++++++
>   drivers/cxl/core/mbox.c                 | 61 +++++++++++++++++++++++++
>   drivers/cxl/core/memdev.c               | 39 ++++++++++++++++
>   drivers/cxl/cxlmem.h                    |  2 +
>   4 files changed, 116 insertions(+)
> 
> diff --git a/Documentation/ABI/testing/sysfs-bus-cxl b/Documentation/ABI/testing/sysfs-bus-cxl
> index e9c432a5a841..b315d78b7e91 100644
> --- a/Documentation/ABI/testing/sysfs-bus-cxl
> +++ b/Documentation/ABI/testing/sysfs-bus-cxl
> @@ -66,6 +66,20 @@ Description:
>   		are available: frozen, locked, unlocked and disabled (which
>   		is also the case for any unsupported security features).
>   
> +What:          /sys/bus/cxl/devices/memX/security/sanitize
> +Date:          February, 2023
> +KernelVersion: v6.4
> +Contact:       linux-cxl@vger.kernel.org
> +Description:
> +	       (WO) Write a boolean 'true' string value to this attribute to
> +	       sanitize the device to securely re-purpose or decommission it.
> +	       This is done by ensuring that all user data and meta-data,
> +	       whether it resides in persistent capacity, volatile capacity,
> +	       or the LSA, is made permanently unavailable by whatever means
> +	       is appropriate for the media type. This causes all CPU caches
> +	       to be flushed. If this sysfs entry is not present then the
> +	       architecture does not support security features.
> +
>   What:		/sys/bus/cxl/devices/*/devtype
>   Date:		June, 2021
>   KernelVersion:	v5.14
> diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
> index f2addb457172..885de3506735 100644
> --- a/drivers/cxl/core/mbox.c
> +++ b/drivers/cxl/core/mbox.c
> @@ -1,6 +1,7 @@
>   // SPDX-License-Identifier: GPL-2.0-only
>   /* Copyright(c) 2020 Intel Corporation. All rights reserved. */
>   #include <linux/io-64-nonatomic-lo-hi.h>
> +#include <linux/memregion.h>
>   #include <linux/security.h>
>   #include <linux/debugfs.h>
>   #include <linux/ktime.h>
> @@ -1021,6 +1022,66 @@ int cxl_dev_state_identify(struct cxl_dev_state *cxlds)
>   }
>   EXPORT_SYMBOL_NS_GPL(cxl_dev_state_identify, CXL);
>   
> +/**
> + * cxl_mem_sanitize() - Send sanitation (aka overwrite) command to the device.
> + * @cxlds: The device data for the operation
> + *
> + * Return: 0 if the command was executed successfully, regardless of
> + * whether or not the actual security operation is done in the background.
> + * Upon error, return the result of the mailbox command or -EINVAL if
> + * security requirements are not met. CPU caches are flushed before and
> + * after succesful completion of each command.
> + *
> + * See CXL 3.0 @8.2.9.8.5.1 Sanitize.
> + */
> +int cxl_mem_sanitize(struct cxl_dev_state *cxlds)
> +{
> +	int rc;
> +	u32 sec_out = 0;
> +	struct cxl_get_security_output {
> +		__le32 flags;
> +	} out;
> +	struct cxl_mbox_cmd sec_cmd = {
> +		.opcode = CXL_MBOX_OP_GET_SECURITY_STATE,
> +		.payload_out = &out,
> +		.size_out = sizeof(out),
> +	};
> +	struct cxl_mbox_cmd mbox_cmd = {
> +		.opcode = CXL_MBOX_OP_SANITIZE,
> +		.poll_interval = 10000UL,
> +	};
> +
> +	if (!cpu_cache_has_invalidate_memregion())
> +		return -EINVAL;
> +
> +	rc = cxl_internal_send_cmd(cxlds, &sec_cmd);
> +	if (rc < 0) {
> +		dev_err(cxlds->dev, "Failed to get security state : %d", rc);
> +		return rc;
> +	}
> +
> +	/*
> +	 * Prior to using these commands, any security applied to
> +	 * the user data areas of the device shall be DISABLED (or
> +	 * UNLOCKED for secure erase case).
> +	 */
> +	sec_out = le32_to_cpu(out.flags);
> +	if (sec_out & CXL_PMEM_SEC_STATE_USER_PASS_SET)
> +		return -EINVAL;
> +
> +	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
> +
> +	rc = cxl_internal_send_cmd(cxlds, &mbox_cmd);
> +	if (rc < 0) {
> +		dev_err(cxlds->dev, "Failed to sanitize device : %d", rc);
> +		return rc;
> +	}
> +
> +	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
> +	return 0;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_mem_sanitize, CXL);
> +
>   static int add_dpa_res(struct device *dev, struct resource *parent,
>   		       struct resource *res, resource_size_t start,
>   		       resource_size_t size, const char *type)
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 68c0ab06b999..a1bb095d081c 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -127,6 +127,34 @@ static ssize_t security_state_show(struct device *dev,
>   static struct device_attribute dev_attr_security_state =
>   	__ATTR(state, 0444, security_state_show, NULL);
>   
> +static ssize_t security_sanitize_store(struct device *dev,
> +				       struct device_attribute *attr,
> +				       const char *buf, size_t len)
> +{
> +	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
> +	struct cxl_dev_state *cxlds = cxlmd->cxlds;
> +	ssize_t rc;
> +	bool sanitize;
> +
> +	rc = kstrtobool(buf, &sanitize);
> +	if (rc)
> +		return rc;
> +
> +	if (sanitize) {
> +		if (cxl_memdev_active_region(cxlmd))
> +			return -EBUSY;
> +
> +		rc = cxl_mem_sanitize(cxlds);
> +	}
> +
> +	if (rc == 0)
> +		rc = len;
> +	return rc;
> +}
> +
> +static struct device_attribute dev_attr_security_sanitize =
> +	__ATTR(sanitize, 0200, NULL, security_sanitize_store);
> +
>   static ssize_t serial_show(struct device *dev, struct device_attribute *attr,
>   			   char *buf)
>   {
> @@ -188,11 +216,22 @@ static struct attribute_group cxl_memdev_pmem_attribute_group = {
>   
>   static struct attribute *cxl_memdev_security_attributes[] = {
>   	&dev_attr_security_state.attr,
> +	&dev_attr_security_sanitize.attr,
>   	NULL,
>   };
>   
> +static umode_t cxl_security_visible(struct kobject *kobj,
> +				    struct attribute *a, int n)
> +{
> +	if (!cpu_cache_has_invalidate_memregion() &&
> +	    a == &dev_attr_security_sanitize.attr)
> +		return 0;
> +	return a->mode;
> +}
> +
>   static struct attribute_group cxl_memdev_security_attribute_group = {
>   	.name = "security",
> +	.is_visible = cxl_security_visible,
>   	.attrs = cxl_memdev_security_attributes,
>   };
>   
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index 4e31f3234519..0d2009b36933 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -631,6 +631,8 @@ static inline void cxl_mem_active_dec(void)
>   }
>   #endif
>   
> +int cxl_mem_sanitize(struct cxl_dev_state *cxlds);
> +
>   struct cxl_hdm {
>   	struct cxl_component_regs regs;
>   	unsigned int decoder_count;

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 6D0FFC64ED6
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 18:04:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229535AbjB1SEV (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 13:04:21 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:48898 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229540AbjB1SEV (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 13:04:21 -0500
Received: from mga18.intel.com (mga18.intel.com [134.134.136.126])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 0C32131E39
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 10:04:19 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1677607459; x=1709143459;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=GsJ0FeCcj9dPRiR46062O0r4XBNBDbjBAM3DtAWMXJM=;
  b=ALpJmp46jcuMZPNrhgp/f5r3uJ/3iXM06OcxFZYvh703182dOclt0+wL
   dAv4rR/JOg9IDYSOP/BxSnIWedRckcQuGGcglywK2zJdQA7VvIshaFbp2
   UvDuIDW/7qW1PmVjbWz6lNO5Q4posOD0+/KbxXdLGzkQAUPF+ZhRlPa/j
   NDjtunItEXPCRhuVg8qztpMYCX17TyqWIGMZ6dCu616pnG4BJkpzuZNz9
   ykOD++0E9xUIRQP01VyHzLffphOziQw1j+4jI3oL3LlIZ+BFlIHB8GHvS
   XRy4RxHKdUktbCR3CeewsroeCPAUNiqk21dasAWCyYs5MBizI2ml5Tx8y
   w==;
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="318005239"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="318005239"
Received: from orsmga002.jf.intel.com ([10.7.209.21])
  by orsmga106.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 10:03:42 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="674245185"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="674245185"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.212.1.236]) ([10.212.1.236])
  by orsmga002-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 10:03:41 -0800
Message-ID: <3f35b83b-8ee9-7367-af05-d59e9f0940ab@intel.com>
Date: Tue, 28 Feb 2023 11:03:41 -0700
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Firefox/102.0 Thunderbird/102.6.0
Subject: Re: [PATCH 5/7] cxl/test: Add "Sanitize" opcode support
Content-Language: en-US
To: Davidlohr Bueso <dave@stgolabs.net>, dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-6-dave@stgolabs.net>
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20230224194652.1990604-6-dave@stgolabs.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org



On 2/24/23 12:46 PM, Davidlohr Bueso wrote:
> Add support to emulate a CXL mem device support the "Sanitize"
> operation, without incurring in the background.
> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
Reviewed-by: Dave Jiang <dave.jiang@intel.com>

> ---
>   tools/testing/cxl/test/mem.c | 25 +++++++++++++++++++++++++
>   1 file changed, 25 insertions(+)
> 
> diff --git a/tools/testing/cxl/test/mem.c b/tools/testing/cxl/test/mem.c
> index 9263b04d35f7..d4466cb27947 100644
> --- a/tools/testing/cxl/test/mem.c
> +++ b/tools/testing/cxl/test/mem.c
> @@ -497,6 +497,28 @@ static int mock_partition_info(struct cxl_dev_state *cxlds,
>   	return 0;
>   }
>   
> +static int mock_sanitize(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *cmd)
> +{
> +	struct cxl_mockmem_data *mdata = dev_get_drvdata(cxlds->dev);
> +
> +	if (cmd->size_in != 0)
> +		return -EINVAL;
> +
> +	if (cmd->size_out != 0)
> +		return -EINVAL;
> +
> +	if (mdata->security_state & CXL_PMEM_SEC_STATE_USER_PASS_SET) {
> +		cmd->return_code = CXL_MBOX_CMD_RC_SECURITY;
> +		return -ENXIO;
> +	}
> +	if (mdata->security_state & CXL_PMEM_SEC_STATE_LOCKED) {
> +		cmd->return_code = CXL_MBOX_CMD_RC_SECURITY;
> +		return -ENXIO;
> +	}
> +
> +	return 0; /* assume less than 2 secs, no bg */
> +}
> +
>   static int mock_get_security_state(struct cxl_dev_state *cxlds,
>   				   struct cxl_mbox_cmd *cmd)
>   {
> @@ -924,6 +946,9 @@ static int cxl_mock_mbox_send(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *
>   	case CXL_MBOX_OP_GET_HEALTH_INFO:
>   		rc = mock_health_info(cxlds, cmd);
>   		break;
> +	case CXL_MBOX_OP_SANITIZE:
> +		rc = mock_sanitize(cxlds, cmd);
> +		break;
>   	case CXL_MBOX_OP_GET_SECURITY_STATE:
>   		rc = mock_get_security_state(cxlds, cmd);
>   		break;

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2631DC64ED6
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 18:32:04 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229534AbjB1ScD (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 13:32:03 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:36200 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229504AbjB1ScC (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 13:32:02 -0500
Received: from mga02.intel.com (mga02.intel.com [134.134.136.20])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 1ABE710253
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 10:32:01 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1677609121; x=1709145121;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=x1p8iyolm9RyR+F89mBpArMWNYmUSsEj5pwaTq6iv7Q=;
  b=JiioLwo1eqjH2Dg7RGeMzK4tW6ZYZKEm061bWARidbcD560DTVcXB5Vy
   7AKb6HXZ02R1MHlYbB8D3Oc91+1MZnWloxpJrEi6qDcfhq8sDNeZwMV2x
   F5TVulPrWGWrW5AFymP5GywrY3MKmcf/syL2gLznIkSURkhZ6KKnGoLI/
   H9mgOGzQb+7pzI/bKfvPF7LkI+bBuqYKdF9hNL/wqOeoqU+61i3laouXY
   VV3cvWYVzunCS0XfRSkgcH1pFpkjWtaRLuxCtkCSm/SsfBGwr6LQQSmlq
   aI/uGijWdr8atKusddhp4Hc0ewC5ggmL/XeyU6aA37+Pv9vefO3Ef2DoW
   w==;
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="322470199"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="322470199"
Received: from orsmga002.jf.intel.com ([10.7.209.21])
  by orsmga101.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 10:32:00 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="674259364"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="674259364"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.212.1.236]) ([10.212.1.236])
  by orsmga002-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 10:32:00 -0800
Message-ID: <17be3112-2a56-1def-794a-d37187ec190d@intel.com>
Date: Tue, 28 Feb 2023 11:31:59 -0700
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Firefox/102.0 Thunderbird/102.6.0
Subject: Re: [PATCH 6/7] cxl/mem: Support Secure Erase
Content-Language: en-US
To: Davidlohr Bueso <dave@stgolabs.net>, dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-7-dave@stgolabs.net>
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20230224194652.1990604-7-dave@stgolabs.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org



On 2/24/23 12:46 PM, Davidlohr Bueso wrote:
> Implement support for the non-pmem exclusive secure erase, per
> CXL specs.
> 
> To properly support this feature, create a 'security/erase' sysfs
> file that when read will list the current pmem security state and
> when written to, perform the requested operation.

Need update. WO attrib.

DJ

> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>
> ---
>   Documentation/ABI/testing/sysfs-bus-cxl | 12 ++++++
>   drivers/cxl/core/mbox.c                 | 56 +++++++++++++++++++++++++
>   drivers/cxl/core/memdev.c               | 32 +++++++++++++-
>   drivers/cxl/cxlmem.h                    |  2 +
>   4 files changed, 101 insertions(+), 1 deletion(-)
> 
> diff --git a/Documentation/ABI/testing/sysfs-bus-cxl b/Documentation/ABI/testing/sysfs-bus-cxl
> index b315d78b7e91..91a74e27f248 100644
> --- a/Documentation/ABI/testing/sysfs-bus-cxl
> +++ b/Documentation/ABI/testing/sysfs-bus-cxl
> @@ -80,6 +80,18 @@ Description:
>   	       to be flushed. If this sysfs entry is not present then the
>   	       architecture does not support security features.
>   
> +What:          /sys/bus/cxl/devices/memX/security/erase
> +Date:          February, 2023
> +KernelVersion: v6.4
> +Contact:       linux-cxl@vger.kernel.org
> +Description:
> +	       (WO) Write a boolean 'true' string value to this attribute to
> +	       secure erase the device to securely re-purpose or decommission
> +	       it. This is done by hanging the media encryption keys for all
> +	       user data areas of the device. This causes all CPU caches to
> +	       be flushed. If this sysfs entry is not present then the
> +	       architecture does not support security features.
> +
>   What:		/sys/bus/cxl/devices/*/devtype
>   Date:		June, 2021
>   KernelVersion:	v5.14
> diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
> index 885de3506735..bf206fe26839 100644
> --- a/drivers/cxl/core/mbox.c
> +++ b/drivers/cxl/core/mbox.c
> @@ -1082,6 +1082,62 @@ int cxl_mem_sanitize(struct cxl_dev_state *cxlds)
>   }
>   EXPORT_SYMBOL_NS_GPL(cxl_mem_sanitize, CXL);
>   
> +/**
> + * cxl_mem_secure_erase() - Send secure erase command to the device.
> + * @cxlds: The device data for the operation
> + *
> + * Return: 0 if the command was executed successfully.
> + * Upon error, return the result of the mailbox command or -EINVAL if
> + * security requirements are not met. CPU caches are flushed before and
> + * after succesful completion of each command.
> + *
> + * See CXL 3.0 @8.2.9.8.5.2 Secure Erase.
> + */
> +int cxl_mem_secure_erase(struct cxl_dev_state *cxlds)
> +{
> +	int rc;
> +	u32 sec_out = 0;
> +	struct cxl_get_security_output {
> +		__le32 flags;
> +	} out;
> +	struct cxl_mbox_cmd sec_cmd = {
> +		.opcode = CXL_MBOX_OP_GET_SECURITY_STATE,
> +		.payload_out = &out,
> +		.size_out = sizeof(out),
> +	};
> +	struct cxl_mbox_cmd mbox_cmd = {
> +		.opcode = CXL_MBOX_OP_SECURE_ERASE,
> +	};
> +
> +	if (!cpu_cache_has_invalidate_memregion())
> +		return -EINVAL;
> +
> +	rc = cxl_internal_send_cmd(cxlds, &sec_cmd);
> +	if (rc < 0) {
> +		dev_err(cxlds->dev, "Failed to get security state : %d", rc);
> +		return rc;
> +	}
> +
> +	sec_out = le32_to_cpu(out.flags);
> +	if (sec_out & CXL_PMEM_SEC_STATE_USER_PASS_SET)
> +		return -EINVAL;
> +
> +	if (sec_out & CXL_PMEM_SEC_STATE_LOCKED)
> +		return -EINVAL;
> +
> +	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
> +
> +	rc = cxl_internal_send_cmd(cxlds, &mbox_cmd);
> +	if (rc < 0) {
> +		dev_err(cxlds->dev, "Failed to secure erase device : %d", rc);
> +		return rc;
> +	}
> +
> +	cpu_cache_invalidate_memregion(IORES_DESC_CXL);
> +	return 0;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_mem_secure_erase, CXL);
> +
>   static int add_dpa_res(struct device *dev, struct resource *parent,
>   		       struct resource *res, resource_size_t start,
>   		       resource_size_t size, const char *type)
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index a1bb095d081c..6334a0d1a925 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -155,6 +155,34 @@ static ssize_t security_sanitize_store(struct device *dev,
>   static struct device_attribute dev_attr_security_sanitize =
>   	__ATTR(sanitize, 0200, NULL, security_sanitize_store);
>   
> +static ssize_t security_erase_store(struct device *dev,
> +				    struct device_attribute *attr,
> +				    const char *buf, size_t len)
> +{
> +	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
> +	struct cxl_dev_state *cxlds = cxlmd->cxlds;
> +	ssize_t rc;
> +	bool erase;
> +
> +	rc = kstrtobool(buf, &erase);
> +	if (rc)
> +		return rc;
> +
> +	if (erase) {
> +		if (cxl_memdev_active_region(cxlmd))
> +			return -EBUSY;
> +
> +		rc = cxl_mem_secure_erase(cxlds);
> +	}
> +
> +	if (rc == 0)
> +		rc = len;
> +	return rc;
> +}
> +
> +static struct device_attribute dev_attr_security_erase =
> +	__ATTR(sanitize, 0200, NULL, security_erase_store);
> +
>   static ssize_t serial_show(struct device *dev, struct device_attribute *attr,
>   			   char *buf)
>   {
> @@ -217,6 +245,7 @@ static struct attribute_group cxl_memdev_pmem_attribute_group = {
>   static struct attribute *cxl_memdev_security_attributes[] = {
>   	&dev_attr_security_state.attr,
>   	&dev_attr_security_sanitize.attr,
> +	&dev_attr_security_erase.attr,
>   	NULL,
>   };
>   
> @@ -224,7 +253,8 @@ static umode_t cxl_security_visible(struct kobject *kobj,
>   				    struct attribute *a, int n)
>   {
>   	if (!cpu_cache_has_invalidate_memregion() &&
> -	    a == &dev_attr_security_sanitize.attr)
> +	    (a == &dev_attr_security_sanitize.attr ||
> +	     a == &dev_attr_security_erase.attr))
>   		return 0;
>   	return a->mode;
>   }
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index 0d2009b36933..2cf9ec3242a6 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -332,6 +332,7 @@ enum cxl_opcode {
>   	CXL_MBOX_OP_SCAN_MEDIA		= 0x4304,
>   	CXL_MBOX_OP_GET_SCAN_MEDIA	= 0x4305,
>   	CXL_MBOX_OP_SANITIZE		= 0x4400,
> +	CXL_MBOX_OP_SECURE_ERASE	= 0x4401,
>   	CXL_MBOX_OP_GET_SECURITY_STATE	= 0x4500,
>   	CXL_MBOX_OP_SET_PASSPHRASE	= 0x4501,
>   	CXL_MBOX_OP_DISABLE_PASSPHRASE	= 0x4502,
> @@ -632,6 +633,7 @@ static inline void cxl_mem_active_dec(void)
>   #endif
>   
>   int cxl_mem_sanitize(struct cxl_dev_state *cxlds);
> +int cxl_mem_secure_erase(struct cxl_dev_state *cxlds);
>   
>   struct cxl_hdm {
>   	struct cxl_component_regs regs;

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id EAF2BC64ED6
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 18:36:53 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229725AbjB1Sgx (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 13:36:53 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:38956 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229486AbjB1Sgw (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 13:36:52 -0500
Received: from mga07.intel.com (mga07.intel.com [134.134.136.100])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id D79DF21282
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 10:36:51 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1677609411; x=1709145411;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=JpCwfXhQxsiTFquyDUWurFSJtCgQGmVMUkESgLh36Mc=;
  b=jU8joxXWUkAGmbfRAMVDAqlDB5IjKhTu+dOTPIyu+n64GKQ7J73cVT26
   XQ+Sh0ow31KtNo7m5hv8Cp+uRDtjddA47g2OW08Jx3HFgE4LONjSVYZ1c
   Monpb1JJyYfBhMus6Zx+sV/gF1XtKFxZ6lHKR4hhb3gflQ1wVHv449Pc9
   clEznSlc6SQymoseiBRjqs9qtZ/ykgh/2jQv+pcymBAmXlyKfC+FN1/vB
   umUsuxaEyLE0jcqioj6TpUYpWwQumdAVaSYObIFbU0tK17jsQph7oYBgd
   Oxy1KHCitXDuKM85G7kaO22Wx5XcB5GH9h0xR3F6s+2CNRb6ilwkavNpp
   Q==;
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="398999079"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="398999079"
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
  by orsmga105.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 10:36:51 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="676400027"
X-IronPort-AV: E=Sophos;i="5.98,222,1673942400"; 
   d="scan'208";a="676400027"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.212.1.236]) ([10.212.1.236])
  by fmsmga007-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 10:36:50 -0800
Message-ID: <df1b155c-0465-1906-b1c9-3427f8291b9b@intel.com>
Date: Tue, 28 Feb 2023 11:36:50 -0700
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Firefox/102.0 Thunderbird/102.6.0
Subject: Re: [PATCH 7/7] cxl/test: Add "Secure Erase" opcode support
Content-Language: en-US
To: Davidlohr Bueso <dave@stgolabs.net>, dan.j.williams@intel.com
Cc: jonathan.cameron@huawei.com, ira.weiny@intel.com,
        fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-8-dave@stgolabs.net>
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20230224194652.1990604-8-dave@stgolabs.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org



On 2/24/23 12:46 PM, Davidlohr Bueso wrote:
> Add support to emulate a CXL mem device support the "Secure Erase"
> operation.
> 
> Signed-off-by: Davidlohr Bueso <dave@stgolabs.net>

Reviewed-by: Dave Jiang <dave.jiang@intel.com>

> ---
>   tools/testing/cxl/test/mem.c | 27 +++++++++++++++++++++++++++
>   1 file changed, 27 insertions(+)
> 
> diff --git a/tools/testing/cxl/test/mem.c b/tools/testing/cxl/test/mem.c
> index d4466cb27947..8a22a4e592c6 100644
> --- a/tools/testing/cxl/test/mem.c
> +++ b/tools/testing/cxl/test/mem.c
> @@ -519,6 +519,30 @@ static int mock_sanitize(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *cmd)
>   	return 0; /* assume less than 2 secs, no bg */
>   }
>   
> +static int mock_secure_erase(struct cxl_dev_state *cxlds,
> +			     struct cxl_mbox_cmd *cmd)
> +{
> +	struct cxl_mockmem_data *mdata = dev_get_drvdata(cxlds->dev);
> +
> +	if (cmd->size_in != 0)
> +		return -EINVAL;
> +
> +	if (cmd->size_out != 0)
> +		return -EINVAL;
> +
> +	if (mdata->security_state & CXL_PMEM_SEC_STATE_USER_PASS_SET) {
> +		cmd->return_code = CXL_MBOX_CMD_RC_SECURITY;
> +		return -ENXIO;
> +	}
> +
> +	if (mdata->security_state & CXL_PMEM_SEC_STATE_LOCKED) {
> +		cmd->return_code = CXL_MBOX_CMD_RC_SECURITY;
> +		return -ENXIO;
> +	}
> +
> +	return 0;
> +}
> +
>   static int mock_get_security_state(struct cxl_dev_state *cxlds,
>   				   struct cxl_mbox_cmd *cmd)
>   {
> @@ -949,6 +973,9 @@ static int cxl_mock_mbox_send(struct cxl_dev_state *cxlds, struct cxl_mbox_cmd *
>   	case CXL_MBOX_OP_SANITIZE:
>   		rc = mock_sanitize(cxlds, cmd);
>   		break;
> +	case CXL_MBOX_OP_SECURE_ERASE:
> +		rc = mock_secure_erase(cxlds, cmd);
> +		break;
>   	case CXL_MBOX_OP_GET_SECURITY_STATE:
>   		rc = mock_get_security_state(cxlds, cmd);
>   		break;

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 91C9FC64EC4
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 20:47:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229524AbjB1Urc (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 15:47:32 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:36102 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229482AbjB1Urb (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 15:47:31 -0500
Received: from bee.birch.relay.mailchannels.net (bee.birch.relay.mailchannels.net [23.83.209.14])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id CB69813523
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 12:47:30 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 1B95642303;
        Tue, 28 Feb 2023 20:47:30 +0000 (UTC)
Received: from pdx1-sub0-mail-a231.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 923F0423D5;
        Tue, 28 Feb 2023 20:47:29 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677617249; a=rsa-sha256;
        cv=none;
        b=N7Aost6RNKg/YQRt6M6C2jt7BD8szs9fULuc5sSuoBhMeq8r48P51tvKQuSBTaCFN4AuWA
        6UGR+F7lkOR83P0AEByu9YtBIvqt83jWDZS6ZqowRmr54OUSygUqL2x9YSPlT0Y3bPmCnm
        Vo90cMhNZRa3ExDhvhKWGPZWz0tTqZRalHXvcoCOwaljXZxOzJd9REZA6mRb2+C8qlmBvr
        UTUPGkWJbFysKIUkLu4WPjMYtxpzqJz4XLmEDtC+ZcRtdg4lrxxwJG3cq3LhYSOq6+aqjz
        bUIJFgjPdKaKkV/Ls0gjnhA2rY2ryu7arB7Wo73wBIk1XAJPEdbe4+XzFGQI6g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677617249;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=Vjcz6rUAFhatH45BroaWHidoAasDNWmv7zf/pEMkFOk=;
        b=x0omWhfbUA3Teug+KUxQSanm1+XrNb2+0rjL1xKVuX+E1nbxIn4rM3Kc/ntMxjbmRwLb0+
        bdFmri+u7Hxa7d93K7Tv9uWolCKCgEo3DBhcZ6X/8KpXqsDj5Z8AUGVM3oVeyFSfBeSouB
        h+2UfE+vfnMjGPfkm4sg/ok/Iu0ofoygJ4V19N0E9gTmqOe+7ipQ1Rq5BWJSR1VLbtxoSo
        MgIHIO8TWK7B3x9Rw61vXzDocuhIIhOIgF9/BZ0WZ4f4VNJaQa13bo6y9cbQ6/3ZirVoLY
        ynQXQoEOPi16fUF/QJB2bqTDbi+558ARtr8qURomedsiBS/iQ4ycAIn0tL/kXg==
ARC-Authentication-Results: i=1;
        rspamd-69778c65cd-8wc9d;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Shade-Left: 1ae896c779bdb68c_1677617249884_2778048394
X-MC-Loop-Signature: 1677617249884:2375167776
X-MC-Ingress-Time: 1677617249883
Received: from pdx1-sub0-mail-a231.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.123.200.78 (trex/6.7.2);
        Tue, 28 Feb 2023 20:47:29 +0000
Received: from offworld (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange ECDHE (P-256) server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a231.dreamhost.com (Postfix) with ESMTPSA id 4PR8Z86r73z3D;
        Tue, 28 Feb 2023 12:47:28 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677617249;
        bh=Vjcz6rUAFhatH45BroaWHidoAasDNWmv7zf/pEMkFOk=;
        h=Date:From:To:Cc:Subject:Content-Type;
        b=DrMsZPKIpNmKUu286kx30RhXE+OToYDLtZ8tXc3nLsJwlLip7IbueaR8VvmsbqglB
         liJSJKcyqfE/qtiyK/wQXk5d2lRjJGKoWl06EojYo5o5kvTTceXpRZFIVINSbcKDxn
         6YoACaUP2vqGurJEA4cy6cLqoaeBFLICELB8wxXAe6iCexyRk8n9NWnG+GF2LQui6I
         In9gyyKB0MH+wWL7qJmVxycdbWvRekh9TQrze7q+Khejii2nf0X2EGFi3OpjPwQtTN
         eOiodVLDxue+4G7T7He8LJ6io8bYVdZpX4Iq/UpgYcYKgF9pg+NqcggO7LvSiMjoey
         9/+ImvG9c9Nuw==
Date: Tue, 28 Feb 2023 12:18:48 -0800
From: Davidlohr Bueso <dave@stgolabs.net>
To: Dave Jiang <dave.jiang@intel.com>
Cc: dan.j.williams@intel.com, jonathan.cameron@huawei.com,
        ira.weiny@intel.com, fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
Subject: Re: [PATCH 1/7] cxl/mbox: Add background cmd handling machinery
Message-ID: <20230228201848.b73ralnihs6rbceg@offworld>
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-2-dave@stgolabs.net>
 <029b177d-7b91-77f7-a830-5f5ebe3ab0b8@intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Disposition: inline
In-Reply-To: <029b177d-7b91-77f7-a830-5f5ebe3ab0b8@intel.com>
User-Agent: NeoMutt/20220429
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

On Tue, 28 Feb 2023, Dave Jiang wrote:
>>+
>>+		dev_dbg(dev, "Mailbox background operation completed\n");
>
>May be helpful to also emit the return_code in case of errors.

Agreed, but that's given next:

>
>>+	}
>>+
>>	if (mbox_cmd->return_code != CXL_MBOX_CMD_RC_SUCCESS) {
>>		dev_dbg(dev, "Mailbox operation had an error: %s\n",
>>			cxl_mbox_cmd_rc2str(mbox_cmd));

here.

Thanks,
Davidlohr

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 9D48BC7EE30
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 20:50:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229854AbjB1Uuu (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 15:50:50 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:40186 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229524AbjB1Uuu (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 15:50:50 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 005844680
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 12:50:48 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 3F6077611C5;
        Tue, 28 Feb 2023 20:50:48 +0000 (UTC)
Received: from pdx1-sub0-mail-a231.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id C35427612CE;
        Tue, 28 Feb 2023 20:50:47 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677617447; a=rsa-sha256;
        cv=none;
        b=OnG0r6w8YtxnIfQhAsR9gQVbK01yhyi/29WISAmhJ/Z5TaOJr8qYIv+t3DjKNN8kJbyBi4
        h/KiSma2fTTstKh/fAl5j7K6+yu+1yIqhLT02E3NxSYz9OHJaf4XuQ1cKEQmscUvGsVKbR
        2foP1ws2I4ve+uz7zyjNmHYaQH0l019ZEurzIBUxHWURGx0m7X6EF0ePq26O9zCCc2vQCn
        fGZhW3Qd3yP8uOdjC5tB7i/ZQVt3noDsg24xvyzjgH6oV8woYulv1WTGXIHnmp2GViAeLa
        X7FZNUR2p/OPAFKvc/dGLydFPfh4jq75ssZtzO8qm7EYGF8Ae/0T3dhE8VkpGQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677617447;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=zTGFhyIcRc3oF28Liejqsyf39cIJCQygKCRMhjLNIWo=;
        b=cXHd8CIPs7TrHR4IqKeWUvpEKj+Khp/J0E+Tg4ZAPopQk1sLr0DAgUISLe5wtfjG413ZAg
        NkYLgBLdmaHLBujhfAHw0he1mQ69STQCA+YI2tapczjGIsEDjfXVz0Jxnp6Hhm4EaGihaK
        XlQAW8JeD9G6d4X68zgCnqDCHAajOlxSJ9cflya5knGMDSCH+0L+zCc4u8cOj0HA/ZHBbp
        aKlJlBiGc0mp2AAHSkj2lS7E518K9hzW8k2yFRwkWhdX6SnbdzYTdTfJgkdP2BuzlN4/0L
        IYbQi+v1fZpQTF7oshfT6AforJoYUFAu+XZ4yuSsK312Y+Joa6QOdaeDuoBa2w==
ARC-Authentication-Results: i=1;
        rspamd-fd4f5fb8c-lqvb9;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Shoe-Desert: 36e622082742d736_1677617448075_323462457
X-MC-Loop-Signature: 1677617448075:2788358357
X-MC-Ingress-Time: 1677617448075
Received: from pdx1-sub0-mail-a231.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.107.134.65 (trex/6.7.2);
        Tue, 28 Feb 2023 20:50:48 +0000
Received: from offworld (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange ECDHE (P-256) server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a231.dreamhost.com (Postfix) with ESMTPSA id 4PR8dz1123z59;
        Tue, 28 Feb 2023 12:50:47 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677617447;
        bh=zTGFhyIcRc3oF28Liejqsyf39cIJCQygKCRMhjLNIWo=;
        h=Date:From:To:Cc:Subject:Content-Type;
        b=djt7KLYGGkDkfK7yexL3nyft9DAOYHtDcvN6qwhVEef/R/CDYM/SqtMK0TDAy8xu8
         AKq8Cm4s+UeSF2ZsD3qwvghecSP4HjKRpZ/jHBHvx8elu+tUieuFtS2znkHW10Z5jD
         7aKsE/uLXsTWjTc+uVgLtXreBW5iqfdT8sUTNjNzPD9Nc4+Oq4kpZIqe4hy9eBbcMB
         b3AQKqEtePja6xYEg4kkRKlpUnyAHcHQRvLKJc4UvHp99N7dWRu6o7kyThaASNbw4w
         CxpmLCmnLK3jg+qCWshEzygivQwkgju2Gd4Xobahw2YN+B50uA10G1kCkO8ts0xz9h
         jqQ64P+xp153g==
Date: Tue, 28 Feb 2023 12:22:05 -0800
From: Davidlohr Bueso <dave@stgolabs.net>
To: Dave Jiang <dave.jiang@intel.com>
Cc: dan.j.williams@intel.com, jonathan.cameron@huawei.com,
        ira.weiny@intel.com, fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
Subject: Re: [PATCH 4/7] cxl/mem: Support Sanitation
Message-ID: <20230228202205.hit6u33ptbsb3jw4@offworld>
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-5-dave@stgolabs.net>
 <7333903c-4ef9-6f1f-9767-e32f228149b3@intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Disposition: inline
In-Reply-To: <7333903c-4ef9-6f1f-9767-e32f228149b3@intel.com>
User-Agent: NeoMutt/20220429
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

On Tue, 28 Feb 2023, Dave Jiang wrote:

>On 2/24/23 12:46 PM, Davidlohr Bueso wrote:
>>Implement support for the non-pmem exclusive sanitize (aka overwrite),
>>per CXL specs. This is the baseline for the sanitize-on-release
>>functionality.
>>
>>To properly support this feature, create a 'security/sanitize' sysfs
>>file that when read will list the current pmem security state and
>>when written to, perform the requested operation.
>
>I think this segment needs to be updated? The attrib is write only
>from the code below.

Bleh, indeed both commands need the changelog updated, these are
intended to be write-only.

Thanks,
Davidlohr

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 3C793C64EC7
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 20:55:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229870AbjB1UzI (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 15:55:08 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:43892 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229722AbjB1UzH (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 15:55:07 -0500
Received: from bird.elm.relay.mailchannels.net (bird.elm.relay.mailchannels.net [23.83.212.17])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 394D317178
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 12:55:06 -0800 (PST)
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
Received: from relay.mailchannels.net (localhost [127.0.0.1])
        by relay.mailchannels.net (Postfix) with ESMTP id 4D90A3E16D6;
        Tue, 28 Feb 2023 20:55:05 +0000 (UTC)
Received: from pdx1-sub0-mail-a231.dreamhost.com (unknown [127.0.0.6])
        (Authenticated sender: dreamhost)
        by relay.mailchannels.net (Postfix) with ESMTPA id 9A49B3E16A8;
        Tue, 28 Feb 2023 20:55:04 +0000 (UTC)
ARC-Seal: i=1; s=arc-2022; d=mailchannels.net; t=1677617704; a=rsa-sha256;
        cv=none;
        b=Zui8YE4IsGtnsrTQO9NGu34h1/KYVC7Ntb0/2N9PkKsopflo9odtKhZLtdpE47PNj+rrZc
        fX72GGhSwIAgRpGACY43OmjUPqv+3CT64KeWKIwi1jop/kmhv63xiBHUIh6XM+kWmMBPm8
        8ZYGifYgr4Ghkv6RoIOZttMndhkkBDir127Z2pmqTNHmPsn0YA7Xh+GpaupZ6h/pRTizcH
        c6vjMNcsZfCxJf0PbqHL1vKbtyS2y/8gkuRS2yD86cUZHnZNf2NPNn2uXcQeyNKsSDGYES
        U3eoydwIDLGtY9WnzZAK+leDrTep+sCtIZc8fXBoWdWjFwQssuIkIEy5D5XWPQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed;
 d=mailchannels.net;
        s=arc-2022; t=1677617704;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references:dkim-signature;
        bh=PNZ9JyRQKMZ1eJRVKkYvLsbJph+KbR72ZozjFQiezbM=;
        b=6hw2MX1QuwEgqvcJZwPGHDAyU1vIA1OdjNhl5U32inDaR9nEcEyujbJFjoIS3I9xbecU//
        GAe5aDCQ1w0JsJnZg9ul6EKv2mXcuHeKgFFy4CRHlZ4feqnzhWHciW5NsyTgDNqQvKS2yR
        ZznxGUjUJTsvhe6wUBWbzODLkJZDX3+dX6jOffjvcaQ05mO3HapjtVBzx8CYgKtAxV5daR
        UOGoqMxLNfMGZo4dSj4H0MKkR5FAdbuJN6WT9uamwj8mbGGtN4Mmvj/ti8hmrHHGaYkgj4
        h73j9p/TBqHf8PpnCsvlXtxt0wwfaBFrDKNDjjxhJHT/WOs8fCAzSdaOSL6kXQ==
ARC-Authentication-Results: i=1;
        rspamd-69778c65cd-j6wxb;
        auth=pass smtp.auth=dreamhost smtp.mailfrom=dave@stgolabs.net
X-Sender-Id: dreamhost|x-authsender|dave@stgolabs.net
X-MC-Relay: Neutral
X-MailChannels-SenderId: dreamhost|x-authsender|dave@stgolabs.net
X-MailChannels-Auth-Id: dreamhost
X-Quick-Trouble: 63b83f4179ad3617_1677617705008_1089767040
X-MC-Loop-Signature: 1677617705008:2893149312
X-MC-Ingress-Time: 1677617705008
Received: from pdx1-sub0-mail-a231.dreamhost.com (pop.dreamhost.com
 [64.90.62.162])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384)
        by 100.123.200.78 (trex/6.7.2);
        Tue, 28 Feb 2023 20:55:05 +0000
Received: from offworld (ip72-199-50-187.sd.sd.cox.net [72.199.50.187])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange ECDHE (P-256) server-signature RSA-PSS (2048 bits) server-digest SHA256)
        (No client certificate requested)
        (Authenticated sender: dave@stgolabs.net)
        by pdx1-sub0-mail-a231.dreamhost.com (Postfix) with ESMTPSA id 4PR8kv5zDcz59;
        Tue, 28 Feb 2023 12:55:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stgolabs.net;
        s=dreamhost; t=1677617704;
        bh=PNZ9JyRQKMZ1eJRVKkYvLsbJph+KbR72ZozjFQiezbM=;
        h=Date:From:To:Cc:Subject:Content-Type;
        b=WM2svnLrB18naAtRObAvwC6c0B0Eg4QC2mGzkHZGytHjO+Pz945HAUsh4DMUYlBGZ
         WiE9DqgPJSn74JZHy4gs3c+yeV+8Vd/Wwt4TCU/7IaemHNIeVH9v3FcRwEBnn2nxhH
         wAIZMYjOPGaw/SPzd3T9G51xD9HDk4wQ3r44fmUBELHlveTTlwlaWpKZfkiUwAGgz2
         6M5My16M0Bn4b/AMbFByv/ESztlfwYKxdYUGhHk1nQ4TuGkbSAbgoQxZbUluHcxbAe
         kd+e9sRctH/O/mSGchjAcgx337apdsB7+OGOE1v3eD03+J4Eiyoyr9ymTIPRZko0u2
         KxbDQD8q35NYg==
Date: Tue, 28 Feb 2023 12:26:23 -0800
From: Davidlohr Bueso <dave@stgolabs.net>
To: Alison Schofield <alison.schofield@intel.com>
Cc: dan.j.williams@intel.com, jonathan.cameron@huawei.com,
        ira.weiny@intel.com, fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
Subject: Re: [PATCH 3/7] cxl/region: Add cxl_memdev_active_region()
Message-ID: <20230228202623.ceytv4ecryxcloxc@offworld>
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-4-dave@stgolabs.net>
 <Y/wno8C4bK3XNoUD@aschofie-mobl2>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Disposition: inline
In-Reply-To: <Y/wno8C4bK3XNoUD@aschofie-mobl2>
User-Agent: NeoMutt/20220429
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Hi Alison,

On Sun, 26 Feb 2023, Alison Schofield wrote:

>I took a look here as I've been poked around in this space when looking
>for 'region' names to associate with memdev poison trace events. [1]

Thanks for the pointer.

>How does the list created get used?

It's used by the security commands, in the next patches in the series.
This came about because Dan requested some way of knowing wether the
memdev is being used (actively decoding HPA ranges).

>If we only need to know that this memdev is mapped in any region,
>so don't touch it, we can look at it's port->commit_end. If that
>commit_end >= 0, we can look at each endpoint to find the regions
>it's mapped to.

I think this is a lot better than using the list approach.

Thanks,
Davidlohr

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 7B163C64EC4
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 23:20:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229619AbjB1XUq (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 18:20:46 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:43910 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229585AbjB1XUp (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 18:20:45 -0500
Received: from mailout2.w2.samsung.com (mailout2.w2.samsung.com [211.189.100.12])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id A60661E1DC
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 15:20:42 -0800 (PST)
Received: from uscas1p1.samsung.com (unknown [182.198.245.206])
        by mailout2.w2.samsung.com (KnoxPortal) with ESMTP id 20230228232038usoutp0294af7efb235473bcd993673d9f78e16d~IIFuK3piz1147811478usoutp02R;
        Tue, 28 Feb 2023 23:20:38 +0000 (GMT)
DKIM-Filter: OpenDKIM Filter v2.11.0 mailout2.w2.samsung.com 20230228232038usoutp0294af7efb235473bcd993673d9f78e16d~IIFuK3piz1147811478usoutp02R
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=samsung.com;
        s=mail20170921; t=1677626438;
        bh=ohZ+yizsQLIUpViu2Qv3WsdPiEePv4pH3zvOQnI1C4s=;
        h=From:To:CC:Subject:Date:In-Reply-To:References:From;
        b=disut+zh75ZPbz+763LDjE0pthkd4KHnncM+MZb99Tf/2je66OQWsBP48tqDMY+QL
         3DMSRlL+78OE6uxsNAtIIKqATLakqaA9agNpX7b/uxds6W8eP61Niu7T9EPL8TgieM
         TaJKP6N9we76Fk6WKbj5Q3mCnqvsYZL4jj0+BxSc=
Received: from ussmges2new.samsung.com (u111.gpu85.samsung.co.kr
        [203.254.195.111]) by uscas1p1.samsung.com (KnoxPortal) with ESMTP id
        20230228232038uscas1p18a2482d9effb75d9728af922c72c94b5~IIFuEzKHh1607416074uscas1p1K;
        Tue, 28 Feb 2023 23:20:38 +0000 (GMT)
Received: from uscas1p2.samsung.com ( [182.198.245.207]) by
        ussmges2new.samsung.com (USCPEMTA) with SMTP id B4.53.49129.64C8EF36; Tue,
        28 Feb 2023 18:20:38 -0500 (EST)
Received: from ussmgxs2new.samsung.com (u91.gpu85.samsung.co.kr
        [203.254.195.91]) by uscas1p2.samsung.com (KnoxPortal) with ESMTP id
        20230228232038uscas1p20112a8c23b622658b24949147131b78e~IIFttma-l0670506705uscas1p24;
        Tue, 28 Feb 2023 23:20:38 +0000 (GMT)
X-AuditID: cbfec36f-167fe7000001bfe9-08-63fe8c464063
Received: from SSI-EX4.ssi.samsung.com ( [105.128.2.145]) by
        ussmgxs2new.samsung.com (USCPEXMTA) with SMTP id B5.49.17110.54C8EF36; Tue,
        28 Feb 2023 18:20:38 -0500 (EST)
Received: from SSI-EX2.ssi.samsung.com (105.128.2.227) by
        SSI-EX4.ssi.samsung.com (105.128.2.229) with Microsoft SMTP Server
        (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384) id
        15.1.2375.24; Tue, 28 Feb 2023 15:20:37 -0800
Received: from SSI-EX2.ssi.samsung.com ([105.128.2.227]) by
        SSI-EX2.ssi.samsung.com ([105.128.2.227]) with mapi id 15.01.2375.024; Tue,
        28 Feb 2023 15:20:37 -0800
From: Fan Ni <fan.ni@samsung.com>
To: Davidlohr Bueso <dave@stgolabs.net>
CC: Alison Schofield <alison.schofield@intel.com>,
        "dan.j.williams@intel.com" <dan.j.williams@intel.com>,
        "jonathan.cameron@huawei.com" <jonathan.cameron@huawei.com>,
        "ira.weiny@intel.com" <ira.weiny@intel.com>,
        Adam Manzanares <a.manzanares@samsung.com>,
        "linux-cxl@vger.kernel.org" <linux-cxl@vger.kernel.org>
Subject: Re: [PATCH 3/7] cxl/region: Add cxl_memdev_active_region()
Thread-Topic: [PATCH 3/7] cxl/region: Add cxl_memdev_active_region()
Thread-Index: AQHZSIjKgg75QTtW6UqE1hGG9+eV667isUGAgAKpooCAADCqgA==
Date: Tue, 28 Feb 2023 23:20:37 +0000
Message-ID: <20230228232018.GA1402731@bgt-140510-bm03>
In-Reply-To: <20230228202623.ceytv4ecryxcloxc@offworld>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [105.128.2.176]
Content-Type: text/plain; charset="us-ascii"
Content-ID: <1EDD50BA6FF7F44AAA5F3214A8A878F2@ssi.samsung.com>
Content-Transfer-Encoding: quoted-printable
MIME-Version: 1.0
X-CFilter-Loop: Reflected
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFlrIKsWRmVeSWpSXmKPExsWy7djX87puPf+SDbZ2KVncfXyBzWL61AuM
        FqtvrmG02P/0OYvFqoXX2CzOzzrF4sDm0XLkLavH4j0vmTymzq73+LxJLoAlissmJTUnsyy1
        SN8ugSvjX9thxoKbHBUPH7exNjA+Y+ti5OSQEDCR2Nb2lbWLkYtDSGAlo0TDwRZ2CKeVSaL7
        0CFWmKq97cdYIBJrGSV2zXvDDOF8AnK+z4RqWcYo8ebAH7DBbAKKEvu6toPZIgLqEvPW3mYE
        KWIWOMgk0XH1DFhCWMBZ4t3vR+wQRS4STSt3QzU4SXye0sQIYrMIqEpceb8AzOYVMJNo2XgW
        rIZTwFzixMfLLCA2o4CYxPdTa5hAbGYBcYlbT+YzQdwtKLFo9h5mCFtM4t+uh1BfK0rc//6S
        HaJeR2LB7k9sELadxM7/k6DmaEssW/iaGWKvoMTJmU9YIHolJQ6uuAEOCwmBExwSe5a/A2rm
        AHJcJC5c1YSokZb4e3cZE0Q4WWLVRy6IcI7E/CVboMZYSyz8s55pAqPKLCRXz0Jy0SwkF81C
        ctEsJBctYGRdxSheWlycm55abJSXWq5XnJhbXJqXrpecn7uJEZiKTv87nL+D8fqtj3qHGJk4
        GA8xSnAwK4nwLrz9J1mINyWxsiq1KD++qDQntfgQozQHi5I4r6HtyWQhgfTEktTs1NSC1CKY
        LBMHp1QDU8zaSr7E1vLs4JqU+w7Ok3j5v+x5Nndmr0bOOT6G175Ctzevve0c+Or07Gj+5I49
        D1wZ/r9I2MAgtpk39OJPuVf22hN3XZ41b8VDJc/j7jE7HJi1HBccX6Um9tyn66KllEiKStQ2
        w2U/Q7w94hh22N7JzDGL5V8qXqkhsuGxs9z3td8N5K9ktL6PSfg3KeTazlMuzBcN5+ZNemIo
        3nf+NG/fibZDixgXXjqSbpWuueycdtkOiY+qDScc+Y6szVPcUzdDzGef4/2jZ/9uzj7zh1ng
        gdISR9P1sQ8l/lx5JRebrlKy3mkz14rNnb4VMoEX30qvYO+dF9zhFrSzd1PEF+seqYYGt8RX
        h1nMTzquU2Ipzkg01GIuKk4EAGNNxme0AwAA
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFjrIIsWRmVeSWpSXmKPExsWS2cA0Udet51+ywdQv7BZ3H19gs5g+9QKj
        xeqbaxgt9j99zmKxauE1Novzs06xOLB5tBx5y+qxeM9LJo+ps+s9Pm+SC2CJ4rJJSc3JLEst
        0rdL4Mr413aYseAmR8XDx22sDYzP2LoYOTkkBEwk9rYfY+li5OIQEljNKDHr2BY2COcTo8TO
        e2eZIJxljBJPdzYygbSwCShK7OvaDtYuIqAuMW/tbUaQImaB/UwSnR1z2UESwgLOEu9+P2KH
        KHKRaFq5G6rBSeLzlCZGEJtFQFXiyvsFYDavgJlEy8azUKt7mCR+rr8P1swpYC5x4uNlFhCb
        UUBM4vupNWBXMAuIS9x6Mp8J4gkBiSV7zjND2KISLx//Y4WwFSXuf3/JDlGvI7Fg9yc2CNtO
        Yuf/SVBztCWWLXzNDHGEoMTJmU9YIHolJQ6uuMEyARgkSNbNQjJqFpJRs5CMmoVk1AJG1lWM
        4qXFxbnpFcVGeanlesWJucWleel6yfm5mxiBsXz63+HoHYy3b33UO8TIxMF4iFGCg1lJhHfh
        7T/JQrwpiZVVqUX58UWlOanFhxilOViUxHlfRk2MFxJITyxJzU5NLUgtgskycXBKNTC1yLzX
        6n/iIvNmt5j8v7vlqpbijttVGuf/4+h607PZfM+3uZt2HbrJK3zgq2Ch7D1j6wsa/ddDlwoZ
        JMTf8he79rLm4/7eH7cEZy1zWlKXxVWrqfL32cnpx9bP2uLZpHaLIXxR+Wrli1HXC3tNa6s+
        Ssuq7u1ZYr/k96YO/a4FV3s2SLa4Ck8z780Jfdu10ra8NkviUYjtJZHNT0JNOjSElqy/lWDv
        UzFh39VgQ+H1y2r6pxRlqMx3ctD7uGyO1r1j2YlL5+k+ve10zPnW3yiVX5e8Nrbs7Le+9Kdd
        xlDz7pfdtumG9cYepjse6z7sasr5yrvI8l/0zjfiDziEKw/Mr500x+bwkoiJPX/iyyYrsRRn
        JBpqMRcVJwIA+LFBqVQDAAA=
X-CMS-MailID: 20230228232038uscas1p20112a8c23b622658b24949147131b78e
CMS-TYPE: 301P
X-CMS-RootMailID: 20230228205514uscas1p1cb55faea3e3885cbcc40fdde48471831
References: <20230224194652.1990604-1-dave@stgolabs.net>
        <20230224194652.1990604-4-dave@stgolabs.net>
        <Y/wno8C4bK3XNoUD@aschofie-mobl2>
        <CGME20230228205514uscas1p1cb55faea3e3885cbcc40fdde48471831@uscas1p1.samsung.com>
        <20230228202623.ceytv4ecryxcloxc@offworld>
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

On Tue, Feb 28, 2023 at 12:26:23PM -0800, Davidlohr Bueso wrote:
> Hi Alison,
>=20
> On Sun, 26 Feb 2023, Alison Schofield wrote:
>=20
> > I took a look here as I've been poked around in this space when looking
> > for 'region' names to associate with memdev poison trace events. [1]
>=20
> Thanks for the pointer.
>=20
> > How does the list created get used?
>=20
> It's used by the security commands, in the next patches in the series.
> This came about because Dan requested some way of knowing wether the
> memdev is being used (actively decoding HPA ranges).
>=20
> > If we only need to know that this memdev is mapped in any region,
> > so don't touch it, we can look at it's port->commit_end. If that
> > commit_end >=3D 0, we can look at each endpoint to find the regions
> > it's mapped to.

commit_end will not be updated during commit if the decoder flag is
with CXL_DECODER_F_ENABLE, not sure whether it will cause issue or not
for your case. Can we use hdm_end instead?

Fan
>=20
> I think this is a lot better than using the list approach.
>=20
> Thanks,
> Davidlohr=

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 3B733C64EC4
	for <linux-cxl@archiver.kernel.org>; Tue, 28 Feb 2023 23:35:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229667AbjB1Xft (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Tue, 28 Feb 2023 18:35:49 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:52990 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229709AbjB1Xfs (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Tue, 28 Feb 2023 18:35:48 -0500
Received: from mga01.intel.com (mga01.intel.com [192.55.52.88])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id A00882B619
        for <linux-cxl@vger.kernel.org>; Tue, 28 Feb 2023 15:35:41 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1677627341; x=1709163341;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=ecQqsFnsMfE7MXdT5oMG0KuaaonWrisPbyX6k46xhwk=;
  b=nz7gSEy1Ax/xmsigc7QCafaNoz038dx7HJUfmyhCJv9qpbiW9VHJHyxD
   jbtydYnCURdcE4nvaAjFgkwSwSBjYTX3QGqB9kdRfJHh+FbU5cEab3yp8
   z23eStCzgKkwr+CEo7QDTZ3UwyO36Z8o3RPDBA/NcT0jSkrHxAE8eqR0p
   xo0R3dF2oA0SuCPvShPh9wfiqoc1qalOrjGaqgng686LF3RAjM4a1NGeX
   EbGzpaomcw3415mKjNcooCL6IbpVkgQbj0mtu0YCgzJIe/Hj7SeYomOot
   lKvacvC4pzkSklSWKnNBMaxs2H1Ncqn4gjoszVRCS8ZrpHKwrR69Eygv/
   g==;
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="361850415"
X-IronPort-AV: E=Sophos;i="5.98,223,1673942400"; 
   d="scan'208";a="361850415"
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
  by fmsmga101.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 15:35:36 -0800
X-IronPort-AV: E=McAfee;i="6500,9779,10635"; a="676492784"
X-IronPort-AV: E=Sophos;i="5.98,223,1673942400"; 
   d="scan'208";a="676492784"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.212.1.236]) ([10.212.1.236])
  by fmsmga007-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 28 Feb 2023 15:35:35 -0800
Message-ID: <19e29949-6003-3d90-75d7-735c35b0e279@intel.com>
Date: Tue, 28 Feb 2023 16:35:34 -0700
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Firefox/102.0 Thunderbird/102.6.0
Subject: Re: [PATCH 1/7] cxl/mbox: Add background cmd handling machinery
Content-Language: en-US
To: Davidlohr Bueso <dave@stgolabs.net>
Cc: dan.j.williams@intel.com, jonathan.cameron@huawei.com,
        ira.weiny@intel.com, fan.ni@samsung.com, a.manzanares@samsung.com,
        linux-cxl@vger.kernel.org
References: <20230224194652.1990604-1-dave@stgolabs.net>
 <20230224194652.1990604-2-dave@stgolabs.net>
 <029b177d-7b91-77f7-a830-5f5ebe3ab0b8@intel.com>
 <20230228201848.b73ralnihs6rbceg@offworld>
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20230228201848.b73ralnihs6rbceg@offworld>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org



On 2/28/23 1:18 PM, Davidlohr Bueso wrote:
> On Tue, 28 Feb 2023, Dave Jiang wrote:
>>> +
>>> +        dev_dbg(dev, "Mailbox background operation completed\n");
>>
>> May be helpful to also emit the return_code in case of errors.
> 
> Agreed, but that's given next:
> 
>>
>>> +    }
>>> +
>>>     if (mbox_cmd->return_code != CXL_MBOX_CMD_RC_SUCCESS) {
>>>         dev_dbg(dev, "Mailbox operation had an error: %s\n",
>>>             cxl_mbox_cmd_rc2str(mbox_cmd));
> 
> here.

Ah ok.

> 
> Thanks,
> Davidlohr

