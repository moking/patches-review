From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2044.outbound.protection.outlook.com [40.107.92.44])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A230E17753;
	Mon, 15 Jul 2024 17:28:47 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.44
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064529; cv=fail; b=lTNqlWjUinwoNjoZn+mltwFrnZODOtwY89jXwoFCcsc/w7Bs8n1vm7pRF7EOkewo/VIdNRx3yJtlHpTQGf8Mdiv7cHuU0l+aZMfzCKHGNMijLY3gfw2CepYK+1dRVQLsgQgDm7aj8Y4yFrdXkmkjB6so6prYszoijEFT9Q6MjHI=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064529; c=relaxed/simple;
	bh=D+uibmt4y1KE/vyPkyAV4M8OT1QDbIqjBVAk9cIZ+Gc=;
	h=From:To:CC:Subject:Date:Message-ID:MIME-Version:Content-Type; b=SS8/Jrpup27bl/yevHF3AKr9CjvB81eEqf+2hZ832V63jz9kQwBj6s3Qa2jAd132GmV/HNNN2OYfczGLjR7tdFbZRceYPy70t6MOxnhadytU85X1k0olb1kHzHHe2osyzU71M/olDTXFC059L9hOLgsjo922JjjzanA1MG3gZC0=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=cmCQhu9u; arc=fail smtp.client-ip=40.107.92.44
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="cmCQhu9u"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=dwwYo51jr1AlTMkyfMcHQ5BNtTTbT47xSWysP4hLYDOupcNDshA5yjOFeC6LsLwtgQ9nIpHgsvYNUzsYCCLlxSLk5QkhTOShWbDhgKSe4GxqSOUdk9x/E8ogRIv7z0PKLTx6jPGZtKeYjWFNlsqt7zU3f4DLYakbJ9+dNEgcPzhjuPXNVh1TE74rZnBVxwaFvHVMrN6H8R+qBsHfGIgfomB1zRPCV9olz8QnYUiBBiqATxEucw7lUZAipZf2VjX35FLNFyLRDpj7AH1NZiJWoPt5XCkh3Z73nCkbGPAY7Grqr3XwWTCt9Bu8Bil8WZ3EPsfYIsE7daj0mkqGlmiNtw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Sl/diJvG+QLXcaH2Op++o+G1PVA4ZiuPgvrtxuNtCj4=;
 b=PRq8X5iKBmfHPXeOgwJzMu1pgnVt47kguLrWK2jZzC9ALi4xygnMv0wzhfuUBVnSB6qK2SLrrhe4769g1KSZ9z79hd5Bio6ljHK/BRCl0rMguIqlHyyA11ovyMYrNBF8Ei1xcS7Mxzr2IAf11Hs9v856i1rrCy+k7ZN0bQHY3eVsCLQVys45Hv6jk7hy6X6XykdBYRXZEs3qOWRfFbPo9Z0f9y9Hbr4sTsqxBk9tCzLpH1Hu9dk/cxm34KDMYrwzpZDRgprU/ZNLRJlMHwvOJGUhFxlm9O+UpUn9XbjslifFHIh8+3gqHeyw7DmUoBVOSNJ6mS1bkBWuyUkXFimmEQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Sl/diJvG+QLXcaH2Op++o+G1PVA4ZiuPgvrtxuNtCj4=;
 b=cmCQhu9uTB6e/QThbvywpsnFQ12hlSMyNJHkckRNRDAThBEaTor/kuenGaEcZmPEZa80g+onwN2ZhlIhay+7b2ZceHsxm2xggdH0ptSxER5eH04HZOfEJoTPGHYlZqiWGslmtNuASzXZa+be186Sl1UoBx406OigNsMxCFKIudg=
Received: from BYAPR02CA0011.namprd02.prod.outlook.com (2603:10b6:a02:ee::24)
 by CH0PR12MB8461.namprd12.prod.outlook.com (2603:10b6:610:183::10) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28; Mon, 15 Jul
 2024 17:28:44 +0000
Received: from SJ1PEPF000023DA.namprd21.prod.outlook.com
 (2603:10b6:a02:ee:cafe::79) by BYAPR02CA0011.outlook.office365.com
 (2603:10b6:a02:ee::24) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:44 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB03.amd.com; pr=C
Received: from SATLEXMB03.amd.com (165.204.84.17) by
 SJ1PEPF000023DA.mail.protection.outlook.com (10.167.244.75) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.5 via Frontend Transport; Mon, 15 Jul 2024 17:28:43 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB03.amd.com
 (10.181.40.144) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:42 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:41 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alejandro.lucero-palau@amd.com>
Subject: [PATCH v2 00/15] cxl: add Type2 device support
Date: Mon, 15 Jul 2024 18:28:20 +0100
Message-ID: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 8bit
Received-SPF: None (SATLEXMB03.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SJ1PEPF000023DA:EE_|CH0PR12MB8461:EE_
X-MS-Office365-Filtering-Correlation-Id: d2264491-cc8c-460a-a1da-08dca4f3938a
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|376014|36860700013|82310400026|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?RnFPaFVXdEh6WENkdE9IN1ZZL3p1QUQ0YzdwOW10bzVJK2dDeVpBTkpqb0kv?=
 =?utf-8?B?alNlY2pTYzJXNmcxQklVcUxwTWplaTJyak9nSDM1TkdPQVdpZk14SlRReXJH?=
 =?utf-8?B?eWl5QXArZHhhUGliU1ZpTThpUXBWU1IxYmd4eFBQdFNHQVRoZlNXTkZJOEsv?=
 =?utf-8?B?V3pPVGVQQnFSNzh4NnAxbXg3ZGxpRG5xL1BybnR5WVB6ak1qUXFsWlN2Ykd2?=
 =?utf-8?B?Qi8wY3pPVHE2a3ZWdXo5N090RnB3WjJBZUVMOWo2SU9jOTdXRER2eFhvV3pU?=
 =?utf-8?B?dW1JSkhNOUZua3IweFVISUN5ZGRoWUt5OUQxYUVZVURvdHJOdXhLREtYLzFu?=
 =?utf-8?B?MkN2STQxejZES3YyQk5jS1pMb08wb0ZBUmg2ai9FNTFFWnIxaEJGWU5iczZP?=
 =?utf-8?B?aEJDMXlxbnlOWlBsTlRyTm53dDE3a1U5UjVrK0tYU2hqRUlONGtWMm11cHBv?=
 =?utf-8?B?WU0rWk8zMEx1Nk1SNVNWclQ1OTVqdkMwM1hOWS9rc1hqWE5OQWQydHBZMEkw?=
 =?utf-8?B?K2hYRWtiaGM0K1R2cXJnUDljNmhibUI5UHZVWkw3T1h1V0hkR2VYdlZiZzJh?=
 =?utf-8?B?UkwwTDQ2emJYVklIWUF4WDhEeXFVRHRIWGExalo1bi84RFlyb25DdTQrYmFS?=
 =?utf-8?B?ZVc2YUJYeU5jbVNxWmo4cWtQV1hDN2o0VDkzRGRzR0xCbnNsM1o5Vmx2bUxN?=
 =?utf-8?B?K0krRU9OOWYzcGZnUU9meWNaMnNjK3l6R2tBSkIzRjlId1VqWDY3b3ExVVBj?=
 =?utf-8?B?bE5ObVVRaGRlLzZTVmRlckZ5eFk2NVF5c0RTbjdZOXV1WjhhSlRUNWZSa2Vn?=
 =?utf-8?B?SXJrZnowYlpwS3k5YWR3SUVDU0Y2cmFXWEJDT3dvbmk1RldDMmxqSDJCU1NY?=
 =?utf-8?B?Q09kZnUraW9sWnR5VVFLVHFSc1h5bWlzNDlnZ0JnOUdLNWNtQ3B3Z1lZMmlQ?=
 =?utf-8?B?THc0VXVZNmpIUTFtTEFoQXRKK2RWSGV0SzZ3T1haYlN2UVlYMUl0OTE1UFhN?=
 =?utf-8?B?UnZkMjdGU0d3R2NZWkJ2QS9KY25sZW43ZjVKeTVlYjVzaU5QWVdzZkE3ckdP?=
 =?utf-8?B?SEVuT0NLSUN6QU1aYU01YWNJY09sRXpIb3FhcytkL1lJUWoyTEhqZkNqbVhY?=
 =?utf-8?B?dmFaa1Y2ekhnMU5yeDFBdGVqYmFpV3JJVnNWeG4wWXlOdUo4ekZxWWdsSFVZ?=
 =?utf-8?B?M2c2aWNoOThqQzhLMTlPQW5TS1VibDNXRUk3QUwzTmQzbTFsUXJjeWlURGpx?=
 =?utf-8?B?bitGblFUenptRlYzdHlJbUNjcHZiTm9GUHhkd0RuSm9uVDNCQ3JMYk11eTI3?=
 =?utf-8?B?OTNQWkcyQlJNUXJMVjE3QVpmSlBlVlBnUUMzUzhPQlN3aEE2Q2J6cXhkY1Bx?=
 =?utf-8?B?UUEvM3hnNThwMmJMQkovbExJM0s1ZG5KVk1ScU1zUzdwb3dCVWpDbzd6RFdz?=
 =?utf-8?B?QjZmMEpMYXgwdVpid05ORVRtc2ZxM2FvT1k0dXZ6T21vdnYybGdvcXFsN3RR?=
 =?utf-8?B?STZ5ZlFRTU9VRmYrMnRXMWRNb3VNMTFqZ3NwVUNuZDI5VlNjM2Qrd0l6aHYz?=
 =?utf-8?B?VUFReDZkSnFMc2ROQ2dxbktrN3hNNzNZSFZmZTFzU3VOdU1JYlhoZ0c1Y3BB?=
 =?utf-8?B?aFc5TkZQK1dhTnFaY0JOQnBjNVI1L1VNWnN5dUtQajZ0NFZIaXhhbXc5ZkF1?=
 =?utf-8?B?aSszbUpIT2lTVTV4SEQ5cXdrRlRzOWFJUFYwRVQwTlJWbUlNSWhNUVMzTmwr?=
 =?utf-8?B?TnVUcHpPNUpqR2JyY2ltSEFxRmxWY1lIWjJmVndvb1N1TERtQVRJTXJmZ3Fm?=
 =?utf-8?B?UzZkcC9WWllpdkVUMkNjWXdWd0VhNkNrNjVxZ01Xb1JGdHlyMmVoVmZSZUl0?=
 =?utf-8?Q?8OPqBW2Xk2bf+?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB03.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(1800799024)(376014)(36860700013)(82310400026)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:43.7705
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: d2264491-cc8c-460a-a1da-08dca4f3938a
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB03.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	SJ1PEPF000023DA.namprd21.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH0PR12MB8461

From: Alejandro Lucero <alejandro.lucero-palau@amd.com>

This is a second version for adding CXL Type2 support with changes from the
first RFC patchset.

I have removed the introduction about the concerns with BIOS/UEFI after the
discussion leading to confirm the need of the functionality implemented, at
least is some scenarios.

There are two main changes from the RFC:

1) Following concerns about drivers using CXL core without restrictions, the CXL
struct to work with is opaque to those drivers, therefore functions are
implemented for modifying or reading those structs indirectly.

2) The driver for using the added functionality is not a test driver but a real
one: the SFC ethernet network driver. It uses the CXL region mapped for PIO
buffers instead of regions inside PCIe BARs.

Current CXL kernel code is focused on supporting Type3 CXL devices, aka memory
expanders. Type2 CXL devices, aka device accelerators, share some functionalities
but require some special handling.

First of all, Type2 are by definition specific to drivers doing something and not just
a memory expander, so it is expected to work with the CXL specifics. This implies the CXL
setup needs to be done by such a driver instead of by a generic CXL PCI driver
as for memory expanders. Most of such setup needs to use current CXL core code
and therefore needs to be accessible to those vendor drivers. This is accomplished 
exporting opaque CXL structs and adding and exporting functions for working with
those structs indirectly.

Some of the patches are based on a patchset sent by Dan Williams [1] which was just
partially integrated, most related to making things ready for Type2 but none
related to specific Type2 support. Those patches based on Dan´s work have Dan´s
signing as co-developer, and a link to the original patch.

A final note about CXL.cache is needed. This patchset does not cover it at all,
although the emulated Type2 device advertises it. From the kernel point of view
supporting CXL.cache will imply to be sure the CXL path supports what the Type2
device needs. A device accelerator will likely be connected to a Root Switch,
but other configurations can not be discarded. Therefore the kernel will need to
check not just HPA, DPA, interleave and granularity, but also the available
CXL.cache support and resources in each switch in the CXL path to the Type2
device. I expect to contribute to this support in the following months, and
it would be good to discuss about it when possible.

[1] https://lore.kernel.org/linux-cxl/98b1f61a-e6c2-71d4-c368-50d958501b0c@intel.com/T/

Alejandro Lucero (15):
  cxl: add type2 device basic support
  cxl: add function for type2 cxl regs setup
  cxl: add function for type2 resource request
  cxl: add capabilities field to cxl_dev_state
  cxl: fix use of resource_contains
  cxl: add function for setting media ready by an accelerator
  cxl: support type2 memdev creation
  cxl: indicate probe deferral
  cxl: define a driver interface for HPA free space enumaration
  cxl: define a driver interface for DPA allocation
  cxl: make region type based on endpoint type
  cxl: allow region creation by type2 drivers
  cxl: preclude device memory to be used for dax
  cxl: add function for obtaining params from a region
  efx: support pio mapping based on cxl

 drivers/cxl/core/cdat.c               |   3 +
 drivers/cxl/core/core.h               |   1 +
 drivers/cxl/core/hdm.c                | 160 +++++++--
 drivers/cxl/core/mbox.c               |   1 +
 drivers/cxl/core/memdev.c             | 122 +++++++
 drivers/cxl/core/port.c               |   4 +-
 drivers/cxl/core/region.c             | 459 ++++++++++++++++++++++----
 drivers/cxl/core/regs.c               |  11 +-
 drivers/cxl/cxl.h                     |   9 +-
 drivers/cxl/cxlmem.h                  |  11 +
 drivers/cxl/mem.c                     |  24 +-
 drivers/cxl/pci.c                     |  39 ++-
 drivers/net/ethernet/sfc/Makefile     |   2 +-
 drivers/net/ethernet/sfc/ef10.c       |  25 +-
 drivers/net/ethernet/sfc/efx.c        |   6 +
 drivers/net/ethernet/sfc/efx_cxl.c    | 134 ++++++++
 drivers/net/ethernet/sfc/efx_cxl.h    |  30 ++
 drivers/net/ethernet/sfc/mcdi_pcol.h  |   3 +
 drivers/net/ethernet/sfc/net_driver.h |   4 +
 drivers/net/ethernet/sfc/nic.h        |   1 +
 include/linux/cxl_accel_mem.h         |  58 ++++
 include/linux/cxl_accel_pci.h         |  23 ++
 22 files changed, 1021 insertions(+), 109 deletions(-)
 create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
 create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
 create mode 100644 include/linux/cxl_accel_mem.h
 create mode 100644 include/linux/cxl_accel_pci.h

-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2057.outbound.protection.outlook.com [40.107.223.57])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A5403482FF;
	Mon, 15 Jul 2024 17:28:50 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.57
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064532; cv=fail; b=Rzi816VMm2rn9NqoTpg02+vP+OdpIA7ET7awVmyvvNEuUH8sgP26tWLZIiRKCFZQDPEw9t9GymM6hFp8Pm6fVCNM9AZUKjMqmVJHq+eLJB8tMzKql/T9C0pYSXb63oKHlYO+yIEHizLC66AOWyDWL04Yh+eQzCVO8QxjVMqex1w=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064532; c=relaxed/simple;
	bh=JiZD/sVW0oMAP22Ldy3xtseUJoplCp0JQCJVzAEJrpQ=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=J+CG4QyIkucoeloeB0tS3afEbffofql5bsiQzYrmCZyAhbmWf942nrFbOMMl/Mhe8AJOBkonkRtiTil4KSDmiZeS6SRLK6Pn41R1Q7kqrFBuQuLo9zYGk3RCOHYUdocjjovwNPLbR/33vekFYkjrsksK0tQ2hQMtUb4e64KHttc=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=C9badfe4; arc=fail smtp.client-ip=40.107.223.57
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="C9badfe4"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=D1s9u9NXJS+5Ju7309QqLCO6AprZlPdUPhCljezSV0drUbWoGfuEgwY2BQp4hKC5Btq+PTuTUXvLlRurjtFb9gVb+nJQfWZN+dweuQUpf96rGs4ssprWHovgN3dndIK0rTn4N0qwle+2vsiUgR2hEO1uJYQ3Sup8b4iCZgLUnkZbG1tFfktRmG2HiVUPfbn91jH4DX6OYOIbRNuo7fgSfJrqeDAggXLKmwzkxdG3fDmb76s5YNl2TazMBSO4zaHeAITCloAfY6FFucvLqRJo9plucQuP82OOpLUFq1TPDCtj4cRUs+GDONb3sPcJ1kpu8MT5KqW7n/s+wxUkpiAT1Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=KX2PANqmejnodiJ8QBVFxKSGeEKF7jqaqv/zITOH6i4=;
 b=NbQon9xZQki8yN1VehObGxbO//r7NPTpkcpPOXiccO9PRk64HQw/CckeBSgXGPKN7ih7Nx+8pKxcskPDi2mAPCSXYP1ctQf0wiv+vDkR5YTzlmpVY33gwyQlKeMluZXjZuhSk6b9wZWhrCgtwF1KuguQ9N3HoNpq/zP10ig5XlQDwJeSapDQNV0iOwmF5K/HWHmByWvWxj58wWu7yta9024QKR/aC29+oMtwgMXd0tjw6HHaFK2Z2vihnKxTFFts8UNSwpjPZe+t7Ai+6M8Jg314NfxwMJYJPAz8IpLX3XBnLxYGeqAmpIKzXrWIrekipfavJMQOWK+Yrsn8gTWcEA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=KX2PANqmejnodiJ8QBVFxKSGeEKF7jqaqv/zITOH6i4=;
 b=C9badfe4fpoCD7En26d2icJhCjPwZopuP43Zf/W+LQ7t5any65XMbI7gxcS5/vU8lYB2JzLudp7TqlmpfCbGocIFLPXu4u9ueBkbwrhAePBLW6KTGrAVOIY6D6ele5G6LoxwyBFZu/Gff0VOtNHv7XbH8B8pq88xiShJp486A+8=
Received: from DM5PR07CA0085.namprd07.prod.outlook.com (2603:10b6:4:ae::14) by
 SA0PR12MB4349.namprd12.prod.outlook.com (2603:10b6:806:98::21) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7762.28; Mon, 15 Jul 2024 17:28:48 +0000
Received: from CY4PEPF0000EDD4.namprd03.prod.outlook.com
 (2603:10b6:4:ae:cafe::ac) by DM5PR07CA0085.outlook.office365.com
 (2603:10b6:4:ae::14) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:47 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD4.mail.protection.outlook.com (10.167.241.200) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:28:46 +0000
Received: from SATLEXMB05.amd.com (10.181.40.146) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:46 -0500
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB05.amd.com
 (10.181.40.146) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:45 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:44 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
Date: Mon, 15 Jul 2024 18:28:22 +0100
Message-ID: <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB05.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD4:EE_|SA0PR12MB4349:EE_
X-MS-Office365-Filtering-Correlation-Id: 13e8ae9f-2cb1-43b2-d1f6-08dca4f395bb
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|36860700013|82310400026|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?83hoWr5eG3agCsHUGtRgGFXzC2v58wvk8H/DTNdECfDWkdrn2Ic4bSCyWO5B?=
 =?us-ascii?Q?aCF3jKGSE2Ui7ouFhCdyAnk2zgAZW6UA1uMsl46mVM9Q12xgwKMvEHtx6SpO?=
 =?us-ascii?Q?DAsoctQ4pHUAv+Q1iLFZiR1RBD46ZmkIBHBF2gObjUmm2Kj55G76oTw238x6?=
 =?us-ascii?Q?VNaoNF8t5SRaDxmEJ3AOojD6whnaEIYYocg4P8V8krm8C4AYuUkgyIDAY1Jm?=
 =?us-ascii?Q?zIOTZmHvF8Y3AiqGH6OoyQHXTnKFOPKl5BYx9Q2FZfiLct7KL6Qy0bkm+juh?=
 =?us-ascii?Q?BZBQmqAesfk88L2w1xT98PA82TleiviQiD2gs4i49pByCIoYHBisvRgxAcxZ?=
 =?us-ascii?Q?/I0m3Pur9e1p7Mu842vb3xXsC8wnK46fphhpyxyBKUNhx+2T8TAE9YOZvxxB?=
 =?us-ascii?Q?goZ5hAc9/424xYRHZ6rAr4CBYkxV+f+4Etv+Es3so7036r5sfcXuWeFU/NB/?=
 =?us-ascii?Q?rGwU+g0lG2aspkbjS53hyxNh7vIFCH4yJllSJZsySkZME6GYxnhpyvQVqc8t?=
 =?us-ascii?Q?9rEjFKHhm9VEP/TpK6eWN/NA75uKTA61MJaVlX8TFReiInrAY57ih2SqQ/YH?=
 =?us-ascii?Q?LtIEf/8b1UkVXati0Go4MzuXGoR7407sWj53bYVBh1fba8IKr0dvSxDB/C2t?=
 =?us-ascii?Q?Do97mggaOjhZ96764FTvDrlfG5IzPylETFK60BPNBJSswvW5xQH6H6xVPTNC?=
 =?us-ascii?Q?6My3+tAwXPMj+1lYwKrQih39+MkPu26ftWYlDA7t85GYcX+K1vYq8ZHDzamR?=
 =?us-ascii?Q?6F1txQc6yIIcjiih4AXb7L0unX3kT8d1J7ZKcthNhW1ARwXJ7b0EtXQaIF4l?=
 =?us-ascii?Q?M7mf8sRiqNJBsmJrZU3g6HeYomN1IdCAJElM0Q1cFNP+k63UP9JrT+5RvOWD?=
 =?us-ascii?Q?YCX5PeWiIJbsc9dWmTmBY07aA+Hvp0ONyjO5cinqbjkiiPBFLP5cYgxCnMkH?=
 =?us-ascii?Q?GS0tQQ1qpZotQZvzURa8Kg1yj3oQqGxgKYyfZcx791nMLQDJhaYeFlmqy0Oo?=
 =?us-ascii?Q?86V34qTlw/KJvKJXAiQ8VjOxky9Tz7nobTGhEegdeWLuJZuMp1HUq3JIAMfb?=
 =?us-ascii?Q?GipyogJ7HrmxLb9Wj6roof7Nai/2htqV9qI1euQw44OmcmV/sWG/nOD0P58W?=
 =?us-ascii?Q?WFSQiVpwWzlE4TJiPYFCchtUph+YsZ5v9Yky9IH5LuFTuYvKQOiEiSDFdl0i?=
 =?us-ascii?Q?xmYgQ0+AV/+qoYcM/GuWbf6JOjkSjAbp/M0UW7wZqBTYZXxmLpaPAUW+aKWL?=
 =?us-ascii?Q?/n9Zb3jC375PD31mVpTipUzaEKKrjBylhjGFzIhtal+E0qto12qlBOz5G5nd?=
 =?us-ascii?Q?2Pzktr/ZLu/ObQ1Chvog6UkrPiz46kyQS553qmCMgXIEanl38eMjXZQgd+yd?=
 =?us-ascii?Q?YPzoaG4Sv/L+UK0Jfbd9kW98vrVOQURpXIsMtH3WRdadSwhlEioM8seFBYB+?=
 =?us-ascii?Q?5lsUUBXHDC1vg52+UhmOLKCbbQvzg6pxxQN4e5RQLmn34L/cRA2zhA=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(1800799024)(36860700013)(82310400026)(376014)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:46.9483
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 13e8ae9f-2cb1-43b2-d1f6-08dca4f395bb
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD4.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA0PR12MB4349

From: Alejandro Lucero <alucerop@amd.com>

Create a new function for a type2 device initialising the opaque
cxl_dev_state struct regarding cxl regs setup and mapping.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/pci.c                  | 28 ++++++++++++++++++++++++++++
 drivers/net/ethernet/sfc/efx_cxl.c |  3 +++
 include/linux/cxl_accel_mem.h      |  1 +
 3 files changed, 32 insertions(+)

diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
index e53646e9f2fb..b34d6259faf4 100644
--- a/drivers/cxl/pci.c
+++ b/drivers/cxl/pci.c
@@ -11,6 +11,7 @@
 #include <linux/pci.h>
 #include <linux/aer.h>
 #include <linux/io.h>
+#include <linux/cxl_accel_mem.h>
 #include "cxlmem.h"
 #include "cxlpci.h"
 #include "cxl.h"
@@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
 	return cxl_setup_regs(map);
 }
 
+int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
+{
+	struct cxl_register_map map;
+	int rc;
+
+	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
+	if (rc)
+		return rc;
+
+	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
+	if (rc)
+		return rc;
+
+	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
+				&cxlds->reg_map);
+	if (rc)
+		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
+
+	rc = cxl_map_component_regs(&cxlds->reg_map, &cxlds->regs.component,
+				    BIT(CXL_CM_CAP_CAP_ID_RAS));
+	if (rc)
+		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");
+
+	return rc;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_pci_accel_setup_regs, CXL);
+
 static int cxl_pci_ras_unmask(struct pci_dev *pdev)
 {
 	struct cxl_dev_state *cxlds = pci_get_drvdata(pdev);
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index 4554dd7cca76..10c4fb915278 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -47,6 +47,9 @@ void efx_cxl_init(struct efx_nic *efx)
 
 	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
 	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
+
+	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
+		pci_info(pci_dev, "CXL accel setup regs failed");
 }
 
 
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index daf46d41f59c..ca7af4a9cefc 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -19,4 +19,5 @@ void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
 void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
 void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
 			    enum accel_resource);
+int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2050.outbound.protection.outlook.com [40.107.237.50])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 33BA54C62A;
	Mon, 15 Jul 2024 17:28:52 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.50
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064535; cv=fail; b=BvEcXP8gh2+eSDZBAVnWpot3m9uouDyHHs/K3KWejbo6uwkwEPT/o7YVAxhFXFMbI4E8SSPyVsTSccpclF3e3fc+Q7BvINWpJ1MYTcmmZDD+NguiZ9CfhB/2ROXBOICcwrQWlGU6L34+4HVV2iiAQ1V5wlopGTocoAY3+A6OQP0=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064535; c=relaxed/simple;
	bh=F8GS8p34b0XV0Mca70ix3TkEkexLAGl85pp7ZlgDGf4=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=sc6PTPv6hf/pu2twIH4cCILwonaRQ1FW5zBKHwR3sSZjXNLfnWTwt4eQML1y7FljUC2xHZECcDxJMK8Qkd8IX0zpzfpafyQGHvp9Z8QYy73uWdAX7zSF6SWPrdp7T1hVs4JhnQ37imGvfdntBkhrksg0UZOthN/tAqh3aNt9KzU=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=b8949fBq; arc=fail smtp.client-ip=40.107.237.50
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="b8949fBq"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=ZokcBjthEsfakMuIdGH4kBMPTd5+5PV/yky0d5l0iTenoxjUYZq5WSyv2G/BTZkE2fmeJORpkzIZq0iqF/KFqSh5BoD+QQRkzi5DHR/DME+IJS9Uk+3DdynwVgQRKgZ2mt7Mn0kgEJM6/Ces8AaGgkbrWIWPBsAIxbjb721LA8P+DSnOBTnDK+1cF8ewaUoVbZbKBdF6frIhH9Hy8qcruM0WgFhfmvecuBqYQIDBP+dYkX+3wPMKBTK7ze5lvcGnSszVHNksJSI/NOTqtBm1dbhhrvMVRikzkG00R+jrgyb77WSfyx5SP7GDwKZWJq+Badr3Y/9V8JfEiE7LB5MHOw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=OPUzow2Cq0ECdT/dOJDe38VC/lapsSkFdWjr+H1KO3Y=;
 b=kv3pMzOTOxE3bb3QbsXU1ZpqCGMC6DiWQ0diheOXhLCvi5tLBBUB+WxozL6NtTPWkS1TJEzVL5YIQql5S4Eenu498tGYZIbnPXcKEdIL+kDCSdu6wHTQW9VAQM3hCys/g7CnUXMYCflWBoA2OJbO/ap6Bo9kMzJBzhG6Zn1my6zy+ZVGOxDWUD6gxkvwViVpxP9AODvD+Rkqcko/78tdJeQ92o/gYcPVltA5JI+koaET6BvJpD8lggMgkeUjFrIGLE/9xxP5zz6QGS9n1lPEMdVrfZXaq4usdMURnel0CzX4aRqw/D9PJ5/T3OB47TGAooNxE2MedpMgrWm067zzKQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=OPUzow2Cq0ECdT/dOJDe38VC/lapsSkFdWjr+H1KO3Y=;
 b=b8949fBqZygVmlp9m1FDgdOa9VbDkIP+2ijvYAkvXljVEyV0SVXfYi4YOWji/fTTTn1ahkoRzt/bs7XGrg2CyR2jsQv2Tf5FxH8zYlSIla9+VRcWGQHye1oQ302CqFCHaQ7zQL5eJFX1q5pqz8ugSVtF058d55F7pO+0r75a4js=
Received: from MW4PR04CA0155.namprd04.prod.outlook.com (2603:10b6:303:85::10)
 by IA1PR12MB6649.namprd12.prod.outlook.com (2603:10b6:208:3a2::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.25; Mon, 15 Jul
 2024 17:28:49 +0000
Received: from SJ1PEPF000023D8.namprd21.prod.outlook.com
 (2603:10b6:303:85:cafe::d5) by MW4PR04CA0155.outlook.office365.com
 (2603:10b6:303:85::10) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:48 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB03.amd.com; pr=C
Received: from SATLEXMB03.amd.com (165.204.84.17) by
 SJ1PEPF000023D8.mail.protection.outlook.com (10.167.244.73) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.5 via Frontend Transport; Mon, 15 Jul 2024 17:28:48 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB03.amd.com
 (10.181.40.144) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:47 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:46 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 03/15] cxl: add function for type2 resource request
Date: Mon, 15 Jul 2024 18:28:23 +0100
Message-ID: <20240715172835.24757-4-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB03.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SJ1PEPF000023D8:EE_|IA1PR12MB6649:EE_
X-MS-Office365-Filtering-Correlation-Id: c4c7fbf3-99a1-4a1b-72cb-08dca4f39633
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|82310400026|1800799024|36860700013|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?Z7BkGHQSmfSWlp2uUygq1exiXG0qpIrCEFKKUcjCwOEgZdQKdo77hYwam7SH?=
 =?us-ascii?Q?v0FuIiTqEj01w1DAYAQUNHx8wkOb1paTktc0ZgVXbr0kgkoKRzf+9HkzB55E?=
 =?us-ascii?Q?RamUYo105KDNfAift8vfZE8+nYs0zHW1OkyNW5hhdbHKEa8yJN2qRlpqTYZN?=
 =?us-ascii?Q?VmGBpL8mRDu6g4ezqtDZs4KurOCck7s407N2CCVXgeTQrMu0pqp6w1wA2VPf?=
 =?us-ascii?Q?qC2jrw+Z2MMSvfYxzZkUQhcEcvUcgMDMfG94J5vC3dEKtuV7LZHrhD+SYiCL?=
 =?us-ascii?Q?j8DX8WUBrGALQLF09+sE+Mj4ycBSCwBrqUcPWwa5N2clNJ13EVk2W1Cshwua?=
 =?us-ascii?Q?iaq4I5hf+qXJc/w+gcm2Llypbn4b5txxetMyylIxptbqmRqNwaDlDX67txBJ?=
 =?us-ascii?Q?OWooIWTAu/3qGVQz7B+LXBCIjUDCpDmTB7zO4kJ8rD22arMaOLgzP7br2wrR?=
 =?us-ascii?Q?zP6q2al1JeNQUE3QfCv6KbmzM6F7KjwoNA7IIzkWRfrTojyIfnWFPlUhL4L7?=
 =?us-ascii?Q?q4gCqxmHpEJNwlJZKBkyUhDdMMWCL+lqD8gpXiuRgVTZOonJxeTgmncrJ2nc?=
 =?us-ascii?Q?5K7OY216jJBgXeKU7cmSDuBhBfyVRwm6ADVEmKfyG2auvtDs+icIEwsEV8GB?=
 =?us-ascii?Q?kmUJMDuvV0fo7OXHKkFes0QiC8+jPPo44AgR3Cv4uPvrtx9n9KVAxL/seTQE?=
 =?us-ascii?Q?f6oOM3KNpUK4qKkXjnDfQDwg02+gR26x1qzFE74qlicL2AqdKVmEFKdEH8rj?=
 =?us-ascii?Q?FudAhKJtXwi1gTLTzld8ezJzzIbwqs5g9/wHzW+hTPWuYJNNLGINZv+DR+FX?=
 =?us-ascii?Q?MkGhqmJQpjNnJj5kYG3998Xf9UYjGp7wQLMLWdjxKx9jQOaYHGnn7JipLHZP?=
 =?us-ascii?Q?Za3Qm2MwiQmYhxu/zj1pLqn5DSATxgcHdNjshymOlNo27UtoWhaLL/G8Twfd?=
 =?us-ascii?Q?JC+N84KVBMTZirz+PHp+MiprTBonGyEHrEK4PnhsSwwuxaZyyWJNEzqgZmE8?=
 =?us-ascii?Q?WOuo5TUD0s+0h9Q0hxTBOB9QrrypzrbCZgA9qj/qgZEaF0KeQIbFhImv+1U+?=
 =?us-ascii?Q?ypLcUlYUiZKD4VpkgSJ4l85iRoxgyLsLt2YT0LLWmWEC2E2IHgHVw48HBmmB?=
 =?us-ascii?Q?F6lTv6nOseH976y7+tPMWFZjcFiULwTkkNEDyhyKsTn+lcltk1Utcupp2U3I?=
 =?us-ascii?Q?JaKHIaApjaF31lF+gGtswRJQN3Q+3VvqyvoChcixVV4/ef0RBnBh7dCgciXn?=
 =?us-ascii?Q?c9nQ+hcWW4/YUBzWtFoEkxgLBnWl0LsliznG+jTzmi+4Q7xnRdnQ4tzVmhFM?=
 =?us-ascii?Q?QBKw08xwn41SixOX6FGJixM5XXLkcqu/1OEVkfROHcYByXvZVbUypNYE1YAX?=
 =?us-ascii?Q?2Cp75UOo5ORtiw+Vu9p4NlN2CCaWAgHcMLgNzALjJ8u44/MXEjOSC18qUctB?=
 =?us-ascii?Q?IGU6iItrZaE=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB03.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(82310400026)(1800799024)(36860700013)(376014)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:48.2167
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: c4c7fbf3-99a1-4a1b-72cb-08dca4f39633
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB03.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	SJ1PEPF000023D8.namprd21.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA1PR12MB6649

From: Alejandro Lucero <alucerop@amd.com>

Create a new function for a type2 device requesting a resource
passing the opaque struct to work with.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/core/memdev.c          | 13 +++++++++++++
 drivers/net/ethernet/sfc/efx_cxl.c |  7 ++++++-
 include/linux/cxl_accel_mem.h      |  1 +
 3 files changed, 20 insertions(+), 1 deletion(-)

diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index 61b5d35b49e7..04c3a0f8bc2e 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -744,6 +744,19 @@ void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
 }
 EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
 
+int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram)
+{
+	int rc;
+
+	if (is_ram)
+		rc = request_resource(&cxlds->dpa_res, &cxlds->ram_res);
+	else
+		rc = request_resource(&cxlds->dpa_res, &cxlds->pmem_res);
+
+	return rc;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
+
 static int cxl_memdev_release_file(struct inode *inode, struct file *file)
 {
 	struct cxl_memdev *cxlmd =
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index 10c4fb915278..9cefcaf3caca 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -48,8 +48,13 @@ void efx_cxl_init(struct efx_nic *efx)
 	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
 	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
 
-	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
+	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds)) {
 		pci_info(pci_dev, "CXL accel setup regs failed");
+		return;
+	}
+
+	if (cxl_accel_request_resource(cxl->cxlds, true))
+		pci_info(pci_dev, "CXL accel resource request failed");
 }
 
 
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index ca7af4a9cefc..c7b254edc096 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -20,4 +20,5 @@ void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
 void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
 			    enum accel_resource);
 int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
+int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2066.outbound.protection.outlook.com [40.107.237.66])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 825E44D599;
	Mon, 15 Jul 2024 17:28:53 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.66
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064535; cv=fail; b=CAJe0Ucleo5ail8q/HYl7m4VA91NzhphDw2FNfiD17Cs8pdW6Mv6vEeN74zQFE3uqT/GXp9kCmR5Iv3SHJYMJmnImjrxg/mz6pXYvEOyUJYCfcoad2pBO5EU8GXWP/F3teqXO73QIUN2xjyV+MIP+4jOdKLMTzq9zWSJ7A6n8aw=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064535; c=relaxed/simple;
	bh=KbvS0L2V6WUOenSh3BY8rwT1gN0n3MDbBGja9lJobfE=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=QMKQ/po7woJwAbLMS9Xw78EIhQ+UaBzJa4i7luJC9le/LdimW6ijr4iapGhfmWKjLPzdeWfZdjhS7KvjOUbR9+EmJ08NQcMHmwmDMCvyAw5go6JcTKb36KoKbMxDK8I17dcTmQNL8qeXq0tET6fAe7GpUF9MhezedUumCrtDRpw=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=anyp9Gz6; arc=fail smtp.client-ip=40.107.237.66
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="anyp9Gz6"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=blLSIidqKWOxUODssdzmXP4dpwcyA3oyU1nJ1y1GaftowIKp28sQlFD9xWdc5hZ1/TLnOk3r8OxreoTjEeL9bcCbeitElu2rOC3hhBTF1quUVLHVLiXN0mifHTqYNmiL4u9v7mZEmCvBRoe8V+LjCCZ7kFFlwLfFb3yMiPO/mHzOSXiBCr7Dm8jTvtvHZ0MfPmiXTihV2t6w00lal6/zfyuArHdPqV6sp4sA8cehjp+QdHNUj+Q8WwHKzxj5UWtz5GSpK+oPnEImMDT0Xbq4AWDRhMUxwlIwBYkQaz4iHyKizhZWdZyr2KnIEIFOh2h4XgAXHRdvUjUroAYEiPHgWA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=VvurDS4JY07gUZudNXkHJINl7mq9EFEWTO8lAzDZTLA=;
 b=N9/q5RXbm5p0sAwyRBtRF+/zBZ+Q/VsErbYtAdK110xFARKYjj2rf+hxupwdmkkJStyBoni/5JJQx/VghyBJZLLQNm4KHlX0RAcH0YAaWiAmRliuXNrKFBkbnN09stx62zIcDxuq8aM0AyFfq8wjbreIQneV+YraQeJszlsyRRGnQd3rmm/KFQDkVE6keOUNsg+PhBC2nKivWNlP0LL1ICMf4QNqQ+AKBpLDDVF2GfvtZ2/Xg2QJ7pNb/Q3koyPbZ1TYHEEOWrDD8kCfSx0DbEkdIHMYGUHm0YUaHRbv46uvxc0c5LZkTz2zvonLwnfN/d2mLk/Ng/xV5PTbq2rbug==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=VvurDS4JY07gUZudNXkHJINl7mq9EFEWTO8lAzDZTLA=;
 b=anyp9Gz67ps92iiqhIa3MPQRs96I/MQWFUQtEiUjGwy67CJGLHP+cJX9fAXN0cRnR5hVYZzMeRFsDZC7/+OlILyKUpCpgEjAdI/IjXkaDGVqSYKS9T7/VVo5gSpj/dVHrropnzBlCFHftLL78qGsaTWs+J9DSHYY4X1NK+8CJxo=
Received: from CY8PR12CA0028.namprd12.prod.outlook.com (2603:10b6:930:49::28)
 by SN7PR12MB7833.namprd12.prod.outlook.com (2603:10b6:806:344::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7741.31; Mon, 15 Jul
 2024 17:28:49 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::77) by CY8PR12CA0028.outlook.office365.com
 (2603:10b6:930:49::28) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:49 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:28:49 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:48 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:47 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Date: Mon, 15 Jul 2024 18:28:24 +0100
Message-ID: <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB04.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|SN7PR12MB7833:EE_
X-MS-Office365-Filtering-Correlation-Id: 9fec45c5-ffbe-49df-6726-08dca4f39707
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|376014|82310400026|36860700013|1800799024|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?mfgIHKXP7DJtK04sGYoIvrCQ3tEa2lo+p/fEIcpMughz+Cx68fTCbDNvV85R?=
 =?us-ascii?Q?PlflBH3Tk3Yjoqyr4mcYA1ScAaV4bHbaupORuDv1hNyLQghYwBibz0TvhLK3?=
 =?us-ascii?Q?Q/W5WLuYYrBTcszOYeYxzXqsYxO8Kkg/OGWgJee0DoKJg7pvbngn1hsX53h/?=
 =?us-ascii?Q?VW6BNeUHOWH4y8FUTN4CD75lYssN+DagIzYGTLq2/0doOuLq74PfUYdip3ZA?=
 =?us-ascii?Q?iT16l/RXlf4trB8gkVujOJPJI1/KbjkjhY8l4+3cuhsYAWQa6YE+QFuTHK5s?=
 =?us-ascii?Q?dbnv9ngKMq9pZdYaKGnejUIPx7AUnEGOGyaxVeI2GCKsXVjlML8cg7/wkOJz?=
 =?us-ascii?Q?HiVDKz5nRxXh5xgbzuQ4Xnjfe/LaNHUgz9Wth3zgbMlgaJB2YwXAiXMXnweX?=
 =?us-ascii?Q?9gSz2P9nmnEydTbkFDdSU19REa+HnIDsEHmOnfW4w9bEi1Czup2RIZFnndD5?=
 =?us-ascii?Q?EMFhVvcuZ+rSS7gTDbjOlnlc02fF3rAKnu8zgUsovBc2NZGLCjYgutbr67XY?=
 =?us-ascii?Q?vhpi/slYO6a/ozGqvQ+q13P64pTOb6JxkVgY+pkzfnOITMftj7LuLdvGzcfM?=
 =?us-ascii?Q?XSeDdmCyyHg8f7yeczMlwQ7ONdYOEbU83+bAViSISPZ1Is5H6VoK9ipE2jl0?=
 =?us-ascii?Q?LAZac++Q2R+GYSXNMmSGiFVYZymaXRz5NW/f9gHXv7WNt4YZ+Mh4m0pLRvRZ?=
 =?us-ascii?Q?LR5kGGvQiicRorDw5KBMbEIzeTBZOf6W3KwKvziASeL/SqkP3USEorPZ6v3R?=
 =?us-ascii?Q?Tmxb1rapdjWZY+Mz2v7L7t5mvblZYRNI8xCFsH+EAYzUPnhuI1HzCKFmLcjZ?=
 =?us-ascii?Q?5UOG3ShRq1tqzHCbOgWVi9b5bEiLcxevZ4J3cj2CdoocHZ8vhjUXXzdHIh2Y?=
 =?us-ascii?Q?cAVohTVxJ+/r4VSwBSiG8DXAqXjm332MD03Z8b2NOtxUULn5x1Nq+76bDFx6?=
 =?us-ascii?Q?tUIZpfYdBAFRbxfdgGxNErNgybFOkhmWTRpXykaQ3z+Ky1zGKbGGb9AD8AEU?=
 =?us-ascii?Q?bzS/88f5skkwNHdtyoFxxHKhVHW07u6QK2ex7yDWJ0Y2jheeLs09F7ophvkB?=
 =?us-ascii?Q?pU6P2c1JTcNWtHomqhQsnrRPYrFnnz21gd5EWg5YRK60b+2K4pw7iMVkDWxy?=
 =?us-ascii?Q?ycxaIBBCYulv0vLUPctbnXp64upE7R6VkavzSoAh6O0TIAW3sbw+OzQZFqzh?=
 =?us-ascii?Q?ESiGb+nBY/Pws38m7tYW9s9GC/8YkRb4U1u9ij0nrij2tIfjU9c3p1b+SNJb?=
 =?us-ascii?Q?d4vQguoqDOCPTL19Hm+bYDQjM9pZZtwu4OSoHKX8h8GOixSH9M6h2M6gA0Mt?=
 =?us-ascii?Q?rxzg4Vj/EbzW1p/rPlmBPKAM8fUbz/QFEB6mydsil7jqoIc18jGV7TtJDMIx?=
 =?us-ascii?Q?IguDXV10KnfeAxE6g0GSwhkEgPAuznGb5YxjdaFzvRk7dZFWt6V+bXqoSnjP?=
 =?us-ascii?Q?p1jPIBzDhHdnimEks8wJbCnRH2AAdtaY?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(376014)(82310400026)(36860700013)(1800799024)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:49.6370
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 9fec45c5-ffbe-49df-6726-08dca4f39707
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN7PR12MB7833

From: Alejandro Lucero <alucerop@amd.com>

Type2 devices have some Type3 functionalities as optional like an mbox
or an hdm decoder, and CXL core needs a way to know what a CXL accelerator
implements.

Add a new field for keeping device capabilities to be initialised by
Type2 drivers. Advertise all those capabilities for Type3.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/core/mbox.c            |  1 +
 drivers/cxl/core/memdev.c          |  4 +++-
 drivers/cxl/core/port.c            |  2 +-
 drivers/cxl/core/regs.c            | 11 ++++++-----
 drivers/cxl/cxl.h                  |  2 +-
 drivers/cxl/cxlmem.h               |  4 ++++
 drivers/cxl/pci.c                  | 15 +++++++++------
 drivers/net/ethernet/sfc/efx_cxl.c |  3 ++-
 include/linux/cxl_accel_mem.h      |  5 ++++-
 9 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
index 2626f3fff201..2ba7d36e3f38 100644
--- a/drivers/cxl/core/mbox.c
+++ b/drivers/cxl/core/mbox.c
@@ -1424,6 +1424,7 @@ struct cxl_memdev_state *cxl_memdev_state_create(struct device *dev)
 	mds->cxlds.reg_map.host = dev;
 	mds->cxlds.reg_map.resource = CXL_RESOURCE_NONE;
 	mds->cxlds.type = CXL_DEVTYPE_CLASSMEM;
+	mds->cxlds.capabilities = CXL_DRIVER_CAP_HDM | CXL_DRIVER_CAP_MBOX;
 	mds->ram_perf.qos_class = CXL_QOS_CLASS_INVALID;
 	mds->pmem_perf.qos_class = CXL_QOS_CLASS_INVALID;
 
diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index 04c3a0f8bc2e..b4205ecca365 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -616,7 +616,7 @@ static void detach_memdev(struct work_struct *work)
 
 static struct lock_class_key cxl_memdev_key;
 
-struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
+struct cxl_dev_state *cxl_accel_state_create(struct device *dev, uint8_t caps)
 {
 	struct cxl_dev_state *cxlds;
 
@@ -631,6 +631,8 @@ struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
 	cxlds->ram_res = DEFINE_RES_MEM_NAMED(0, 0, "ram");
 	cxlds->pmem_res = DEFINE_RES_MEM_NAMED(0, 0, "pmem");
 
+	cxlds->capabilities = caps;
+
 	return cxlds;
 }
 EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
index 887ed6e358fb..d66c6349ed2d 100644
--- a/drivers/cxl/core/port.c
+++ b/drivers/cxl/core/port.c
@@ -763,7 +763,7 @@ static int cxl_setup_comp_regs(struct device *host, struct cxl_register_map *map
 	map->reg_type = CXL_REGLOC_RBI_COMPONENT;
 	map->max_size = CXL_COMPONENT_REG_BLOCK_SIZE;
 
-	return cxl_setup_regs(map);
+	return cxl_setup_regs(map, 0);
 }
 
 static int cxl_port_setup_regs(struct cxl_port *port,
diff --git a/drivers/cxl/core/regs.c b/drivers/cxl/core/regs.c
index e1082e749c69..9d218ebe180d 100644
--- a/drivers/cxl/core/regs.c
+++ b/drivers/cxl/core/regs.c
@@ -421,7 +421,7 @@ static void cxl_unmap_regblock(struct cxl_register_map *map)
 	map->base = NULL;
 }
 
-static int cxl_probe_regs(struct cxl_register_map *map)
+static int cxl_probe_regs(struct cxl_register_map *map, uint8_t caps)
 {
 	struct cxl_component_reg_map *comp_map;
 	struct cxl_device_reg_map *dev_map;
@@ -437,11 +437,12 @@ static int cxl_probe_regs(struct cxl_register_map *map)
 	case CXL_REGLOC_RBI_MEMDEV:
 		dev_map = &map->device_map;
 		cxl_probe_device_regs(host, base, dev_map);
-		if (!dev_map->status.valid || !dev_map->mbox.valid ||
+		if (!dev_map->status.valid ||
+		    ((caps & CXL_DRIVER_CAP_MBOX) && !dev_map->mbox.valid) ||
 		    !dev_map->memdev.valid) {
 			dev_err(host, "registers not found: %s%s%s\n",
 				!dev_map->status.valid ? "status " : "",
-				!dev_map->mbox.valid ? "mbox " : "",
+				((caps & CXL_DRIVER_CAP_MBOX) && !dev_map->mbox.valid) ? "mbox " : "",
 				!dev_map->memdev.valid ? "memdev " : "");
 			return -ENXIO;
 		}
@@ -455,7 +456,7 @@ static int cxl_probe_regs(struct cxl_register_map *map)
 	return 0;
 }
 
-int cxl_setup_regs(struct cxl_register_map *map)
+int cxl_setup_regs(struct cxl_register_map *map, uint8_t caps)
 {
 	int rc;
 
@@ -463,7 +464,7 @@ int cxl_setup_regs(struct cxl_register_map *map)
 	if (rc)
 		return rc;
 
-	rc = cxl_probe_regs(map);
+	rc = cxl_probe_regs(map, caps);
 	cxl_unmap_regblock(map);
 
 	return rc;
diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
index a6613a6f8923..9973430d975f 100644
--- a/drivers/cxl/cxl.h
+++ b/drivers/cxl/cxl.h
@@ -300,7 +300,7 @@ int cxl_find_regblock_instance(struct pci_dev *pdev, enum cxl_regloc_type type,
 			       struct cxl_register_map *map, int index);
 int cxl_find_regblock(struct pci_dev *pdev, enum cxl_regloc_type type,
 		      struct cxl_register_map *map);
-int cxl_setup_regs(struct cxl_register_map *map);
+int cxl_setup_regs(struct cxl_register_map *map, uint8_t caps);
 struct cxl_dport;
 resource_size_t cxl_rcd_component_reg_phys(struct device *dev,
 					   struct cxl_dport *dport);
diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
index af8169ccdbc0..8f2a820bd92d 100644
--- a/drivers/cxl/cxlmem.h
+++ b/drivers/cxl/cxlmem.h
@@ -405,6 +405,9 @@ struct cxl_dpa_perf {
 	int qos_class;
 };
 
+#define CXL_DRIVER_CAP_HDM	0x1
+#define CXL_DRIVER_CAP_MBOX	0x2
+
 /**
  * struct cxl_dev_state - The driver device state
  *
@@ -438,6 +441,7 @@ struct cxl_dev_state {
 	struct resource ram_res;
 	u64 serial;
 	enum cxl_devtype type;
+	uint8_t capabilities;
 };
 
 /**
diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
index b34d6259faf4..e2a978312281 100644
--- a/drivers/cxl/pci.c
+++ b/drivers/cxl/pci.c
@@ -502,7 +502,8 @@ static int cxl_rcrb_get_comp_regs(struct pci_dev *pdev,
 }
 
 static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
-			      struct cxl_register_map *map)
+			      struct cxl_register_map *map,
+			      uint8_t cxl_dev_caps)
 {
 	int rc;
 
@@ -519,7 +520,7 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
 	if (rc)
 		return rc;
 
-	return cxl_setup_regs(map);
+	return cxl_setup_regs(map, cxl_dev_caps);
 }
 
 int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
@@ -527,7 +528,8 @@ int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
 	struct cxl_register_map map;
 	int rc;
 
-	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
+	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
+				cxlds->capabilities);
 	if (rc)
 		return rc;
 
@@ -536,7 +538,7 @@ int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
 		return rc;
 
 	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
-				&cxlds->reg_map);
+				&cxlds->reg_map, cxlds->capabilities);
 	if (rc)
 		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
 
@@ -850,7 +852,8 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		dev_warn(&pdev->dev,
 			 "Device DVSEC not present, skip CXL.mem init\n");
 
-	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
+	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
+				cxlds->capabilities);
 	if (rc)
 		return rc;
 
@@ -863,7 +866,7 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	 * still be useful for management functions so don't return an error.
 	 */
 	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
-				&cxlds->reg_map);
+				&cxlds->reg_map, cxlds->capabilities);
 	if (rc)
 		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
 	else if (!cxlds->reg_map.component_map.ras.valid)
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index 9cefcaf3caca..37d8bfdef517 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -33,7 +33,8 @@ void efx_cxl_init(struct efx_nic *efx)
 
 	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability found");
 
-	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
+	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev,
+					    CXL_ACCEL_DRIVER_CAP_HDM);
 	if (IS_ERR(cxl->cxlds)) {
 		pci_info(pci_dev, "CXL accel device state failed");
 		return;
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index c7b254edc096..0ba2195b919b 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -12,8 +12,11 @@ enum accel_resource{
 	CXL_ACCEL_RES_PMEM,
 };
 
+#define CXL_ACCEL_DRIVER_CAP_HDM	0x1
+#define CXL_ACCEL_DRIVER_CAP_MBOX	0x2
+
 typedef struct cxl_dev_state cxl_accel_state;
-cxl_accel_state *cxl_accel_state_create(struct device *dev);
+cxl_accel_state *cxl_accel_state_create(struct device *dev, uint8_t caps);
 
 void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
 void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2075.outbound.protection.outlook.com [40.107.92.75])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 6F9B8481CD;
	Mon, 15 Jul 2024 17:28:54 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.75
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064536; cv=fail; b=CAQmnwglEJNhoJ++7cybPnYKs7YEZ/uTsxIt2xzG7DYokgTEvWHPPYJ5T4Q5JBfQdBLBIQV3evAO5qFcyJvjsxGWIjlim0BsqXJ37pEr/O8Tbj3BWxTrB0wLgoy0ruJNqJvcu/yCH5SrzxR7zstCODn4kznTppNZn7zWIUp7DS8=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064536; c=relaxed/simple;
	bh=Oa/e9wb5h3jNEP3DHIepxNpYhzzLgaOQrgbxp5b0rxo=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=g11mBdE6A8ticJ9AV40QbrkS6RYglWsAef9ImWm0fNDRNo6kbawkLCzZHI9REct1x4i8a7g8EKxUbTG45KvDeSv9L4y3XIAXXHQxTJsapt+EU2o+ekkZ3EYmMGrSa4fHJ7B+zqO3LVlss+TYTF3x62BS8GpW+xrPv/9lD8G3EEI=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=S4YVMii4; arc=fail smtp.client-ip=40.107.92.75
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="S4YVMii4"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=BvrOLBh+0KT8qqIKFDwkNkiJeO7W/2/hxc7DwZrEhRhHouBNr/3IwcyzIN6xkQ492EaU7SW+JNp25F8lxEYaslQFqKBVbusLL+iLbacBwreL1T9tYghF+mAABTS+7eivYO9qFdt0E58RD7DGGyDhvd+NEMf5NHS9o2BX7ySA607VXugqVotHW4frxJBJQyVMlaPvTMOt831tyHIhhTOhFJn9utUJcMXF+wTovd2Dudaxc2xxGsLqV9yXof3Q/lwL3sEVSQ9gKJ4+Z1Fy2oMb1oHN6SHzCG3T8DSSkf5ohDuqw6VEk9l0SR1lJNiEg8dNzN2q1962Lf3PCaKf3ma67A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=YMNBtYKx5gHyDrtdQ/82TEODfgFpLHEKyB2LfAdsiOE=;
 b=fAmwZECaxz/Ftqe4iXUvJnXvCjTfW/0G0r6m9MqKafcKRKHnU8Rj9RbRXXmuAHF8G1xrNDzarcPCKBIaHHOYABjFCpZPIxqwt1L3QSYvaAR83cXHv+Yej2fM6XFEFaKCyNVkeRGsmv8ugFTF/ypgC/BKxC8sJ7Ak8GdHa/zBtOfLDo5gPxY6+xn+Fn2eOMWvkTCaRuNYHaMHy7FlXm0tGheddlF2HWQa4sdGp7nT/Bqynt/NW3vSEuaKjzWvDujMQoKyxyLStwPGPYYnEFC8wuDPm/dErzppcPfYB8Ms857BlsQECF60qWAFcvdxG1bPgF+teSliW1IPMSa4lgkZmQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=YMNBtYKx5gHyDrtdQ/82TEODfgFpLHEKyB2LfAdsiOE=;
 b=S4YVMii4fnlAWMBEumBC3i4o6m38+UdNtLxuYMgllrPgSe2ha1RkmUbfc6EXu+cfQq1VsUpDzc3mnyak6+IZK7TN++sHORAj4ArzFffTVKQligvkC+YsitHiZS771qOHspnu5kEGOTUgkCkGUTqxpu+ZPg6k5NeL0k5lPWMt7y0=
Received: from BYAPR07CA0064.namprd07.prod.outlook.com (2603:10b6:a03:60::41)
 by SJ1PR12MB6289.namprd12.prod.outlook.com (2603:10b6:a03:458::17) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.23; Mon, 15 Jul
 2024 17:28:45 +0000
Received: from SJ1PEPF000023D4.namprd21.prod.outlook.com
 (2603:10b6:a03:60:cafe::7d) by BYAPR07CA0064.outlook.office365.com
 (2603:10b6:a03:60::41) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:45 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB03.amd.com; pr=C
Received: from SATLEXMB03.amd.com (165.204.84.17) by
 SJ1PEPF000023D4.mail.protection.outlook.com (10.167.244.69) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.5 via Frontend Transport; Mon, 15 Jul 2024 17:28:45 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB03.amd.com
 (10.181.40.144) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:44 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:43 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 01/15] cxl: add type2 device basic support
Date: Mon, 15 Jul 2024 18:28:21 +0100
Message-ID: <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB03.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SJ1PEPF000023D4:EE_|SJ1PR12MB6289:EE_
X-MS-Office365-Filtering-Correlation-Id: fd750184-5d36-402a-fecc-08dca4f3947f
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|376014|1800799024|82310400026|36860700013|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?+nrcrbMOW95CQ8TL1MmdUFHHaKvqEVmnB7MH7swcVA22p2gbvAss2L0C8Nok?=
 =?us-ascii?Q?DXPKxSEhhFGnvCpUYWudKNHuxxu7GIpCoMrLhuaoK+lmza1hpxlS+B8u02EC?=
 =?us-ascii?Q?iLfCqDDnk8WsRjYjQCI/mop4Aisdb35nFlEHJ5pzl5M9mixzx/80MGBYoC/K?=
 =?us-ascii?Q?/tdtT6AAd6KVHVRy8Brq5Ve6886x0E5mJkNH7s97/NJr/xCgnI8rOGpB3guF?=
 =?us-ascii?Q?04IFChz4WlQ5vlVfkLfL8P0qUxRkJSPo8HhSO6cmfzA0QE/DItgyIb6XbZI5?=
 =?us-ascii?Q?8V8n4rNLais42Or+z0afseYYQkXdLjzWcjPlHMFI1+GKFmSjuB9HbMsAmSfX?=
 =?us-ascii?Q?ki9VS2vnPhmtweeU+QNvvtKYETCAWF/1FYXjqkgeUBwgeeayN+sOT88kyIQz?=
 =?us-ascii?Q?cqQygpHzELn+1dXQE/ju3lT+wm3bzLqvfMrgwA9EYUbCym1YQoTav+c7qUOy?=
 =?us-ascii?Q?KXg30nTTvucAj8iUjh5l5QD1At/MNJctgaoxGtf4Hb0fGSV7mbLoEwWUfvYZ?=
 =?us-ascii?Q?hygXC/fhv36iIEZGMauYLF607WLVN4bDL+BLZl0TfzypdhCIt1+hHkOCdlpz?=
 =?us-ascii?Q?dLs1djtnpr13fcgq8FYM+UUAkB9IYnZAnzNGWF1X6XHXankipk94Kf1TsCfD?=
 =?us-ascii?Q?n+oRBzESX3h1WeuPe3u/68asj+WIm3mgTHHDuHbIkHfZDiOIo4X9xvV0SaX1?=
 =?us-ascii?Q?qwG8XcMNlGaUGIjxLK/kxhZoONE0lsjgKlFWUYcaqWSybAgjzW0LQySoXyzd?=
 =?us-ascii?Q?1gfgJzxCZtX4/HLDgBV86EDyrUNi5V3ljOOx2smU+DeXP2TKgl578jl54qvu?=
 =?us-ascii?Q?KoQa9JbP7ti9NK03ywlj8NmBzgIpl3AtMtEJb+IY6QJJUA46luCTLekw2P75?=
 =?us-ascii?Q?rBipcLpW04HXL1+SCeEHrGCYsbTB1pLoHxJhmtHIF9+GyykC9evJqYG79ea9?=
 =?us-ascii?Q?WC9P90Mn3T3Dg3fXfkdGsYSoeQCZVt+AK2YNkvDbUrd7h8pS01M4brItde/S?=
 =?us-ascii?Q?DdE1keaMzYfF96/6JPv8k9LAG7ORQdWoayXe5STf2m05ilzHCSyw54PuBOZI?=
 =?us-ascii?Q?kw0buh2sAq5vY8KSV6flm6rMo9JjI5K4yfZx7CR8S7RJBi9umv/ETlY8tbay?=
 =?us-ascii?Q?g9Z2lw/vAQTo+5vUa37j6kCNpKEAC6qfT0+/ViOmm4AJLOJbETarDpquo3ph?=
 =?us-ascii?Q?FS7yp3gIt+1oX5lOT9svdS2CbWdC/HNhcLdefks3dNRNVYP9dwrhfvssIglV?=
 =?us-ascii?Q?TTUSPfJHg0ZzX6pb6uG/MqAE0lVcsEAp4+JzJTGg/apN5c+3NBaBi/sC8/eP?=
 =?us-ascii?Q?IaPb+ISXux1NfGARK6jPzQzfZK7jnrhauXpmaPgC+kf+SLN3/x+KwnRbKoMV?=
 =?us-ascii?Q?junCh8MsCXhBqHqhGEll7iuwVY7EHCeG025Hg+GSwao89o59wg=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB03.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(376014)(1800799024)(82310400026)(36860700013)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:45.3786
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: fd750184-5d36-402a-fecc-08dca4f3947f
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB03.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	SJ1PEPF000023D4.namprd21.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SJ1PR12MB6289

From: Alejandro Lucero <alucerop@amd.com>

Differientiate Type3, aka memory expanders, from Type2, aka device
accelerators, with a new function for initializing cxl_dev_state.

Create opaque struct to be used by accelerators relying on new access
functions in following patches.

Add SFC ethernet network driver as the client.

Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
Co-developed-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/cxl/core/memdev.c             | 52 ++++++++++++++++++++++++++
 drivers/net/ethernet/sfc/Makefile     |  2 +-
 drivers/net/ethernet/sfc/efx.c        |  4 ++
 drivers/net/ethernet/sfc/efx_cxl.c    | 53 +++++++++++++++++++++++++++
 drivers/net/ethernet/sfc/efx_cxl.h    | 29 +++++++++++++++
 drivers/net/ethernet/sfc/net_driver.h |  4 ++
 include/linux/cxl_accel_mem.h         | 22 +++++++++++
 include/linux/cxl_accel_pci.h         | 23 ++++++++++++
 8 files changed, 188 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
 create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
 create mode 100644 include/linux/cxl_accel_mem.h
 create mode 100644 include/linux/cxl_accel_pci.h

diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index 0277726afd04..61b5d35b49e7 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -8,6 +8,7 @@
 #include <linux/idr.h>
 #include <linux/pci.h>
 #include <cxlmem.h>
+#include <linux/cxl_accel_mem.h>
 #include "trace.h"
 #include "core.h"
 
@@ -615,6 +616,25 @@ static void detach_memdev(struct work_struct *work)
 
 static struct lock_class_key cxl_memdev_key;
 
+struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
+{
+	struct cxl_dev_state *cxlds;
+
+	cxlds = devm_kzalloc(dev, sizeof(*cxlds), GFP_KERNEL);
+	if (!cxlds)
+		return ERR_PTR(-ENOMEM);
+
+	cxlds->dev = dev;
+	cxlds->type = CXL_DEVTYPE_DEVMEM;
+
+	cxlds->dpa_res = DEFINE_RES_MEM_NAMED(0, 0, "dpa");
+	cxlds->ram_res = DEFINE_RES_MEM_NAMED(0, 0, "ram");
+	cxlds->pmem_res = DEFINE_RES_MEM_NAMED(0, 0, "pmem");
+
+	return cxlds;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
+
 static struct cxl_memdev *cxl_memdev_alloc(struct cxl_dev_state *cxlds,
 					   const struct file_operations *fops)
 {
@@ -692,6 +712,38 @@ static int cxl_memdev_open(struct inode *inode, struct file *file)
 	return 0;
 }
 
+
+void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
+{
+	cxlds->cxl_dvsec = dvsec;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_accel_set_dvsec, CXL);
+
+void cxl_accel_set_serial(struct cxl_dev_state *cxlds, u64 serial)
+{
+	cxlds->serial= serial;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_accel_set_serial, CXL);
+
+void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
+			    enum accel_resource type)
+{
+	switch (type) {
+	case CXL_ACCEL_RES_DPA:
+		cxlds->dpa_res = res;
+		return;
+	case CXL_ACCEL_RES_RAM:
+		cxlds->ram_res = res;
+		return;
+	case CXL_ACCEL_RES_PMEM:
+		cxlds->pmem_res = res;
+		return;
+	default:
+		dev_err(cxlds->dev, "unkown resource type (%u)\n", type);
+	}
+}
+EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
+
 static int cxl_memdev_release_file(struct inode *inode, struct file *file)
 {
 	struct cxl_memdev *cxlmd =
diff --git a/drivers/net/ethernet/sfc/Makefile b/drivers/net/ethernet/sfc/Makefile
index 8f446b9bd5ee..e80c713c3b0c 100644
--- a/drivers/net/ethernet/sfc/Makefile
+++ b/drivers/net/ethernet/sfc/Makefile
@@ -7,7 +7,7 @@ sfc-y			+= efx.o efx_common.o efx_channels.o nic.o \
 			   mcdi_functions.o mcdi_filters.o mcdi_mon.o \
 			   ef100.o ef100_nic.o ef100_netdev.o \
 			   ef100_ethtool.o ef100_rx.o ef100_tx.o \
-			   efx_devlink.o
+			   efx_devlink.o efx_cxl.o
 sfc-$(CONFIG_SFC_MTD)	+= mtd.o
 sfc-$(CONFIG_SFC_SRIOV)	+= sriov.o ef10_sriov.o ef100_sriov.o ef100_rep.o \
                            mae.o tc.o tc_bindings.o tc_counters.o \
diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
index e9d9de8e648a..cb3f74d30852 100644
--- a/drivers/net/ethernet/sfc/efx.c
+++ b/drivers/net/ethernet/sfc/efx.c
@@ -33,6 +33,7 @@
 #include "selftest.h"
 #include "sriov.h"
 #include "efx_devlink.h"
+#include "efx_cxl.h"
 
 #include "mcdi_port_common.h"
 #include "mcdi_pcol.h"
@@ -899,6 +900,7 @@ static void efx_pci_remove(struct pci_dev *pci_dev)
 	efx_pci_remove_main(efx);
 
 	efx_fini_io(efx);
+
 	pci_dbg(efx->pci_dev, "shutdown successful\n");
 
 	efx_fini_devlink_and_unlock(efx);
@@ -1109,6 +1111,8 @@ static int efx_pci_probe(struct pci_dev *pci_dev,
 	if (rc)
 		goto fail2;
 
+	efx_cxl_init(efx);
+
 	rc = efx_pci_probe_post_io(efx);
 	if (rc) {
 		/* On failure, retry once immediately.
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
new file mode 100644
index 000000000000..4554dd7cca76
--- /dev/null
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -0,0 +1,53 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/****************************************************************************
+ * Driver for AMD network controllers and boards
+ * Copyright (C) 2024, Advanced Micro Devices, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published
+ * by the Free Software Foundation, incorporated herein by reference.
+ */
+
+
+#include <linux/pci.h>
+#include <linux/cxl_accel_mem.h>
+#include <linux/cxl_accel_pci.h>
+
+#include "net_driver.h"
+#include "efx_cxl.h"
+
+#define EFX_CTPIO_BUFFER_SIZE	(1024*1024*256)
+
+void efx_cxl_init(struct efx_nic *efx)
+{
+	struct pci_dev *pci_dev = efx->pci_dev;
+	struct efx_cxl *cxl = efx->cxl;
+	struct resource res;
+	u16 dvsec;
+
+	dvsec = pci_find_dvsec_capability(pci_dev, PCI_VENDOR_ID_CXL,
+					  CXL_DVSEC_PCIE_DEVICE);
+
+	if (!dvsec)
+		return;
+
+	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability found");
+
+	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
+	if (IS_ERR(cxl->cxlds)) {
+		pci_info(pci_dev, "CXL accel device state failed");
+		return;
+	}
+
+	cxl_accel_set_dvsec(cxl->cxlds, dvsec);
+	cxl_accel_set_serial(cxl->cxlds, pci_dev->dev.id);
+
+	res = DEFINE_RES_MEM(0, EFX_CTPIO_BUFFER_SIZE);
+	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_DPA);
+
+	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
+	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
+}
+
+
+MODULE_IMPORT_NS(CXL);
diff --git a/drivers/net/ethernet/sfc/efx_cxl.h b/drivers/net/ethernet/sfc/efx_cxl.h
new file mode 100644
index 000000000000..76c6794c20d8
--- /dev/null
+++ b/drivers/net/ethernet/sfc/efx_cxl.h
@@ -0,0 +1,29 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/****************************************************************************
+ * Driver for AMD network controllers and boards
+ * Copyright (C) 2024, Advanced Micro Devices, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published
+ * by the Free Software Foundation, incorporated herein by reference.
+ */
+
+#ifndef EFX_CXL_H
+#define EFX_CLX_H
+
+#include <linux/cxl_accel_mem.h>
+
+struct efx_nic;
+
+struct efx_cxl {
+	cxl_accel_state *cxlds;
+	struct cxl_memdev *cxlmd;
+	struct cxl_root_decoder *cxlrd;
+	struct cxl_port *endpoint;
+	struct cxl_endpoint_decoder *cxled;
+	struct cxl_region *efx_region;
+	void __iomem *ctpio_cxl;
+};
+
+void efx_cxl_init(struct efx_nic *efx);
+#endif
diff --git a/drivers/net/ethernet/sfc/net_driver.h b/drivers/net/ethernet/sfc/net_driver.h
index f2dd7feb0e0c..58b7517afea4 100644
--- a/drivers/net/ethernet/sfc/net_driver.h
+++ b/drivers/net/ethernet/sfc/net_driver.h
@@ -814,6 +814,8 @@ enum efx_xdp_tx_queues_mode {
 
 struct efx_mae;
 
+struct efx_cxl;
+
 /**
  * struct efx_nic - an Efx NIC
  * @name: Device name (net device name or bus id before net device registered)
@@ -962,6 +964,7 @@ struct efx_mae;
  * @tc: state for TC offload (EF100).
  * @devlink: reference to devlink structure owned by this device
  * @dl_port: devlink port associated with the PF
+ * @cxl: details of related cxl objects
  * @mem_bar: The BAR that is mapped into membase.
  * @reg_base: Offset from the start of the bar to the function control window.
  * @monitor_work: Hardware monitor workitem
@@ -1148,6 +1151,7 @@ struct efx_nic {
 
 	struct devlink *devlink;
 	struct devlink_port *dl_port;
+	struct efx_cxl *cxl;
 	unsigned int mem_bar;
 	u32 reg_base;
 
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
new file mode 100644
index 000000000000..daf46d41f59c
--- /dev/null
+++ b/include/linux/cxl_accel_mem.h
@@ -0,0 +1,22 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
+
+#include <linux/cdev.h>
+
+#ifndef __CXL_ACCEL_MEM_H
+#define __CXL_ACCEL_MEM_H
+
+enum accel_resource{
+	CXL_ACCEL_RES_DPA,
+	CXL_ACCEL_RES_RAM,
+	CXL_ACCEL_RES_PMEM,
+};
+
+typedef struct cxl_dev_state cxl_accel_state;
+cxl_accel_state *cxl_accel_state_create(struct device *dev);
+
+void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
+void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
+void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
+			    enum accel_resource);
+#endif
diff --git a/include/linux/cxl_accel_pci.h b/include/linux/cxl_accel_pci.h
new file mode 100644
index 000000000000..c337ae8797e6
--- /dev/null
+++ b/include/linux/cxl_accel_pci.h
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
+
+#ifndef __CXL_ACCEL_PCI_H
+#define __CXL_ACCEL_PCI_H
+
+/* CXL 2.0 8.1.3: PCIe DVSEC for CXL Device */
+#define CXL_DVSEC_PCIE_DEVICE					0
+#define   CXL_DVSEC_CAP_OFFSET		0xA
+#define     CXL_DVSEC_MEM_CAPABLE	BIT(2)
+#define     CXL_DVSEC_HDM_COUNT_MASK	GENMASK(5, 4)
+#define   CXL_DVSEC_CTRL_OFFSET		0xC
+#define     CXL_DVSEC_MEM_ENABLE	BIT(2)
+#define   CXL_DVSEC_RANGE_SIZE_HIGH(i)	(0x18 + (i * 0x10))
+#define   CXL_DVSEC_RANGE_SIZE_LOW(i)	(0x1C + (i * 0x10))
+#define     CXL_DVSEC_MEM_INFO_VALID	BIT(0)
+#define     CXL_DVSEC_MEM_ACTIVE	BIT(1)
+#define     CXL_DVSEC_MEM_SIZE_LOW_MASK	GENMASK(31, 28)
+#define   CXL_DVSEC_RANGE_BASE_HIGH(i)	(0x20 + (i * 0x10))
+#define   CXL_DVSEC_RANGE_BASE_LOW(i)	(0x24 + (i * 0x10))
+#define     CXL_DVSEC_MEM_BASE_LOW_MASK	GENMASK(31, 28)
+
+#endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-DM6-obe.outbound.protection.outlook.com (mail-dm6nam10on2078.outbound.protection.outlook.com [40.107.93.78])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 5528750285;
	Mon, 15 Jul 2024 17:28:56 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.93.78
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064537; cv=fail; b=ZcbqYCpJddVcAQb0B7KD2iZ+01BFWNnQ5jlS9jMN+Y0NncDmXO0oH8lpgC9RYekC7XgSGZqERcydAQNZy/0u5Fac5iQZNzi01/VC5ybPmlAKTQY/tNvwKolvYTVOsW50lfIVH5xqXvmJMJlEJJaChpF0qB+Soq5OqolmYqyoHfE=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064537; c=relaxed/simple;
	bh=jWl2LN9rAvMP12J+Jb5x05YIg2LLk0ytcompyghuznY=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=klJFXg/Yr0PCF3qFaQsuozSqdGahEnOErWjFU52f3JW1ssrt4wjeMoHJlmszxMU6IcBhMXZ+paELGzAGSIhAiYJXQnZ2OuW63G83Tem0LJgKtGb1z4ktU1kT6SlwK4LfyTDHkgBPr9/IFoPlZi2IwwJ/QxXpC09weQ3Iz8KVWSw=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=4FlbBdEx; arc=fail smtp.client-ip=40.107.93.78
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="4FlbBdEx"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=u7M+pomQEIJTyZsALy5kk3BQHfB/fi/A7i0Qf5Lr3sbME0er5JkxotRyuNtjSvw4MiVA/aQgb/Hso9lStUORuh2wso58AjJh3EZok9ojL4HuRAs4ex4EQXSX9XrXJkj4IzzRbDvXi6AFtkzIck2tpnLCPSIGCFQ7VSfm4Smkv5bwMOq0RFNRKGr1+Zr0M/ygE0z1jNvVzHEuKNsR/wBCoyNMDu3Jsok5SPVL5rTe7Ax2aA6QsvvTgRc/QLm76ODo0NQ308ry/w+ek4DLa9l+8tdDuA2otHE8ovV7HDGmJ+Wk3VuPUmjhq83Y+Cbu1vaREXYAzu/jANcjgKGMdIPXCA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=L3vC5F3A/E95qWGqMXa9QOWGkI3xa+Vj8uXJAL6p01k=;
 b=sDDKOepsZeTybT+tU0FA9S16Vh9b3i0X1lnHCQkrhQXptWxZSDBQUg9QeUA3mm8RtGcdAOtPTbbtoQbUFVBtg3PHNEkgiUMT4MZVKaRYVuYAsZiNUFAwHEuOojM5fWSVWZ1LXomjRUGTVRdVC1PRalv1zTO8RiOcc6BIG4D6X/IAqVQ/sk/5M0eHzptkDhwShEVGh0nXc0RdQ0h5M33iKQ5AgDbmdihLa/tkT6RYamIcTsH+T0lMYgwA0vKMKyDlVTRRFWwwJMH93P9/ou3dXwfgAGAMLBaoLFhJ8YhnIppbHYK7znTi3TimcLQu7t/O/8IJNdH9WBIH9G/6fkc7XQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=L3vC5F3A/E95qWGqMXa9QOWGkI3xa+Vj8uXJAL6p01k=;
 b=4FlbBdEx1aiwEarsnwOU2OrCUcQYy+JTss0L7aPxPBm0rRjuGVknFE08DEmTOpxy/8Q0g5HASoUjBXdMqt9/Kxtqg3d6xm+7+IhDuQlTQF012DphX3nl+EiyS1I682/QZ8rLbLZ2vTjfklLCmXheC6KxYEeSfL9CwAOhpo0HP00=
Received: from CY8PR12CA0026.namprd12.prod.outlook.com (2603:10b6:930:49::27)
 by BY1PR12MB8448.namprd12.prod.outlook.com (2603:10b6:a03:534::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.22; Mon, 15 Jul
 2024 17:28:53 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::63) by CY8PR12CA0026.outlook.office365.com
 (2603:10b6:930:49::27) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:53 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:28:53 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:50 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:49 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 05/15] cxl: fix use of resource_contains
Date: Mon, 15 Jul 2024 18:28:25 +0100
Message-ID: <20240715172835.24757-6-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB04.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|BY1PR12MB8448:EE_
X-MS-Office365-Filtering-Correlation-Id: dd8b144b-87bd-463c-2494-08dca4f3994d
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|376014|82310400026|36860700013|1800799024|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?O3b2mkGo20isTVj7WbO7mv2Oew3AnM8D/1JB58qFtWGPb9J3bkHjxQl+Dc4Q?=
 =?us-ascii?Q?jH2Bmb7HRzTD3+AdgYzlc2Brp0kv7Bqd9+mO0wbxV7WA7SqPV9D4S/yyy6uP?=
 =?us-ascii?Q?i074w5+dkOGz23IZKKXbUG804qEBTIRLa6IIWclc+c2ctScbqXhoE2t26KGM?=
 =?us-ascii?Q?E/4a+RO09whrxaLmtBDJj+TiTMq2hLo/1r5IoLq9eOZ9o7jUeq+b1H8Lo2BN?=
 =?us-ascii?Q?zaTBsNuSxxpi8fUrK6I2/PQxVzD+n+OFDCcyYgCincGnC9pxLHDhoYF0buuq?=
 =?us-ascii?Q?TYylBamiOyR+c7uf1m1E1eJErGd2BNlstk0vC0mmkB2g+5Gj49vx4UqXm3Mp?=
 =?us-ascii?Q?8eyKjJGutz4qzRlGsFH5lA8YKdaiqAn5tAaVtREPQNl0bFjUJzDXHBvJ4ftl?=
 =?us-ascii?Q?3rU0+DjbVtckyQErnPueXYRiWV9xZxi35LX+wo3rpbV62r7a7AH3WK4uONYt?=
 =?us-ascii?Q?itXuVvTX+KPIl9Ljo1hemymPl4lCvU3eMJ/a/VK+WKr3BSCLleNczGfo/Yxz?=
 =?us-ascii?Q?4Ptm6GQrqyGgXDSIhpidXPCvWRALoaS8Y52RcizPgktydFdvBYBnd5xrxzdm?=
 =?us-ascii?Q?mW6b8bOvblUJI5ODrmrB76EE0pcYK2STVBVKWJlV5sZoLttdwQwBzF4asW1M?=
 =?us-ascii?Q?bamUiOnQHVwPJYkFUJP1+vx5dvXHi8ikQxZ6vbk+AHfBXa3ncxilwdFlmpzi?=
 =?us-ascii?Q?Eu215wgVMcb6QaFXij4HopQupgMhB+kIOiiKqYNHPAtIGUAQNN/ZjKAZUP5T?=
 =?us-ascii?Q?9ZOg2jncTRrcQBLjUnH2PvSq9e4O8rQMKqY2EFtInQi4oKv6JZm3NOHYsf+7?=
 =?us-ascii?Q?G+9fqbgZAtsVLxZyJFdOQke6CUvCMtq5Ar9SjETVmyP84urDb8os8+BCPs5C?=
 =?us-ascii?Q?Q6uubxMHLRr5aBASEfhPOtsgy2t1lYvcy8RMNEPdOjWDc6HZQqKfnQpwdeMg?=
 =?us-ascii?Q?YjQsvAP6gbf7he6YbS4NnqWrqKABe4sXuajwVAXkjhyw1Ygiiq8+7y5laLbX?=
 =?us-ascii?Q?90gl4hsi1UJRLkmx/QGfBQI9dD+sazHVvsZvJHGyHJci4dcltgfrWyUrXvl6?=
 =?us-ascii?Q?B8nen1mkfEudJXyErsjgOvc9pBN3GqDN+Zwv0mN9fedDK53FVO8c6RpUr7W/?=
 =?us-ascii?Q?3SyHJxE/N+HrUc40kMVwEyUkU5fXsL47s9bfwOlQQLi32pxEAVZ+aVmfFIrV?=
 =?us-ascii?Q?+RJpk4xlWntTws/JLi7rSo30v0hG5Ag7SfWGRU+BCNjmPFFjOxLQ9LyMm/x/?=
 =?us-ascii?Q?dtUNot4vq8//l9EaA23LCO6o1kd8/4vEeQ7VEpt1QQIzI6sC9zoNPvMnINgj?=
 =?us-ascii?Q?0cnXFjpJ8gakGWtkJCDmzmCw0iM0/1UjGGUG+YO9wE8vtp+oYaQC2ZMvLlo4?=
 =?us-ascii?Q?Ek9EFlZQP09fz77kCFGOVPMlIxyTZ41BEb/QfjJTXc5L4zbjfpl/LdYOiUA1?=
 =?us-ascii?Q?5UEQScCk5a+bQi2jk0xHxvO7zzNHKHtG0LxT1dVeuT2TKgFabjIPlw=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(376014)(82310400026)(36860700013)(1800799024)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:53.4339
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: dd8b144b-87bd-463c-2494-08dca4f3994d
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BY1PR12MB8448

From: Alejandro Lucero <alucerop@amd.com>

For a resource defined with size zero, resource contains will also
return true.

Add resource size check before using it.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/core/hdm.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
index 3df10517a327..4af9225d4b59 100644
--- a/drivers/cxl/core/hdm.c
+++ b/drivers/cxl/core/hdm.c
@@ -327,10 +327,13 @@ static int __cxl_dpa_reserve(struct cxl_endpoint_decoder *cxled,
 	cxled->dpa_res = res;
 	cxled->skip = skipped;
 
-	if (resource_contains(&cxlds->pmem_res, res))
+	if ((resource_size(&cxlds->pmem_res)) && (resource_contains(&cxlds->pmem_res, res))) {
+		printk("%s: resource_contains CXL_DECODER_PMEM\n", __func__);
 		cxled->mode = CXL_DECODER_PMEM;
-	else if (resource_contains(&cxlds->ram_res, res))
+	} else if ((resource_size(&cxlds->ram_res)) && (resource_contains(&cxlds->ram_res, res))) {
+		printk("%s: resource_contains CXL_DECODER_RAM\n", __func__);
 		cxled->mode = CXL_DECODER_RAM;
+	}
 	else {
 		dev_warn(dev, "decoder%d.%d: %pr mixed mode not supported\n",
 			 port->id, cxled->cxld.id, cxled->dpa_res);
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM02-SN1-obe.outbound.protection.outlook.com (mail-sn1nam02on2043.outbound.protection.outlook.com [40.107.96.43])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 6AF1B535B7;
	Mon, 15 Jul 2024 17:28:57 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.96.43
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064539; cv=fail; b=DDoXpqQo0YftW/CkmBH6WhinqLlxXXusOsMed7xfeBvT9jSZKb+835XVUY7LfWUCZ6Xiw5CKG6nPXRrs8KkXIu7dzcgM6o3M09YiSTmWNN+2eAXq2Q/Rv2oXSutBygz/tykm9kC9GpjQUKhaVRCa2wEc5Qlp1B+tP6Ble8Pgdzg=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064539; c=relaxed/simple;
	bh=3TifW9WFW7DjDvpsXYzB3X5fPqgcKoS+0+St87XYMNM=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=JTu2Hiwc+nQ79TTCr7c/GUw4QkVsfAZUI2NtWd3GApgdts67W1GmJ5D3sxpkESus8ek1tuHMVHmx1ov/67Ge/P6B+zsP+waur7oQCSTt5iL/Xyzf1bu2JousblYgStR4T8J6mW55o9GZHeXmTKELXOLnVlteagCFNQ+ZgNIEKMY=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=xgiQj5v2; arc=fail smtp.client-ip=40.107.96.43
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="xgiQj5v2"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=rJ/d585n89kFudGFDgcI0iaeVcGzga1KZGGIn0yTA9rjzpPtkzLApfru0iWvKvyFYecrnB0xoyY3WKPvLB3dXvTOE77PXQ2mdez5zTyyxhclNekRilNuwdXhtYDr6qySjms26IhtEntnj/UM8PY1TlytZOG3WwAMfyLTvLJ2nksvidiUojR28GFXtbJSKoXb+tOkbyILZZ46GVmMpf9mRC+uVm84Phfa6kc9BDOQeciuwh/PJECZdU4gDkeggjUGFLsTcU0ucXtivcuOmmm6rL6ZcaX1Om1CWU+4Nm3Hmv55Y1dSYz543qn4Hnxe92VYJ0QW13LpfFkvRkh7+ZBa5A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=k2QcRmqYhrwOkpEDbHI3M4kvRFcZfeVsePYkcK6LbgM=;
 b=FreNl4bL74rLusYJTk3OJKCHqds+Oyc7CHXBqGujmAFQhuEjfOqbct8nY6Wt8Kk3wLQDDEFdTmM3jf3S6zVhuauDX620rrT86RKo9UwV+++mXDNGj7LLyPGkx/0SLTce9FXMeFPM/44Cvizd6kdA1YrsLSKGpASVGbGa7tolxlJoxS3t/CghZyoSxLVYnEcCWNcbNg0a02b9p+oOObCc1dWL5uKJGbf0BUMqdgc15efhKyPRQSxvPRP8UrP/O7QpEdAEkLhh4MnSM3xUoXBElaLlTCdIf0bACLCZlm9F3ejv+xQG3CEaDNeQpDHUgt2fGG7y/OZErEbuckdqKSURKg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=k2QcRmqYhrwOkpEDbHI3M4kvRFcZfeVsePYkcK6LbgM=;
 b=xgiQj5v20ygqoIIfWFWyISZtsKp7VGMzj95AKO/D02Y6ffWnYafcP3PIYXWBOQ3QmXE+UDmgg/s/hv5aLQ2aSLFfZEPY9Emur3TmFtJ07QScX4RNEqbiN5dySUjXHR29sPUmqJwCEgaVd+9HXnnZ403RsoLZdy9Pl8L5Vbm+roE=
Received: from CY8PR12CA0032.namprd12.prod.outlook.com (2603:10b6:930:49::23)
 by CY8PR12MB8194.namprd12.prod.outlook.com (2603:10b6:930:76::5) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28; Mon, 15 Jul
 2024 17:28:54 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::57) by CY8PR12CA0032.outlook.office365.com
 (2603:10b6:930:49::23) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:54 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:28:54 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:51 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:50 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 06/15] cxl: add function for setting media ready by an accelerator
Date: Mon, 15 Jul 2024 18:28:26 +0100
Message-ID: <20240715172835.24757-7-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB04.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|CY8PR12MB8194:EE_
X-MS-Office365-Filtering-Correlation-Id: 12b2a20f-734c-4a10-bdbd-08dca4f399a7
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|376014|36860700013|82310400026|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?Eb2alPltNkuP0t8NC9hc6nT0Q01LrUSZbqlxn9PhrUupClqNI701jzl+kDcR?=
 =?us-ascii?Q?NSxHwBHLvHSwnHrLJdVKQ+i84rYf3fbMez+bSzlMrtsdoV7WhZMRs7zAr4d8?=
 =?us-ascii?Q?Dh3243Sc5AAC6YGRxRNpW0UH5t4Bf9JYSzxySZdZ+/UPBh8bqRR7LdkXCnl5?=
 =?us-ascii?Q?kjYDT8LSdBOKcQt8MN/XuU1JeHFDp76/eH43oHtEMFtxRQ5LWluyMdDXwi5m?=
 =?us-ascii?Q?dwp9qNVqanhIh4sVgWiM2Nl5jeVTOzyavlCAUZH08+DCra+LtdxPJqwf4BZp?=
 =?us-ascii?Q?obgtL7ADe4OSIKzPucfqh6pcB9DQfspi8jxNoAmeF2/6ANyGLeGA0QrGQHmj?=
 =?us-ascii?Q?qL2GxC8BClB5Rec5PM5BKtffrbYN38k31aWo4gbtUrcBpzr+WH8CkifPejVK?=
 =?us-ascii?Q?Wjas2QY5I0lzunrJRe7OZjV/42ZbZm02Lf0NjRPZWaCggJcYsi1SWn9l5qea?=
 =?us-ascii?Q?N9zdWmZOjNWnNqedcFINJYwkRqKLNr17b3YVXmN07E9UxssafJWxrjKNBIdI?=
 =?us-ascii?Q?kvDdkMT8TSJ/K94j3OC62Y/rLB4BLk/DC2LGZ+In0Coxpbkt63OxlM7Xf7Dk?=
 =?us-ascii?Q?duMXm7paovaLzAd4riBb4Dq4Fc3h7MUWT42Vh5pEqNgFwdwlwNDcsk46W3MY?=
 =?us-ascii?Q?sgZ7OL5zsKg8jFddkExl/EonZjVQfMDAjWFycftmAiyZv/XB3n8xV9s3JBxV?=
 =?us-ascii?Q?nt8fXWF6agD/FYIp8GI4oMY5liuRppsaP7teUHL4q6goefWdEAdq8y7BR+bT?=
 =?us-ascii?Q?9K0qlmAH+slF46wKuNjiJ0aE1JGFh9i/Z8U+o2UQi/N8zyy7H9Fs+nR/raDa?=
 =?us-ascii?Q?+Rr6RpcBqku5TsNSrSpc2WsXLvpLUMcDilv5twxmsJQueIQ8MG/ydhftrJLz?=
 =?us-ascii?Q?jyq2JZm4UyFT0X1dcpgWZ+O/ZX7TF8M+C3b0t3XJ+cDlSLJyNMlIOH5rbScv?=
 =?us-ascii?Q?VnbKI++flcH4Bedw7Ch+SEei/xFEJ/p6Rnv2Sl3tFjT5lIMaLP8ShhStdcBq?=
 =?us-ascii?Q?j3u1pSukQzO5TBtOFzYGRC7+L7+hZ5FkYQCMGxHG0t4qpj93y1vWXIlamfGM?=
 =?us-ascii?Q?o2q5iJoOTB1nVyGWc4iTnuhS89wYXk3YtykYmLnQrS4Gm6qky+8Ep0rXjU+S?=
 =?us-ascii?Q?jDkhi1Zai6G5nharFECBdVvosj0X0/4/EIDiH3zPA2ButeaZ4tuARBygf0Yp?=
 =?us-ascii?Q?iEfupQBYDNrUnQ5hKbgs1q3LfsF9c8cetvUkwNk96HVTdsA4lev9GrFQdph6?=
 =?us-ascii?Q?1K58v66VVJfKPsvAJLBL1Hv3wV0UtaECuOSYCwSAe7otfl4eDBsaWNSrkXsu?=
 =?us-ascii?Q?8A+HT3Dv+NwK9DhiQOmwpS7MqBL64bi+mFd5bCg1AHzJz0gmhOnLprvLMYOB?=
 =?us-ascii?Q?INbpRiGpm69QMDCcJzOYMn0PsOfgR4wnETsiUMx4VQK0IO060fq6B5NyGNtK?=
 =?us-ascii?Q?0ZQePeMtaO5UDKtPjMYiu2UgnjZ33vcLdy+UKF/1q+ZiUrDKgBMWFQ=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(1800799024)(376014)(36860700013)(82310400026)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:54.0276
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 12b2a20f-734c-4a10-bdbd-08dca4f399a7
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY8PR12MB8194

From: Alejandro Lucero <alucerop@amd.com>

A Type-2 driver can require to set the memory availability explicitly.

Add a function to the exported CXL API for accelerator drivers.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/core/memdev.c          | 7 ++++++-
 drivers/net/ethernet/sfc/efx_cxl.c | 5 +++++
 include/linux/cxl_accel_mem.h      | 2 ++
 3 files changed, 13 insertions(+), 1 deletion(-)

diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index b4205ecca365..58a51e7fd37f 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -714,7 +714,6 @@ static int cxl_memdev_open(struct inode *inode, struct file *file)
 	return 0;
 }
 
-
 void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
 {
 	cxlds->cxl_dvsec = dvsec;
@@ -759,6 +758,12 @@ int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram)
 }
 EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
 
+void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds)
+{
+	cxlds->media_ready = true;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_accel_set_media_ready, CXL);
+
 static int cxl_memdev_release_file(struct inode *inode, struct file *file)
 {
 	struct cxl_memdev *cxlmd =
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index 37d8bfdef517..a84fe7992c53 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -56,6 +56,11 @@ void efx_cxl_init(struct efx_nic *efx)
 
 	if (cxl_accel_request_resource(cxl->cxlds, true))
 		pci_info(pci_dev, "CXL accel resource request failed");
+
+	if (!cxl_await_media_ready(cxl->cxlds))
+		cxl_accel_set_media_ready(cxl->cxlds);
+	else
+		pci_info(pci_dev, "CXL accel media not active");
 }
 
 
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index 0ba2195b919b..b883c438a132 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -24,4 +24,6 @@ void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
 			    enum accel_resource);
 int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
 int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
+void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds);
+int cxl_await_media_ready(struct cxl_dev_state *cxlds);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (mail-mw2nam10on2087.outbound.protection.outlook.com [40.107.94.87])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 6D2DD54279;
	Mon, 15 Jul 2024 17:28:57 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.94.87
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064539; cv=fail; b=uBXnLdvuuyvwTP1j9z+yOjH7w8BVxmO/IfjHt82jUVUNWvhrvJUfK9q0Gox30J4zbWJzIwHC8ylisJm1T+C7I3Xv+YvU0aDID/sdQ3fA5Bmd/5Z8ZrYX3fQGjpBvKJMFa44pgSOdp3vVnYVWma93OylG94ZgU7tXKMb+Ba+Mhfk=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064539; c=relaxed/simple;
	bh=vYBOFI2bT0XfO6WSIeRGLJWYCmAdV4Ge1NDI7L/Dj+4=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=P183NFcj9I9jo9+EgSkM55aFxackrnvq60vC7alfbUVp2INBZjZCkWpMOSMobKt9e2eEUmlXnIepXVLxKRFqn4B7Pwmpyd5rJQ20/YtCCJhnEIPrR/JoCXNBLMVN7QH+t2FRFSMD9PHBQTDkcz39Nw3V2Rqnf9t5ZkyPKAKy3lI=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=aZRtPhyG; arc=fail smtp.client-ip=40.107.94.87
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="aZRtPhyG"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=WBSjLcUFFLumIRlsFaI9RRixHVByweFgrOd08KIK8187hJHt7K3kUTdaNrYMcwvU3c1UL5/43O365LQP1CPdO2k+xwXs5pVoJQpMcoiZTl7FelxrXL5qcohDe0vVOOexc3+ktWzBIwLRZKjkzO3RRqFIbMJihUPg8t7O/yDbnU8HjRTZQWdKXG4RL+ZoynOFbfZC2Q6BLq74KizoQ1ZP3TW+SJ51F/d0F99Q6TaGQhF+9RwiDmdD39LBJuVWoilkbyJlCgVSHUTrVqAVo0mTj/38BPPjPHR3vgKeCZ3RjHgmZ5hUyV6QcoxbYn3I3HahIHui78uuoSRqXTCYmo3Pbg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Wp5zQNnwdNVAo/zrWt6sVtKewFcNn61WN4rfGbpfDIQ=;
 b=uKDlvhk/lL8ehVK5cYND8zCkhC5GVRzlBEow7FVOM1uU2Y+iu+rL5QfaSD1YIK7SVLyz1LToI0YdY2qIy/ytZthRl0ZwCee5UWWAf30kIpWtZhHEF6V/MJruzRuW90Q1trZAnUyiRu3ySnPAWZJqOgKT5Fh28FJpZdppw7qlk1qTmqZJuPQNawsrFHsDK3tyXr7zLsUlCZjXscp6YSojYuNSIOVwb7v6J52gN7Wogx5WQfGhAiY635K1tq7JxT3K2t+SbfJX8QCqvVwWXlYGy8bbzTkPzPTOKV+d6kqlaFbh77c6sLyz7MK6XAVcpoxMzytY8DRmM3BdNw5rJNJpSw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Wp5zQNnwdNVAo/zrWt6sVtKewFcNn61WN4rfGbpfDIQ=;
 b=aZRtPhyG7JYCZeuhMDl5+qPQeAxnDzrfp3H9PNOQwy4YvT5tnDf1EhNQ4pGutmmGq9c2fl0/W2fnE8Wd0idESPVOUIM5nu0PnjH9ABMSM2oXaMwByB8yrLhQmdRAlAzs0SrSTtXuncF/IRzmN+uLmuPXh7S9xXO9D+aHd1Fz6Tc=
Received: from CY8PR12CA0046.namprd12.prod.outlook.com (2603:10b6:930:49::24)
 by DS7PR12MB6310.namprd12.prod.outlook.com (2603:10b6:8:95::21) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28; Mon, 15 Jul
 2024 17:28:54 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::4d) by CY8PR12CA0046.outlook.office365.com
 (2603:10b6:930:49::24) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:54 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:28:54 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:53 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:52 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 07/15] cxl: support type2 memdev creation
Date: Mon, 15 Jul 2024 18:28:27 +0100
Message-ID: <20240715172835.24757-8-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB04.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|DS7PR12MB6310:EE_
X-MS-Office365-Filtering-Correlation-Id: 49257c5c-dd99-4194-1d12-08dca4f399e8
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|36860700013|82310400026|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?BQQ8IvjF7W81b734u3uEyUBDHwhEu4vwLCsTgelebOtd4hlnpGOjLfvt/3I2?=
 =?us-ascii?Q?hJOiI0G7mx8QU7NlfUWnLOYX6WI4kS4TH2oQaVEhueHvMlJyG1FY2di6rbb2?=
 =?us-ascii?Q?Vr6jCiZ6PGM3pDJO5hA7H2XBnhCAXkrKwCxUjdS30pSb9NYe5PBq2o3JglLV?=
 =?us-ascii?Q?K9hon6hv3eCQYzs0JACaT1u94d/nxwEuaYSFfXrAeg6k8pJTx6wpUyweLGVT?=
 =?us-ascii?Q?IS5RKRw3WCOvIuIc/b+pvYs3Q0ZA2cFl4/7dZ4OKAGDv5V7Oi9ESma0Y6K0Q?=
 =?us-ascii?Q?/8nOApt04RFm8/8iMGcAzRaApCf0iDazR8/xKUqNxW0bqHXAeSmr7h8pOcEw?=
 =?us-ascii?Q?oiZxD/XndGTlWT94WzIf9WkJ9Ql46ONUNy9q9XQ9KYNC3IWRp0JXQATwCd1j?=
 =?us-ascii?Q?5GHr9GKIm4Zg01qebdymDKeThmUmHODBMQrOcDemkYtbEjQBB1L3kJnT1flW?=
 =?us-ascii?Q?zDJ1z7PiCQtkmOthZ9LPz/IH6D2dLl2QBxQLA0e+jZ6LHoO7SCr/eSVo5Uug?=
 =?us-ascii?Q?y+TWPgf8axHuzobM7cwLhkr/L+9DIYyJUCjz+NqIP8M42XU949Zf65rPnee2?=
 =?us-ascii?Q?ZBhmAGUnskEzSzMWFLvGNKz/wLTi8W8VJft98It0t72IgbtyI4yB6EgG+nPo?=
 =?us-ascii?Q?h+ijfrmS12nlUz7CTevUVaUgveA1/11WE3xd0YkqFCydsLJNSm7O3Fe5wGfV?=
 =?us-ascii?Q?xMIEUI8GeXZXVseK9t/cOrO4i/H5ev5NdfHHq5gw+EIN1Nn7no7ksPQ5jivG?=
 =?us-ascii?Q?PJblYjxx4uEJEEwdoZyoBAnprbhZGfqRbwTWsDBYQ1UIS6UHyPZpeDED/WAd?=
 =?us-ascii?Q?1PVkzm/WeQJnKlwzUS7eA0TsMttBhYT34AOcbp/P3lHuo/s/jn7yAAvVLIKd?=
 =?us-ascii?Q?pOEeAUJnp7xFCTHJtuzF/6Kd7oeVTlSMl4JRKqbAAMEFGLN9T6skhUgUk6Y3?=
 =?us-ascii?Q?UODxuZuUkElx8CLRgL/PJqzFXpHTBgS7D1DlNH3DAF1gtuMcgDTvEfwn+wFJ?=
 =?us-ascii?Q?CjgYhrJU7aGfiqqu3+ZuYEftscdoxxcJTZGkv0FQ/vtrpRXAKVDAMPHPdLwi?=
 =?us-ascii?Q?Dd9VnKzLf0HyCRiO6QG3MfsIBqmt1cDfEl/c6Y0Gp2/6F1QM1VOKzJobbOfL?=
 =?us-ascii?Q?OaIx1m/lTwIFMI4DHMXvKFKxiCEF44MQwxkQF1PASeSJYiK1P/bWu9rRZD4d?=
 =?us-ascii?Q?uj+PKJmPs2Uxti6Xxp+2BIGNxGON92enxZYAyMqU43yPOEQYwBQLW31ki7PI?=
 =?us-ascii?Q?xUkhxsTPa8st1T5weJhNrWTfMd69+oZ11lE+6SCmvf2VVst+Vr9O28aThHPR?=
 =?us-ascii?Q?qJmzlDwQBYzvRGeydMIokbIG02Egc84PHxCM1YY06B//J+E0qiyxKVTljain?=
 =?us-ascii?Q?1OyRX9r4BkTz0ybXay2MDovIkm9riUKfR6OaD1NFLKv0VIpnkBp1g/qsxPFE?=
 =?us-ascii?Q?V+mL1ouOhLXRcBaOvjgWnMNwyKpVN2ttECpXzBi6X7DHHFOVPSTjwg=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(1800799024)(36860700013)(82310400026)(376014)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:54.4651
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 49257c5c-dd99-4194-1d12-08dca4f399e8
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS7PR12MB6310

From: Alejandro Lucero <alucerop@amd.com>

Add memdev creation from sfc driver.

Current cxl core is relying on a CXL_DEVTYPE_CLASSMEM type device when
creating a memdev leading to problems when obtaining cxl_memdev_state
references from a CXL_DEVTYPE_DEVMEM type. This last device type is
managed by a specific vendor driver and does not need same sysfs files
since not userspace intervention is expected. This patch checks for the
right device type in those functions using cxl_memdev_state.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/core/cdat.c            |  3 +++
 drivers/cxl/core/memdev.c          |  9 +++++++++
 drivers/cxl/mem.c                  | 17 +++++++++++------
 drivers/net/ethernet/sfc/efx_cxl.c | 10 ++++++++--
 include/linux/cxl_accel_mem.h      |  3 +++
 5 files changed, 34 insertions(+), 8 deletions(-)

diff --git a/drivers/cxl/core/cdat.c b/drivers/cxl/core/cdat.c
index bb83867d9fec..0d4679c137d4 100644
--- a/drivers/cxl/core/cdat.c
+++ b/drivers/cxl/core/cdat.c
@@ -558,6 +558,9 @@ void cxl_region_perf_data_calculate(struct cxl_region *cxlr,
 	};
 	struct cxl_dpa_perf *perf;
 
+	if (!mds)
+		return;
+
 	switch (cxlr->mode) {
 	case CXL_DECODER_RAM:
 		perf = &mds->ram_perf;
diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index 58a51e7fd37f..b902948b121f 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -468,6 +468,9 @@ static umode_t cxl_ram_visible(struct kobject *kobj, struct attribute *a, int n)
 	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
 	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
 
+	if (!mds)
+		return 0;
+
 	if (a == &dev_attr_ram_qos_class.attr)
 		if (mds->ram_perf.qos_class == CXL_QOS_CLASS_INVALID)
 			return 0;
@@ -487,6 +490,9 @@ static umode_t cxl_pmem_visible(struct kobject *kobj, struct attribute *a, int n
 	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
 	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
 
+	if (!mds)
+		return 0;
+
 	if (a == &dev_attr_pmem_qos_class.attr)
 		if (mds->pmem_perf.qos_class == CXL_QOS_CLASS_INVALID)
 			return 0;
@@ -507,6 +513,9 @@ static umode_t cxl_memdev_security_visible(struct kobject *kobj,
 	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
 	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
 
+	if (!mds)
+		return 0;
+
 	if (a == &dev_attr_security_sanitize.attr &&
 	    !test_bit(CXL_SEC_ENABLED_SANITIZE, mds->security.enabled_cmds))
 		return 0;
diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
index 2f1b49bfe162..f76af75a87b7 100644
--- a/drivers/cxl/mem.c
+++ b/drivers/cxl/mem.c
@@ -131,12 +131,14 @@ static int cxl_mem_probe(struct device *dev)
 	dentry = cxl_debugfs_create_dir(dev_name(dev));
 	debugfs_create_devm_seqfile(dev, "dpamem", dentry, cxl_mem_dpa_show);
 
-	if (test_bit(CXL_POISON_ENABLED_INJECT, mds->poison.enabled_cmds))
-		debugfs_create_file("inject_poison", 0200, dentry, cxlmd,
-				    &cxl_poison_inject_fops);
-	if (test_bit(CXL_POISON_ENABLED_CLEAR, mds->poison.enabled_cmds))
-		debugfs_create_file("clear_poison", 0200, dentry, cxlmd,
-				    &cxl_poison_clear_fops);
+	if (mds) {
+		if (test_bit(CXL_POISON_ENABLED_INJECT, mds->poison.enabled_cmds))
+			debugfs_create_file("inject_poison", 0200, dentry, cxlmd,
+					    &cxl_poison_inject_fops);
+		if (test_bit(CXL_POISON_ENABLED_CLEAR, mds->poison.enabled_cmds))
+			debugfs_create_file("clear_poison", 0200, dentry, cxlmd,
+					    &cxl_poison_clear_fops);
+	}
 
 	rc = devm_add_action_or_reset(dev, remove_debugfs, dentry);
 	if (rc)
@@ -222,6 +224,9 @@ static umode_t cxl_mem_visible(struct kobject *kobj, struct attribute *a, int n)
 	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
 	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
 
+	if (!mds)
+		return 0;
+
 	if (a == &dev_attr_trigger_poison_list.attr)
 		if (!test_bit(CXL_POISON_ENABLED_LIST,
 			      mds->poison.enabled_cmds))
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index a84fe7992c53..0abe66490ef5 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -57,10 +57,16 @@ void efx_cxl_init(struct efx_nic *efx)
 	if (cxl_accel_request_resource(cxl->cxlds, true))
 		pci_info(pci_dev, "CXL accel resource request failed");
 
-	if (!cxl_await_media_ready(cxl->cxlds))
+	if (!cxl_await_media_ready(cxl->cxlds)) {
 		cxl_accel_set_media_ready(cxl->cxlds);
-	else
+	} else {
 		pci_info(pci_dev, "CXL accel media not active");
+		return;
+	}
+
+	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
+	if (IS_ERR(cxl->cxlmd))
+		pci_info(pci_dev, "CXL accel memdev creation failed");
 }
 
 
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index b883c438a132..442ed9862292 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -26,4 +26,7 @@ int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
 int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
 void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds);
 int cxl_await_media_ready(struct cxl_dev_state *cxlds);
+
+struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
+				       struct cxl_dev_state *cxlds);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM02-SN1-obe.outbound.protection.outlook.com (mail-sn1nam02on2089.outbound.protection.outlook.com [40.107.96.89])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 035F76CDC0;
	Mon, 15 Jul 2024 17:28:59 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.96.89
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064541; cv=fail; b=Xak9eXewzwP6uyK2BAx42Dk2K/ebBlYUIzUjAFj7Q6PQXPIccrQFVNg1qopisvXmL1WSjPTrNLmOMtdjlzXiPoCQIKbdhpJWWxdQCO/TSZK9xQVI9XmMFrKRO/ohARmswUwuUeOx2bgFq3k2GTsgeCWHPR7FPamnAZNe1dVdKjU=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064541; c=relaxed/simple;
	bh=gv8IqeUd/PvmEVS7FXkAfTqWkvW5R7riZvLEbUSb8ss=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=uookPFpdVcZbg2x5AVtMf8N2esx69BYLVmqOzsq/eL096yuTRSGdOPNPSoLx9gwPljlT5GS48g8eoBVTdhOgA4yGpHCfPR3KZRyWmV7WoW/iHTPzf2nG3AVgpR1cEz29jTEUJZ4VxbiazHkFilz1PhxjgeaeKSaHjebQReJ+YC4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=V25qE8Mp; arc=fail smtp.client-ip=40.107.96.89
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="V25qE8Mp"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=SwPSO7g8n3UhU4QmLivk0bumNs02cn5idemFwxPg6A/z11ydXtIiIduPSBphGarlXKQmyU/KekwDV0kj5CtSD8/KLZWVQR62L7SzEfYczUXKa8Iy+SjvV+CpyzYwiejxuaQ2MvmKLrZJ8Y26fvGKIQBw+ag5nsMXq7bCTXUk8W9OpQw66p3Qs0vMaZ0OxwdWq00j5n9Ww2cgLfQinPKJ4cbP5Ycslc2PIf2HqJlmSJJkinlHGJ9jbfR1f0mC+hpTmCAN7HC83fPjOAMT2Ri9vTYCUzLhhNtf53X7f3SpeILJyo3yH5dya+lB+IoouBgSXiGwJepriIh0MCty/TMzuQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=I1h2bTIlDVA5eUc+B8YwO9nUxz2ompCDE5qER87lyeg=;
 b=PwKrWeOOdgg1AeMRUdDjR0ehC4zi4Mx6OrQeNM2WRKst9byB3Ewc1Gn/kiC7u/HDbDlU/abGBxJ+i6A2lD/pZuScnfCR0Bc0wqZFRc2tCIsbLk+nbcZcjeGCIrj0e1sCwaR+sTaKZ7+9JuIrKjP5TuNTsLBYZJo+BLykFi9SySKl2IggnpiXtfX/dw7WOX3svsH/nmYJUD1/NdPQ4alZVuqefEw6nye79zvjWplw+PcDIaAkl+RQuOeVVmAyYgMyVGnXO8BMuMph4O41advq++efRKElQm8LNQy90ADaFbDsQfKrAzuBigM7+683T0AD2D90sZEYlLUU6qBuahgNJA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=I1h2bTIlDVA5eUc+B8YwO9nUxz2ompCDE5qER87lyeg=;
 b=V25qE8MpfYLTnfcQpNf3rrBE7Ll/Rt6MgkkGYp1yqcI9CrPMJilEfjeyxsge9xwN0rgRQvZBb58vrpKQb8tiVggo9eLWuInXw3M2Ite6P3AQpCZ5z/wjnBcRpreqUBFsq2PMC/fbkWYUXmSOF5T08sHZ+sylEf29ai4/GvlDlU4=
Received: from CY8PR12CA0034.namprd12.prod.outlook.com (2603:10b6:930:49::22)
 by MN6PR12MB8471.namprd12.prod.outlook.com (2603:10b6:208:473::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28; Mon, 15 Jul
 2024 17:28:57 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::a) by CY8PR12CA0034.outlook.office365.com
 (2603:10b6:930:49::22) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:56 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:28:56 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:54 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:53 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 08/15] cxl: indicate probe deferral
Date: Mon, 15 Jul 2024 18:28:28 +0100
Message-ID: <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB04.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|MN6PR12MB8471:EE_
X-MS-Office365-Filtering-Correlation-Id: f5a4338f-ea7e-4089-d32d-08dca4f39b22
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|376014|36860700013|82310400026|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?DDKE2x7QzmGz6gCFCyWzZjPishiAfOe/wkoV6Vi4hjanhZGgnDgwx5x0tMeW?=
 =?us-ascii?Q?93JcnvgXgnujVieGic7mNz+zZpACeu4xzN5mKSNmC7LrF0QyUDq1pPQOHs5w?=
 =?us-ascii?Q?43cXABYTz9+fLwINKbhU0cHxXWenwx+kbnQGhTrX4SoYdyE+VP3YlzuD+iZO?=
 =?us-ascii?Q?ZV2IbzM6939pRBSoufa0q6kHICXaMmjHVq1VoTZxd0+ewYvxHf/bawaSWnwO?=
 =?us-ascii?Q?D473SQ4Z65OgH6phIBNGQyaT94ocqcwc1Mm7Rw9lomD/CSj6ltLauEWLv7qq?=
 =?us-ascii?Q?YeyY3A5F9wn3pZ7Mhl9TzGKNNPiBXgx4iQHbUGp6Z/annrCUW4i6tVc2MiKQ?=
 =?us-ascii?Q?WcUOliY2+mO76IJQ1sBcJGUqkkQRXS39ndJU8ZzZhTb3HeT11ZGy5IVbUzzB?=
 =?us-ascii?Q?Gs26b64VBSeWse1+rHMpGjTuV+dVJTbWM82aui6DfXILyB8fz6I+4HvBNjfk?=
 =?us-ascii?Q?K7bFeI/6ZF0t939OsbbZk3q84YiDF9d2poB6dNExGvyhAEnEYJajBYtEpJPK?=
 =?us-ascii?Q?ofUAtvUyvGU4gsd8LV0pl6OX5YWqNNlNZ5g6ecBkD3clUKYkES+uyoKCg3N4?=
 =?us-ascii?Q?NU4A6jUE6z2LsIsF34QIya7RK2kScg/3uDR25xmLlcdXuVAYhXT3PW1uTDdq?=
 =?us-ascii?Q?fOmaIZFfrGdHYNpbPiT1Lt3kL/PTqhVMOyXX8zWZqczXdYJXBcua9m/Y68K6?=
 =?us-ascii?Q?gNbaZVObCPfEoxjQSyfuswEJZmnFh5MvKf/rn+mesNWKikNgjfkZdgudMbXC?=
 =?us-ascii?Q?MhJIvCx3q3tx5iZIfgZw8AVlKUKJ6plQeslRVymHXIr2s9sliuA2TDrjXcWu?=
 =?us-ascii?Q?HmmtFABhEAdDsLszMvWYQK3T7ovQHQGdCgORAugO2MMtJf++eG47j7S4A9xx?=
 =?us-ascii?Q?KUUPLDyhu8/DGEDT6ajSPKHMeS3srW5tS5yiPL+FMOD/8bS/0ZRDU33rnNLs?=
 =?us-ascii?Q?RVzc/GcW6z+PsIzOYvKvGRNa2aRH4QoPpNxM6nFf7Yo/8SgO1L5fegWbIV2A?=
 =?us-ascii?Q?szAcIW7eFFppwM7pjTz9nGpeTb/qn149MC9rbLXPXPJXGyN1aZQy00mQlc+H?=
 =?us-ascii?Q?yCBt+I4MIXeFLSq+a5lZJ+N1d5R1aQibLMZ5a5Vn9KRRWD2WLxFcMaO3WWFR?=
 =?us-ascii?Q?WAtLkPciQ8SjwCdH7/Ti7RU1RNM3ZSSlipMqm76pbUTvVYFQ+uGuJek/E+YW?=
 =?us-ascii?Q?i+19jwjs03EqDNKJSFJ1sRT6TTXEOCkazgZxGRsfcro2xKT5TkhAQSJLCFlq?=
 =?us-ascii?Q?fuT18xKSGXOykhpAe1nleaXWA0TUcPRuiEnYMbbIaxXKRamLUtLbffBhlRje?=
 =?us-ascii?Q?KQtVX60ckyRJfye7TIAQ7IZ+FZm6hpI0rbfU7cSVVltkPrlttGc5hTAQnRyV?=
 =?us-ascii?Q?Hrd8LngWX5LZW/91wB6NRDpW7Xj7Ez8jOqZkM5ELdh7t++VdZg=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(1800799024)(376014)(36860700013)(82310400026)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:56.5276
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: f5a4338f-ea7e-4089-d32d-08dca4f39b22
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MN6PR12MB8471

From: Alejandro Lucero <alucerop@amd.com>

The first stop for a CXL accelerator driver that wants to establish new
CXL.mem regions is to register a 'struct cxl_memdev. That kicks off
cxl_mem_probe() to enumerate all 'struct cxl_port' instances in the
topology up to the root.

If the root driver has not attached yet the expectation is that the
driver waits until that link is established. The common cxl_pci_driver
has reason to keep the 'struct cxl_memdev' device attached to the bus
until the root driver attaches. An accelerator may want to instead defer
probing until CXL resources can be acquired.

Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
accelerator driver probing should be defferred vs failed. Provide that
indication via a new cxl_acquire_endpoint() API that can retrieve the
probe status of the memdev.

The first consumer of this API is a test driver that excercises the CXL
Type-2 flow.

Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
Co-developed-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/cxl/core/memdev.c          | 41 ++++++++++++++++++++++++++++++
 drivers/cxl/core/port.c            |  2 +-
 drivers/cxl/mem.c                  |  7 +++--
 drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
 include/linux/cxl_accel_mem.h      |  3 +++
 5 files changed, 59 insertions(+), 4 deletions(-)

diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
index b902948b121f..d51c8bfb32e3 100644
--- a/drivers/cxl/core/memdev.c
+++ b/drivers/cxl/core/memdev.c
@@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
 }
 EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
 
+/*
+ * Try to get a locked reference on a memdev's CXL port topology
+ * connection. Be careful to observe when cxl_mem_probe() has deposited
+ * a probe deferral awaiting the arrival of the CXL root driver
+*/
+struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
+{
+	struct cxl_port *endpoint;
+	int rc = -ENXIO;
+
+	device_lock(&cxlmd->dev);
+	endpoint = cxlmd->endpoint;
+	if (!endpoint)
+		goto err;
+
+	if (IS_ERR(endpoint)) {
+		rc = PTR_ERR(endpoint);
+		goto err;
+	}
+
+	device_lock(&endpoint->dev);
+	if (!endpoint->dev.driver)
+		goto err_endpoint;
+
+	return endpoint;
+
+err_endpoint:
+	device_unlock(&endpoint->dev);
+err:
+	device_unlock(&cxlmd->dev);
+	return ERR_PTR(rc);
+}
+EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
+
+void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint)
+{
+	device_unlock(&endpoint->dev);
+	device_unlock(&cxlmd->dev);
+}
+EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
+
 static void sanitize_teardown_notifier(void *data)
 {
 	struct cxl_memdev_state *mds = data;
diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
index d66c6349ed2d..3c6b896c5f65 100644
--- a/drivers/cxl/core/port.c
+++ b/drivers/cxl/core/port.c
@@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev *cxlmd,
 		 */
 		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
 			dev_name(dport_dev));
-		return -ENXIO;
+		return -EPROBE_DEFER;
 	}
 
 	parent_port = find_cxl_port(dparent, &parent_dport);
diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
index f76af75a87b7..383a6f4829d3 100644
--- a/drivers/cxl/mem.c
+++ b/drivers/cxl/mem.c
@@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
 		return rc;
 
 	rc = devm_cxl_enumerate_ports(cxlmd);
-	if (rc)
+	if (rc) {
+		cxlmd->endpoint = ERR_PTR(rc);
 		return rc;
+	}
 
 	parent_port = cxl_mem_find_port(cxlmd, &dport);
 	if (!parent_port) {
 		dev_err(dev, "CXL port topology not found\n");
-		return -ENXIO;
+		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
+		return -EPROBE_DEFER;
 	}
 
 	if (resource_size(&cxlds->pmem_res) && IS_ENABLED(CONFIG_CXL_PMEM)) {
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index 0abe66490ef5..2cf4837ddfc1 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -65,8 +65,16 @@ void efx_cxl_init(struct efx_nic *efx)
 	}
 
 	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
-	if (IS_ERR(cxl->cxlmd))
+	if (IS_ERR(cxl->cxlmd)) {
 		pci_info(pci_dev, "CXL accel memdev creation failed");
+		return;
+	}
+
+	cxl->endpoint = cxl_acquire_endpoint(cxl->cxlmd);
+	if (IS_ERR(cxl->endpoint))
+		pci_info(pci_dev, "CXL accel acquire endpoint failed");
+
+	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
 }
 
 
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index 442ed9862292..701910021df8 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -29,4 +29,7 @@ int cxl_await_media_ready(struct cxl_dev_state *cxlds);
 
 struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
 				       struct cxl_dev_state *cxlds);
+
+struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
+void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2078.outbound.protection.outlook.com [40.107.223.78])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 37EED7173C;
	Mon, 15 Jul 2024 17:29:01 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.78
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064544; cv=fail; b=KwDaTPwe1DvuGZYJgN/2qG5g4HqHG7g0qfNfKOtehQvF7ElXWv3PRoOudX2lIGzW2r0bDbq0zA6W0UxLsvvdacZovLypzYXqLCt7veFvOB8WMHvitzdOPl6IuEk6e4k9OmBA/3YaXGD23FE6jV+t3EIG3BMYfi/FwRECgLNuF2Y=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064544; c=relaxed/simple;
	bh=pU6ylkH8U/vWKVgxV1dXn2pBW2C/ATOuIpeV7kiKAPI=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=GhFsNf0xR2mRGkNJt+B4JdoNsJzcWXcVDZlSB/bJER2U1QpX6x/RWLQ5MUYIFHNII4JhrIiOid6lubYVtrEDTd4YwU6ch0eem7uY87hSNONxIjBlw+YyJ0XWb8/H+20Op+iaMnR/cBb7QocWwWikJgTcZ55jHhcXSQLMsq8P1EY=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=EqasE+L5; arc=fail smtp.client-ip=40.107.223.78
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="EqasE+L5"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=sIiod1/egHUNNqR5cEM0JBjuNEB8sYXNtX0XNRkzKNp3Aqu1S29CIMOjLcBux6cGtQiR4QbAijog9N3Dl8bJgKnoan20FIUYVWQsDebguzmWvWkVoZpflyYAvaZyOAfE7GtjBjBxNEmoP6xxlL66iAnJb/xNP3Qnbnh2obbqfycfNSM50+FdpCMHMoF0BAZNP2hL0wto5mqAPEJyv/H/MQKEOoTmfxx8ed/gIBAjotImcipuWtI8YWAfrkkYLe9i6aqwEt3y1ey75QjaAyUmcFdOwVi1swijb86Nhcq2w9Vv8l8ZOCAce2N7nqZZkeuPzBwHj2sWEZQrKW+8Pl5hvA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=ZjXnjXwhOwLS5GKsMstS8ETSnnG0c+V+5JINt7DPHbQ=;
 b=wCl4tLwdFWk5uN8FtD83HmMN+LyXBhgqjIpHeKQCFhNIvXs1FFDTedQ0nV7sF8n8fHH92hNARlFdDBE/eeTpsko6q/x6UXVstfuiA8HxbXp46hWQT32jxuuBEX0L5fP0UMeqXhgvo+D/pXSPA+42C4D+DoOZKFXtjA3m2+bIn/yZS/exnyp5L5dm7lJEjTxA9O9uZgUpQ8F665tJ45poVPxR5J0rl0jURlduuKSKCv3hGoMzlrWL4KxWWIZOOHLBhPbpulAx8nnvGAELrJDVt4DsP1virKsTGRBS0bvRyCd1mkaPpyJjp+e7bOE/agedYQvd9U8FvOg303X4hpor7w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ZjXnjXwhOwLS5GKsMstS8ETSnnG0c+V+5JINt7DPHbQ=;
 b=EqasE+L5XdDISp7204Hp0AsN5CEx+7h+S6QwbMMBuqY8HInDjebBS5d3ecQmEIA3dxrcoK1pwaRMQaSPxABmEk9jMkFEG0Ok0mGxnGzKauhmpOIt/oWx4bHiSoq1pPH6TG6LXo8QRGrN4lF+zbGF2x857CdQkudyzD5YaS+1k64=
Received: from BYAPR02CA0024.namprd02.prod.outlook.com (2603:10b6:a02:ee::37)
 by PH7PR12MB7793.namprd12.prod.outlook.com (2603:10b6:510:270::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28; Mon, 15 Jul
 2024 17:28:59 +0000
Received: from SJ1PEPF000023DA.namprd21.prod.outlook.com
 (2603:10b6:a02:ee:cafe::81) by BYAPR02CA0024.outlook.office365.com
 (2603:10b6:a02:ee::37) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:58 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB03.amd.com; pr=C
Received: from SATLEXMB03.amd.com (165.204.84.17) by
 SJ1PEPF000023DA.mail.protection.outlook.com (10.167.244.75) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.5 via Frontend Transport; Mon, 15 Jul 2024 17:28:58 +0000
Received: from SATLEXMB06.amd.com (10.181.40.147) by SATLEXMB03.amd.com
 (10.181.40.144) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:58 -0500
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB06.amd.com
 (10.181.40.147) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:57 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:56 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 10/15] cxl: define a driver interface for DPA allocation
Date: Mon, 15 Jul 2024 18:28:30 +0100
Message-ID: <20240715172835.24757-11-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SJ1PEPF000023DA:EE_|PH7PR12MB7793:EE_
X-MS-Office365-Filtering-Correlation-Id: 43d8f4c3-424a-481f-0742-08dca4f39c85
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|36860700013|376014|82310400026|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?CfMT5XW+m0bI0jWoz7ZHNx3qsgRK8pSvjdyB0nZCGBBHdu7W+90djFTaA9is?=
 =?us-ascii?Q?Q2rZ8DUB9Y+gCHvXPZl2DiAghsgW7uiZXYJaQrN8bdNUgy0j43RHYpJL9Iei?=
 =?us-ascii?Q?t1uQ0nfHOfNZYqdPZwhgU9xFfntn5bhey22y5g7SyOTYTz/9i2B8M8W55n2R?=
 =?us-ascii?Q?ZJ8DnDJemI6JfoT8I9YTXiomWxNccojgrGtYPvQU8gaQX4gjppoH3BHp9bku?=
 =?us-ascii?Q?7n9hk/L5z6cckDyXzsxr2OFgfK2s0RRtvDkDz/qaoB5z2QMJhNKlvoKgnj+H?=
 =?us-ascii?Q?6MofnplfAqyZYOHHXYJtubGIMQa6J/eb5R8Xp2AptJhtnw5DW5uUNiDODjzG?=
 =?us-ascii?Q?P2ZYtaEPaUvbzkuF4vjd9a5DwrHVuZH+HCJhJh3SjGsjJb6Qp5ZLN4vBX0a3?=
 =?us-ascii?Q?Uoj3hgAT+moDs0FL+mp6+OF0v7xSWakv2aYsFCv18SF7aaH0WRdQnx5VHAAs?=
 =?us-ascii?Q?e3zh3AnC6BD9djZWPO9iU1LEUq0qpCT2gHbfiE0H8Kjd+S/JhDuu5vSMzeKp?=
 =?us-ascii?Q?+KpM+93tjANyRf+Dn4I6ePhhRM8BaV2uLnnXWbSCBA9OZ+X9eG2JTNXZU1HK?=
 =?us-ascii?Q?lYOtaBZwkppa3xEcir6clVGR7zhzlXHSBEda7jrZWA2MGiVVkaV/PiFPYvyK?=
 =?us-ascii?Q?8ISCcBYUCcJIaKmOwldFFHVmIg7LDPpNRI+/9sdSwNO/wkwcHV8zTptkHVU8?=
 =?us-ascii?Q?nZ//2BRGlgSJ0ZokLB3R1BjIFJeITDKcdDFXJCe+xdDVP0GrZ8tGgkhRCYGS?=
 =?us-ascii?Q?OXNDERN4QFeTRpRyN88aPpZRpMdiGwL6bC5DAjw21J8cUjA1vavcGQrZbJWz?=
 =?us-ascii?Q?JUtWbcIsWUxSygONo9JslQrzFclJmFcn0j3WXCDr7+dwzepv60B55uu1vzpX?=
 =?us-ascii?Q?fZ/sLDzUn+akxppVYIJfNCK2wyL+jMFhk/PPUU/sRAeiSrcziHoWqe4P1NJQ?=
 =?us-ascii?Q?1f3CWaulCCuajUqe3cOY0jziDunvYNbbMgakcU3SidG5kjCHJZa5EJBZuyPI?=
 =?us-ascii?Q?/vzNJRoxo+IvqW/THAp0vBGE/O+kuoYygx42SLy/BBglejEoksmGXsvFEn/x?=
 =?us-ascii?Q?1S3ylSTUUJR/eJ+aaJPh46mTzWHC9u0TXdXHjI/KUoyf2lUPZnyPzbSh/mOn?=
 =?us-ascii?Q?GZrsvhhOfHKon3+HtC71sgfYWx/32tPos1BliGmqz5o8pA/5psCle9f0LgA3?=
 =?us-ascii?Q?Z4b73JwXsrzYCiTIWbuwUFAYqieFz0/9RUl41VG0GxIFv3yaEp1PbcOww7ne?=
 =?us-ascii?Q?7T3IHYaz09P8iKGtvKh2Ibg5wbrH5l/CRDwNk0WDXaZ93Vmg1gN9KnpYDzXA?=
 =?us-ascii?Q?3GLiH9pvEVbx5aYFH5jlRawZyiUWRSlaZp6B7iTElVITfx09aLnHEOoIqgFb?=
 =?us-ascii?Q?Lbg6e3G9gjLMUCcZnxWL+ZmDDvXi?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB03.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(1800799024)(36860700013)(376014)(82310400026)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:58.8333
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 43d8f4c3-424a-481f-0742-08dca4f39c85
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB03.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	SJ1PEPF000023DA.namprd21.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB7793

From: Alejandro Lucero <alucerop@amd.com>

Region creation involves finding available DPA (device-physical-address)
capacity to map into HPA (host-physical-address) space. Given the HPA
capacity constraint, define an API, cxl_request_dpa(), that has the
flexibility to  map the minimum amount of memory the driver needs to
operate vs the total possible that can be mapped given HPA availability.

Factor out the core of cxl_dpa_alloc, that does free space scanning,
into a cxl_dpa_freespace() helper, and use that to balance the capacity
available to map vs the @min and @max arguments to cxl_request_dpa.

Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m4271ee49a91615c8af54e3ab20679f8be3099393

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
Co-developed-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/cxl/core/core.h            |   1 +
 drivers/cxl/core/hdm.c             | 153 +++++++++++++++++++++++++----
 drivers/net/ethernet/sfc/efx.c     |   2 +
 drivers/net/ethernet/sfc/efx_cxl.c |  18 +++-
 drivers/net/ethernet/sfc/efx_cxl.h |   1 +
 include/linux/cxl_accel_mem.h      |   7 ++
 6 files changed, 161 insertions(+), 21 deletions(-)

diff --git a/drivers/cxl/core/core.h b/drivers/cxl/core/core.h
index 625394486459..a243ff12c0f4 100644
--- a/drivers/cxl/core/core.h
+++ b/drivers/cxl/core/core.h
@@ -76,6 +76,7 @@ int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
 		     enum cxl_decoder_mode mode);
 int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size);
 int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
+int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
 resource_size_t cxl_dpa_size(struct cxl_endpoint_decoder *cxled);
 resource_size_t cxl_dpa_resource_start(struct cxl_endpoint_decoder *cxled);
 
diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
index 4af9225d4b59..3e53ae222d40 100644
--- a/drivers/cxl/core/hdm.c
+++ b/drivers/cxl/core/hdm.c
@@ -3,6 +3,7 @@
 #include <linux/seq_file.h>
 #include <linux/device.h>
 #include <linux/delay.h>
+#include <linux/cxl_accel_mem.h>
 
 #include "cxlmem.h"
 #include "core.h"
@@ -420,6 +421,7 @@ int cxl_dpa_free(struct cxl_endpoint_decoder *cxled)
 	up_write(&cxl_dpa_rwsem);
 	return rc;
 }
+EXPORT_SYMBOL_NS_GPL(cxl_dpa_free, CXL);
 
 int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
 		     enum cxl_decoder_mode mode)
@@ -467,30 +469,17 @@ int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
 	return rc;
 }
 
-int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
+static resource_size_t cxl_dpa_freespace(struct cxl_endpoint_decoder *cxled,
+					 resource_size_t *start_out,
+					 resource_size_t *skip_out)
 {
 	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
 	resource_size_t free_ram_start, free_pmem_start;
-	struct cxl_port *port = cxled_to_port(cxled);
 	struct cxl_dev_state *cxlds = cxlmd->cxlds;
-	struct device *dev = &cxled->cxld.dev;
 	resource_size_t start, avail, skip;
 	struct resource *p, *last;
-	int rc;
-
-	down_write(&cxl_dpa_rwsem);
-	if (cxled->cxld.region) {
-		dev_dbg(dev, "decoder attached to %s\n",
-			dev_name(&cxled->cxld.region->dev));
-		rc = -EBUSY;
-		goto out;
-	}
 
-	if (cxled->cxld.flags & CXL_DECODER_F_ENABLE) {
-		dev_dbg(dev, "decoder enabled\n");
-		rc = -EBUSY;
-		goto out;
-	}
+	lockdep_assert_held(&cxl_dpa_rwsem);
 
 	for (p = cxlds->ram_res.child, last = NULL; p; p = p->sibling)
 		last = p;
@@ -528,14 +517,45 @@ int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
 			skip_end = start - 1;
 		skip = skip_end - skip_start + 1;
 	} else {
-		dev_dbg(dev, "mode not set\n");
-		rc = -EINVAL;
+		avail = 0;
+	}
+
+	if (!avail)
+		return 0;
+	if (start_out)
+		*start_out = start;
+	if (skip_out)
+		*skip_out = skip;
+	return avail;
+}
+
+int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
+{
+	struct cxl_port *port = cxled_to_port(cxled);
+	struct device *dev = &cxled->cxld.dev;
+	resource_size_t start, avail, skip;
+	int rc;
+
+	down_write(&cxl_dpa_rwsem);
+	if (cxled->cxld.region) {
+		dev_dbg(dev, "EBUSY, decoder attached to %s\n",
+			     dev_name(&cxled->cxld.region->dev));
+		rc = -EBUSY;
 		goto out;
 	}
 
+	if (cxled->cxld.flags & CXL_DECODER_F_ENABLE) {
+		dev_dbg(dev, "EBUSY, decoder enabled\n");
+		rc = -EBUSY;
+		goto out;
+	}
+
+	avail = cxl_dpa_freespace(cxled, &start, &skip);
+
 	if (size > avail) {
 		dev_dbg(dev, "%pa exceeds available %s capacity: %pa\n", &size,
-			cxl_decoder_mode_name(cxled->mode), &avail);
+			     cxled->mode == CXL_DECODER_RAM ? "ram" : "pmem",
+			     &avail);
 		rc = -ENOSPC;
 		goto out;
 	}
@@ -550,6 +570,99 @@ int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
 	return devm_add_action_or_reset(&port->dev, cxl_dpa_release, cxled);
 }
 
+static int find_free_decoder(struct device *dev, void *data)
+{
+	struct cxl_endpoint_decoder *cxled;
+	struct cxl_port *port;
+
+	if (!is_endpoint_decoder(dev))
+		return 0;
+
+	cxled = to_cxl_endpoint_decoder(dev);
+	port = cxled_to_port(cxled);
+
+	if (cxled->cxld.id != port->hdm_end + 1) {
+		return 0;
+	}
+	return 1;
+}
+
+/**
+ * cxl_request_dpa - search and reserve DPA given input constraints
+ * @endpoint: an endpoint port with available decoders
+ * @mode: DPA operation mode (ram vs pmem)
+ * @min: the minimum amount of capacity the call needs
+ * @max: extra capacity to allocate after min is satisfied
+ *
+ * Given that a region needs to allocate from limited HPA capacity it
+ * may be the case that a device has more mappable DPA capacity than
+ * available HPA. So, the expectation is that @min is a driver known
+ * value for how much capacity is needed, and @max is based the limit of
+ * how much HPA space is available for a new region.
+ *
+ * Returns a pinned cxl_decoder with at least @min bytes of capacity
+ * reserved, or an error pointer. The caller is also expected to own the
+ * lifetime of the memdev registration associated with the endpoint to
+ * pin the decoder registered as well.
+ */
+struct cxl_endpoint_decoder *cxl_request_dpa(struct cxl_port *endpoint,
+					     bool is_ram,
+					     resource_size_t min,
+					     resource_size_t max)
+{
+	struct cxl_endpoint_decoder *cxled;
+	enum cxl_decoder_mode mode;
+	struct device *cxled_dev;
+	resource_size_t alloc;
+	int rc;
+
+	if (!IS_ALIGNED(min | max, SZ_256M))
+		return ERR_PTR(-EINVAL);
+
+	down_read(&cxl_dpa_rwsem);
+
+	cxled_dev = device_find_child(&endpoint->dev, NULL, find_free_decoder);
+	if (!cxled_dev)
+		cxled = ERR_PTR(-ENXIO);
+	else
+		cxled = to_cxl_endpoint_decoder(cxled_dev);
+
+	up_read(&cxl_dpa_rwsem);
+
+	if (IS_ERR(cxled))
+		return cxled;
+
+	if (is_ram)
+		mode = CXL_DECODER_RAM;
+	else
+		mode = CXL_DECODER_PMEM;
+
+	rc = cxl_dpa_set_mode(cxled, mode);
+	if (rc)
+		goto err;
+
+	down_read(&cxl_dpa_rwsem);
+	alloc = cxl_dpa_freespace(cxled, NULL, NULL);
+	up_read(&cxl_dpa_rwsem);
+
+	if (max)
+		alloc = min(max, alloc);
+	if (alloc < min) {
+		rc = -ENOMEM;
+		goto err;
+	}
+
+	rc = cxl_dpa_alloc(cxled, alloc);
+	if (rc)
+		goto err;
+
+	return cxled;
+err:
+	put_device(cxled_dev);
+	return ERR_PTR(rc);
+}
+EXPORT_SYMBOL_NS_GPL(cxl_request_dpa, CXL);
+
 static void cxld_set_interleave(struct cxl_decoder *cxld, u32 *ctrl)
 {
 	u16 eig;
diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
index cb3f74d30852..9cfe29002d98 100644
--- a/drivers/net/ethernet/sfc/efx.c
+++ b/drivers/net/ethernet/sfc/efx.c
@@ -901,6 +901,8 @@ static void efx_pci_remove(struct pci_dev *pci_dev)
 
 	efx_fini_io(efx);
 
+	efx_cxl_exit(efx);
+
 	pci_dbg(efx->pci_dev, "shutdown successful\n");
 
 	efx_fini_devlink_and_unlock(efx);
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index 6d49571ccff7..b5626d724b52 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -84,12 +84,28 @@ void efx_cxl_init(struct efx_nic *efx)
 		goto out;
 	}
 
-	if (max < EFX_CTPIO_BUFFER_SIZE)
+	if (max < EFX_CTPIO_BUFFER_SIZE) {
 		pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
 				  max, EFX_CTPIO_BUFFER_SIZE);
+		goto out;
+	}
+
+	cxl->cxled = cxl_request_dpa(cxl->endpoint, true, EFX_CTPIO_BUFFER_SIZE,
+				     EFX_CTPIO_BUFFER_SIZE);
+	if (IS_ERR(cxl->cxled))
+		pci_info(pci_dev, "CXL accel request DPA failed");
 out:
 	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
 }
 
+void efx_cxl_exit(struct efx_nic *efx)
+{
+	struct efx_cxl *cxl = efx->cxl;
+
+	if (cxl->cxled)
+		cxl_dpa_free(cxl->cxled);
+ 
+ 	return;
+ }
 
 MODULE_IMPORT_NS(CXL);
diff --git a/drivers/net/ethernet/sfc/efx_cxl.h b/drivers/net/ethernet/sfc/efx_cxl.h
index 76c6794c20d8..59d5217a684c 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.h
+++ b/drivers/net/ethernet/sfc/efx_cxl.h
@@ -26,4 +26,5 @@ struct efx_cxl {
 };
 
 void efx_cxl_init(struct efx_nic *efx);
+void efx_cxl_exit(struct efx_nic *efx);
 #endif
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index f3e77688ffe0..d4ecb5bb4fc8 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -2,6 +2,7 @@
 /* Copyright(c) 2024 Advanced Micro Devices, Inc. */
 
 #include <linux/cdev.h>
+#include <linux/pci.h>
 
 #ifndef __CXL_ACCEL_MEM_H
 #define __CXL_ACCEL_MEM_H
@@ -41,4 +42,10 @@ struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
 					       int interleave_ways,
 					       unsigned long flags,
 					       resource_size_t *max);
+
+struct cxl_endpoint_decoder *cxl_request_dpa(struct cxl_port *endpoint,
+					     bool is_ram,
+					     resource_size_t min,
+					     resource_size_t max);
+int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2089.outbound.protection.outlook.com [40.107.236.89])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id B38CA446D1;
	Mon, 15 Jul 2024 17:29:03 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.89
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064545; cv=fail; b=eIp0Yoc/GuxTqTx5zxYhSDfaYnJfA+Z4ktcY+S2brfaxPg4bP/fK0bv0G1KxIGXsJtbXhaO9g7SEETD8oXzHPQt7w6brnd+tnnvM0DwbzcXkpJ2XWzFXNim/0fcZXwXejphq1CuZza8lv97isUx9BpUVBtB481O5VXcGt/SLbbk=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064545; c=relaxed/simple;
	bh=FOW6J+oQinweZYW2Y3V1Roo+XlJheeLT/W5x4VsppN8=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=j09qdy4v7MFM4TxhPDMQv6L1FMLRxTVN1adV4CVv/wU4l/8VD+7jZy8Ofd8TJp4N4X+M71RwB2Hd1nPHZ5lCHMQd/K+nyRx4x2sayl96zBz3jIGAfL2mlsDblBG6Q/hXzgWdXAFkEoWlav7d6ZchAMFaNEP1Ca6+BMQO2WybMYc=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=IRsVo9Cr; arc=fail smtp.client-ip=40.107.236.89
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="IRsVo9Cr"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=gdBWpCKSDQ2PzVkhlp8SEEtgtUL6cuOkk1ajcGMQLLC+QUql7vHgCQ6er4WpJTqwKNMiTsPrRQZ1OrQ4Wz7fg8FgeerfelV2nD3sLbSwwfLSWwt3HJ8ncU9Kjqzuw4qI7GozBff7PW8W5M4ik+BsLRf9cEBVPKT8vfeFNI72JjKPsH8EZiiYvXg3nRPrvmm8h4yGe5EK4Hv7qpZHpLnz6T0wOLbyzuylmGLlYwYXrrELpMfMJmSYfEuYCSV61QIDXkvqO5/mZnDlIV90KvTl7z6NRclRZWMLP+L2v18vNj9IinVIDy90kk+PDggIXgAIfoX4ju/bw/U39mt1s43W4w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=6htK/OoKboLNfKt5yS2v8d8VTCpFP6cnDFWCkr4RKAo=;
 b=PUTCogWtz8pnaOUNGdRJ/Sm9/KedngR/neWGC6d33qW6to6fMlvtqzfwjyiRr1KRdkVTWkfd3yrUDohY1akP4N17nZgIUMBgk4wkkasYosVSgvhNMKi/+gCglIblH9JmMmuKJ6Sd+J/5gGlZDLowZls04F/0YrLuQgh1Y4GlrY8zqu/hnVg/CVhSCH/TsCm9BO89fblc0EoUCE/MDuzoxQmcdpl8rUmLeaR/wDeaZnNSbxuc+pO+FQdNKmexmJ6hUdbBsS26mQGq3gDvZDSBqXd/d3cEcjN3mpFr9SSp5b6dYY+jo/th5Ya1b7Mp377cWzyWO0kQ1vjXBw0eMyLIpw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=6htK/OoKboLNfKt5yS2v8d8VTCpFP6cnDFWCkr4RKAo=;
 b=IRsVo9CrVNsZh6tvBHLUWI8eugZpVm2PGVuPaYY44u45DLJLTy4cZGvFcci/Co6bhSwNjyOCyMXeh+ITB02PlGgIU645thiPTxwu5RX2Y9acyRI+fkZRfdzhQJqXsFIK+OHjuAp4OLPa07l1bCyXvXiYGPIEbFIjkhGpXwWWqt0=
Received: from CY8PR12CA0044.namprd12.prod.outlook.com (2603:10b6:930:49::10)
 by DS0PR12MB8342.namprd12.prod.outlook.com (2603:10b6:8:f9::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29; Mon, 15 Jul
 2024 17:29:00 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::7b) by CY8PR12CA0044.outlook.office365.com
 (2603:10b6:930:49::10) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:29:00 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:28:59 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:59 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:57 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 11/15] cxl: make region type based on endpoint type
Date: Mon, 15 Jul 2024 18:28:31 +0100
Message-ID: <20240715172835.24757-12-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB04.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|DS0PR12MB8342:EE_
X-MS-Office365-Filtering-Correlation-Id: 224f4914-48d6-4966-09ee-08dca4f39d21
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|376014|36860700013|82310400026|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?q4z2NQyT/YXkftEo6LAGc/zB7cQfQr+WU57LOrar8E4iLPXd980nAiobm2fm?=
 =?us-ascii?Q?4Wmn/6H2xM0wCpfkhtDUHgDRrpXMjt260Q11sSa06dZWdheqE/9e0lA02YTy?=
 =?us-ascii?Q?AQIAnomUeY9IENz61ITl5udFyMgy3mUR2nN4yGoHN6ht9JIpq6HSsACcOTth?=
 =?us-ascii?Q?EmIS3fvHRCDlitgHu+cOM9UgKn4G8xBoM4khpEh69GYxYz00CtZa3REU7yO1?=
 =?us-ascii?Q?dYB7xGbGTuQdnK604CbO4Oz0SX8mFUCi/VlUCQHWprgPpqXUX63NE4xKibam?=
 =?us-ascii?Q?npRbg8NcvqrYJ0CdE0Fk8jOgS62oDmQBpgYhbvH6Q9XNPsW8CfpMqyOaMTPk?=
 =?us-ascii?Q?9VfStoei0ok53SSD6mch/AD+V9rFAZFGQjIAton/5euCoJYXOBLyFYOc4xhm?=
 =?us-ascii?Q?Tvpyh3oc77U28mA330UL1lDa3SmZHo6Ng/oTochaPrnfwry2DyOdjsUCzhCx?=
 =?us-ascii?Q?nJYnk0pmQW7EXIWwUeDaToKGr8fiD5dKUrjZJDetno6XehdMQZ0HQzSm9Dr9?=
 =?us-ascii?Q?N2bnJSoAVyJWVePVrCk+0g+YarAj+G9TpAe/pdmyGVm42QQwLODB67+rA9g/?=
 =?us-ascii?Q?GBMprtpb5zG20suWHUqcfYKFr59Y2bRDLoXXGbDlhewS8uRqYmcuRADmleyU?=
 =?us-ascii?Q?hdqvDGBlNkPYlMlj9kDuuMVuqmlxZFp0E9+xgM1ZAKCxzy6lMmt3Ml3VwJk4?=
 =?us-ascii?Q?UdlmVzkqiLz/cm14KRFC/LuHPZI97K2+xRxQi1FF0br9IRPU+9ezQMbXXBD3?=
 =?us-ascii?Q?fBWrMP/qddk+2oyyTVm6vJvCuY9d3kXvcyn59ZnldU6ekoD21fm+IWTVX64J?=
 =?us-ascii?Q?1LG6JM8GbFcXs0lOM3z5THAWBgZBcJ0ugxwjpDdboEG0HtJH8Z2i8gGRzzYB?=
 =?us-ascii?Q?Z8INoGGhIcWpqwb5P4vJUK1iPfNzW4SThw5hc3TsZZ24RfKYsK3WgpgZuV8H?=
 =?us-ascii?Q?s1GX9z6G8w/GFk8cNPjK1R04k58M+pcJKtdZJaGFQO1Zoy2hWSGwZsjVgVOE?=
 =?us-ascii?Q?wjKh1kUcZhmj+HrpbVdguKADj//UuJt+e59EtmDXGTCIzy8ADRmEX6i/VGaF?=
 =?us-ascii?Q?M9Uh92KBVaVoy4TDGjqCDT8GOHP+RSQc/AefV2Lsert82QO93vz5nh+/8iD8?=
 =?us-ascii?Q?bz/7Zbx41bbaBDRPIn42W4YW8gM+7Pi9OZWjTb5PMD9cAl/OMazwuEHP9ZMO?=
 =?us-ascii?Q?2jebwk7MtJBhEl/+m1FtjAt1wdG1kjoH9u8suOsK2J9dIkQon8x6Hbs/dMo/?=
 =?us-ascii?Q?sefaGvO7+ov4x1Myvjf2ND8wKfB9SNkD5YwYfcOZVQ5ssZl32GXn43wIW9/t?=
 =?us-ascii?Q?CvAgemtISaQuPj3RavReI2MIy2q/kDTnU5xR48VHPtPbdDJG+O21SoOYP1Bu?=
 =?us-ascii?Q?p4hrryhQ4LbQwBcHgYki4VXegduESLZ7UXxCCdqD/TqU+OOaWWfHBGL0nKCG?=
 =?us-ascii?Q?fk3P5PodDoiaGVbqogq4XN5BvPvLIdSepfFT085wM27UFoorYA1cAA=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(1800799024)(376014)(36860700013)(82310400026)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:59.8714
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 224f4914-48d6-4966-09ee-08dca4f39d21
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS0PR12MB8342

From: Alejandro Lucero <alucerop@amd.com>

Current code is expecting Type3 or CXL_DECODER_HOSTONLYMEM devices only.
Suport for Type2 implies region type needs to be based on the endpoint
type instead.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/core/region.c | 14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)

diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
index ca464bfef77b..5cc71b8868bc 100644
--- a/drivers/cxl/core/region.c
+++ b/drivers/cxl/core/region.c
@@ -2645,7 +2645,8 @@ static ssize_t create_ram_region_show(struct device *dev,
 }
 
 static struct cxl_region *__create_region(struct cxl_root_decoder *cxlrd,
-					  enum cxl_decoder_mode mode, int id)
+					  enum cxl_decoder_mode mode, int id,
+					  enum cxl_decoder_type target_type)
 {
 	int rc;
 
@@ -2667,7 +2668,7 @@ static struct cxl_region *__create_region(struct cxl_root_decoder *cxlrd,
 		return ERR_PTR(-EBUSY);
 	}
 
-	return devm_cxl_add_region(cxlrd, id, mode, CXL_DECODER_HOSTONLYMEM);
+	return devm_cxl_add_region(cxlrd, id, mode, target_type);
 }
 
 static ssize_t create_pmem_region_store(struct device *dev,
@@ -2682,7 +2683,8 @@ static ssize_t create_pmem_region_store(struct device *dev,
 	if (rc != 1)
 		return -EINVAL;
 
-	cxlr = __create_region(cxlrd, CXL_DECODER_PMEM, id);
+	cxlr = __create_region(cxlrd, CXL_DECODER_PMEM, id,
+			       CXL_DECODER_HOSTONLYMEM);
 	if (IS_ERR(cxlr))
 		return PTR_ERR(cxlr);
 
@@ -2702,7 +2704,8 @@ static ssize_t create_ram_region_store(struct device *dev,
 	if (rc != 1)
 		return -EINVAL;
 
-	cxlr = __create_region(cxlrd, CXL_DECODER_RAM, id);
+	cxlr = __create_region(cxlrd, CXL_DECODER_RAM, id,
+			       CXL_DECODER_HOSTONLYMEM);
 	if (IS_ERR(cxlr))
 		return PTR_ERR(cxlr);
 
@@ -3364,7 +3367,8 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
 
 	do {
 		cxlr = __create_region(cxlrd, cxled->mode,
-				       atomic_read(&cxlrd->region_id));
+				       atomic_read(&cxlrd->region_id),
+				       cxled->cxld.target_type);
 	} while (IS_ERR(cxlr) && PTR_ERR(cxlr) == -EBUSY);
 
 	if (IS_ERR(cxlr)) {
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2074.outbound.protection.outlook.com [40.107.223.74])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 20A5171B3A;
	Mon, 15 Jul 2024 17:29:03 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.74
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064545; cv=fail; b=XYL+FU5toyWZ//C+dawXbRt8eSLbO/jLOjMucf5mZSr5yZ4NFlozLlruhseVTFci7hHdIeFcZR7g1gsJbXE+kpEWUnIzitPpwTC4cAOrWd9uFtoMKB2jLsE9rqNJMXddUaLM5opgJyMCSxWXCAfdPXaeMX/161tTAk03B9py910=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064545; c=relaxed/simple;
	bh=qgWS3BfT14ZBavTF8bZ0VMsweurB3s2FqgLcm22BZr8=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=M248xshtNQTr0CGoQT8UoekE7nRcRm6Fl7mc/wTusyrnG4E08L5YjJxuIWrgET52ujiLOVEPtWF3SfFhbfYNCqQqg3n9rgEd/3P5ImLWbBto+u8Y0oyxTcFq34BwwQBZ9IT6gFRGj0Dvhr3nYCog9XK2UOFRwv81jpcU4qKqtHo=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=lQkuLVOQ; arc=fail smtp.client-ip=40.107.223.74
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="lQkuLVOQ"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=RXQf5tCwLd6waYAu799YkA1IbM4FAS4YTs+X71jkNyIAfi6+ZfwtIhHNpug8Csv4gQtIIc8nEq2j/3w1OtE1Xk7Sps4/BePayzTFi2INozBYPVCx8yEQWRzE79n0VAAdQSBdRthxwvUU+iRtj1qkbaFd5C+HsiuLz8Qu+w1Z3iBPynYXv84sfUFmHBLyLB7Xc3tdmNwJzu8WsO0iRTZkXG3ASyVlDY4Cc98UKOJh7bndcavQA2kqzZnMT/sAOlJIvuvyjiZXc4mPfy4XpZaCWJOvRmDrWVIIwm7Zvce4EA5/FDAl2bKvE5NAPaUYj7yZis7Fv3ClZPxwyYvgFrXvCg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Dizz2TTkzDjjd1y2eDQGqIAEiQuyoYn0IDgCcbZi8F4=;
 b=MqOe0Lz43X7WO+Ho4u/eJBRdL3tl8Uz/q7GWs4Ef5AF3/NTI4kCSX6aEw9jkgrbAp4nQqzhYCMBqWFlHLqxmZxqpb1jtjQ4qh2nfTa2R82XegnRC7msDv7fZDR/rV4xd4QGxTZosSjx1c7hOcCIszSbN75c20mf+ysFk4i5WLePqKL4dAeepT7Us2HkGI/j7e25GnlSEbxFxPtEOIMeH6/Drjiuz/neNONJfmKii414lVyBuRDPI73MpmFTLXu3dulwqMu5hSTpdEN5BUtcpxy7H/kNNAKbv14gnh/dLhW0lDYkjwb52R4O3DzaUisCa+E1lvnzOb2gukaq9hMzjGA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Dizz2TTkzDjjd1y2eDQGqIAEiQuyoYn0IDgCcbZi8F4=;
 b=lQkuLVOQq+RDmO2KuRFHBlqw7rVODxLROkzEO0cQS9vq2Ta+ddqtSzBBfheTs8WmO+B5sE9jUqULB5zgE12LEtRXXJl9gXh61DW7KIweftCUWWyTNpzmdrmJrZJsV7SIrzWMgzpKtwYJ1wryR124aYCkWvXDneXNAf0lBz4ahyc=
Received: from CY8PR12CA0047.namprd12.prod.outlook.com (2603:10b6:930:49::20)
 by DM4PR12MB5939.namprd12.prod.outlook.com (2603:10b6:8:6a::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29; Mon, 15 Jul
 2024 17:28:58 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::e) by CY8PR12CA0047.outlook.office365.com
 (2603:10b6:930:49::20) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:28:58 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:28:58 +0000
Received: from SATLEXMB06.amd.com (10.181.40.147) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:56 -0500
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB06.amd.com
 (10.181.40.147) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:28:56 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:55 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 09/15] cxl: define a driver interface for HPA free space enumaration
Date: Mon, 15 Jul 2024 18:28:29 +0100
Message-ID: <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 8bit
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|DM4PR12MB5939:EE_
X-MS-Office365-Filtering-Correlation-Id: 1e34b7c1-e34f-4764-a086-08dca4f39c13
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|82310400026|376014|1800799024|36860700013|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?TWVncFB5WCtvTXpRdWR6UHRNb0dFeFhYajBLUVZTYUZuT2VGSjJKQm1xVXI4?=
 =?utf-8?B?WUVSRFFYc2ZpVys2dmFySDVtbC8xbS9xbjRuU3pTaXUxTGo0Vy9zcU5UTUlG?=
 =?utf-8?B?b2VQdmdhY1BjWUp2SkpXTTAxM3Q5cW00WWhXTllpd0d6R3BNd2QwYzdScVdJ?=
 =?utf-8?B?YUJsTDhUa0JRaVJERDB1bjJkM2VITUovK0RpdlFNcUVsbjFxQ1F4TG13OGg5?=
 =?utf-8?B?ZVl2QlV6c1ZsamV3bXgwdzV6Q1UrcnZoYmZzdVVhSTBZR1pvd1Q3aFl1VFN4?=
 =?utf-8?B?dmM3bkFld1EvSEVvbEIzUG9hRFYvdkhHS2FURWsxNE82RGVqTXlZNHdVU2g0?=
 =?utf-8?B?cjBLVHo0Z2hhcFl2Zy9mVjhZTU14a1JocUVEMWkvam0wZGVQakdjdVI4NHB4?=
 =?utf-8?B?M1ovOWU4Z3BJY0FGWVBnOFVXejFHYjVWT0xYdVVZZGRhSmt3VXdBL3BBdzc2?=
 =?utf-8?B?RlpzOEV2WS9RRi9laDAweTdNaDJPeFNaaUl4TktkNHhkZFg2eG5aWU1aK2pP?=
 =?utf-8?B?WllkVmhIeUxVekNzQXEzVk1xd1dycmZVampXWG0xNSsxdDRSYXc0Y1ZiL1lH?=
 =?utf-8?B?ZUtEZ3JubndSYlNYZHZxeDNJTTg1MWZwSER0YVpVUnJGUzBYQWVTOU1vR0U0?=
 =?utf-8?B?dTNVUWVuUE4wSGZGU3NrSEt3WlRjK1NmR0pCYWVLdXN4WEpxSFB3ZGpSalB2?=
 =?utf-8?B?aU5NUXUxSHpMTnJGTDRsZ1ZIS2FzWEpVZFNtdTNnZFQ4dkVNNEszUGdKa0hX?=
 =?utf-8?B?TXdCMGprRXNpQ3p6NnFFbEx6QUY5V08xYU5EamF0cU5mZG9ybUorOHJkTjRi?=
 =?utf-8?B?bVluZ041bkRHZDEwYlExRitPQk5WcFdzcDYvQk5DL3l6d0ZLUDUxVVRrUEEr?=
 =?utf-8?B?S0g4ZTJwa256Z2RJTWQ5bUdBNU5pREpkWjNmSW16MkE0WW9ONDlRTWR5SFc3?=
 =?utf-8?B?NFlNazFzRTVKS0I5eStUR2Q5YXRHSERXYlQwR0tMQ3JYbjZwWTZSTEYrR1Fx?=
 =?utf-8?B?VlZnQ0R1aEIrd0lzemRZbHZGT3hJZGo3eTluaTBRWFFnZm5QRTh0U05mc2NM?=
 =?utf-8?B?dUQzV3NEUXJOUTBsVVJrTWhiRGo4NmxQUjJldC8vSFY3UmRxOUVGSTl3TFV6?=
 =?utf-8?B?SUVSYnRlS1E2Z2huZlZkamdjUUZOU3k1UnZaRFF1K29zSUpTNk9DVjRzaXkw?=
 =?utf-8?B?RDVBemxySGx4L3R6WUZud1dkWEgwVEVwclZENFhvdHlRTkpsdkRSWHVLdzF3?=
 =?utf-8?B?dDJMa1BlUGZpSndRK1hZM3RCR2pGOHJtRUJGUzJKaGFUR1VCMUgrTFdwUzlr?=
 =?utf-8?B?N2VZcGFIWVhDdTZhYk9EQkx0SlpkZVdJcGdWRUNhYmczZkExRDJQRlFjaXBo?=
 =?utf-8?B?UUcxcXp6Mm5GRG9ycVNDQlRZNkhkRVc0andaM0JWS1dxSWh6N2NqWU9vYkFD?=
 =?utf-8?B?NndNbEVOOUZJS0V5U05XS05tSWNnR0pGVW9NMUdxMWNGczNzaDJzTUJ4bmdH?=
 =?utf-8?B?cU0zcm5VKzVDaGhrSldqTTRYS3Y3Z0J2QWdhS1laMC90aDNkclRKZjdhYTlH?=
 =?utf-8?B?eGhPL25NR2ZMdG5UcHpDd09iOC9BbVRnYTdWbGdIT0JDcmxTeXhUTG0zbUpw?=
 =?utf-8?B?UXUram8xRHdrQ3VrVG5jdE85cXpOUzFtSmNNd29zRFE1N0lCZmk2Yk9DdVM1?=
 =?utf-8?B?SVFRbTdCUWpzbXlDeFQ0YmM2NEVVOUxUY2RObWFxR2RsNTV0N3FNbUlhTEV4?=
 =?utf-8?B?bDU4N3N1Vk5XNTc3L2NaTkFoRkVMT3lGQjhOdTIrd1F4aGptVGtrYTVBazVq?=
 =?utf-8?B?cjJtclh4L1p2RDlIcTRCTkFsN3cyemxsWkV5TDMzSnYweG1DYkdiNG82cW5U?=
 =?utf-8?B?bEVjSTJtdEhzV0NGZTRRQW9pTlh4eVk4aHFjVkdZckVWSHc9PQ==?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(82310400026)(376014)(1800799024)(36860700013)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:28:58.1057
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 1e34b7c1-e34f-4764-a086-08dca4f39c13
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM4PR12MB5939

From: Alejandro Lucero <alucerop@amd.com>

CXL region creation involves allocating capacity from device DPA
(device-physical-address space) and assigning it to decode a given HPA
(host-physical-address space). Before determining how much DPA to
allocate the amount of available HPA must be determined. Also, not all
HPA is create equal, some specifically targets RAM, some target PMEM,
some is prepared for device-memory flows like HDM-D and HDM-DB, and some
is host-only (HDM-H).

Wrap all of those concerns into an API that retrieves a root decoder
(platform CXL window) that fits the specified constraints and the
capacity available for a new region.

Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95c8acdc347345b4f

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
Co-developed-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/cxl/core/region.c          | 161 +++++++++++++++++++++++++++++
 drivers/cxl/cxl.h                  |   3 +
 drivers/cxl/cxlmem.h               |   5 +
 drivers/net/ethernet/sfc/efx_cxl.c |  14 +++
 include/linux/cxl_accel_mem.h      |   9 ++
 5 files changed, 192 insertions(+)

diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
index 538ebd5a64fd..ca464bfef77b 100644
--- a/drivers/cxl/core/region.c
+++ b/drivers/cxl/core/region.c
@@ -702,6 +702,167 @@ static int free_hpa(struct cxl_region *cxlr)
 	return 0;
 }
 
+
+struct cxlrd_max_context {
+	struct device * const *host_bridges;
+	int interleave_ways;
+	unsigned long flags;
+	resource_size_t max_hpa;
+	struct cxl_root_decoder *cxlrd;
+};
+
+static int find_max_hpa(struct device *dev, void *data)
+{
+	struct cxlrd_max_context *ctx = data;
+	struct cxl_switch_decoder *cxlsd;
+	struct cxl_root_decoder *cxlrd;
+	struct resource *res, *prev;
+	struct cxl_decoder *cxld;
+	resource_size_t max;
+	int found;
+
+	if (!is_root_decoder(dev))
+		return 0;
+
+	cxlrd = to_cxl_root_decoder(dev);
+	cxld = &cxlrd->cxlsd.cxld;
+	if ((cxld->flags & ctx->flags) != ctx->flags) {
+		dev_dbg(dev, "find_max_hpa, flags not matching: %08lx vs %08lx\n",
+			      cxld->flags, ctx->flags);
+		return 0;
+	}
+
+	/* A Host bridge could have more interleave ways than an
+	 * endpoint, couldn´t it?
+	 *
+	 * What does interleave ways mean here in terms of the requestor?
+	 * Why the FFMWS has 0 interleave ways but root port has 1?
+	 */
+	if (cxld->interleave_ways != ctx->interleave_ways) {
+		dev_dbg(dev, "find_max_hpa, interleave_ways  not matching\n");
+		return 0;
+	}
+
+	cxlsd = &cxlrd->cxlsd;
+
+	guard(rwsem_read)(&cxl_region_rwsem);
+	found = 0;
+	for (int i = 0; i < ctx->interleave_ways; i++)
+		for (int j = 0; j < ctx->interleave_ways; j++)
+			if (ctx->host_bridges[i] ==
+					cxlsd->target[j]->dport_dev) {
+				found++;
+				break;
+			}
+
+	if (found != ctx->interleave_ways) {
+		dev_dbg(dev, "find_max_hpa, no interleave_ways found\n");
+		return 0;
+	}
+
+	/*
+	 * Walk the root decoder resource range relying on cxl_region_rwsem to
+	 * preclude sibling arrival/departure and find the largest free space
+	 * gap.
+	 */
+	lockdep_assert_held_read(&cxl_region_rwsem);
+	max = 0;
+	res = cxlrd->res->child;
+	if (!res)
+		max = resource_size(cxlrd->res);
+	else
+		max = 0;
+
+	for (prev = NULL; res; prev = res, res = res->sibling) {
+		struct resource *next = res->sibling;
+		resource_size_t free = 0;
+
+		if (!prev && res->start > cxlrd->res->start) {
+			free = res->start - cxlrd->res->start;
+			max = max(free, max);
+		}
+		if (prev && res->start > prev->end + 1) {
+			free = res->start - prev->end + 1;
+			max = max(free, max);
+		}
+		if (next && res->end + 1 < next->start) {
+			free = next->start - res->end + 1;
+			max = max(free, max);
+		}
+		if (!next && res->end + 1 < cxlrd->res->end + 1) {
+			free = cxlrd->res->end + 1 - res->end + 1;
+			max = max(free, max);
+		}
+	}
+
+	if (max > ctx->max_hpa) {
+		if (ctx->cxlrd)
+			put_device(CXLRD_DEV(ctx->cxlrd));
+		get_device(CXLRD_DEV(cxlrd));
+		ctx->cxlrd = cxlrd;
+		ctx->max_hpa = max;
+		dev_info(CXLRD_DEV(cxlrd), "found %pa bytes of free space\n", &max);
+	}
+	return 0;
+}
+
+/**
+ * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
+ * @endpoint: an endpoint that is mapped by the returned decoder
+ * @interleave_ways: number of entries in @host_bridges
+ * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
+ * @max: output parameter of bytes available in the returned decoder
+ *
+ * The return tuple of a 'struct cxl_root_decoder' and 'bytes available (@max)'
+ * is a point in time snapshot. If by the time the caller goes to use this root
+ * decoder's capacity the capacity is reduced then caller needs to loop and
+ * retry.
+ *
+ * The returned root decoder has an elevated reference count that needs to be
+ * put with put_device(cxlrd_dev(cxlrd)). Locking context is with
+ * cxl_{acquire,release}_endpoint(), that ensures removal of the root decoder
+ * does not race.
+ */
+struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
+					       int interleave_ways,
+					       unsigned long flags,
+					       resource_size_t *max)
+{
+
+	struct cxlrd_max_context ctx = {
+		.host_bridges = &endpoint->host_bridge,
+		.interleave_ways = interleave_ways,
+		.flags = flags,
+	};
+	struct cxl_port *root_port;
+	struct cxl_root *root;
+
+	if (!is_cxl_endpoint(endpoint)) {
+		dev_dbg(&endpoint->dev, "hpa requestor is not an endpoint\n");
+		return ERR_PTR(-EINVAL);
+	}
+
+	root = find_cxl_root(endpoint);
+	if (!root) {
+		dev_dbg(&endpoint->dev, "endpoint can not be related to a root port\n");
+		return ERR_PTR(-ENXIO);
+	}
+
+	root_port = &root->port;
+	down_read(&cxl_region_rwsem);
+	device_for_each_child(&root_port->dev, &ctx, find_max_hpa);
+	up_read(&cxl_region_rwsem);
+	put_device(&root_port->dev);
+
+	if (!ctx.cxlrd)
+		return ERR_PTR(-ENOMEM);
+
+	*max = ctx.max_hpa;
+	return ctx.cxlrd;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_get_hpa_freespace, CXL);
+
+
 static ssize_t size_store(struct device *dev, struct device_attribute *attr,
 			  const char *buf, size_t len)
 {
diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
index 9973430d975f..d3fdd2c1e066 100644
--- a/drivers/cxl/cxl.h
+++ b/drivers/cxl/cxl.h
@@ -770,6 +770,9 @@ struct cxl_decoder *to_cxl_decoder(struct device *dev);
 struct cxl_root_decoder *to_cxl_root_decoder(struct device *dev);
 struct cxl_switch_decoder *to_cxl_switch_decoder(struct device *dev);
 struct cxl_endpoint_decoder *to_cxl_endpoint_decoder(struct device *dev);
+
+#define CXLRD_DEV(cxlrd) &cxlrd->cxlsd.cxld.dev
+
 bool is_root_decoder(struct device *dev);
 bool is_switch_decoder(struct device *dev);
 bool is_endpoint_decoder(struct device *dev);
diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
index 8f2a820bd92d..a0e0795ec064 100644
--- a/drivers/cxl/cxlmem.h
+++ b/drivers/cxl/cxlmem.h
@@ -877,4 +877,9 @@ struct cxl_hdm {
 struct seq_file;
 struct dentry *cxl_debugfs_create_dir(const char *dir);
 void cxl_dpa_debug(struct seq_file *file, struct cxl_dev_state *cxlds);
+struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
+					       int interleave_ways,
+					       unsigned long flags,
+					       resource_size_t *max);
+
 #endif /* __CXL_MEM_H__ */
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index 2cf4837ddfc1..6d49571ccff7 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -22,6 +22,7 @@ void efx_cxl_init(struct efx_nic *efx)
 {
 	struct pci_dev *pci_dev = efx->pci_dev;
 	struct efx_cxl *cxl = efx->cxl;
+	resource_size_t max = 0;
 	struct resource res;
 	u16 dvsec;
 
@@ -74,6 +75,19 @@ void efx_cxl_init(struct efx_nic *efx)
 	if (IS_ERR(cxl->endpoint))
 		pci_info(pci_dev, "CXL accel acquire endpoint failed");
 
+	cxl->cxlrd = cxl_get_hpa_freespace(cxl->endpoint, 1,
+					    CXL_DECODER_F_RAM | CXL_DECODER_F_TYPE2,
+					    &max);
+
+	if (IS_ERR(cxl->cxlrd)) {
+		pci_info(pci_dev, "CXL accel get HPA failed");
+		goto out;
+	}
+
+	if (max < EFX_CTPIO_BUFFER_SIZE)
+		pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
+				  max, EFX_CTPIO_BUFFER_SIZE);
+out:
 	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
 }
 
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index 701910021df8..f3e77688ffe0 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -6,6 +6,10 @@
 #ifndef __CXL_ACCEL_MEM_H
 #define __CXL_ACCEL_MEM_H
 
+#define CXL_DECODER_F_RAM   BIT(0)
+#define CXL_DECODER_F_PMEM  BIT(1)
+#define CXL_DECODER_F_TYPE2 BIT(2)
+
 enum accel_resource{
 	CXL_ACCEL_RES_DPA,
 	CXL_ACCEL_RES_RAM,
@@ -32,4 +36,9 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
 
 struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
 void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint);
+
+struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
+					       int interleave_ways,
+					       unsigned long flags,
+					       resource_size_t *max);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM04-MW2-obe.outbound.protection.outlook.com (mail-mw2nam04on2089.outbound.protection.outlook.com [40.107.101.89])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 50C764D5BD;
	Mon, 15 Jul 2024 17:29:10 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.101.89
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064551; cv=fail; b=k5BLQbSXqvjh7vCkwH59EiazdOU/qlAnfTyzYB/flGHgUa4JwF98Q2AZrKdv8BsBlqT4y8mhdFB5WIiSl6ZpDv2c0bx3fnVhUQsloWwlv4xo8SGdLxp49k0Kw5D623HcPSGESOsVLxwL3ZkGcCcIFKeuuv16XLSdIpCR1m4o4CA=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064551; c=relaxed/simple;
	bh=BakCz81xtmBSGDdcYNKcYSvgjSlGriobi6063kHj8mo=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=trh2OTDQ9PrryDhBynzcYBrFOjfBomWj3F0PlkNlTu5t79TyFSr0yZtLhn2JYUzMc7sDZ8Sgyf0MOu3A/pGPyqPBxr+ZN4fZi8dGqQclkLJBz+dI8jqyhTbEBmL6YobKR92+WPf9joit8nORDIz8eTKHSRCSU9AlQXKH0omRhSw=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=4NOj26nT; arc=fail smtp.client-ip=40.107.101.89
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="4NOj26nT"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=LcOl9HVIjC/fsWVQva8HQAbA6DcmUqGNMj37oszPwFTbWTie3VMF369g3A0vA09QBQBkYNTdILqCZAXXCzltK3cMd2uw2ilN9wMuszH99t9KmtReBdh8Fb2TOjhVLQqnTd9PW2WKvBCU2jIV6IllbLFZQgeep3wArKSZXIl9TvEw2H713CjkqDfUCbuaJBKOPLwCEmxi08wKAFVjNVT7Y8fNMZ1iwq4Kehji/iJhcc5DypIaLh+WbYuWwC5eL2gJXyueLgrjVmtxOThordqSufQ7/cR2TRURiXFtqVLqtbmlJrArhs5sqzToLPUxr30wcN5zJ6YidyIQEp0uxrfMiQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=N/Fw9yqq9m7TDHJciSAzr376wo3U1OJY+js4w4DOIRs=;
 b=VYjRjFtawXFuJ/YGOBqHw/Wh0f32IwHxdUtYs/nzuurmmglVRAO4qcgzjh+kPkDle/dthbVF/FuUxw6OdBrKwYUB/jOd0UksewQ5kIHW/JOEf18sMIjQMcuKOAWtImAakl7lkVFgHQMJpXDjXpPXysQodOunuvb28IjJoZ05rB8CESvsN4dvYbagB3XcA7lO42AdzBHIjSWlieX5nHRRY68eT0j+fhV8gg+jncDQyZ2Ub8YeZw6+zPYPHEYLqN6B13ER1PJBz5hhKPX0PDNKW0UtwilFuBHriKMrul3CuK66lmbKOaI5pASPyP9vA9m6kiseqFdph3wr/4dzQv+XCw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=N/Fw9yqq9m7TDHJciSAzr376wo3U1OJY+js4w4DOIRs=;
 b=4NOj26nT+TqObBe8JSJuZXoeFeSARESEyGXTDI4ZaDxqZHRvmYLhL8rZMV7gBoYdOLgt0x9gOAzrVrQWWks31JmwKhIwPxfAfJvs4KvSOgtkgGaKRmTeIkDHi05Ap/c4rLqPqzknPXmKBgy5FzxbRi3FCQ+2az8xj08RL0auR3w=
Received: from CY8PR12CA0042.namprd12.prod.outlook.com (2603:10b6:930:49::21)
 by IA0PR12MB9047.namprd12.prod.outlook.com (2603:10b6:208:402::8) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29; Mon, 15 Jul
 2024 17:29:06 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::67) by CY8PR12CA0042.outlook.office365.com
 (2603:10b6:930:49::21) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:29:06 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:29:06 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:29:02 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:29:00 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucero@os3sl.com>, Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 13/15] cxl: preclude device memory to be used for dax
Date: Mon, 15 Jul 2024 18:28:33 +0100
Message-ID: <20240715172835.24757-14-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB04.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|IA0PR12MB9047:EE_
X-MS-Office365-Filtering-Correlation-Id: 3420371f-7b18-4c8f-1820-08dca4f3a0dd
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|82310400026|1800799024|36860700013|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?Uv8GkJkq5mQhqOCKJu6QRGRq2dDWukNvo7C6//Kniraw1mXt/5vHGbmjcz56?=
 =?us-ascii?Q?g1qfHIhhrzELVMDviQWNNKr5kvnLc0YRm9Smr9TalaypElrytVHQy3Me9yIS?=
 =?us-ascii?Q?oEUUDtdhvA3EUGMpfsZ8A/vPG1KvCujc8UKtelpMhvnYx1/TBQgwgB8M+f33?=
 =?us-ascii?Q?pqK6DabuZXeqNsQ+QNfAxFtFuEF6l5ar45bHojzJtqG3pu6nSbcWNZZG3UXr?=
 =?us-ascii?Q?86rIdIx1Dn6mPH4vJA3HaKUFsbsBYOZiys0SEjIUxD5dDCykgsVG6D9IZV5a?=
 =?us-ascii?Q?AGnJ3sIg9/tmlFEuEt7i9kVxU9sciKgpgzqEfXiHyVOj5fFuXJ8UtDGOaswn?=
 =?us-ascii?Q?5SQZ73id5V/m5h4QIwOFG43dJbXRhUbJZnj1EdHUx7dS+kHT7lpwmX84Jr80?=
 =?us-ascii?Q?MUKwwzCzbj8WzjXrLLRyXG4ud6MY8wB626hcMESq9oEHgrv1fi9AlTLqw/3a?=
 =?us-ascii?Q?yOYZ6a/R+zmpgwVomQAPYFVUqYURoEeFDjlaIxelPT8VBzX25WpGNw889IHJ?=
 =?us-ascii?Q?WH7P7OqZVVbQshFH8VV2/JfZffCvZMuZBuPhsIQMsgBTYnPeSSaQ8LMv0Ruw?=
 =?us-ascii?Q?s+OPMeSk7yfqsE43dmS8I6KwVd8iT+xZ55LKjgeAPb/HDqLZdT2oyC8eoFur?=
 =?us-ascii?Q?ME8Mcofh4EAXn3UtTPWFkh1dYMrhiyP2x+Snt9oQzAmf+3jaiJfIozGNd5UF?=
 =?us-ascii?Q?e/NzS5IFpRUe0hON4FllllQMRK6UNKlPbi3+Tm3eZe26RM3v5EhbUpN9W7wj?=
 =?us-ascii?Q?/Er2yzWKwgkGhuvXr6EN2oCbW7mc8pRDfCQRcNYz65xTJe9gzlVVoOUl3fiU?=
 =?us-ascii?Q?52bq1I+W7ca1mt/FofTjSYPGZkEaPoOtLDCFvP9+E23XTChPE+LTwn962ShO?=
 =?us-ascii?Q?rIldOzR+r9wLLiVca3lRxycqNNpsTKLPtVF8aPmlRM5FUiLaiWacX1QLWrUZ?=
 =?us-ascii?Q?WZ1smYpsfpSRDWe3iNWq9WtMI6/6Y9AJXX0xWmgJaajt+PXyqaWbcIm/Fybi?=
 =?us-ascii?Q?Sbe3xvTthrA1CwaUngT9Suq1FGkTp+KY90AJryuBQnd4WPLfYstS113zEjiw?=
 =?us-ascii?Q?nTKWgP27dCgtXYToYiyWNABFMlXiKRkTuBTQbfTl/dSvJAk2VXDjsek/m1fZ?=
 =?us-ascii?Q?2aIM9ud7oSyxX2gI8C0xrbnHuCpWizmnOpPtzMM9JNVFQXR7HIj8FUmqU7mn?=
 =?us-ascii?Q?Ziw88aNseLi0wDrsonQ+Mo4YaOaL8GrQJWjdRsThkGwwFLp3NXrlZxqOsJli?=
 =?us-ascii?Q?KTlDi5mnOnJSKQqQSrcJUHEZtvohlJkjCCVNuZu3XOsIxRWAgqJeGSlZWdtz?=
 =?us-ascii?Q?NcwUH/TmBYCORlVjToAaZw0RmQX6n3V3obUGJKAtDa9Tfmu4FTPJxcmT/hMG?=
 =?us-ascii?Q?rYqz6at/77OopeZB3t0Vh5nGSwtPmHEXHQdJ5t2gWyz+Cvpz8MUHNN5c/ig1?=
 =?us-ascii?Q?ko0A1isSZr7AjZge/zAzU8FeP7kARH55+jxHZHIjElbmSeQZ2K8d3Q=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(82310400026)(1800799024)(36860700013)(376014)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:29:06.1370
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 3420371f-7b18-4c8f-1820-08dca4f3a0dd
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA0PR12MB9047

From: Alejandro Lucero <alucero@os3sl.com>

By definition a type2 cxl device will use the host managed memory for
specific functionality, therefore it should not be available to other
uses.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/core/region.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
index 697c8df83a4b..c8fc14ac437e 100644
--- a/drivers/cxl/core/region.c
+++ b/drivers/cxl/core/region.c
@@ -3704,6 +3704,9 @@ static int cxl_region_probe(struct device *dev)
 	case CXL_DECODER_PMEM:
 		return devm_cxl_add_pmem_region(cxlr);
 	case CXL_DECODER_RAM:
+		if (cxlr->type != CXL_DECODER_HOSTONLYMEM)
+			return 0;
+
 		/*
 		 * The region can not be manged by CXL if any portion of
 		 * it is already online as 'System RAM'
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2054.outbound.protection.outlook.com [40.107.223.54])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id BDE3E4D8AE;
	Mon, 15 Jul 2024 17:29:09 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.54
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064552; cv=fail; b=YFTFakeBsLfcXJ8BPoaLa5VJsj42FjLwmVTxLJ3toC/VzYTDvbyoNlRtYbWlCIqgaujdlNllOdSU+I51L/fnKbyKmqRXCGoQL0njS1wDBCBfv4WHlrMycLw39O+cfFsBtA2l9+sviW2I8oQXFAYoZX0FX5YORzB9M93PUFO/rZY=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064552; c=relaxed/simple;
	bh=Pcx01+JoQy6MNS1OD9L/ItqN/D6WPwR+kVqAFX56bI0=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=ewBU6gUwCEjhO5mzIl2XByN2VxCLuC8YnmNy40lVHuaub9TFbX6oQ0qRMH3Epn9PRjhedNYUmLJb+J7et7b/6xjrMdqcn9f3dOKMJQFbsCqZfzpboBQ8ypQljL+XoUsOujl82y1mwc6FqC8sGzuICtSxJ8oDhbJsnXe8w1Lgd0A=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=463E++Es; arc=fail smtp.client-ip=40.107.223.54
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="463E++Es"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=dtnkmjIUY5nM4yjrt+JqYVNesP6la7hDx/Pv0DvCcQ0hQKKwCzN5VDnWzIdJqrn+PjGJEUbUEqW7blwfIlJN8OIdKWvcY361HsvCmHC+rc5KrJdaGVN4Uy1bWcpFtR4YdvyYl/bb7f5xYOIXvs9e8aEJHQ4NMPR9EmWY+7bBDFmEgg5j05WUjQIdtVdGGmPWY6IBp+Obbtm/eBk+KDqJ+Bw3slCTmYdbQgk/PH+X0SmE0mWh5KwPzAvGQoXh7CYAssC30qm2BUbaYIF3sAIFYFL0NrGcoNpV3JcadNPfdowekMqvqkcMj+2ktHzxl5N0Gsvht23CJNziqhn2mQ9qNw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=cgbzVYdE6aZLPnVX/enqasFlmXjMj4PxplaAW0wb364=;
 b=HJEXDJThtBYdTU2Mbwp/xGv/1s8DzC1dOze78UjPsQZC7VlH7zwLq7NG1BqIsFwz81vtKIxHb9yD0RdG+RvEPJ2Iam7+rY0xezKcA0xk/Jvgk/foV02LbrH26mDTPGr0tm6vltUprPfsE3o5OuxW+DagrYLrDCEhX7QcxeAb2mZAu0VBi6edRmoCHYc4n+Vc7EoCQz/m/v6k142BsHCdMx/oFxwVokGcqMoO6jhyqWsWkIM1wgXVCWptCTlo94jCDQXSvzEwYxwC3zPxIGbxXvIF0xxdV9YC72xVgEHZim5IxQv5+9dZc5FguPu2lsmUlcw3vsOTtlZNkpgOms+6Ug==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=cgbzVYdE6aZLPnVX/enqasFlmXjMj4PxplaAW0wb364=;
 b=463E++EsLX8O5d+JbBLSwhAhDu+L1GGHJtBmw+50uKDSk344uNuOeO6Sg8xyYcBRFri51w/bn0OqslwXo335fwTbJc72jSachQZ3lMAQ0dQCcrpyA1yWJMI/mtnq53B6O+jrY5yv3XeI+3XoX1zwL5Nm46cEdklW6/Y7yo4+3kI=
Received: from CY8PR12CA0042.namprd12.prod.outlook.com (2603:10b6:930:49::21)
 by SA1PR12MB6775.namprd12.prod.outlook.com (2603:10b6:806:25a::10) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7741.36; Mon, 15 Jul
 2024 17:29:05 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::b) by CY8PR12CA0042.outlook.office365.com
 (2603:10b6:930:49::21) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:29:02 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:29:02 +0000
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:29:00 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:28:59 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 12/15] cxl: allow region creation by type2 drivers
Date: Mon, 15 Jul 2024 18:28:32 +0100
Message-ID: <20240715172835.24757-13-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB04.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|SA1PR12MB6775:EE_
X-MS-Office365-Filtering-Correlation-Id: 61351246-6a4a-4e1e-d30d-08dca4f39e6e
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|36860700013|1800799024|82310400026|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?6GBtQwBt2irAOf8Jey778/OFrw7qQRA7wAuvlzYckqD1Cu6XnG6l8uOkkvI1?=
 =?us-ascii?Q?ns8kz00ro9f31kuonr1KhkAKd2RIg1swpKm5x5ZTRrhKDXRBQSo6phBKBee8?=
 =?us-ascii?Q?Inm61OiFAwwqo8jQR0yewGYc46asMtAcobA8nBTHy2ajaWrhknAIJegUBdF2?=
 =?us-ascii?Q?ZVbH1T3JkfyUKiT5ZUlZ8liSEkXYTp0Jx8tyrqP6ivXPyYMwvhF1w9019cOc?=
 =?us-ascii?Q?39IR+cugrrL50KfT0MFXpuinqH1M4q3N5FAv9Yc2FQneVU2jih+7/u+1yrp0?=
 =?us-ascii?Q?M6Ep+aBggm801TqoNi0R/D73FPmjIUl/2tStSnfV5iDTHR+ym1EBLukl1qfg?=
 =?us-ascii?Q?yes+88CE6ZQB5fmCLchUDsDPxu5fLRSxorU7ZSherVo3JNtioEn8662wDXz+?=
 =?us-ascii?Q?IsLP4d8W6FROmxciiFM3BRg7EMt/ZTwIb3gWKUHaciBChT43c0943TlqUb6D?=
 =?us-ascii?Q?ahZ0h8Kvw2tJhq+hG6j01hSNjp6zdOMhrKWWyV4godmE7tyCfDhuIpI52kTU?=
 =?us-ascii?Q?vJDBXd80LBjpsmTeVyp43xrXccvhSlqP20MKCl5mptp8p4PNqXDDJME6uuDX?=
 =?us-ascii?Q?TeN4qestG1sUJln/kqYQw2onhdR2DhHOZWkErcoyQ+YVtSLEL4Tq4CVyxcw0?=
 =?us-ascii?Q?2B2QefOQiJM/lCkTNGOntB2aG1YWReNA3n4qMIPy9ftiib0fYwd+hbEefGhi?=
 =?us-ascii?Q?+J+bbg//cKSSkR4XlMSGyu4cBu2uTI06gYKTLkLNETPHrdXuBHdkEca9ou75?=
 =?us-ascii?Q?Q8X7RVJU6ZJal138mixsutXBU6dtLMeNwlYw3vJeFgLIVeRgV1C+SuKLY1K7?=
 =?us-ascii?Q?tL+FiW6Ge24eL7Eq96xZes6cLkauDAVsgJMTK6Gpt17ZT9T4JEan1VkgCUUc?=
 =?us-ascii?Q?bIfh597sz/v3XetafanpVamsgJbfj5TvF0Cn9mBdfEU6ImQJzvADYEYegq8H?=
 =?us-ascii?Q?cMoWGuG6MNQbBVkUe69Ucvp3LfScZH5+IcAFgt1LJf+04PpKwJ63GYZZfil8?=
 =?us-ascii?Q?EmTsrs876p76AtDpc7kFKRyydtpETcz+TUqQneUpSyuyIgGSh+KZ5GsGlYh7?=
 =?us-ascii?Q?V3pUp3HNM8r1EtyxTWzw73Ep0iFBrcEa3wFpQo5TIPlzn+oP++dcB1gax4Jk?=
 =?us-ascii?Q?+5WadVC6ikdHxXpE8IrXlknWw4B+RBRHjnl9e3861UX1KMSPM9LBhAQTec2W?=
 =?us-ascii?Q?8tnpfqYLUophNX2fKUcuhBty8g5sbe0rzDr1FzQXG9mJx6ZrzRGe1oaVwKa7?=
 =?us-ascii?Q?4bRSFK1qiBK/YY5lUS0hZDTuPn/oZi8m5oHTB+vLgdKGXUAv1xJMdftp9Foc?=
 =?us-ascii?Q?VqjM8fIviPmOy6GsSEcY6Xr2053qOiWVTUBE+CTvz7vFfk2DoKEe9P9Z5XCq?=
 =?us-ascii?Q?lnKjVjsvWDAiuoZorYzE89YnUrEPF9sE4jrgUaTyHIqKJiV27Q=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(36860700013)(1800799024)(82310400026)(376014)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:29:02.0589
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 61351246-6a4a-4e1e-d30d-08dca4f39e6e
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA1PR12MB6775

From: Alejandro Lucero <alucerop@amd.com>

Creating a CXL region requires userspace intervention through the cxl
sysfs files. Type2 support should allow accelerator drivers to create
such cxl region from kernel code.

Adding that functionality and integrating it with current support for
memory expanders.

Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m84598b534cc5664f5bb31521ba6e41c7bc213758
Signed-off-by: Alejandro Lucero <alucerop@amd.com>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/cxl/core/region.c          | 265 ++++++++++++++++++++++-------
 drivers/cxl/cxl.h                  |   1 +
 drivers/cxl/cxlmem.h               |   4 +-
 drivers/net/ethernet/sfc/efx_cxl.c |  15 +-
 include/linux/cxl_accel_mem.h      |   5 +
 5 files changed, 231 insertions(+), 59 deletions(-)

diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
index 5cc71b8868bc..697c8df83a4b 100644
--- a/drivers/cxl/core/region.c
+++ b/drivers/cxl/core/region.c
@@ -479,22 +479,14 @@ static ssize_t interleave_ways_show(struct device *dev,
 
 static const struct attribute_group *get_cxl_region_target_group(void);
 
-static ssize_t interleave_ways_store(struct device *dev,
-				     struct device_attribute *attr,
-				     const char *buf, size_t len)
+static int set_interleave_ways(struct cxl_region *cxlr, int val)
 {
-	struct cxl_root_decoder *cxlrd = to_cxl_root_decoder(dev->parent);
+	struct cxl_root_decoder *cxlrd = to_cxl_root_decoder(cxlr->dev.parent);
 	struct cxl_decoder *cxld = &cxlrd->cxlsd.cxld;
-	struct cxl_region *cxlr = to_cxl_region(dev);
 	struct cxl_region_params *p = &cxlr->params;
-	unsigned int val, save;
-	int rc;
+	int save, rc;
 	u8 iw;
 
-	rc = kstrtouint(buf, 0, &val);
-	if (rc)
-		return rc;
-
 	rc = ways_to_eiw(val, &iw);
 	if (rc)
 		return rc;
@@ -509,25 +501,42 @@ static ssize_t interleave_ways_store(struct device *dev,
 		return -EINVAL;
 	}
 
-	rc = down_write_killable(&cxl_region_rwsem);
-	if (rc)
-		return rc;
-	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
-		rc = -EBUSY;
-		goto out;
-	}
+	lockdep_assert_held_write(&cxl_region_rwsem);
+	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE)
+		return -EBUSY;
 
 	save = p->interleave_ways;
 	p->interleave_ways = val;
 	rc = sysfs_update_group(&cxlr->dev.kobj, get_cxl_region_target_group());
 	if (rc)
 		p->interleave_ways = save;
-out:
+
+	return rc;
+}
+
+static ssize_t interleave_ways_store(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t len)
+{
+	struct cxl_region *cxlr = to_cxl_region(dev);
+	unsigned int val;
+	int rc;
+
+	rc = kstrtouint(buf, 0, &val);
+	if (rc)
+		return rc;
+
+	rc = down_write_killable(&cxl_region_rwsem);
+	if (rc)
+		return rc;
+
+	rc = set_interleave_ways(cxlr, val);
 	up_write(&cxl_region_rwsem);
 	if (rc)
 		return rc;
 	return len;
 }
+
 static DEVICE_ATTR_RW(interleave_ways);
 
 static ssize_t interleave_granularity_show(struct device *dev,
@@ -547,21 +556,14 @@ static ssize_t interleave_granularity_show(struct device *dev,
 	return rc;
 }
 
-static ssize_t interleave_granularity_store(struct device *dev,
-					    struct device_attribute *attr,
-					    const char *buf, size_t len)
+static int set_interleave_granularity(struct cxl_region *cxlr, int val)
 {
-	struct cxl_root_decoder *cxlrd = to_cxl_root_decoder(dev->parent);
+	struct cxl_root_decoder *cxlrd = to_cxl_root_decoder(cxlr->dev.parent);
 	struct cxl_decoder *cxld = &cxlrd->cxlsd.cxld;
-	struct cxl_region *cxlr = to_cxl_region(dev);
 	struct cxl_region_params *p = &cxlr->params;
-	int rc, val;
+	int rc;
 	u16 ig;
 
-	rc = kstrtoint(buf, 0, &val);
-	if (rc)
-		return rc;
-
 	rc = granularity_to_eig(val, &ig);
 	if (rc)
 		return rc;
@@ -577,21 +579,36 @@ static ssize_t interleave_granularity_store(struct device *dev,
 	if (cxld->interleave_ways > 1 && val != cxld->interleave_granularity)
 		return -EINVAL;
 
+	lockdep_assert_held_write(&cxl_region_rwsem);
+	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE)
+		return -EBUSY;
+
+	p->interleave_granularity = val;
+	return 0;
+}
+
+static ssize_t interleave_granularity_store(struct device *dev,
+					    struct device_attribute *attr,
+					    const char *buf, size_t len)
+{
+	struct cxl_region *cxlr = to_cxl_region(dev);
+	int rc, val;
+
+	rc = kstrtoint(buf, 0, &val);
+	if (rc)
+		return rc;
+
 	rc = down_write_killable(&cxl_region_rwsem);
 	if (rc)
 		return rc;
-	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
-		rc = -EBUSY;
-		goto out;
-	}
 
-	p->interleave_granularity = val;
-out:
+	rc = set_interleave_granularity(cxlr, val);
 	up_write(&cxl_region_rwsem);
 	if (rc)
 		return rc;
 	return len;
 }
+
 static DEVICE_ATTR_RW(interleave_granularity);
 
 static ssize_t resource_show(struct device *dev, struct device_attribute *attr,
@@ -2193,7 +2210,7 @@ static int cxl_region_attach(struct cxl_region *cxlr,
 	return 0;
 }
 
-static int cxl_region_detach(struct cxl_endpoint_decoder *cxled)
+int cxl_region_detach(struct cxl_endpoint_decoder *cxled)
 {
 	struct cxl_port *iter, *ep_port = cxled_to_port(cxled);
 	struct cxl_region *cxlr = cxled->cxld.region;
@@ -2252,6 +2269,7 @@ static int cxl_region_detach(struct cxl_endpoint_decoder *cxled)
 	put_device(&cxlr->dev);
 	return rc;
 }
+EXPORT_SYMBOL_NS_GPL(cxl_region_detach, CXL);
 
 void cxl_decoder_kill_region(struct cxl_endpoint_decoder *cxled)
 {
@@ -2746,6 +2764,14 @@ cxl_find_region_by_name(struct cxl_root_decoder *cxlrd, const char *name)
 	return to_cxl_region(region_dev);
 }
 
+static void drop_region(struct cxl_region *cxlr)
+{
+	struct cxl_root_decoder *cxlrd = to_cxl_root_decoder(cxlr->dev.parent);
+	struct cxl_port *port = cxlrd_to_port(cxlrd);
+
+	devm_release_action(port->uport_dev, unregister_region, cxlr);
+}
+
 static ssize_t delete_region_store(struct device *dev,
 				   struct device_attribute *attr,
 				   const char *buf, size_t len)
@@ -3353,17 +3379,18 @@ static int match_region_by_range(struct device *dev, void *data)
 	return rc;
 }
 
-/* Establish an empty region covering the given HPA range */
-static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
-					   struct cxl_endpoint_decoder *cxled)
+static void construct_region_end(void)
+{
+	up_write(&cxl_region_rwsem);
+}
+
+static struct cxl_region *construct_region_begin(struct cxl_root_decoder *cxlrd,
+						 struct cxl_endpoint_decoder *cxled)
 {
 	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
-	struct cxl_port *port = cxlrd_to_port(cxlrd);
-	struct range *hpa = &cxled->cxld.hpa_range;
 	struct cxl_region_params *p;
 	struct cxl_region *cxlr;
-	struct resource *res;
-	int rc;
+	int err = 0;
 
 	do {
 		cxlr = __create_region(cxlrd, cxled->mode,
@@ -3372,8 +3399,7 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
 	} while (IS_ERR(cxlr) && PTR_ERR(cxlr) == -EBUSY);
 
 	if (IS_ERR(cxlr)) {
-		dev_err(cxlmd->dev.parent,
-			"%s:%s: %s failed assign region: %ld\n",
+		dev_err(cxlmd->dev.parent,"%s:%s: %s failed assign region: %ld\n",
 			dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev),
 			__func__, PTR_ERR(cxlr));
 		return cxlr;
@@ -3383,23 +3409,47 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
 	p = &cxlr->params;
 	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
 		dev_err(cxlmd->dev.parent,
-			"%s:%s: %s autodiscovery interrupted\n",
+			"%s:%s: %s region setup interrupted\n",
 			dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev),
 			__func__);
-		rc = -EBUSY;
-		goto err;
+		err = -EBUSY;
+	}
+
+	if (err) {
+		construct_region_end();
+		drop_region(cxlr);
+		return ERR_PTR(err);
 	}
+	return cxlr;
+}
+
+
+/* Establish an empty region covering the given HPA range */
+static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
+					   struct cxl_endpoint_decoder *cxled)
+{
+	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
+	struct range *hpa = &cxled->cxld.hpa_range;
+	struct cxl_region_params *p;
+	struct cxl_region *cxlr;
+	struct resource *res;
+	int rc;
+
+	cxlr = construct_region_begin(cxlrd, cxled);
+	if (IS_ERR(cxlr))
+		return cxlr;
 
 	set_bit(CXL_REGION_F_AUTO, &cxlr->flags);
 
 	res = kmalloc(sizeof(*res), GFP_KERNEL);
 	if (!res) {
 		rc = -ENOMEM;
-		goto err;
+		goto out;
 	}
 
 	*res = DEFINE_RES_MEM_NAMED(hpa->start, range_len(hpa),
 				    dev_name(&cxlr->dev));
+
 	rc = insert_resource(cxlrd->res, res);
 	if (rc) {
 		/*
@@ -3412,6 +3462,7 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
 			 __func__, dev_name(&cxlr->dev));
 	}
 
+	p = &cxlr->params;
 	p->res = res;
 	p->interleave_ways = cxled->cxld.interleave_ways;
 	p->interleave_granularity = cxled->cxld.interleave_granularity;
@@ -3419,24 +3470,124 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
 
 	rc = sysfs_update_group(&cxlr->dev.kobj, get_cxl_region_target_group());
 	if (rc)
-		goto err;
+		goto out;
 
 	dev_dbg(cxlmd->dev.parent, "%s:%s: %s %s res: %pr iw: %d ig: %d\n",
-		dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev), __func__,
-		dev_name(&cxlr->dev), p->res, p->interleave_ways,
-		p->interleave_granularity);
+				   dev_name(&cxlmd->dev),
+				   dev_name(&cxled->cxld.dev), __func__,
+				   dev_name(&cxlr->dev), p->res,
+				   p->interleave_ways,
+				   p->interleave_granularity);
 
 	/* ...to match put_device() in cxl_add_to_region() */
 	get_device(&cxlr->dev);
 	up_write(&cxl_region_rwsem);
+out:
+	construct_region_end();
+	if (rc) {
+		drop_region(cxlr);
+		return ERR_PTR(rc);
+	}
+	return cxlr;
+}
+
+static struct cxl_region *
+__construct_new_region(struct cxl_root_decoder *cxlrd,
+		       struct cxl_endpoint_decoder **cxled, int ways)
+{
+	struct cxl_decoder *cxld = &cxlrd->cxlsd.cxld;
+	struct cxl_region_params *p;
+	resource_size_t size = 0;
+	struct cxl_region *cxlr;
+	int rc, i;
+
+	/* If interleaving is not supported, why does ways need to be at least 1? */
+	if (ways < 1)
+		return ERR_PTR(-EINVAL);
+
+	cxlr = construct_region_begin(cxlrd, cxled[0]);
+	if (IS_ERR(cxlr))
+		return cxlr;
+
+	rc = set_interleave_ways(cxlr, ways);
+	if (rc)
+		goto out;
+
+	rc = set_interleave_granularity(cxlr, cxld->interleave_granularity);
+	if (rc)
+		goto out;
+
+	down_read(&cxl_dpa_rwsem);
+	for (i = 0; i < ways; i++) {
+		if (!cxled[i]->dpa_res)
+			break;
+		size += resource_size(cxled[i]->dpa_res);
+	}
+	up_read(&cxl_dpa_rwsem);
+
+	if (i < ways)
+		goto out;
+
+	rc = alloc_hpa(cxlr, size);
+	if (rc)
+		goto out;
+
+	down_read(&cxl_dpa_rwsem);
+	for (i = 0; i < ways; i++) {
+		rc = cxl_region_attach(cxlr, cxled[i], i);
+		if (rc)
+			break;
+	}
+	up_read(&cxl_dpa_rwsem);
+
+	if (rc)
+		goto out;
+
+	rc = cxl_region_decode_commit(cxlr);
+	if (rc)
+		goto out;
 
+	p = &cxlr->params;
+	p->state = CXL_CONFIG_COMMIT;
+out:
+	construct_region_end();
+	if (rc) {
+		drop_region(cxlr);
+		return ERR_PTR(rc);
+	}
 	return cxlr;
+}
 
-err:
-	up_write(&cxl_region_rwsem);
-	devm_release_action(port->uport_dev, unregister_region, cxlr);
-	return ERR_PTR(rc);
+/**
+ * cxl_create_region - Establish a region given an array of endpoint decoders
+ * @cxlrd: root decoder to allocate HPA
+ * @cxled: array of endpoint decoders with reserved DPA capacity
+ * @ways: size of @cxled array
+ *
+ * Returns a fully formed region in the commit state and attached to the
+ * cxl_region driver.
+ */
+struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
+				     struct cxl_endpoint_decoder **cxled,
+				     int ways)
+{
+	struct cxl_region *cxlr;
+
+	mutex_lock(&cxlrd->range_lock);
+	cxlr = __construct_new_region(cxlrd, cxled, ways);
+	mutex_unlock(&cxlrd->range_lock);
+
+	if (IS_ERR(cxlr))
+		return cxlr;
+
+	if (device_attach(&cxlr->dev) <= 0) {
+		dev_err(&cxlr->dev, "failed to create region\n");
+		drop_region(cxlr);
+		return ERR_PTR(-ENODEV);
+	}
+	return cxlr;
 }
+EXPORT_SYMBOL_NS_GPL(cxl_create_region, CXL);
 
 int cxl_add_to_region(struct cxl_port *root, struct cxl_endpoint_decoder *cxled)
 {
diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
index d3fdd2c1e066..1bf3b74ff959 100644
--- a/drivers/cxl/cxl.h
+++ b/drivers/cxl/cxl.h
@@ -905,6 +905,7 @@ void cxl_coordinates_combine(struct access_coordinate *out,
 
 bool cxl_endpoint_decoder_reset_detected(struct cxl_port *port);
 
+int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
 /*
  * Unit test builds overrides this to __weak, find the 'strong' version
  * of these symbols in tools/testing/cxl/.
diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
index a0e0795ec064..377bb3cd2d47 100644
--- a/drivers/cxl/cxlmem.h
+++ b/drivers/cxl/cxlmem.h
@@ -881,5 +881,7 @@ struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
 					       int interleave_ways,
 					       unsigned long flags,
 					       resource_size_t *max);
-
+struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
+				     struct cxl_endpoint_decoder **cxled,
+				     int ways);
 #endif /* __CXL_MEM_H__ */
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index b5626d724b52..4012e3faa298 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -92,8 +92,18 @@ void efx_cxl_init(struct efx_nic *efx)
 
 	cxl->cxled = cxl_request_dpa(cxl->endpoint, true, EFX_CTPIO_BUFFER_SIZE,
 				     EFX_CTPIO_BUFFER_SIZE);
-	if (IS_ERR(cxl->cxled))
+	if (IS_ERR(cxl->cxled)) {
 		pci_info(pci_dev, "CXL accel request DPA failed");
+		return;
+	}
+
+	cxl->efx_region = cxl_create_region(cxl->cxlrd, &cxl->cxled, 1);
+	if (!cxl->efx_region) {
+		pci_info(pci_dev, "CXL accel create region failed");
+		cxl_dpa_free(cxl->cxled);
+		return;
+	}
+
 out:
 	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
 }
@@ -102,6 +112,9 @@ void efx_cxl_exit(struct efx_nic *efx)
 {
 	struct efx_cxl *cxl = efx->cxl;
 
+	if (cxl->efx_region)
+		cxl_region_detach(cxl->cxled);
+
 	if (cxl->cxled)
 		cxl_dpa_free(cxl->cxled);
  
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index d4ecb5bb4fc8..a5f9ffc24509 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -48,4 +48,9 @@ struct cxl_endpoint_decoder *cxl_request_dpa(struct cxl_port *endpoint,
 					     resource_size_t min,
 					     resource_size_t max);
 int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
+struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
+				     struct cxl_endpoint_decoder **cxled,
+				     int ways);
+
+int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-DM6-obe.outbound.protection.outlook.com (mail-dm6nam10on2065.outbound.protection.outlook.com [40.107.93.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 572F44D8B1;
	Mon, 15 Jul 2024 17:29:11 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.93.65
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064553; cv=fail; b=rV64B//3DS35k06378TaJvmuucTzLF0RHVZhdhbVo8MQZBmMJYd/josNYQU5Go6CJQ0oXIBYssKRFJ9p/ewTLZ82++Z/OZg72X2yVY2Bh38uTgpYsf91gL43uM8NzjYwRy5XWspiWCAa1JI/wsAFnpt2n59yGbQX2DZ4jMu/5Sg=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064553; c=relaxed/simple;
	bh=pPvdLyUcZvGHXVqIIg6J0VgU0IqwiNdrrcApl/+iJiQ=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=PRQsMeBmJai0q6Q7C5GiStijcIDFjRnZnn4TGE8l9rbrbryZuunRAxqqc4hgZyA55nzmeUGd/hbm0PWULKzb4bzEjtEgbK0VzST2JqXDLUxbTGeHTLSYZZOiQHN4OFB1iJEAWvHPDLVKiVdt0LIaF25H04fZyHDvPyktSXB4KX4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=HFqTMk9Y; arc=fail smtp.client-ip=40.107.93.65
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="HFqTMk9Y"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=XkF6PcS4ZkRsU46lcTB3g23YhpiMsomhZ2jr191TfaTNFklQagI/N4vUXNKxe8d8Du3ixybeIM5JAbHVkqAxgQmulw5vENttJ2iLw0xPA2VYir7r/rTsmkBTHitsFvr4qKurlbLkXQVlc8Wv3KWBEcZR92FFni5iU5ymIM7D4qE/vMvF213IpibUNyMO7AOWa7ViOinGlhp6veZVauLeE5xdxnJfnSfyq0Rw/Q8xU+1JizMSoO64NZH5tpaawrWBDK1iTzXLYDJr7PfWHjBHEgx5S+MhevqqLJpUHAOOaO6+Z0ehD1ioIMiY7CdESvCb1SEX+jwUZTmihzv+5ctTrA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=qGyrIBQHmZoiBbIwHpDxe4I8NUNz2zk037VCCPCvC+I=;
 b=MfmK1tE7IyKSylHBFl51Tc/vJUY+Xv4SZHo4Db4Wb3cJETwDorE/fUeoJ0mXqhhtYzv+UN7wM3sPb/2jp7CCMBcYYjk8ruKb9bkYk9Sajo2UMVJpEwlbeGer2DdtVlOgsJbRDlyUEZA4MZvu0fZInxUj/nce+70vkIC7JhBcRRE8jKWE8GVIJqyatW9Z2m44+mSwPdyj2Z2zqXZ7qZGJ1XlfaerK9Pm3EenxvGtlW/MrgGdtWhCfiFi4gPlbruEs+yAeOidBOcvUDxsoFtgqf1Q1gadur1rr8rCSjmuakIzGwr03e+NeKB2JmTpkj78QOMBUA6IOZXh53nV/KO6fmQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=qGyrIBQHmZoiBbIwHpDxe4I8NUNz2zk037VCCPCvC+I=;
 b=HFqTMk9Y8CvElFh9FtKGnlvUiEOK5No3fcHUoM9DciaWLxWe2KxxnPuYntQGjErm4l73M39VHFMMvlH5wejpnMSBwldXm/nINwXvHQumRnI4YzwPdnv0eKUis7to49PP3joxCl5m+xe+NYrXMspgWFDlOYU5gOdRLVBHcf6BmQk=
Received: from CY8PR12CA0045.namprd12.prod.outlook.com (2603:10b6:930:49::16)
 by MN0PR12MB6341.namprd12.prod.outlook.com (2603:10b6:208:3c2::13) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28; Mon, 15 Jul
 2024 17:29:08 +0000
Received: from CY4PEPF0000EDD7.namprd03.prod.outlook.com
 (2603:10b6:930:49:cafe::ce) by CY8PR12CA0045.outlook.office365.com
 (2603:10b6:930:49::16) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29 via Frontend
 Transport; Mon, 15 Jul 2024 17:29:08 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB04.amd.com; pr=C
Received: from SATLEXMB04.amd.com (165.204.84.17) by
 CY4PEPF0000EDD7.mail.protection.outlook.com (10.167.241.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.11 via Frontend Transport; Mon, 15 Jul 2024 17:29:08 +0000
Received: from SATLEXMB05.amd.com (10.181.40.146) by SATLEXMB04.amd.com
 (10.181.40.145) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:29:05 -0500
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB05.amd.com
 (10.181.40.146) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:29:05 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:29:04 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 15/15] efx: support pio mapping based on cxl
Date: Mon, 15 Jul 2024 18:28:35 +0100
Message-ID: <20240715172835.24757-16-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB05.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000EDD7:EE_|MN0PR12MB6341:EE_
X-MS-Office365-Filtering-Correlation-Id: 562b48ef-12ae-491d-450b-08dca4f3a20e
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|36860700013|376014|82310400026|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?mCDPWET5iNheMoZRwCq0M7jcwO/xrnGScXe1OkUxn+AOBdv1+ZbF9KG9lpCj?=
 =?us-ascii?Q?vxzIBjXyEjxGEge1iitHP1IMbUBU6J6c+bchulrk5CK+Aut3aPegkD23b0gK?=
 =?us-ascii?Q?eBek3CU6buZ+iQZrwOZEox8DLVQB7eiDyf7rT4MY/+OI1OV1PlMXIVXwtPXP?=
 =?us-ascii?Q?parztCCRJk/aTFBBiRmnKU+aOLTTUxDN0KMMv+w5HURD/RGmXHSQmee+XmQp?=
 =?us-ascii?Q?JP6M6RzpYgB1hcoqyCkTnMniQ+p54cq10ZSx4TIeDf2SxwAxAkPMOdrDSPYy?=
 =?us-ascii?Q?R8CusD4v9cXlauWqwntPdLpuqTbbzQlD5QkLp7lbo2zsqCddFYLr4lY0/Cvx?=
 =?us-ascii?Q?mSdhwdw19z0lpdtaKReBjFleJj8T1anO2yJZ8r0scDLvqwHMXom5GFrGjMns?=
 =?us-ascii?Q?b491j/yqxnAmYmrGFs59Y/kuhmwWjK+sv1wEShH1oteInJNLkUQVdieZMP3a?=
 =?us-ascii?Q?SokyNcLpmUT9HIXxEUBG2wKrkmNvu21op/byJdmNi24OA+zHP/CoqtWgxlTw?=
 =?us-ascii?Q?haEiTAAxYsdKTfRxE56D0N8XbODInOe6PNMlQWVSpUjuuezvDFfyWSmT3s+H?=
 =?us-ascii?Q?jg8BeSve+ySTYOBVnoBr1azM41+jf1V6awfMgIbORAVMbUvQaQc1upx/RqeI?=
 =?us-ascii?Q?aBgD/rUv7s2kQuGfHzs5nxpNJsxr2wBq3rjoMX0TrVCzkxT3mYHUWA5JMmP7?=
 =?us-ascii?Q?hmr3M3soktaAeWT0nJlWuIAJ37Clz9W34T0J2PIm2uuoH5tP711PAEfPKvr+?=
 =?us-ascii?Q?eiozDdbx10aNmwM4G9MgEbhoTCip1ppCoJzCzzrCgNhhqEwXWie8ysKaHpqC?=
 =?us-ascii?Q?H4H0lnkwVAhgBeo6I+oMH4s8gpvNl74fklZQFwil98lleCmCk1whyU2ROlkS?=
 =?us-ascii?Q?BMlJUgaI3UV73yQBkiqStI58O4qq154HTVv5fg4xRPw/OhBRtxCf44BlELYf?=
 =?us-ascii?Q?KrCtVCPmgvfwLjQi95KujQb5P2JEIWBbzNsI6NY28c2hNFBt87cmd+dXFEN1?=
 =?us-ascii?Q?lArCf6JKYz2KpolaR46X1v3JH/I8vKu9eyS/LT5cCHsJeu6hAcljsPMo7yqm?=
 =?us-ascii?Q?knk9CBkQrqvn30BxfN+jf632WsTPhlcA2Ev8SavvAVBx3cRVqLAR8gvmbmx6?=
 =?us-ascii?Q?fIEu9YzSxummx6C5bJzadZTaNOAqoJ4zIVllZ3/iTx5tUtcIfF1v0uOYzhe4?=
 =?us-ascii?Q?j/Jqt8/xr7mLEbadxi40IyMY+8EpkotrEpQDTKDa1/8jeklsgQy6A+tADkNy?=
 =?us-ascii?Q?QAZsfS4GmPW4YfHurUvvhoGGnLxwIfhb4PcsHy3YPhXSEXP2qyeB289RNXWS?=
 =?us-ascii?Q?VLTgU2ydL8cbuqNxjpbSaWBkpMg4F3sPQDhi9RqWxVdRtucj8mWjVsw1eWzB?=
 =?us-ascii?Q?XgdIMXu3bJo37Kfugoo0MBZEmBFbL/rx1xLvQvh5jhgxLLfUPLchqanNjcz/?=
 =?us-ascii?Q?5GVGoWgP6BE/nYE8WI7C9zAzhmG2FbBfozD1mVcqzcB1ec4tGy8aqQ=3D=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:US;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB04.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(1800799024)(36860700013)(376014)(82310400026)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:29:08.1370
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 562b48ef-12ae-491d-450b-08dca4f3a20e
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB04.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000EDD7.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MN0PR12MB6341

From: Alejandro Lucero <alucerop@amd.com>

With a device supporting CXL and successfully initialised, use the cxl
region to map the memory range and use this mapping for PIO buffers.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/net/ethernet/sfc/ef10.c      | 25 +++++++++++++++++++++----
 drivers/net/ethernet/sfc/efx_cxl.c   | 12 +++++++++++-
 drivers/net/ethernet/sfc/mcdi_pcol.h |  3 +++
 drivers/net/ethernet/sfc/nic.h       |  1 +
 4 files changed, 36 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/sfc/ef10.c b/drivers/net/ethernet/sfc/ef10.c
index 8fa6c0e9195b..3924076d2628 100644
--- a/drivers/net/ethernet/sfc/ef10.c
+++ b/drivers/net/ethernet/sfc/ef10.c
@@ -24,6 +24,7 @@
 #include <linux/wait.h>
 #include <linux/workqueue.h>
 #include <net/udp_tunnel.h>
+#include "efx_cxl.h"
 
 /* Hardware control for EF10 architecture including 'Huntington'. */
 
@@ -177,6 +178,12 @@ static int efx_ef10_init_datapath_caps(struct efx_nic *efx)
 			  efx->num_mac_stats);
 	}
 
+	if (outlen < MC_CMD_GET_CAPABILITIES_V7_OUT_LEN)
+		nic_data->datapath_caps3 = 0;
+	else
+		nic_data->datapath_caps3 = MCDI_DWORD(outbuf,
+						      GET_CAPABILITIES_V7_OUT_FLAGS3);
+
 	return 0;
 }
 
@@ -1275,10 +1282,20 @@ static int efx_ef10_dimension_resources(struct efx_nic *efx)
 			return -ENOMEM;
 		}
 		nic_data->pio_write_vi_base = pio_write_vi_base;
-		nic_data->pio_write_base =
-			nic_data->wc_membase +
-			(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
-			 uc_mem_map_size);
+
+		if ((nic_data->datapath_caps3 &
+		    (1 << MC_CMD_GET_CAPABILITIES_V10_OUT_CXL_CONFIG_ENABLE_LBN)) &&
+		    efx->cxl->ctpio_cxl)
+		{
+			nic_data->pio_write_base =
+				efx->cxl->ctpio_cxl +
+				(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
+				 uc_mem_map_size);
+		} else {
+			nic_data->pio_write_base =nic_data->wc_membase +
+				(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
+				 uc_mem_map_size);
+		}
 
 		rc = efx_ef10_link_piobufs(efx);
 		if (rc)
diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
index 4012e3faa298..8e65ef42a572 100644
--- a/drivers/net/ethernet/sfc/efx_cxl.c
+++ b/drivers/net/ethernet/sfc/efx_cxl.c
@@ -21,8 +21,8 @@
 void efx_cxl_init(struct efx_nic *efx)
 {
 	struct pci_dev *pci_dev = efx->pci_dev;
+	resource_size_t start, end, max = 0;
 	struct efx_cxl *cxl = efx->cxl;
-	resource_size_t max = 0;
 	struct resource res;
 	u16 dvsec;
 
@@ -104,6 +104,13 @@ void efx_cxl_init(struct efx_nic *efx)
 		return;
 	}
 
+	cxl_accel_get_region_params(cxl->efx_region, &start, &end);
+
+	cxl->ctpio_cxl = ioremap(start, end - start);
+	if (!cxl->ctpio_cxl) {
+		pci_info(pci_dev, "CXL accel create region failed");
+		cxl_dpa_free(cxl->cxled);
+	}
 out:
 	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
 }
@@ -112,6 +119,9 @@ void efx_cxl_exit(struct efx_nic *efx)
 {
 	struct efx_cxl *cxl = efx->cxl;
 
+	if (cxl->ctpio_cxl)
+		iounmap(cxl->ctpio_cxl);
+
 	if (cxl->efx_region)
 		cxl_region_detach(cxl->cxled);
 
diff --git a/drivers/net/ethernet/sfc/mcdi_pcol.h b/drivers/net/ethernet/sfc/mcdi_pcol.h
index cd297e19cddc..05fd5e021142 100644
--- a/drivers/net/ethernet/sfc/mcdi_pcol.h
+++ b/drivers/net/ethernet/sfc/mcdi_pcol.h
@@ -18374,6 +18374,9 @@
 #define        MC_CMD_GET_CAPABILITIES_V10_OUT_DYNAMIC_MPORT_JOURNAL_OFST 148
 #define        MC_CMD_GET_CAPABILITIES_V10_OUT_DYNAMIC_MPORT_JOURNAL_LBN 14
 #define        MC_CMD_GET_CAPABILITIES_V10_OUT_DYNAMIC_MPORT_JOURNAL_WIDTH 1
+#define        MC_CMD_GET_CAPABILITIES_V10_OUT_CXL_CONFIG_ENABLE_OFST 148
+#define        MC_CMD_GET_CAPABILITIES_V10_OUT_CXL_CONFIG_ENABLE_LBN 16
+#define        MC_CMD_GET_CAPABILITIES_V10_OUT_CXL_CONFIG_ENABLE_WIDTH 1
 /* These bits are reserved for communicating test-specific capabilities to
  * host-side test software. All production drivers should treat this field as
  * opaque.
diff --git a/drivers/net/ethernet/sfc/nic.h b/drivers/net/ethernet/sfc/nic.h
index 1db64fc6e909..cd635f4f7f94 100644
--- a/drivers/net/ethernet/sfc/nic.h
+++ b/drivers/net/ethernet/sfc/nic.h
@@ -186,6 +186,7 @@ struct efx_ef10_nic_data {
 	bool must_check_datapath_caps;
 	u32 datapath_caps;
 	u32 datapath_caps2;
+	u32 datapath_caps3;
 	unsigned int rx_dpcpu_fw_id;
 	unsigned int tx_dpcpu_fw_id;
 	bool must_probe_vswitching;
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-DM6-obe.outbound.protection.outlook.com (mail-dm6nam12on2053.outbound.protection.outlook.com [40.107.243.53])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 8001082486;
	Mon, 15 Jul 2024 17:29:13 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.243.53
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721064555; cv=fail; b=HDb4SN2FkQLx6/e2cobBkrRhIStdg93IUNAWMVLV/8nfbqcCbA1IBgGQmbYvBnzsUjYfgDmij0EFvVvEw7yoVdNPLN5ofWnXTwch85lpbiQ9pwBaFAw7GEBlGYaA8SHcXkdGpDb66FL6xeJApb3bQdYLA8hHdFhzyT/cnr8BIOI=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721064555; c=relaxed/simple;
	bh=l/+FmP7W4y9wt+tPE2M28dGJ00elP29yEJE2jwO9fiQ=;
	h=From:To:CC:Subject:Date:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=QTH1XuTUzLoUH+hJYgUfn0hkq8+X6LhiB5hYXv0IZx3otwhDLElOtFR3CBLv9qm7RGpEzyte5Nz1GyNBHVAavfs0CX8xwW0Lb0hxOaGqu8tw/XTthjF6DB1oj3h0wvQHQddZke6MN/oIwPVR7x6u2QZyMMy9pV+B6C5ckR4BAGo=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=nzVqBfxL; arc=fail smtp.client-ip=40.107.243.53
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="nzVqBfxL"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=CGXO476LWRzpLfWpfyQvm28yANeWbEdtwXHp6g+SQ9wxfcT85zH3HUdUKHjaDtz7Nwv98KJ4FblKnz3vcfGTCmmt42Ynmtz41UjoweJq2PB2Xka+ObHyHLQHtVIuDltOn0hWHJsdRJ464vDIQz03qz4QA104V0/cuGX7HWuLYHgEvWwntM0kd8VqBYu1nZJEqWcfDf+b+0+Lg504NvHlpydBllDngOgi2ZIgltI77d7Pec0OuUyOcI4trwoX3ZLt3XsDPGKNZq+q3BDydbx6+Nyyt+51sYBZM1Nm0eI3Gjj7amEGkM75dpfuz8Oi3FjVo0w+5QIMaQ3dPImAeFt02w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=SdujPSOjy/j4GFMNo1rdfTLRyXkFQ36MUwtV/GPAJUU=;
 b=P4p6SEUQmuDoh0RkGUrnyoTQ7S+ydfOuUOkmznBL/bLW5yaHMdzeSiEgHTwnjwERsUIH5tzbkR5VohhaCjWdLteqFmAASQxnQVaPZxoBL0E7uVtUUtf6kZJ21OpFN3YkiNdK2aSzRtWU1/eiOFKKRmvpzh8nPu02tBpmmUx5yNSnMspp6QEztjitADTGbAYbO7wdbrc5Glx6cSVUj+u9nqcZWHGEzGA+EDngkInIMb5a72JLG3Bi0ZsojFQcsj8pk0mhmqUzdqYYNXlso8HL2zqPQWJC4dKUEyb1pLJCNL6I3MqyBT+bfcf4faxjRRcWUVImEz+3SLkTz1gBjZIV1A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 165.204.84.17) smtp.rcpttodomain=vger.kernel.org smtp.mailfrom=amd.com;
 dmarc=pass (p=quarantine sp=quarantine pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=SdujPSOjy/j4GFMNo1rdfTLRyXkFQ36MUwtV/GPAJUU=;
 b=nzVqBfxLYQUFF7kMIKM1HMjmxEmAbijydqeeVS6dxPhaHayWRKZRmk0EdlAvczE1rioKoXPiE/pVTPHEIU2eRrVbYHfBV6v33ENUOYZHlCAmLomF9C6s6qcBbfK5TJlia+dUpjSBg2z6jtAoTEY4yL8/4/3qjQNHghQmaG33bsc=
Received: from BYAPR02CA0021.namprd02.prod.outlook.com (2603:10b6:a02:ee::34)
 by IA0PR12MB8424.namprd12.prod.outlook.com (2603:10b6:208:40c::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29; Mon, 15 Jul
 2024 17:29:06 +0000
Received: from SJ1PEPF000023DA.namprd21.prod.outlook.com
 (2603:10b6:a02:ee:cafe::f3) by BYAPR02CA0021.outlook.office365.com
 (2603:10b6:a02:ee::34) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28 via Frontend
 Transport; Mon, 15 Jul 2024 17:29:05 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 165.204.84.17)
 smtp.mailfrom=amd.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=amd.com;
Received-SPF: Pass (protection.outlook.com: domain of amd.com designates
 165.204.84.17 as permitted sender) receiver=protection.outlook.com;
 client-ip=165.204.84.17; helo=SATLEXMB03.amd.com; pr=C
Received: from SATLEXMB03.amd.com (165.204.84.17) by
 SJ1PEPF000023DA.mail.protection.outlook.com (10.167.244.75) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.7784.5 via Frontend Transport; Mon, 15 Jul 2024 17:29:05 +0000
Received: from SATLEXMB05.amd.com (10.181.40.146) by SATLEXMB03.amd.com
 (10.181.40.144) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:29:04 -0500
Received: from SATLEXMB04.amd.com (10.181.40.145) by SATLEXMB05.amd.com
 (10.181.40.146) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.39; Mon, 15 Jul
 2024 12:29:03 -0500
Received: from xcbalucerop41x.xilinx.com (10.180.168.240) by
 SATLEXMB04.amd.com (10.181.40.145) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 12:29:02 -0500
From: <alejandro.lucero-palau@amd.com>
To: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
Subject: [PATCH v2 14/15] cxl: add function for obtaining params from a region
Date: Mon, 15 Jul 2024 18:28:34 +0100
Message-ID: <20240715172835.24757-15-alejandro.lucero-palau@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (SATLEXMB05.amd.com: alejandro.lucero-palau@amd.com does
 not designate permitted sender hosts)
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SJ1PEPF000023DA:EE_|IA0PR12MB8424:EE_
X-MS-Office365-Filtering-Correlation-Id: de1c62ff-e12e-4af6-6625-08dca4f3a08d
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|82310400026|376014|1800799024|36860700013|921020;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?c85xg5TBlfyDHjEsvF0J8UTozPGpoYQyk+Crwva4Fq5UMXJGh3zgaYyhSqy7?=
 =?us-ascii?Q?/ax+uYN+iqXKJcaGafA7ynAygVpGzmDtw8tk4pLXw+tOSUMxdMp9lH/XGBuo?=
 =?us-ascii?Q?Ni9Qvs/BQUNneiwWRfA6PrLqYJx5x4SsLantV7D2D9+cdvPWisTkcuBkD1/4?=
 =?us-ascii?Q?BiRP5R8y8YLZtmnxOJUlZgB3obV61k1SacTBpW2WnE1+AfwYneXZLwkn/xLv?=
 =?us-ascii?Q?FksG0aAWMk1EbkDscSTawd47iB/L0RPb+MrQlIzh6vELDIbi/OHLoRtC6riP?=
 =?us-ascii?Q?uXePleRn5cflXSDVwqstKm5kIRs1G31KnAEw8dR720XVd41g0fV5Xws9Lx34?=
 =?us-ascii?Q?TGHQ0mpFLCVK1tNYH75zDm3TudgKspraHaVHXzQeu71rW9seQADEmuDqQzOI?=
 =?us-ascii?Q?rMw6NdQteDQueYMK5+fqukY3YxD2DzG2flY38FGfqti3vsffVOVw5SHqkPTQ?=
 =?us-ascii?Q?HwO93HWX6xxEnyhrFIOIpfraGNmExwQ3g2HUt64GtrNj5wEdQL6NX8MltMEw?=
 =?us-ascii?Q?U/hhzrU3xHQj4zVfB3EBWd1YGqAWr2xqIGp5G4IO2muR4uFjh7nv+9HYTOXp?=
 =?us-ascii?Q?1Q+63Cpj31n9iWveAlpC0gkqkkUjqmAKOJEA/UiI7rjM5YtKF8m+mhAA+Z6d?=
 =?us-ascii?Q?IdMX/xCPIKFvrECPl4PAA1YBvMAl70NaKjvk8BTwTOVlX47ySlwiTRHMUrvH?=
 =?us-ascii?Q?4shjAYpe8FmsL6jMkQtjjYp1uqIz2lJxLPH7sUhzEsHy0s296SeKns+UpCD+?=
 =?us-ascii?Q?ttIHjrLRw9Z9kkw7KWsZgtQR6aOHhc7dQxytrBAxH+GAV2L6LeSdYg5zjxbi?=
 =?us-ascii?Q?sEgwl891tY8V26Mw8YCA45ZRmzsrZQ2NUh4uHkb6x6rnqcdUAUnuYTr1Rhig?=
 =?us-ascii?Q?xAiPQXM6PvkDRsquyyplNSRWpKIJMj1srmSusTJzr1rXugQrm9Nryq/qNfO1?=
 =?us-ascii?Q?5cE9crcHXMJAxDatyq5R0fNoI9xeP/yN8kN99huD6XAiUm+Y52Y5DaUcv6Rg?=
 =?us-ascii?Q?VtNY1NV2Ooeu6xPXS+cCcRnQYODvrUQ3cdudM6Ig3W/eJrVqs702lmGz+oUY?=
 =?us-ascii?Q?88t3mEqW5FBGVyGfAtnxT7JdWH8A6G0SHUBD0tNHEaAmAhiiTooKpuQ6KjCH?=
 =?us-ascii?Q?GZ0sBqIfrcxevr14/Duv63cf0ZMPDp3P5zhi3QKaliX3Y9oSA5F70p0NFee5?=
 =?us-ascii?Q?ct5R8sJH2WhmeN9lhw9zfGJDAG+KdCQCopZvxl2XOc3yZ91kx2BOEkhU9ihe?=
 =?us-ascii?Q?/3r6QXwzwy8+e3dTKkndvMekFUpi3R/Rjlej2xvka/eKPe5NSynk5VQHrQaF?=
 =?us-ascii?Q?RvCgx/uPRYBses4D4AHq/EKCONKhv7r8rkrNzEIXUQkt6gGaV/iGzF3ZblJ4?=
 =?us-ascii?Q?n5oWztllzNHGf7Cyfr1OgmLeS8/esyFUUkzMvx+btR0mPOzGZxUZx7joXz1A?=
 =?us-ascii?Q?Ovpezc/Xo9o=3D?=
X-Forefront-Antispam-Report: 
	CIP:165.204.84.17;CTRY:;LANG:en;SCL:1;SRV:;IPV:CAL;SFV:NSPM;H:SATLEXMB03.amd.com;PTR:InfoDomainNonexistent;CAT:NONE;SFS:(13230040)(82310400026)(376014)(1800799024)(36860700013)(921020);DIR:OUT;SFP:1101;
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Jul 2024 17:29:05.5991
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: de1c62ff-e12e-4af6-6625-08dca4f3a08d
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d;Ip=[165.204.84.17];Helo=[SATLEXMB03.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	SJ1PEPF000023DA.namprd21.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA0PR12MB8424

From: Alejandro Lucero <alucerop@amd.com>

A CXL region struct contains the physical address to work with.

Add a function for given a opaque cxl region struct returns the params
to be used for mapping such memory range.

Signed-off-by: Alejandro Lucero <alucerop@amd.com>
---
 drivers/cxl/core/region.c     | 16 ++++++++++++++++
 drivers/cxl/cxl.h             |  3 +++
 include/linux/cxl_accel_mem.h |  2 ++
 3 files changed, 21 insertions(+)

diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
index c8fc14ac437e..9ff10923e9fc 100644
--- a/drivers/cxl/core/region.c
+++ b/drivers/cxl/core/region.c
@@ -3345,6 +3345,22 @@ static int devm_cxl_add_dax_region(struct cxl_region *cxlr)
 	return rc;
 }
 
+int cxl_accel_get_region_params(struct cxl_region *region,
+				resource_size_t *start, resource_size_t *end)
+{
+	if (!region)
+		return -ENODEV;
+
+	if (!region->params.res) {
+		return -ENODEV;
+	}
+	*start = region->params.res->start;
+	*end = region->params.res->end;
+
+	return 0;
+}
+EXPORT_SYMBOL_NS_GPL(cxl_accel_get_region_params, CXL);
+
 static int match_root_decoder_by_range(struct device *dev, void *data)
 {
 	struct range *r1, *r2 = data;
diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
index 1bf3b74ff959..b4c4c4455ef1 100644
--- a/drivers/cxl/cxl.h
+++ b/drivers/cxl/cxl.h
@@ -906,6 +906,9 @@ void cxl_coordinates_combine(struct access_coordinate *out,
 bool cxl_endpoint_decoder_reset_detected(struct cxl_port *port);
 
 int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
+
+int cxl_accel_get_region_params(struct cxl_region *region,
+				resource_size_t *start, resource_size_t *end);
 /*
  * Unit test builds overrides this to __weak, find the 'strong' version
  * of these symbols in tools/testing/cxl/.
diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
index a5f9ffc24509..5d715eea6e91 100644
--- a/include/linux/cxl_accel_mem.h
+++ b/include/linux/cxl_accel_mem.h
@@ -53,4 +53,6 @@ struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
 				     int ways);
 
 int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
+int cxl_accel_get_region_params(struct cxl_region *region,
+				resource_size_t *start, resource_size_t *end);
 #endif
-- 
2.17.1


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from vps0.lunn.ch (vps0.lunn.ch [156.67.10.101])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 49287179BD;
	Mon, 15 Jul 2024 18:49:06 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=156.67.10.101
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721069347; cv=none; b=r19Cm8HVLgXfkXOXRGsB6HZKBa0ju1GdZ5b55t3WjUcq0AKWkSDrYbyWwyhPDJK4Wevhr1sdGMjUjPg8Wu+g39QrE3luhKgJvqaDoOs7U6B80+vU+Xt0yP3j+/lw6rI/+dYA4zZjYY/xiNuGgxgErUjhEvJ+qoK+JnhaD9TZIAE=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721069347; c=relaxed/simple;
	bh=AmJtrJOYkheRvLPk7KDBMoq9AXd0A+zPJpe9ewJsmqE=;
	h=Date:From:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=b966CRBHei1pkB9spfVx5w4Pu1NyNpbPLPo7WbRi08K53EdQwoqROlcJmZmhjehUch5zDOu0wYGzpup+Xc0Bo57FplfNxr5zYSlfyBq80o6BlfzqxzaXlRe9XTo+hzSVuHCKVvvZE/FT6yzgwJKPZXWRy6vfGZtTeCzPjLQCZho=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=lunn.ch; spf=pass smtp.mailfrom=lunn.ch; dkim=pass (1024-bit key) header.d=lunn.ch header.i=@lunn.ch header.b=Yf8druRL; arc=none smtp.client-ip=156.67.10.101
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=lunn.ch
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=lunn.ch
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=lunn.ch header.i=@lunn.ch header.b="Yf8druRL"
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=lunn.ch;
	s=20171124; h=In-Reply-To:Content-Disposition:Content-Type:MIME-Version:
	References:Message-ID:Subject:Cc:To:From:Date:From:Sender:Reply-To:Subject:
	Date:Message-ID:To:Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:
	Content-ID:Content-Description:Content-Disposition:In-Reply-To:References;
	bh=U/gaZ/UKVQ7nvvz75les85SF/WsWU7ztDSAN1VO2/gU=; b=Yf8druRLtaSPmhDfRfMjJMvWhc
	pNyZl7IQLM7zIYHeRJXwn7ilbIK6wwoMAXrddKmga4S2JvVYABMnPHMfg9ysSU1NPm1mZVNWnAAZN
	TDt1nVlCiwBUxdhpKaUGt+09vonwk2D2pAPEIpjmZ7BtPt1Lg4IW4B8l727aigduMojg=;
Received: from andrew by vps0.lunn.ch with local (Exim 4.94.2)
	(envelope-from <andrew@lunn.ch>)
	id 1sTQkt-002akv-Gf; Mon, 15 Jul 2024 20:48:59 +0200
Date: Mon, 15 Jul 2024 20:48:59 +0200
From: Andrew Lunn <andrew@lunn.ch>
To: alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
	dan.j.williams@intel.com, martin.habets@xilinx.com,
	edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
	pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <72858182-c0e6-4c05-a11b-fc137f8f1edb@lunn.ch>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240715172835.24757-2-alejandro.lucero-palau@amd.com>

> +++ b/include/linux/cxl_accel_mem.h
> @@ -0,0 +1,22 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> +
> +#include <linux/cdev.h>

That is generally a red flag that something not good is about to be
found. But it does not appear to be used in this patch....

       Andrew

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [192.198.163.14])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 20D8518029;
	Tue, 16 Jul 2024 05:53:13 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=192.198.163.14
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721109196; cv=fail; b=R1hvolDpVi6KJN9F6cVTKbTN7VmW+8JM8jmvUPtuXTTxF1sNRMrs8D1W22oKmGvehvaY/RoX79EPX7b4puFOxiBJpbWQ6DimqBbdlF1JJ4pfVXxeocmAnHtGMSTIYfdNRY8apuvrY0iEH+ocy9SCwOdpN8fC8qAC+JzCiD2+8Yg=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721109196; c=relaxed/simple;
	bh=ADGT0znT2U9O8/++8OFPnglODzT87mJl412gOIy4J2M=;
	h=Message-ID:Date:Subject:To:CC:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=YFTtmOpIHtuD/yvEsGK4uZvEJ9mxIBP1oGeBhvgfkzcsypYrEeIWoOe4b5gpbOK5xZhTlGRQHy8p5B3Zf33yx9P1/yaMeX3lk/WJpeXMtJI7Dmqxb2anad4D2zH80sgJ2X4MzigQPYue1D5mI7Y2HkEOhrRcLBbJYEG/k7zf/rE=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=KbSIYVzz; arc=fail smtp.client-ip=192.198.163.14
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="KbSIYVzz"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721109194; x=1752645194;
  h=message-id:date:subject:to:cc:references:from:
   in-reply-to:content-transfer-encoding:mime-version;
  bh=ADGT0znT2U9O8/++8OFPnglODzT87mJl412gOIy4J2M=;
  b=KbSIYVzz2sxG80ealYYkbm0yCPKoeIH1uj/AuFyCAzHFUckva+t6v6s3
   spKzklsC+nIlKBrAkYDDHJ+NRK3ePZcO5EOyqNzYfUsHT3nDMGSYs1amk
   /gZ7qlq6q+fZnS7G7ahaWINHZn3Gi4e1F9pq0XwxvPUYo/OADklV03Ha6
   rJJBrkIoNbPVVt8v8uAKlyjsiqIFvRDtxMR8N9UTOpW+lEX3mCRdmbjD5
   bH4r8TtJGFT6J3iCGsjKPqr+Q4bLcBLyq2J6zM4ijr6u4khS/q+B7AI0E
   qmzNHKZ61sjLBB2rbR35tGyvuMFfXpLbTGVi2oHMbwsTqOoo94OWpYjQh
   w==;
X-CSE-ConnectionGUID: +O6XdhJzRC29f6h0BCJdOQ==
X-CSE-MsgGUID: J3B8uTViSzC1DqMe5HXO7w==
X-IronPort-AV: E=McAfee;i="6700,10204,11134"; a="18717321"
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="18717321"
Received: from fmviesa005.fm.intel.com ([10.60.135.145])
  by fmvoesa108.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 15 Jul 2024 22:53:13 -0700
X-CSE-ConnectionGUID: TpeEj1uySiGZbnLL7Q9u6A==
X-CSE-MsgGUID: NTr/GZ1CSsCM/32MIsAcZg==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="54239917"
Received: from orsmsx603.amr.corp.intel.com ([10.22.229.16])
  by fmviesa005.fm.intel.com with ESMTP/TLS/AES256-GCM-SHA384; 15 Jul 2024 22:53:12 -0700
Received: from orsmsx610.amr.corp.intel.com (10.22.229.23) by
 ORSMSX603.amr.corp.intel.com (10.22.229.16) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39; Mon, 15 Jul 2024 22:53:09 -0700
Received: from ORSEDG601.ED.cps.intel.com (10.7.248.6) by
 orsmsx610.amr.corp.intel.com (10.22.229.23) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 22:53:09 -0700
Received: from NAM04-DM6-obe.outbound.protection.outlook.com (104.47.73.41) by
 edgegateway.intel.com (134.134.137.102) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.39; Mon, 15 Jul 2024 22:53:09 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=QHTznROV/dHtTCUbgRETW6fXG2gaOIYxFsUuTUo/3w3X3LMghCb0a+CZ/07smT26Zt1PPhsUAXwPrzVF2KFeFNEpwBgo1t/AAeBVLDdY49eMgqw56SHo9hEdpZlPK5NlyuQkabb46CDHy0wHYDzLyQFWB+fe/VgqZftQgFXlCzQLxa3ImEj+TkdVBM9scyI2oPAvq9v06K0yX7zsDnNYcYzB1BpEJMptB6sutH+9u/Y31vLBvG+Zxoe7OtsR8fwkaDEqR6v7IeuFgmwbg4VFsrmRWrIzti5SSLcykVAE0zNZfopR3WwiillqqED/coJdH+FQcAuFZlLY4SLxDnP0Ng==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Eq28jS6NVqNgxR9mcQIPhrZgnG40HnlQ9UgJbKqjsSY=;
 b=v/1qRFsH+u5f4vbSew7PlX9P+vCIjXadPq8CDChzt+eH74NA/1MMYCERTz60y7bhvvSxt4vfkK+y2rhF7KQgc/U8c7yM4zhEF4uloVGhZYcB2DWRLmQnlDa7kBW++3jsyOTLkTG3n0+plWX1lEpUx+BHnY3Q+RObYxePlWnr1xDbGpAF346isvkJCcRvG28jDtG4scMg3gad0eWZk2SIkOd6aOQHs69uvFYZdJaM/h9j//V9Id1DPswCX3KEvUM+ArtJuU94mBV0Urzvzin0ar/qWYPooaNd4tETkMtKPe4XBLB4VQwMHvWCvzGHHn37aTAFPdgt0lTxlY4K99OsJA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from IA1PR11MB7200.namprd11.prod.outlook.com (2603:10b6:208:42f::11)
 by SA1PR11MB8574.namprd11.prod.outlook.com (2603:10b6:806:3b1::18) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28; Tue, 16 Jul
 2024 05:53:07 +0000
Received: from IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0]) by IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0%5]) with mapi id 15.20.7762.027; Tue, 16 Jul 2024
 05:53:07 +0000
Message-ID: <b2a99894-9c20-49e2-8c76-6e53aa390d9f@intel.com>
Date: Tue, 16 Jul 2024 13:52:55 +0800
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 08/15] cxl: indicate probe deferral
To: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
Content-Language: en-US
From: "Li, Ming4" <ming4.li@intel.com>
In-Reply-To: <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: SG3P274CA0007.SGPP274.PROD.OUTLOOK.COM (2603:1096:4:be::19)
 To IA1PR11MB7200.namprd11.prod.outlook.com (2603:10b6:208:42f::11)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: IA1PR11MB7200:EE_|SA1PR11MB8574:EE_
X-MS-Office365-Filtering-Correlation-Id: c67394c7-500f-4bbc-251f-08dca55b90ef
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|376014|366016|7416014|921020;
X-Microsoft-Antispam-Message-Info: =?utf-8?B?cGtHSHhrU0lCTWx2cHZJWkdpWHBaWXUxeVlRUGZaVjRvSVhoZVcySmpoOUJt?=
 =?utf-8?B?anNQTDhscVIxSk9NZFVmQTVtdlhJSDJnZFVKaG56ck1WWG50TUZ1UENkc25Q?=
 =?utf-8?B?VDlqeTJoUnpsQlZVUFNvT3N3cVhoVlowU2JOVmoyMkgrS1hSdXh4NTYzdEh1?=
 =?utf-8?B?NVY4SU45b2lJN1BuRkNDUWdma2ZxTmdXRDdXUjd6Z09heE1NMThwMzJOQklP?=
 =?utf-8?B?QWxSS1JxUDNmcVpockxzWnB6NytwM2xWbUdmK3RvRVZ3YXVYQTVZanVueHY1?=
 =?utf-8?B?UWxRcUJlK3pad0tuWS9kUUkrTDZDNFRQNmE4Q3hveGFrZU5jczBqUzJWcVI4?=
 =?utf-8?B?SW5pSlkwUHVzSk11QUNtbHpGR3cweWpLQnM4L0NUY3QxcnljQXgrR1ltVlhJ?=
 =?utf-8?B?VGF5UFJmeXc2NDhvSXJJNmVaOVJ0MHNQSklCcVpHM3BoZGR0eWZPeTU1UVF6?=
 =?utf-8?B?Q0JVUVRSMUJSV3RUZUFveEpSNkpwNXkxQUVZb1JIbVc3aS9EeTNrWDRJcmFt?=
 =?utf-8?B?cUttcGJ6dGU4MndZV2RhVUhJcUpyOGI1SG9sTi81NzVRYU5qaGVzTFBIUWNB?=
 =?utf-8?B?M2plbHFZZStqL29UNWJEYURZV3NKK3Q1clpLa3dUMGVUeTlkYkRrY0hxVDdx?=
 =?utf-8?B?UUJpSGp1MytTUnpPTVRoeG00dWFVeXNpZURXOTlNdS9YSmdLdENiZ1pMOVps?=
 =?utf-8?B?TkZRMFArUDA0V2M4UWU0OUExanRBWG0xQWpUbkpqeDRZeXRtZEwxaitjVTNM?=
 =?utf-8?B?elpBZXlhTDBnMjZRUURIM2M1Y3M5NTByM3RCb1R1UjlzSXRmS2sxKysxSmht?=
 =?utf-8?B?dVF3cndzbEpqYnZuUytWNWZOdWtEcXN2UGxFVzZQQ1JIa2Z1VERJVkc5c1RN?=
 =?utf-8?B?TWZWcGdHNDVZY0dzMDIxU0JZVWM1Qk5wRzZJekMrUEVoM1c3dXc2dGNpZFBx?=
 =?utf-8?B?WDBlVWdXT0V6R1NEYU8zbzdIRitHck1LZWhhZHhBVnpOMVE3OUFzakJBL1RX?=
 =?utf-8?B?LzNmcVFpcGVvNmNyZGNUazZTVWFwVmx2N0N2VTNNK1F6b2dEUnJZSFkvRTdH?=
 =?utf-8?B?aTB4U2thK1hCMkt5VGtwMkt3T1JsSTdZS1g1cWJ1cUtmdCtuL292cy92YU1j?=
 =?utf-8?B?YlY1TGNpMzBuVFUxWE9hd1lHUW1NRmJ0SW4wb2ozY3RGL0N0WGd6bkxRRWxm?=
 =?utf-8?B?ZkZENmNsTUNNeExKRjF6cXBFT0cvVHBFNnVrTUZ6SXZFTmU3Qy85bkc0Ykow?=
 =?utf-8?B?L01xVEdVUVlNLys2UEtDOGFXMUdKWUVOVVdDM0x2NitSY29Sc2F0Tm9RMmVI?=
 =?utf-8?B?UFVuZExTWDB3SDZxZDRQT1VtTFV3SXdDQjJJanZkOGJUdml1MFRyeUdqN3Uw?=
 =?utf-8?B?N1hMQmpoalhKdytSZjNqcGNwdkdxN2pHbzVLU0crY2ZPYUNiY0JzZmFyb0JC?=
 =?utf-8?B?Wm4vOHpvTCtHQW16cVIzZjhSUXdPOVRtTEpNTXJHaDhSNUdXdkI0c1VWVHRq?=
 =?utf-8?B?eTZlU29tVy9oVk1jQ3hoYVpuejNXcWV6eXVEUEZ4VjdwblRUdC9oaUplRXc1?=
 =?utf-8?B?ZDJYaFdGL0M1dnFNQVNNeGUzVStxc2d1Z2tXWm05bUt2MzRlNmJJSVE1cHp0?=
 =?utf-8?B?SW5TVlpoSVpOcnc1WHZkcGVLcEhUNWtKM2lYZVVJYm1vbStOSmVnT3BPTm5v?=
 =?utf-8?B?UExwbXNTZjltTHY1YnJNYVA5OHJBYUdKYlJvWDN1UDkvNEloa3dZOC9jSllq?=
 =?utf-8?B?RFZXZ05EU0U1enpHcjhpdUNGaE8zTm84eDdWak5OOGVBOFlCMjdXM0NnZ1R2?=
 =?utf-8?B?WDc4RVpNalExMlZPZEZXZz09?=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:IA1PR11MB7200.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(376014)(366016)(7416014)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?utf-8?B?L1psS2VvS1NkcWcxRjBNdjFRUmhwbHJBSm1pSmxXT3FQMk85SHhGR0w1anhN?=
 =?utf-8?B?WUlMaUYyT2UyNmNNRnJ1Z2NtTW9pMjBtRXVTT3YzcXYwMlRZUktNeHUxWHpD?=
 =?utf-8?B?OXo0WS9hN0FBSmMyYmVWbTVsQk9rak91Q3lQQjlFQ3ZZRHk0Q25wL2c5bFdz?=
 =?utf-8?B?KzllT25rZGp1RjRYUnMycjBXZ3hOUlhxSnprM25ZSDNnUVloaFd4cXNGcWxI?=
 =?utf-8?B?OWVCRnFHK1R6bnY5WE12VWRjSEUvKzVnR1VlRUxpRFExUWV1R3JiUlB5K3h2?=
 =?utf-8?B?WDRIc3hNL0ZzMHZ6V041cGpXNm5RN3RqVzlta3lJSUVZekN3OVJ6WkJVSmpj?=
 =?utf-8?B?dXNQN0ltWW1ZUkgzNmhRSjEwTHltUjZLbmFabmJ5dVdubWFEYlpMM0YrV1Zi?=
 =?utf-8?B?L2ZLWGxZWjd2WWk3amJMTjVMcncrTGtQa1ZEdFBnWjRvbm9rZ0pjRHBvVnlU?=
 =?utf-8?B?TS9NS0JrSzFaaHRTK3FXY1B1Nm90WmtaQ0hiVDlvaXI4dlFKRmI2Y1pPbXJa?=
 =?utf-8?B?RE1kR1pCaDZNd2JhVGVpVFpaTkdnLzJOYWhIUGx2NDZtSkxsVkxQMnpUSHdM?=
 =?utf-8?B?ZmVsVGRGZjV3OEZVaG12c2VZell0NzZyMVIrTzFBdldSOUg2T0VnQmRyREZx?=
 =?utf-8?B?WXZudDF5M3JKOEl0VjlyYVNScW4yNEthRFJPKzlWS0x5MDFCb3VqdlBOY3Nt?=
 =?utf-8?B?YlQrZVJSMmxXd2FUYlRXU3NzZnY2UHl3WEF3T3NIYnJIUXRlR1lNMm1vWmZ3?=
 =?utf-8?B?a3hSTk1rUmlGbEt4Um9pVUtUQ01rckxMNUh4RExvczREQWtLVHlpdUZLMjZK?=
 =?utf-8?B?TkZ1NURvV3l2ckhtdG5nZTFOWXJja21vTEtxb3Q1RGlXcEpXZEN3OUFoK2Nl?=
 =?utf-8?B?eCsyVlAwTWVYN1h4QjlxNmpCMHUzMldSQ3EzT2tJalRrRUJ0T0E2TEd0TmVt?=
 =?utf-8?B?RzYyb0tsNTFSWDVMdnZSVWFnUDlabUp5UHA0TTY3N3VIU01SVlg4UmdJOEEv?=
 =?utf-8?B?N1ZxV3VmOFZDWDdaZndPMUdBMzd6RmRscEFNbHQxMEVtdGhEWWVaTHpoUDdB?=
 =?utf-8?B?T2pSNGZyMlFYdE05TDViazdjVnBZVTFpb1R0VlIwMVg4WW84UUFEZmh0eFFI?=
 =?utf-8?B?TFlua0lTZUdRQnczM04rMFlZMXBPLzhOSHpTbERMV3RUdjV4MXY1R1dqdkox?=
 =?utf-8?B?ZFpRQ1E0clNqSWRlTHpOelc3VWFVbmduRThlQXhqQ1JPaWtRMExubW1XTXVl?=
 =?utf-8?B?TitoN0QzQjBWV2tYREdtY2NNckxYdnFNQmY0SGJGL0crUE5IQytsYjFZRzkx?=
 =?utf-8?B?cEp6bmhmY3RHTkVBSzFpamFrNTZaQldPMkprTE1FUld4U0VWQTVvbS9XRDdh?=
 =?utf-8?B?MnB1b0V3SFgvaTQ4ekVraTh4eVB3Y3Y0QzR2VGY1WFE0dE9hNzhoTjlMWmgy?=
 =?utf-8?B?S2tXMEljd0JrcW1DUmczMWI1NE1zUHQxWm16T3hTSVpGSWRWN1hSY04yR1dn?=
 =?utf-8?B?aDFaQWZFNFZpM0hTVm5LNnhyWTB3dUFucTVlL0RIem5vV3NWNWllUWZUL3FS?=
 =?utf-8?B?dmJnUU1wMHlORTN4REFpMkhSR3dNdTdSKzFsUCtBZ0h0V1ZVUUNUeURqU1BY?=
 =?utf-8?B?M2UwTWQ4MnZYUHBScDBWMnA1TjlCeDVVSER1Ynp1blBQZWxOMHdoVzIzaHpi?=
 =?utf-8?B?VHJ1SUJsZ0ppRGpGdVhXNkk2dkl3WUduTlZLTHJxcXh4V0xkRmhyK1RyL1p3?=
 =?utf-8?B?Y20rRTRVK3hnQ2tSYy84YmpHVE9BdFBSQkM2RHh0UjdSQWdMS1VGSm90Z1Y1?=
 =?utf-8?B?emFyTTNQTGtQbStUVXpNbTdZU3Zia1FyU3d6NzFKZytITGs5Smd6eFVaeGdS?=
 =?utf-8?B?dkZWQWwzVEk2WFozejNEbmc3MXhlaUtTWnppZkhiRjFQYmxnMGlYbXo3eXVT?=
 =?utf-8?B?ekFxUGpIeW1FcngxZ0V5cEhWS3JnVjJuMTJUVjdEQmtJYXFmQ2JBMEdYc0dp?=
 =?utf-8?B?cEVUbzVTUTVON3VlNkoxZkhQeGNTQU5nMlc0Q0ZMaUZBLzA3cUNkamI5SUc2?=
 =?utf-8?B?VndrQjFyclZXNVcxa1VibnBUdi9Za29UOW9ESVJPL1Zzc21TV2UxczBuVW0x?=
 =?utf-8?Q?pqvkOGCi/oMTNuiPlkuApt2tu?=
X-MS-Exchange-CrossTenant-Network-Message-Id: c67394c7-500f-4bbc-251f-08dca55b90ef
X-MS-Exchange-CrossTenant-AuthSource: IA1PR11MB7200.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jul 2024 05:53:07.5238
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: z+d9+92SQjBpXoPrmK4ZSGi8y/6+aMsZ+JEWE/dtiGGGy4qIreSOa3t3StpbXx4oW9Uy0QC4aap0JkQyGgfHyg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA1PR11MB8574
X-OriginatorOrg: intel.com

On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
>
> The first stop for a CXL accelerator driver that wants to establish new
> CXL.mem regions is to register a 'struct cxl_memdev. That kicks off
> cxl_mem_probe() to enumerate all 'struct cxl_port' instances in the
> topology up to the root.
>
> If the root driver has not attached yet the expectation is that the
> driver waits until that link is established. The common cxl_pci_driver
> has reason to keep the 'struct cxl_memdev' device attached to the bus
> until the root driver attaches. An accelerator may want to instead defer
> probing until CXL resources can be acquired.
>
> Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
> accelerator driver probing should be defferred vs failed. Provide that
> indication via a new cxl_acquire_endpoint() API that can retrieve the
> probe status of the memdev.
>
> The first consumer of this API is a test driver that excercises the CXL
> Type-2 flow.
>
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2
>
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/memdev.c          | 41 ++++++++++++++++++++++++++++++
>  drivers/cxl/core/port.c            |  2 +-
>  drivers/cxl/mem.c                  |  7 +++--
>  drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
>  include/linux/cxl_accel_mem.h      |  3 +++
>  5 files changed, 59 insertions(+), 4 deletions(-)
>
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index b902948b121f..d51c8bfb32e3 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>  }
>  EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
>  
> +/*
> + * Try to get a locked reference on a memdev's CXL port topology
> + * connection. Be careful to observe when cxl_mem_probe() has deposited
> + * a probe deferral awaiting the arrival of the CXL root driver
> +*/
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
> +{
> +	struct cxl_port *endpoint;
> +	int rc = -ENXIO;
> +
> +	device_lock(&cxlmd->dev);
> +	endpoint = cxlmd->endpoint;
> +	if (!endpoint)
> +		goto err;
> +
> +	if (IS_ERR(endpoint)) {
> +		rc = PTR_ERR(endpoint);
> +		goto err;
> +	}
> +
> +	device_lock(&endpoint->dev);
> +	if (!endpoint->dev.driver)
> +		goto err_endpoint;
> +
> +	return endpoint;
> +
> +err_endpoint:
> +	device_unlock(&endpoint->dev);
> +err:
> +	device_unlock(&cxlmd->dev);
> +	return ERR_PTR(rc);
> +}
> +EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
> +
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint)
> +{
> +	device_unlock(&endpoint->dev);
> +	device_unlock(&cxlmd->dev);
> +}
> +EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
> +
>  static void sanitize_teardown_notifier(void *data)
>  {
>  	struct cxl_memdev_state *mds = data;
> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
> index d66c6349ed2d..3c6b896c5f65 100644
> --- a/drivers/cxl/core/port.c
> +++ b/drivers/cxl/core/port.c
> @@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev *cxlmd,
>  		 */
>  		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
>  			dev_name(dport_dev));
> -		return -ENXIO;
> +		return -EPROBE_DEFER;
>  	}
>  
>  	parent_port = find_cxl_port(dparent, &parent_dport);
> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
> index f76af75a87b7..383a6f4829d3 100644
> --- a/drivers/cxl/mem.c
> +++ b/drivers/cxl/mem.c
> @@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
>  		return rc;
>  
>  	rc = devm_cxl_enumerate_ports(cxlmd);
> -	if (rc)
> +	if (rc) {
> +		cxlmd->endpoint = ERR_PTR(rc);
>  		return rc;
> +	}
>  
>  	parent_port = cxl_mem_find_port(cxlmd, &dport);
>  	if (!parent_port) {
>  		dev_err(dev, "CXL port topology not found\n");
> -		return -ENXIO;
> +		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
> +		return -EPROBE_DEFER;
>  	}
>  
>  	if (resource_size(&cxlds->pmem_res) && IS_ENABLED(CONFIG_CXL_PMEM)) {
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 0abe66490ef5..2cf4837ddfc1 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -65,8 +65,16 @@ void efx_cxl_init(struct efx_nic *efx)
>  	}
>  
>  	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
> -	if (IS_ERR(cxl->cxlmd))
> +	if (IS_ERR(cxl->cxlmd)) {
>  		pci_info(pci_dev, "CXL accel memdev creation failed");
> +		return;
> +	}
> +
> +	cxl->endpoint = cxl_acquire_endpoint(cxl->cxlmd);
> +	if (IS_ERR(cxl->endpoint))
> +		pci_info(pci_dev, "CXL accel acquire endpoint failed");
> +
> +	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);

there is no need to invoke cxl_release_endpoint() if cxl_acquire_endpoint() failed. right?


>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index 442ed9862292..701910021df8 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -29,4 +29,7 @@ int cxl_await_media_ready(struct cxl_dev_state *cxlds);
>  
>  struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>  				       struct cxl_dev_state *cxlds);
> +
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint);
>  #endif



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.10])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id DF88522309;
	Tue, 16 Jul 2024 06:06:57 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=198.175.65.10
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721110020; cv=fail; b=bh4+5lxA8GtQySXDU8J92azLKP7cN7Aye78v97UIRgcozJQ/PLdZmBeeRrT5PAvpol6KMHf/CeklEONbfKGT3c4RAyD3DdbWp7iTiF0ksBlBQ/q2L2Y1AnAfcHSBqDiUyB+xzMvh6BDYZAPdcGjUAGbEEZIED4mDnAL0yt+Bp3U=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721110020; c=relaxed/simple;
	bh=Yt2ZXH3Xw8Ha2LRAzjaU8xKnurvHvbyuK7Lk/9MpwmE=;
	h=Message-ID:Date:Subject:To:CC:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=meLKCqFFog8dayzFbea9SyrmzNhqxlmfgd5AfGAhCxNi5fSi2AYiyht2Kvsr1/sXIbv8rVVPBKRV9DuMdYOYjlC4VDlRVz+CJl/wQh7q/cKFVsP+RPQfwDfyIeXH3g6ev296U9YbtaCFIUoKkjBgKm4QaSrWEHL1iz2h5hJilg4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=VnfEq32O; arc=fail smtp.client-ip=198.175.65.10
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="VnfEq32O"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721110018; x=1752646018;
  h=message-id:date:subject:to:cc:references:from:
   in-reply-to:content-transfer-encoding:mime-version;
  bh=Yt2ZXH3Xw8Ha2LRAzjaU8xKnurvHvbyuK7Lk/9MpwmE=;
  b=VnfEq32ORs8y9JHhQwIZdK2FDL3l9OUwgekaP788RVaxcCJ0TsUdin5x
   1XQtKJwmEHCcS0t26v//+UlewXI4wEpcBjGIH4/JTtjA5UoX1UL/Gv93T
   CbNdB+oKNobvdTh2qzotpx2Ty0LbJPhKG9gU9iLvYvSsNEQvonegepirH
   fqjV0tsV2cvTDf/Glc02IfQ8XLDHo+MopQGduvyl8Z7CxCErNZI0/Ulq3
   CYZJlU81tuUj1G2BkvpAhQAm0Y/g2vAyU/TtQGjwVkClJPeH7Ivqliu3J
   frulL2xd6fIruIFCQKghZ/UbicOJODajeHyjCZTRa1Qo/jvay/u6lfRZ0
   g==;
X-CSE-ConnectionGUID: G4B0MWGrSaKkmEDiyiyL1g==
X-CSE-MsgGUID: gsYBHpdITc6FIgvifodjDA==
X-IronPort-AV: E=McAfee;i="6700,10204,11134"; a="35958344"
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="35958344"
Received: from fmviesa007.fm.intel.com ([10.60.135.147])
  by orvoesa102.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 15 Jul 2024 23:06:55 -0700
X-CSE-ConnectionGUID: jCu0wPK1Rq6/b7hUJMqXuQ==
X-CSE-MsgGUID: 0+pzlXYGSNmNzBkiV0wlbQ==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="49725214"
Received: from fmsmsx601.amr.corp.intel.com ([10.18.126.81])
  by fmviesa007.fm.intel.com with ESMTP/TLS/AES256-GCM-SHA384; 15 Jul 2024 23:06:55 -0700
Received: from fmsmsx602.amr.corp.intel.com (10.18.126.82) by
 fmsmsx601.amr.corp.intel.com (10.18.126.81) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39; Mon, 15 Jul 2024 23:06:54 -0700
Received: from fmsedg601.ED.cps.intel.com (10.1.192.135) by
 fmsmsx602.amr.corp.intel.com (10.18.126.82) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 23:06:54 -0700
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (104.47.55.44) by
 edgegateway.intel.com (192.55.55.70) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.39; Mon, 15 Jul 2024 23:06:54 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=iSzUo15GmgR+SSMnz0IY6IxZ9wKyIQTc40RL2Eaml7QyPMB/OnGenWd9BjOYURqs5rXWfQ2Jb45qtyqPnafkoKcOyowR8UrZas67xZKQqY2FZG4KrFcipD6PSLLJZy+7/fzdNIsTvxjRCDTZ7jmN7ckPELb72Xs7Gzh7PLx6uKMda2c+RlPE1pjXnCOJYzMJ7wq3LCRj15NDqJ1ColUP0yRGI8VjGcysZvYmvFLXH57eReA4/bi1xyGQG/uBItMSZCb7euKNiREM39w8ob9aFsh0TldDiRt6iXVVLMCx5oNcoyeTFKBAuwmaDM/+snsgEpvM2jYmiRCPkIbTRd0oNA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=wje6hhcaAh0xdrEHNg+42H6hmk7K/qPV3w0pe2qXkJY=;
 b=qRC5Pglrqwp+rdrSF4JoSZs4rehpG9Pj3uicZHNqJrmwycN66mcHaIPEcx5mzjipb1JS9DOwWNQjp/oHRhaIaTAFoWximXLe6+xgKaDt/C9ZCn0rVJ14UgZ1HorE8QdfeLeAfrXPLaAxrslhWYzzx0AnpVrA76ODAKjYcYvjsaC+VHFPa6pa/Emw/TsAWrgIOx0GSJobt8xx9eoy9bJH/SS2KDcxueknzbndiTgVqCWgcjlI9Plj2fb7Izyu8hbeJKe43SV2F0llwCA3WSHTM9x94l5osjeFBomskgQ9lTcGGNcQveanxk/QDawbUINTzIs41zkQRiT7sV7/Q2JjlA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from IA1PR11MB7200.namprd11.prod.outlook.com (2603:10b6:208:42f::11)
 by MW3PR11MB4667.namprd11.prod.outlook.com (2603:10b6:303:53::10) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.29; Tue, 16 Jul
 2024 06:06:52 +0000
Received: from IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0]) by IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0%5]) with mapi id 15.20.7762.027; Tue, 16 Jul 2024
 06:06:52 +0000
Message-ID: <73311003-6b8e-4140-935a-55bd63a723e6@intel.com>
Date: Tue, 16 Jul 2024 14:06:41 +0800
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
To: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
Content-Language: en-US
From: "Li, Ming4" <ming4.li@intel.com>
In-Reply-To: <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: SI2PR02CA0027.apcprd02.prod.outlook.com
 (2603:1096:4:195::14) To IA1PR11MB7200.namprd11.prod.outlook.com
 (2603:10b6:208:42f::11)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: IA1PR11MB7200:EE_|MW3PR11MB4667:EE_
X-MS-Office365-Filtering-Correlation-Id: 94155970-5960-4067-3522-08dca55d7cbc
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|7416014|376014|1800799024|366016|921020;
X-Microsoft-Antispam-Message-Info: =?utf-8?B?REZISzNvZkxrRHV4TTZnWWNkUzE1WHU1eEp3SjJyM2RaRVdwdmdBeVNyZ1NB?=
 =?utf-8?B?aHZoTVVLaVV2Q1cvOEpKS0o0K0kzdlh5WGxxVEFCN3ZtRGd2OWNlbGlEU0FG?=
 =?utf-8?B?TldzK0NUR0hCcWg0SXgyZXB5b1pXRlh0eUVxdXVmZUxiNHFqZFlaNEdpdnlW?=
 =?utf-8?B?MHhySnpFY1M2QXhrbVlFVlpmaWJMN0c1djQ4YUgxc2ovc2RPV0JWYy9VcTdk?=
 =?utf-8?B?VnBtU2tjZEluL1pjQm9GemxqeFRKU05waHRiUjg1OTZaSHM1RXNoY1BNaC93?=
 =?utf-8?B?WFF4bmwweTJ4cjJ2TUtlcFhpaXRYaTBRTVQyY0NkZjlOS0ZxZW1EZjJKK3Z0?=
 =?utf-8?B?UkJpZnFpazh6MUsvYjNoTzdQcjZRQi9lMk5kM3NCSS9iQkd3K2VZZ1pqcm5K?=
 =?utf-8?B?M2NIdFhYdGwvUFJ1S2tyOHUySkZoUjZBN0o3alp2ZkdodmFZQ3ZmUUNjMlF5?=
 =?utf-8?B?a2JWOWJPVTQvZHVKM09tK2hFbHB5R29RUHFGL3V0bDlncXFyczI4K1lBcE16?=
 =?utf-8?B?dnd1aVNuak5jejRCcGVUblZIcW96ektGMzBLVW5WenhLWFB5QUYrYU1WcHRk?=
 =?utf-8?B?aDhFMk1xbnduS20yRnJGdk1WVXZheHVrSW01MDVYKzFFNmd2TmlWOTQ5NzVh?=
 =?utf-8?B?Yzl1RFJaUkM1T3d3RDI0YnhDN1hKMVlwMTJlVndCUXhtR3BLcDJsWDhUek94?=
 =?utf-8?B?b2h2R1lwckp5V09RcG5aYnI1eW5QSW9JMjMwYXAzdGNIOFdFVU1DQjdqcUQ3?=
 =?utf-8?B?eHBLbEM1TmNYS1BmRXRuczJTKzJpQjYyYm1vWnNsK2ErMitPaVFvTUdKRWdv?=
 =?utf-8?B?UHV6UklqMi9tVWZpeFhUVVkxTE9IS3A5eStpeFY5V25PUTRmdGFaYzlMNkxG?=
 =?utf-8?B?SnpRMS9KT2poNWJseWtJdEJ0cW5GMjR6Y0cxNGhpeDRUWFZXT0lObHdkTXNm?=
 =?utf-8?B?bHpPeDJjd2dZMkJMY1pVdEFML1ZkY1VVTlAvR2hoWU12amlCMXFZaU5uRHIy?=
 =?utf-8?B?V1Z1MS9PY05HYzRFZ2dyVklhOE9CbXBMUlFQRjl4NlZENGlnalJ1YTAzUTMx?=
 =?utf-8?B?N1NIdkZyNnZUQm9ObWZXNW4yVHVRUlQwK3BLNnFzK1J0QU4xdWpqK3NPREFr?=
 =?utf-8?B?cEFVU1BaNDNHejAreksrZExYRG83RDFZb283LzQwSFBTZUxuNnJieDFDOTRF?=
 =?utf-8?B?VTk2WlBzMGFkbTZhTkpzYUdhaCtUeU9Pb2o3OUFaK2lydy84Q0F2bWtBdkw2?=
 =?utf-8?B?dmk2bVcrZ2QrbnZzQ0ZqNHVRbENQbE9SdDA0c0dVYWpkeVU0QS9UZmZYVklB?=
 =?utf-8?B?QjJ3aXVPSlJCbUJDWUE4QVNGRHd3d2FtMUdJRmhLR3BVWEtwaXFCUkl3L1BO?=
 =?utf-8?B?VWVzK2ZrdlhQQjN3RGM0VW5RT2diNFkvS2JEcVIzT3dPcG0vaGFjZk1ZUzdN?=
 =?utf-8?B?QS9JWHpQMEFGdHhWTmo4SE1NYVRQTGdyR0w2RUdTempBZS9QNFZMMjhjdXl4?=
 =?utf-8?B?SERrTHZlUVMva3l2OS9ZWUl2bG9nckphdlRZaDZlN0FxNkhUTExCT1RTTnJL?=
 =?utf-8?B?Y3NSYnBsWWQxYlkrQkNoOE5LeXd6M0R1VmMrMlZ4SUpwODZsdSsyVXdtVnYw?=
 =?utf-8?B?b0lCcmQ5YU5WOWgwTlNpN0E2WFROUHkzbG9uN3VxVWlDdTlKNXRpb0kyWGI0?=
 =?utf-8?B?TnZWNlBkQW5FRktMaFNZTC9RT0tIRUFvTmM4aVU2blZtbC9iZGhFU2NNUnAx?=
 =?utf-8?B?ZzVvVnVjdEpnRDFnSWJuK0l6ajcvdDExZUdmVkRrODA4MnVsUWFQN3ovY3JH?=
 =?utf-8?B?Sis2VHBXRFZIUkdrUitkZz09?=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:IA1PR11MB7200.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(7416014)(376014)(1800799024)(366016)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?utf-8?B?WnlsVXRQSGtaMUFnVTlDdFZZUlNRZHpHVFZFNXcwODdtTFkvVG13SXVzbzNK?=
 =?utf-8?B?aW1tM2F3QWdLWnVPcnA0VEJzOVZrRktxM3FlelpWKzJZWVkzaDBELys2VEkr?=
 =?utf-8?B?VlVkd3ZuTEJ5WmdJK3ArdTlNcXFid3JDMmlpajVvQU1yU21PR0I1OXJKQWVV?=
 =?utf-8?B?UEVzWG9VcG5DRWI3VGlVNUVQdm1IL1BvY21tcXZLQURTS3c2cWtmYUg1dzBk?=
 =?utf-8?B?NTExaFljaW0weVI4NEcrdUFPWUM3MUxJT0RsRHpXanRYSUM5QXJ3SjZzdG5t?=
 =?utf-8?B?TDJiUmY5bnlYelYrT1h5RmFKdUJjdVA3ZVY2U3NvbmsvREk5bUZVVG0wNU1v?=
 =?utf-8?B?MVFIR0FVK0NSYldIRjlGdUdMY0Y1L2VKY0RNaHlrT1p6dnRRRXhGUjl2UjVK?=
 =?utf-8?B?MC9JY05BVFRpOGxwRDBrUVNET1NyN0s3SFVTS2NGdDYrT2g1TWtBOGFYeUxr?=
 =?utf-8?B?RzVxS1hoS1lqT3JkQ2EvN3dacmVVeGJyK1YzK2NvbmVPYnEzQTFMOTljUEM2?=
 =?utf-8?B?Z29zWWdhcm9VcWkxdUhjRWxxSWg1MC94SGdIODhZdDlPYXY0SEIwc2ZLQlo4?=
 =?utf-8?B?VFc1eG12bzc5b1ZNbkFjbmFFOW1KMEJEQmpSM2kyVmdnWk1DY0VycUxVcWNm?=
 =?utf-8?B?bG9FcHdsRUU2c2w3VldsL3pSZ0dLQStiUzNabWFkOXJRaTB5QjhNUkpBZkNB?=
 =?utf-8?B?S3h3ZEtzdjFtSzBhOUVtSTF4MFJxTDBJa3RmaW1QY1FUeHVOLzNzeGRHWUMx?=
 =?utf-8?B?UjdqdTlHK1dINHFJV1E3WktFUU9JN3orWXViU1JsdEdtNmRvR3hDUllLNWxt?=
 =?utf-8?B?bk5jTkZNR1pZRzlUbGMxdCtHdVBWMkJSUnVCc3JlUnF3Y3ZQdG9HVjBKb0Fv?=
 =?utf-8?B?MjNYM1B4WnFXZU1CYVBBbVpLZmZOUlNweWxYR1BGVUt4dHI2TWpUN0R4S25k?=
 =?utf-8?B?Mkszd2NvMytBTGxJdnA1ZlNOcVNTOUxrVnVQN0d3QmJQRzlCQlJ1NjhpNGor?=
 =?utf-8?B?dm9Ka3VJZ0dRdWhFTnRHTmJLUGw1bUd2MGFyZW94QkhKS0tGbmxxc3EvQ25p?=
 =?utf-8?B?bmwyT2R6VGdYZHphM2MzUFVUK0h4QlpaYWVFRkpPdUY1KzVQZjY4Sk50OHNL?=
 =?utf-8?B?dVFhWE44eGMwYUJ5Y2pyakVsdVBSVnBQZDd6TGs4RDlXbmZhSTBzb25wQUx3?=
 =?utf-8?B?V05QR0sraU51UVhqYXpYeDFxRE43enlEbzJidm12MG81TVhVc0FFdEw4RVpO?=
 =?utf-8?B?VjV0RG9aalBTcWdaNDE0QnIrcHYzbXdaTmFFeWM2UDB2QmppR3JLUTg3Y0lr?=
 =?utf-8?B?YXdYbzVVblU2amtOVDIxZlYvVzh6SkZVUXBiODU4dkp4N1NLdU1KUkI3WmlG?=
 =?utf-8?B?UFNWdHFNU0wyMDdrNkNZa1hSM0xOZjF1dVZkT3ZrMWIvN0F0QWdMamVGSG1m?=
 =?utf-8?B?d1luSGcxSmVySW9ZV2lndFB6anNPUVREaC9OaGhiK3ZrYTExdjNxMWdreHR3?=
 =?utf-8?B?czhpRXU0ZGZqdnB5VFNnVmFxV3Yxdm8rTS9mL3BQWjNqY2MvbmpVNW1SK1J0?=
 =?utf-8?B?Z1RZckFxclkwbW4rNzd1REp1NlRid1g4Q0JHdTJCSW1wc0dNSURIUjY5Zitj?=
 =?utf-8?B?cUxpQ01FemhFTnpYa0N1dkJjV1cvbUZpeFAwaWltenJicVFMNHVQMHNNYlRN?=
 =?utf-8?B?aThlK3QrUVg0RnVCVXp5eXA3Qmh6R0ZuSmRQY0VKMERZM3FSekUyTmpCckFD?=
 =?utf-8?B?VC9LZlZGOTVEcDNLSnRaV0FiOFNEd0l1dktnN01DWVJmdnMycGlJZXdVb2xR?=
 =?utf-8?B?Z01ObEFVbkphQ1BDMmZwaVdoTmo0MDl1a093REVHZndyNUUyOFVDLzloSTJM?=
 =?utf-8?B?WGI3bDF5M1FPQUlsQzJHc0dsQnNpR0NBcXBGUGN5S0RvOVdSZGdyYzUzNXJk?=
 =?utf-8?B?VjZKaEI3RVpJbzF3djg2LzlLTnRRelliNm5sM1ZXZGZkWk03cXRMV2c5eTUy?=
 =?utf-8?B?ZXV5OHhaYUZXZ1BwRVk3WnByUnBnUDNDL0JEMGtmR1pldVhWTVEwckFRK293?=
 =?utf-8?B?S05POENONmwvVzczNG41SUxJak9RR1MyVHpQNDR6R1VuRzlTczczaE5sLzRv?=
 =?utf-8?Q?GMViENVCXbrPolh0nJRkHEh+O?=
X-MS-Exchange-CrossTenant-Network-Message-Id: 94155970-5960-4067-3522-08dca55d7cbc
X-MS-Exchange-CrossTenant-AuthSource: IA1PR11MB7200.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jul 2024 06:06:52.6077
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: TGvJq4JWcJiedmp7sI7S7tV+PTzFJbFlK7A6a/1j0iMvCdBKnAG2WlyhBeCnARcAWPRdOOSft/AWpITj8/G7Sw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MW3PR11MB4667
X-OriginatorOrg: intel.com

On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
>
> CXL region creation involves allocating capacity from device DPA
> (device-physical-address space) and assigning it to decode a given HPA
> (host-physical-address space). Before determining how much DPA to
> allocate the amount of available HPA must be determined. Also, not all
> HPA is create equal, some specifically targets RAM, some target PMEM,
> some is prepared for device-memory flows like HDM-D and HDM-DB, and some
> is host-only (HDM-H).
>
> Wrap all of those concerns into an API that retrieves a root decoder
> (platform CXL window) that fits the specified constraints and the
> capacity available for a new region.
>
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95c8acdc347345b4f
>
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/region.c          | 161 +++++++++++++++++++++++++++++
>  drivers/cxl/cxl.h                  |   3 +
>  drivers/cxl/cxlmem.h               |   5 +
>  drivers/net/ethernet/sfc/efx_cxl.c |  14 +++
>  include/linux/cxl_accel_mem.h      |   9 ++
>  5 files changed, 192 insertions(+)
>
> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
> index 538ebd5a64fd..ca464bfef77b 100644
> --- a/drivers/cxl/core/region.c
> +++ b/drivers/cxl/core/region.c
> @@ -702,6 +702,167 @@ static int free_hpa(struct cxl_region *cxlr)
>  	return 0;
>  }
>  
> +
> +struct cxlrd_max_context {
> +	struct device * const *host_bridges;
> +	int interleave_ways;
> +	unsigned long flags;
> +	resource_size_t max_hpa;
> +	struct cxl_root_decoder *cxlrd;
> +};
> +
> +static int find_max_hpa(struct device *dev, void *data)
> +{
> +	struct cxlrd_max_context *ctx = data;
> +	struct cxl_switch_decoder *cxlsd;
> +	struct cxl_root_decoder *cxlrd;
> +	struct resource *res, *prev;
> +	struct cxl_decoder *cxld;
> +	resource_size_t max;
> +	int found;
> +
> +	if (!is_root_decoder(dev))
> +		return 0;
> +
> +	cxlrd = to_cxl_root_decoder(dev);
> +	cxld = &cxlrd->cxlsd.cxld;
> +	if ((cxld->flags & ctx->flags) != ctx->flags) {
> +		dev_dbg(dev, "find_max_hpa, flags not matching: %08lx vs %08lx\n",
> +			      cxld->flags, ctx->flags);
> +		return 0;
> +	}
> +
> +	/* A Host bridge could have more interleave ways than an
> +	 * endpoint, couldn´t it?
> +	 *
> +	 * What does interleave ways mean here in terms of the requestor?
> +	 * Why the FFMWS has 0 interleave ways but root port has 1?
> +	 */
> +	if (cxld->interleave_ways != ctx->interleave_ways) {
> +		dev_dbg(dev, "find_max_hpa, interleave_ways  not matching\n");
> +		return 0;
> +	}
> +
> +	cxlsd = &cxlrd->cxlsd;
> +
> +	guard(rwsem_read)(&cxl_region_rwsem);
> +	found = 0;
> +	for (int i = 0; i < ctx->interleave_ways; i++)
> +		for (int j = 0; j < ctx->interleave_ways; j++)
> +			if (ctx->host_bridges[i] ==
> +					cxlsd->target[j]->dport_dev) {
> +				found++;
> +				break;
> +			}
> +
> +	if (found != ctx->interleave_ways) {
> +		dev_dbg(dev, "find_max_hpa, no interleave_ways found\n");
> +		return 0;
> +	}
> +
> +	/*
> +	 * Walk the root decoder resource range relying on cxl_region_rwsem to
> +	 * preclude sibling arrival/departure and find the largest free space
> +	 * gap.
> +	 */
> +	lockdep_assert_held_read(&cxl_region_rwsem);
> +	max = 0;
> +	res = cxlrd->res->child;
> +	if (!res)
> +		max = resource_size(cxlrd->res);
> +	else
> +		max = 0;
> +
> +	for (prev = NULL; res; prev = res, res = res->sibling) {
> +		struct resource *next = res->sibling;
> +		resource_size_t free = 0;
> +
> +		if (!prev && res->start > cxlrd->res->start) {
> +			free = res->start - cxlrd->res->start;
> +			max = max(free, max);
> +		}
> +		if (prev && res->start > prev->end + 1) {
> +			free = res->start - prev->end + 1;
> +			max = max(free, max);
> +		}
> +		if (next && res->end + 1 < next->start) {
> +			free = next->start - res->end + 1;
> +			max = max(free, max);
> +		}
> +		if (!next && res->end + 1 < cxlrd->res->end + 1) {
> +			free = cxlrd->res->end + 1 - res->end + 1;
> +			max = max(free, max);
> +		}
> +	}
> +
> +	if (max > ctx->max_hpa) {
> +		if (ctx->cxlrd)
> +			put_device(CXLRD_DEV(ctx->cxlrd));
> +		get_device(CXLRD_DEV(cxlrd));
> +		ctx->cxlrd = cxlrd;
> +		ctx->max_hpa = max;
> +		dev_info(CXLRD_DEV(cxlrd), "found %pa bytes of free space\n", &max);
> +	}
> +	return 0;
> +}
> +
> +/**
> + * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
> + * @endpoint: an endpoint that is mapped by the returned decoder
> + * @interleave_ways: number of entries in @host_bridges
> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
> + * @max: output parameter of bytes available in the returned decoder
> + *
> + * The return tuple of a 'struct cxl_root_decoder' and 'bytes available (@max)'
> + * is a point in time snapshot. If by the time the caller goes to use this root
> + * decoder's capacity the capacity is reduced then caller needs to loop and
> + * retry.
> + *
> + * The returned root decoder has an elevated reference count that needs to be
> + * put with put_device(cxlrd_dev(cxlrd)). Locking context is with
> + * cxl_{acquire,release}_endpoint(), that ensures removal of the root decoder
> + * does not race.
> + */
> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
> +					       int interleave_ways,
> +					       unsigned long flags,
> +					       resource_size_t *max)
> +{
> +
> +	struct cxlrd_max_context ctx = {
> +		.host_bridges = &endpoint->host_bridge,
> +		.interleave_ways = interleave_ways,
> +		.flags = flags,
> +	};
> +	struct cxl_port *root_port;
> +	struct cxl_root *root;
> +
> +	if (!is_cxl_endpoint(endpoint)) {
> +		dev_dbg(&endpoint->dev, "hpa requestor is not an endpoint\n");
> +		return ERR_PTR(-EINVAL);
> +	}
> +
> +	root = find_cxl_root(endpoint);

Could use scope-based resource management  __free() here to drop below put_device(&root_port->dev);

e.g. struct cxl_root *cxl_root __free(put_cxl_root) = find_cxl_root(endpoint);


> +	if (!root) {
> +		dev_dbg(&endpoint->dev, "endpoint can not be related to a root port\n");
> +		return ERR_PTR(-ENXIO);
> +	}
> +
> +	root_port = &root->port;
> +	down_read(&cxl_region_rwsem);
> +	device_for_each_child(&root_port->dev, &ctx, find_max_hpa);
> +	up_read(&cxl_region_rwsem);
> +	put_device(&root_port->dev);
> +
> +	if (!ctx.cxlrd)
> +		return ERR_PTR(-ENOMEM);
> +
> +	*max = ctx.max_hpa;
> +	return ctx.cxlrd;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_get_hpa_freespace, CXL);
> +
> +
>  static ssize_t size_store(struct device *dev, struct device_attribute *attr,
>  			  const char *buf, size_t len)
>  {
> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
> index 9973430d975f..d3fdd2c1e066 100644
> --- a/drivers/cxl/cxl.h
> +++ b/drivers/cxl/cxl.h
> @@ -770,6 +770,9 @@ struct cxl_decoder *to_cxl_decoder(struct device *dev);
>  struct cxl_root_decoder *to_cxl_root_decoder(struct device *dev);
>  struct cxl_switch_decoder *to_cxl_switch_decoder(struct device *dev);
>  struct cxl_endpoint_decoder *to_cxl_endpoint_decoder(struct device *dev);
> +
> +#define CXLRD_DEV(cxlrd) &cxlrd->cxlsd.cxld.dev
> +
>  bool is_root_decoder(struct device *dev);
>  bool is_switch_decoder(struct device *dev);
>  bool is_endpoint_decoder(struct device *dev);
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index 8f2a820bd92d..a0e0795ec064 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -877,4 +877,9 @@ struct cxl_hdm {
>  struct seq_file;
>  struct dentry *cxl_debugfs_create_dir(const char *dir);
>  void cxl_dpa_debug(struct seq_file *file, struct cxl_dev_state *cxlds);
> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
> +					       int interleave_ways,
> +					       unsigned long flags,
> +					       resource_size_t *max);
> +
>  #endif /* __CXL_MEM_H__ */
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 2cf4837ddfc1..6d49571ccff7 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -22,6 +22,7 @@ void efx_cxl_init(struct efx_nic *efx)
>  {
>  	struct pci_dev *pci_dev = efx->pci_dev;
>  	struct efx_cxl *cxl = efx->cxl;
> +	resource_size_t max = 0;
>  	struct resource res;
>  	u16 dvsec;
>  
> @@ -74,6 +75,19 @@ void efx_cxl_init(struct efx_nic *efx)
>  	if (IS_ERR(cxl->endpoint))
>  		pci_info(pci_dev, "CXL accel acquire endpoint failed");
>  
> +	cxl->cxlrd = cxl_get_hpa_freespace(cxl->endpoint, 1,
> +					    CXL_DECODER_F_RAM | CXL_DECODER_F_TYPE2,
> +					    &max);
> +
> +	if (IS_ERR(cxl->cxlrd)) {
> +		pci_info(pci_dev, "CXL accel get HPA failed");
> +		goto out;
> +	}
> +
> +	if (max < EFX_CTPIO_BUFFER_SIZE)
> +		pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
> +				  max, EFX_CTPIO_BUFFER_SIZE);
> +out:
>  	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>  }
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index 701910021df8..f3e77688ffe0 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -6,6 +6,10 @@
>  #ifndef __CXL_ACCEL_MEM_H
>  #define __CXL_ACCEL_MEM_H
>  
> +#define CXL_DECODER_F_RAM   BIT(0)
> +#define CXL_DECODER_F_PMEM  BIT(1)
> +#define CXL_DECODER_F_TYPE2 BIT(2)
> +
>  enum accel_resource{
>  	CXL_ACCEL_RES_DPA,
>  	CXL_ACCEL_RES_RAM,
> @@ -32,4 +36,9 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>  
>  struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
>  void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint);
> +
> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
> +					       int interleave_ways,
> +					       unsigned long flags,
> +					       resource_size_t *max);
>  #endif



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [192.198.163.15])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 2063E1862C;
	Tue, 16 Jul 2024 06:27:16 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=192.198.163.15
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721111239; cv=fail; b=gZsvb8z4SWaXt5Mojoc8h4y8HeBFLFU+WXxCzCsZGuPsmJ9n0wK2Y/yNsWYb2LE/hUHaOjOtktGVciHN7mYek3L2pj354SWbLojc+38hhnYsB798gXaVUHvnDr4zJQKft1MJnSIES5Z6xGHUdtfU8aeXkm4/Zt/sMbFXcJ1cpX8=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721111239; c=relaxed/simple;
	bh=10XxLXijEy7CUSO6VN4N+UH/A4UgxqVIlrmZLLw10mg=;
	h=Message-ID:Date:Subject:To:CC:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Mez+VixpI9cZDCjkwsicW9tpYN2UMifdndQisyNKarpgA77FcTGZe/szK5y4DmdpLaDVKGdkq7V4dVGy8LaqJnYXGp+PUQqGZny+WqKUCVkIFCDnD7+HNfCQQvyHKlTOMrs/LZFcBfNrbNvoQ3DcSNse70pnlAvsPI8ePpI3WYc=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=VseL8GFc; arc=fail smtp.client-ip=192.198.163.15
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="VseL8GFc"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721111237; x=1752647237;
  h=message-id:date:subject:to:cc:references:from:
   in-reply-to:content-transfer-encoding:mime-version;
  bh=10XxLXijEy7CUSO6VN4N+UH/A4UgxqVIlrmZLLw10mg=;
  b=VseL8GFc+MNtAKoRfyR22POyOrBvQHYUtJn+zVj+eTptL++vNRIIO5Vh
   KV/4rbztQZff9l5vcIovzMvqi7bRA0HwzCuy/zBZuErPZhBiD/EBfFlv2
   GmqfJkUIMiFt3RNbxmiUzKV6Pj7Mk/WvESjvmwO+UCfpuWHNFOxR0JY2B
   b/1LreT8Coa7faMX9ME7kkR0Qp4Qbx3pjDswnvUhRBpvdyIKlutooaQVh
   zfCLy7FatHbEJKIhTir353o4lo2fOal3tOA7WN2HNQEaaiYqPfT66ERGd
   NKsRkpJMCNT5ah2Ix6UAd2gPrcYoWzJNAadWDF4wVuConOdsuyGCgnWg8
   g==;
X-CSE-ConnectionGUID: 2TPvKe0BRHyD+v34TURB5A==
X-CSE-MsgGUID: DnxwpkqxS0CWbAMSzGUbuw==
X-IronPort-AV: E=McAfee;i="6700,10204,11134"; a="18679226"
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="18679226"
Received: from fmviesa009.fm.intel.com ([10.60.135.149])
  by fmvoesa109.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 15 Jul 2024 23:27:14 -0700
X-CSE-ConnectionGUID: RYxLauNlRJCdqufe1+TwWA==
X-CSE-MsgGUID: IjoV55qKTnaR+WRPzKL25g==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="49825151"
Received: from orsmsx602.amr.corp.intel.com ([10.22.229.15])
  by fmviesa009.fm.intel.com with ESMTP/TLS/AES256-GCM-SHA384; 15 Jul 2024 23:27:14 -0700
Received: from orsmsx612.amr.corp.intel.com (10.22.229.25) by
 ORSMSX602.amr.corp.intel.com (10.22.229.15) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39; Mon, 15 Jul 2024 23:27:13 -0700
Received: from orsmsx610.amr.corp.intel.com (10.22.229.23) by
 ORSMSX612.amr.corp.intel.com (10.22.229.25) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39; Mon, 15 Jul 2024 23:27:12 -0700
Received: from orsedg603.ED.cps.intel.com (10.7.248.4) by
 orsmsx610.amr.corp.intel.com (10.22.229.23) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Mon, 15 Jul 2024 23:27:12 -0700
Received: from NAM02-DM3-obe.outbound.protection.outlook.com (104.47.56.41) by
 edgegateway.intel.com (134.134.137.100) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.39; Mon, 15 Jul 2024 23:27:12 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Wl0RULRO2FdEnoAlfB2FL/ctz8hcbewyva7M8f2OxhjpBGyYSLXA5zJwztgJ9W5aBQHRDcRrEKB5ZhJq67Bf9om0Lr/iZrN+vKwQr6O8MdRM88ufL5E0eXEuB8Jn/9KdjIr8SYH9JY/yblt5OgPvD0gGqIN3CBfWvOb1nkCmGznnwQVvJ76dWFJgNEjJUDgfAHWlXsfynjTm82E7UKhAw115wlD2ZYChAj8T3sTBkj8xDF71J+UjDTBC9XqpyYbR8RzrOFCb05zIsYui/fyeWA3Obf3JrKK2246xlqQLwkIqD0N0bQWwTC/H8gXmMPJM87AeGk1k8sVlprqH1NAvhg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=xzuWnIuquulskHeuth31UreCSp+OzbPrShJ/L6Ha9/U=;
 b=q7kvAF3SF+2LH2XtqSScrN/N8GDanZLjWU9phfBHEoRaJg+qVQsWyRRQtP7gu6/vXM2R8qGakpZCa9FdKLFB3rn659RAOL8uK1b5e/rAxBAMWWyILacobaWx1j9fF1KDy6jEuxE83igYyLO0wTpNSGcBM4k0L+tDD9BBD6EPcNpnf1bIrBrAa4D4xZoJYDee38yY5vz01ZwucsWR9gXAuIgRIXgeGX1vo3mdvVGieGSTp0oAWU5FyFxuz2kJ9QSR804eDOQ64WStRWpsYTPg4VEiBUWo/0IGPX3qnaEEbEkxxKZKSInl1qS3cUzitg0FCrGxRTtH01cvA1mAUmUl/A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from IA1PR11MB7200.namprd11.prod.outlook.com (2603:10b6:208:42f::11)
 by CY8PR11MB7314.namprd11.prod.outlook.com (2603:10b6:930:9d::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.28; Tue, 16 Jul
 2024 06:27:04 +0000
Received: from IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0]) by IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0%5]) with mapi id 15.20.7762.027; Tue, 16 Jul 2024
 06:27:04 +0000
Message-ID: <da346636-a458-4ec3-a065-6ce56a985573@intel.com>
Date: Tue, 16 Jul 2024 14:26:52 +0800
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
To: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
Content-Language: en-US
From: "Li, Ming4" <ming4.li@intel.com>
In-Reply-To: <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: SI2PR01CA0034.apcprd01.prod.exchangelabs.com
 (2603:1096:4:192::9) To IA1PR11MB7200.namprd11.prod.outlook.com
 (2603:10b6:208:42f::11)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: IA1PR11MB7200:EE_|CY8PR11MB7314:EE_
X-MS-Office365-Filtering-Correlation-Id: a565bd9e-fcad-4890-e60f-08dca5604f29
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|7416014|366016|376014|921020;
X-Microsoft-Antispam-Message-Info: =?utf-8?B?ZEFVWGtUV1lmaTVoM3BGdnNZWmNEaU9GZEpnTVJaVTlmRlBsR2dSTUEzV2p6?=
 =?utf-8?B?QmEvS1lQd0MvR3dmSXc0eHZZSC8xSlQwNTRFSWdvZUY3bkxOQXF0M2Q1NlpS?=
 =?utf-8?B?VFJQa2VsRkRoWlhzNEUwZVRTTmlwam1TZFpDV2x3aGRYc1RDSHd5ZzdOcXFt?=
 =?utf-8?B?VGU3UXU5dXVKbmJCd1ZOYVNJMjZJeUlGdmdkaktkVHlGN3VNNTNYajc2cGhu?=
 =?utf-8?B?bWZDS1hYWE0vS1JQeEowbGo4WDhabGdoSkRZckZGUEZ2RkdMakJabDNNN1Iy?=
 =?utf-8?B?OGN6Ylg2OUFSaW5KM0RwVXozMUx4Q0ZaQjk1OG5YRUtBdDRvUjBJRXAyTkh6?=
 =?utf-8?B?dHovV2FmTGc2SlpEV1ZBYWRPczYyZ2gwbjk2b1cxRUtJbmR1RXRSb2UrejE5?=
 =?utf-8?B?UlZhT2c2TEEwMGpMV3ZqT3RoeHQ3YUpaWmhrbXA2QWMwb2sxU1hnM0pKVVZj?=
 =?utf-8?B?T1B4aVVrY292a2RJZFdZajZPQ3NKMjJCN1F6bmFOSmk0NTdZYTdpRWRzQ0dI?=
 =?utf-8?B?TllBdmNSYjB4YlpVSjk4V0ZqOXpmc1U3akRSTS84Sk5BZ0pQdDRoOFY0OUlx?=
 =?utf-8?B?V3BoSkd1aE0yb2RRNzV1NGg2WGlUZlZZaTZGTkloWmRaT3BrWXp3M005ZFNx?=
 =?utf-8?B?SVpKRUNDTVlpbVhzSi9sd3UyUkxoR1dUajhjc0ZhNkUrWUlUemIzcFQvbG1M?=
 =?utf-8?B?azZnb1RoMWJvcHVZR2Y0VTRTRm56ZWNMTWtTNTRSVThlck1abDdSekV3cUVh?=
 =?utf-8?B?VXdncW44aC9aTDcwRDZ0aDVKSmlPWStnbWNZM1ZsV2krT3dZMnRUaGF6T2sr?=
 =?utf-8?B?Q3RqZ0l0ZExMaENhaEgwaUVYRkk4NExPTmpVOUxZV0VldWt0cE1yQ1VjZGhY?=
 =?utf-8?B?WG8wZnJDSm11UXVCUExldndTQ3RHQndQMUFEb1lXRnIyNkpRakpoZ3J3anBu?=
 =?utf-8?B?YnBRWUcvemI0c3R4SVFRbXFPSFJEVFE3UkNFSFR5Z1ZvbFNyallsajZRcU41?=
 =?utf-8?B?NFhPZncrUDdINXNRaWkrODRjTkJacjd4ZWJaTDlnenVZSHhQV0dnTmptQjJi?=
 =?utf-8?B?NXQvTTF3Rk9oU1lXRzdLZkVYM2NjNmJybVptV0NCTHFUaFZwL2FuV0cwK0tU?=
 =?utf-8?B?UDVidUFweGFtVUZwaFpsZkxsbWV1a3dnY0lsVk5INGY5cXRwa3JUNDFVR0RJ?=
 =?utf-8?B?WGhwTThPN2tpSGhEV3hoa3ZaUGNseDZQVW1kdStxblhSNlArMTFRMVhOdDFR?=
 =?utf-8?B?bVp2Vkx4S2NCZFAvWWE1bmhoNHBtL2hxdi85OERuSEpjYWhjelNlUUNCVmd4?=
 =?utf-8?B?L1YvemxkZFBkTDR6UkZDMC93VEQ2S285VjdPemU2d1VEeUxEQlU2MW9hNXd3?=
 =?utf-8?B?Z3lKMWJOTy9yYWVtOVZTTGNwZ0VXMnp3SHU0OHhDOXVVM0VobFAwSDl4M0xu?=
 =?utf-8?B?T1VaRHI3Yy9zeGVnVWJiNHZ5aFpqbS9zbHNvSnRVMTJVY2tPTGVQSjFERXNY?=
 =?utf-8?B?RXFlMXpFSkxMdGIzeWFDZzBLWWdDTEE4WTQzdTVtb1NiWC9MUVYyTmlGZHpT?=
 =?utf-8?B?SVpjQ09Ub3ZJVk1HT0xnYlg2M3R2L3Y0ekIzaFVRdmlzYktpTms0V0tydE96?=
 =?utf-8?B?Y0VDZkJvVnJxRUlyYnBHWVR0MEEzbGl6Zk9TYlc0c0NUbGM1cU1pVXl5TVFD?=
 =?utf-8?B?VjVFeWpteEpmNm1aVEJtaE5JTHZiRnJqODBuQ1FBNXVYR0hOdlNLVFU2enha?=
 =?utf-8?B?L2RvOHQrb1F4amZZWEhpODByY0V0b205T3p4RmUwQjZKN0VGTVBzNFJ3Q3hy?=
 =?utf-8?B?VzYvbitlU3VIMG5XUTVpVFlwTS96aXh5UWVSTVRjRnY4RUdrNGYvSDl1emRw?=
 =?utf-8?Q?ku4QsqmY8Z2HN?=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:IA1PR11MB7200.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(7416014)(366016)(376014)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?utf-8?B?TjhiVmgrTmxkTG4wY0FqbWw2RHJVT2VHS2s3ZDNHTU85NUZ5YXUzYnpUVWJK?=
 =?utf-8?B?bkVFQTI3Qm9mSGVQdW9nNkxnUm9EakFyQjMxSTUrOThrV0I5dkt6cXdYcEZj?=
 =?utf-8?B?UkYyc3kzWkhnZ1MxQUh2NTlBUFdWdzZIbXFiZVBPMi9LY2FzaDkyOW1ZT282?=
 =?utf-8?B?SmFuNDhKK2VvaGxSdkFCWUJCQ3o0dkFsdVU1eXJYcEhCcUdXZzd5elMwQWo3?=
 =?utf-8?B?djFtV3VlbFZPU09PcWVSVHJKS3JnMGlac2Z3VCtTdjNub0c1bFByOTQrQnpS?=
 =?utf-8?B?VXBOZTBzdWM3T3VCS0xiaXBEVWlPcEZtK3N1M0MwSzdvRnQ3ck9kQXpjaGd1?=
 =?utf-8?B?MUU5NXMvcEhLcTlVcFd0OEp3dDZLOG9PbnZrYlNtZXptWjFkSWFIMmtFSzEw?=
 =?utf-8?B?YjBCaFhYSW1FWXZlN25nWjRzYlBkS1ZJTE5pY3JsMkxQd1VKNEFLaWg4Z3ZZ?=
 =?utf-8?B?K2hrRXZnQk45M0xld0wxZ0x1NE1waEo4cDlPcUg0U2xIWXYvWWFhTFJBL3BK?=
 =?utf-8?B?UkVQN3kzYlI2Z2hObGU0UXI4RFplOU8wNFpubnJzT291eGZ6SDNqcnJ6VVJG?=
 =?utf-8?B?N3pOQ2FBWkJaOFZZbGhrT0ZEL1ZXWE8zUmpHMzJwcFZDSVNRNnUrS2JqTGdN?=
 =?utf-8?B?MXVhd3czcUJ0bVNoSTE0YWFvQWhOd3MvKzFTbUhjWVZzbWhUWDlONmIvU0Zj?=
 =?utf-8?B?enRQZWZDczUzZWorZjJJeUFseTFROGo2R0ErN3NZMHlqNG8ySDFPTllFSHRH?=
 =?utf-8?B?UnMyaFUyeldjWUZSeHJldCtsZmR1UTdYcmljclZCeitkSTBPWVdnYk5iekhO?=
 =?utf-8?B?VXFNQ3h1QkRNRXl1djJ3aVJJNVVWdGZBSks4dVVvUmVTb2pTRUsvVmNXYXBE?=
 =?utf-8?B?bm1TV2Z2aXpuS2ZqdnJpOFo5cXdyeGQ1TWJqdWFYS0ZMaW9WWVBzSTBDNVJY?=
 =?utf-8?B?WmpnMWRmZjJpUDA5VGlKYmpQdlcraEIvT0N3SGcrRWtBME1pZ1VqUldQMVlx?=
 =?utf-8?B?SWQyTnNuaUlmMTIwTVNzbHlYRTMvMFlwbk1FMEU1amRUTUgwN3Ywa0VRNjFF?=
 =?utf-8?B?T3N3K2FxUWJWcUFza2YzZVA2by9FTVBnVFZFT0pvVHlwbmRtYlljS1I1Q0Rs?=
 =?utf-8?B?UEttNnpRZ3NOdVNhWDdMcEFVUmJ0aUdTUW91dWNhZFBNREl4RktxdytLQysv?=
 =?utf-8?B?eDhNeVJOSG9nQXVqWGJ1T3JTQzF6cVcrWUd3eURxbHpsY3RnREVFS29wZ1Fy?=
 =?utf-8?B?Y2FXVG42TXhGL0tYRStucUd4b2RMdU9SUkoyK25YTTVTVThxNTUya0V0Mk1F?=
 =?utf-8?B?SE92aFltK1k4T1BrbmVQSi9xblRJY2RGRmYrQ0FmQWZHM3hlZjVDRjVTbEtG?=
 =?utf-8?B?NUpmU3YxUjhiNDFTRlZ1WmFFUWdLNTMvbEpVb0J2T0pUQmpOLzVBTEFLTTQ4?=
 =?utf-8?B?ODFzVUg1bkFLMlN0bkhrRU9xdFZOOXBUNTNjMm1tQmNoQlJPa0p6blBSQzl1?=
 =?utf-8?B?bW5nNzVXVThTRk5GRndzR0FwWmhYenNVSUJ1Q0VydGtSY3c2V01ZWnhiUzhX?=
 =?utf-8?B?OTdsQ1FacnB6elozcW54OXVuaWk0TnhGYkpzSVdGK3BRMDNsR1ZjTG9KT3hD?=
 =?utf-8?B?WkdXVGJQZmNKODZPVlVrVjBxcnkrbTREOG4yVHVYa1grSmRQL2pCZnJkcTJw?=
 =?utf-8?B?M3U1TU5XZHBKQ0VuRFVwbGZQcFpDUWR3SDVnV3Y1MWFCcW1FVFBaZU9zZldC?=
 =?utf-8?B?ZGthNytxNWE5WFNDeVR4RStISyt0QVRzOUJsOWhsRlo5d1BVZVo3em15eEF2?=
 =?utf-8?B?Vm1VSzdRSHVjYTBHQzBNVzJTMnZ0OUpGdk83OHdPeE9uaXl5QWhhaTB3NlZa?=
 =?utf-8?B?WkdqcDNGZmR1L1JqUktQd0xXdCtHVkFDSzFlNlMyVUNUWTh1bzQzMEx0TEpP?=
 =?utf-8?B?VkM5NERqcFNIQ0lQMjZkRmgxWlNOM0llUDBKMk51U0RCOFhDd3QvN0cza3Fp?=
 =?utf-8?B?L1IxR3g1Q2MzbWUxTlQ4T0ZwOTBnaEJMbWpvNENtWUxyOEJkVkNRc2h2TnRr?=
 =?utf-8?B?RG1SZDBxT2VyTUh3U3laamxYaWJCeG5JaTFGSGRnZWs5TWZIQk1tRS9BeHhr?=
 =?utf-8?Q?Qzkgjx0858tCmgZ64E9XtUUmN?=
X-MS-Exchange-CrossTenant-Network-Message-Id: a565bd9e-fcad-4890-e60f-08dca5604f29
X-MS-Exchange-CrossTenant-AuthSource: IA1PR11MB7200.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jul 2024 06:27:04.6532
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: OqsvtUkJjVYzrUqfLNFsFHvX/wA1OmW6vLtrNxYmf7hEouOmQc2nNe5CRHQzE/jKSwKrFJB6Zt7E7qQDnoINiQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY8PR11MB7314
X-OriginatorOrg: intel.com

On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
>
> Create a new function for a type2 device initialising the opaque
> cxl_dev_state struct regarding cxl regs setup and mapping.
>
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/pci.c                  | 28 ++++++++++++++++++++++++++++
>  drivers/net/ethernet/sfc/efx_cxl.c |  3 +++
>  include/linux/cxl_accel_mem.h      |  1 +
>  3 files changed, 32 insertions(+)
>
> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> index e53646e9f2fb..b34d6259faf4 100644
> --- a/drivers/cxl/pci.c
> +++ b/drivers/cxl/pci.c
> @@ -11,6 +11,7 @@
>  #include <linux/pci.h>
>  #include <linux/aer.h>
>  #include <linux/io.h>
> +#include <linux/cxl_accel_mem.h>
>  #include "cxlmem.h"
>  #include "cxlpci.h"
>  #include "cxl.h"
> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
>  	return cxl_setup_regs(map);
>  }
>  
> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
> +{
> +	struct cxl_register_map map;
> +	int rc;
> +
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
> +	if (rc)
> +		return rc;
> +
> +	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
> +	if (rc)
> +		return rc;
> +
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> +				&cxlds->reg_map);
> +	if (rc)
> +		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
> +
> +	rc = cxl_map_component_regs(&cxlds->reg_map, &cxlds->regs.component,
> +				    BIT(CXL_CM_CAP_CAP_ID_RAS));
> +	if (rc)
> +		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");
> +
> +	return rc;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_pci_accel_setup_regs, CXL);
> +

My first feeling is that above function should be provided by cxl_core rather than cxl_pci.

Let's see if Dan has comments on that.


>  static int cxl_pci_ras_unmask(struct pci_dev *pdev)
>  {
>  	struct cxl_dev_state *cxlds = pci_get_drvdata(pdev);
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 4554dd7cca76..10c4fb915278 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -47,6 +47,9 @@ void efx_cxl_init(struct efx_nic *efx)
>  
>  	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>  	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
> +
> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
> +		pci_info(pci_dev, "CXL accel setup regs failed");
>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index daf46d41f59c..ca7af4a9cefc 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -19,4 +19,5 @@ void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>  void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>  void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>  			    enum accel_resource);
> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>  #endif



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.14])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 3C0044C74;
	Tue, 16 Jul 2024 07:16:09 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=198.175.65.14
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721114171; cv=fail; b=qRDYhBvxi7YoHc6oMynb1t6rSr9NYJxi5mvRa0KTG/O7M01qBPbWWdU3wZh7+dSZxGWrZXO9WcuzITJ2sZ40xJWyT0IvoSmRQEZfjvyb0cBZ5bgCvhwEMl3LDq7+dgeu6icYC11J5mgIQCe19EefJ3Ri7gb+hmzPOsMFUjNgKfU=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721114171; c=relaxed/simple;
	bh=Fo2iVo2q7iKMWWWDdFAXM20T/Rclo0LHxZKJ3FaDnqw=;
	h=Message-ID:Date:Subject:To:CC:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=QCJW05oqg3gVvdesyqLhsgfpv3EaPy3IzOjHziTuORq+cpsGhSlPHVhwN3CZj1Ss22UCnmsW/qEnI8mlkLv5hQ8XDqnvAoRF4UHDMOJjW5g8R3BlZTs5U67+2cWXF2SzJeb3qF6Z0SK6ItfGpEvu4jcSqBXcpoLQwNMTq14lKSo=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=bXdhLx7a; arc=fail smtp.client-ip=198.175.65.14
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="bXdhLx7a"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721114169; x=1752650169;
  h=message-id:date:subject:to:cc:references:from:
   in-reply-to:content-transfer-encoding:mime-version;
  bh=Fo2iVo2q7iKMWWWDdFAXM20T/Rclo0LHxZKJ3FaDnqw=;
  b=bXdhLx7aOUzszGGBTaQ2hSlDQ/ab4FMcTpQGYhtRRFOpHDt0/E+MCKz7
   KEanOLdPgcj0Svc4dcvxj+IaJ8Ux22k/KtyK/IpPhkLgfewL8J22GUPg0
   VLr0Tx/Sa88hGLxa/hcw3wmcDs5ivReaOQRky4Brm6RMVTWbDpBlgRII1
   6iJT5yTQHJpfpsiHWt3cr2aPomvipI24RSihbLAyqRYiscMJjbUWNo11V
   RRloGvQeZkoiG85ggaipFI+wFjyfLZDZLDAp0IKtrC2JCxiuApX+FLUWo
   0wYcKQJySaOLBvvOf70vmBc/Wx/UZKgUvqIfkXqSiE5GEWFtOn/h0F7oQ
   w==;
X-CSE-ConnectionGUID: TmHbJDnsT0i2+qxJG+ln0g==
X-CSE-MsgGUID: 0BDpUCxFR5WYfwnMRfUjwQ==
X-IronPort-AV: E=McAfee;i="6700,10204,11134"; a="22342771"
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="22342771"
Received: from fmviesa007.fm.intel.com ([10.60.135.147])
  by orvoesa106.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 16 Jul 2024 00:16:08 -0700
X-CSE-ConnectionGUID: z6FZMx1xTGu6wGlEWF06SA==
X-CSE-MsgGUID: xBNKTlrISUuB0Fep3oqDBQ==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="49752651"
Received: from fmsmsx602.amr.corp.intel.com ([10.18.126.82])
  by fmviesa007.fm.intel.com with ESMTP/TLS/AES256-GCM-SHA384; 16 Jul 2024 00:16:08 -0700
Received: from fmsmsx610.amr.corp.intel.com (10.18.126.90) by
 fmsmsx602.amr.corp.intel.com (10.18.126.82) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39; Tue, 16 Jul 2024 00:16:07 -0700
Received: from fmsedg602.ED.cps.intel.com (10.1.192.136) by
 fmsmsx610.amr.corp.intel.com (10.18.126.90) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Tue, 16 Jul 2024 00:16:07 -0700
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (104.47.57.168)
 by edgegateway.intel.com (192.55.55.71) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.39; Tue, 16 Jul 2024 00:16:07 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=dF3iV9rtIh1ZrJfCRcY7mMBvZNYsVzxkTUHvcqsldgIsiHfyUUV4QoA7ydJ8e+I367IG3agpeTXvPj5Qpn0usLpvNpJWJJ5nUSfsDH6MCFFZTE20+ULWErAo9iVPHhaI3c7IKZnHx4JEvArf0S3U6jyEqbwL9BBUtITSDuZOD+L05k8mNYhyXzgNeEF6AnleKaKeSBGKrk8NAIU1HZMQ01yQc/2Ut5EhfIA4jNKhg4bil40k1ZTN+oQpwjFNX6KpjM4Yf+TDyIA84hoajFqzujft52jBjq1m2+GIoAuOX1Ptgsqxv45RdRMnzmR5WpkMNpykuR+Vopcia5mNh15NOw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=cNQ27ziyQoIeVDV0AzGbQkXB03wdwqWCza0pV78+xZg=;
 b=dY+rSX74cBVJt7wo8AOF4Lu9CcbgrM6p9DrSzctGblG7R+RolIRT/8s/EkRcjizWN3Y9i4duXUl7orlA/nzneLiO4jV2WCo0Et3mFPkDZbDpm0pcELrU/8WdThisvUFEeyCqHiDyZNBOxxghpqDVPdQXUwJm3GYjYV3jDrzrzW4Jb8nYVVQrkOqMORYheJ6cNFO9TIR6E5nsWy8GBP+aJazv+fXXBcqwq8ITLqJGjO3oAdfvL+oVqQzY/9P+dpu4GMu4YM/9ut/vxVU/w9VAW01LpGPnQaiDapAYVB2OERh61+/XLUOC3TM3ufuVtsaKbjjdX8MqqwnWKlPNr7B4ug==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from IA1PR11MB7200.namprd11.prod.outlook.com (2603:10b6:208:42f::11)
 by DM4PR11MB6432.namprd11.prod.outlook.com (2603:10b6:8:ba::8) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7762.20; Tue, 16 Jul 2024 07:16:05 +0000
Received: from IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0]) by IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0%5]) with mapi id 15.20.7762.027; Tue, 16 Jul 2024
 07:16:05 +0000
Message-ID: <1f082012-1ad6-4b12-8eb4-96bcc61704a0@intel.com>
Date: Tue, 16 Jul 2024 15:14:41 +0800
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 11/15] cxl: make region type based on endpoint type
To: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
CC: Alejandro Lucero <alucerop@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-12-alejandro.lucero-palau@amd.com>
Content-Language: en-US
From: "Li, Ming4" <ming4.li@intel.com>
In-Reply-To: <20240715172835.24757-12-alejandro.lucero-palau@amd.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: SG2PR01CA0198.apcprd01.prod.exchangelabs.com
 (2603:1096:4:189::7) To IA1PR11MB7200.namprd11.prod.outlook.com
 (2603:10b6:208:42f::11)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: IA1PR11MB7200:EE_|DM4PR11MB6432:EE_
X-MS-Office365-Filtering-Correlation-Id: 5b2bb5f6-93d0-4dad-403a-08dca567281e
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|7416014|1800799024|376014|366016|921020;
X-Microsoft-Antispam-Message-Info: =?utf-8?B?eVRaRGdTWXBkQ1lSb3VuLzFacUZVMjA5YVg1cGVlbjduWWRxc1lBKzNaMFBE?=
 =?utf-8?B?YzNpcktnQWcyK1RkNmY4cVA3eXRUUVYzZjh3TUtaeHQ5MHpTc1V3MGFuSFF1?=
 =?utf-8?B?R3k1dHpkUmNmVE9nZnExR1hlQndzWE1tdTRnR0orRVlERzh4WTJPb2ZFbFA4?=
 =?utf-8?B?alduK0FGRzU1RVNWWDZncC9PeWUySUxGdTNvU05tNitua1FOdjd0bTJ2Znh2?=
 =?utf-8?B?VnpzQXFKWG53L2xra1E5Y3Z0MXdJbUNqMTBDbWZ5enpyaWV5YmlXT0tUSjd4?=
 =?utf-8?B?dzlyM3IwdzIvelcxV0dNKzU5aDg2cmZYT0w2d1V0OG55OGZRN3Y5c21IOUow?=
 =?utf-8?B?MlAxMm83SG9RUG1kaWRmK25manlYZDJOb25iNzR6QTFlOHc4anpWakZIV25R?=
 =?utf-8?B?dkREdnluTmIzeXMyNTRFVGRJL2FqeGpLU3BjUGYzY3ZyVnFCU2RGcWdVR1JJ?=
 =?utf-8?B?VStvbjRaN1N4NlRCQWxhSlpNUGhybXVjY2JId2lRUFpUY2czYUlvdXJuTEdI?=
 =?utf-8?B?SEY5bXZsQVJoOUorOW81VkFScTYwNEhOQXFXc3h4Z2dWWno0RXhWdG03aS9p?=
 =?utf-8?B?T0U1ZG5HY3hsaVRVbEdIcDh3V1dDakc3V1RwVU5XRWYweTBlbGxzYTJiTldj?=
 =?utf-8?B?Rlc3c1FJazZlSjF6NnBYY3FVSHJHdTA3TmtZTHdlU2ZRL0xNdlBBMkJ6dy9i?=
 =?utf-8?B?Yi9COVk5aGhuMnFscFVjTG9Vd2ZzS3lCcldyWHVhNGVEcmw2dWlsQTNnL3pt?=
 =?utf-8?B?QzZJWVBzVmRiTUtsQ0xPdVFPcHErdDhOOHpQS2pIR2tjK0JsMzBxdUlCK3Qx?=
 =?utf-8?B?WFdaejNwNDh6S2VqMHVIOGFBNXVhU1dCUlhBc2U2Z2trTjdMdEhmMStjaHZO?=
 =?utf-8?B?YTkzcG9pU0NZLzQxdUZoQ3JtUUROQnZuMXNDVEM3TGZRMUdYSHVEUzl2anJ2?=
 =?utf-8?B?UWdWTUh1QzR6YnI2NHdZaXAxS3hsV0FyazJvMUoxWUZ2K2l2MmFBQjdBeGI5?=
 =?utf-8?B?UkhiVThqUlFBNmFoMGZSdVp2QkJwMzFBd0orSHRubDlRbFdGWW1QUCsyRG1x?=
 =?utf-8?B?cy9UTk1sWXhyb1c2YUQ2WnQxd3R1ZkhhSGlER0ZmWjlwdHFBbmNmWGlKOUtL?=
 =?utf-8?B?SGE1Q05aNmJtQjYxMVdMTmNQOHBOcUR5L1BRa2U4UDYwRFlyQWpOdmE4Mmha?=
 =?utf-8?B?amQxK3pjRnBpZU1Lc2NJVXJMb3QrbnVSVXN5MWFSakR1K3dzZ0tjcXlueDVP?=
 =?utf-8?B?bVhkaU5FY0JpNlFXbWk0SnlPTndSZVVoRG9lM3pTcUI1cTdwQlFxRTIwQWRJ?=
 =?utf-8?B?TmxHTDk0MUw3by9uSXZBSHlZcTUrSHQyUUZVMXErVWY4MTVjT1p4Y0Y5aHl2?=
 =?utf-8?B?N2JiWU0yb3JhTWQxRUVLcGI4OVVTRGZKWGNabm50MDBpeU44ZUk4RnFSWHVI?=
 =?utf-8?B?OWdQS1NaVHNtTEM2Y0lmQ3lrczlPMFJ0N2tBejFZcFQ5ZW9qakdWd2llRkxI?=
 =?utf-8?B?LzdyQlYwZ1dEbGYzN21SeEtSZ1h2REJaYy9rK1RiV1I3Qlc4S1dlQnBtWk9p?=
 =?utf-8?B?T0dTcm01OUxScGw2MEpkSEphWmdWdDdGRjBOa3p3Q3l2MTB5ZU44WGRYa2l4?=
 =?utf-8?B?KzhadUlwVkF3bGpWWmo5RXExb1Y4L3V2eHR3VXZJbHRlRG9VYkJ0ampkVTNp?=
 =?utf-8?B?MmIvbTlmY05QaVkvajBySFBqNFFnMmRGS0FJQTlrempzc0RCVEJYWnBoQm5M?=
 =?utf-8?B?SU9MRFBxSitXY2M0aWJMUFFqY3NDaXlmMTF2Mzk5dVFZN1dRZnpvQ0ltM1RM?=
 =?utf-8?B?Y1duZThSdXJMOHlMRzdIcC9vL1JPR2hjUDhpcTN0dzVnQ3RBL2s0WURZbkhs?=
 =?utf-8?Q?tmNyP95BWjwCZ?=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:IA1PR11MB7200.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(7416014)(1800799024)(376014)(366016)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?utf-8?B?UUZJamlYZmswOHhjYk9TMmhIeGxzTHkrdHV0YVpsaTZWaDhNVHdRNGc4aVFW?=
 =?utf-8?B?Skc5Z2lHQkJ3THJUWm4ralFLSTBPRmk3NTBjYjF0YmdUdVY4am9HRjNTcThT?=
 =?utf-8?B?VmI0V3BDWXNaK0Yvb01RdzViK1BzcG1hRXN5djNRdUpaRThtN05BV1MwZzh2?=
 =?utf-8?B?QWRFSHRobG9NLzBSeXpIYzRIOXcxcHpZRG1vNTY2emlQeXlQdG1uWHoxNzJT?=
 =?utf-8?B?UW5kTWc3bHdabXZzY3B3eE92NHREeXZMSTJTemVsa3YxRGZQdGt1bkxBVjlw?=
 =?utf-8?B?aGJEU3FDZlZwMVJNcjBwTzlQV2FjTTlSdkZGZTl1UzlvVlF1ZUtSMmtWU2JJ?=
 =?utf-8?B?eEdDTG9vQkNDcUZHNkc3ajk3UXR0aEJsTmZGMjFKQW0wenQxaE1CNWVMVVBE?=
 =?utf-8?B?SFJxTU9lRnBWNlhvd1cxVEc1TitSVklFbk51OWxtbitna1FaU0JrR2NBcVlG?=
 =?utf-8?B?NmJSN2cvS2JMNHBhMUo5K2daTnVBL3BYOEhSWk93cXI0RENDaCtuOTkwSXYw?=
 =?utf-8?B?R2l1S0RyQjdFZnNKVHVDSkJzY3hwYkt6cFk5NCttR2RYNUlZRFVWc3BsZmxB?=
 =?utf-8?B?b1lGejRvNWRRMVJKYVluU1lleW5PZDQ1MVZodHROaUQzQWVPRFpzUmVsdE9k?=
 =?utf-8?B?UWR0QW1Ebzh3Qzh3MVFpYzF4R2NmbXIvSndlQ3B1bXNObFNmdnZWSjRzVStj?=
 =?utf-8?B?aTllVzRrbVJOUkNXMUJrWjh5SVc4RnBBN2R5b0VPRzZEeXFKaGw0bmRBVzZw?=
 =?utf-8?B?dXdqOHBrRElkK2I4aFRFNzdjMnIyb01DL011Z0VHdm1BcjV2MHh4ZFN5QVcz?=
 =?utf-8?B?dTFGcWZQanZya0N1N0FkUVAwMGdhWGVNVU90ZnFmMGx1UTBidFNEQ1UzSjhj?=
 =?utf-8?B?b1dtTmVkZlF3WW9mSHJJL2RubWNtWTIxMUE4U055dThqZDJ6Tk5XV1hDZzFq?=
 =?utf-8?B?MHc2Nnc5RFZhVGUxckM5aHZhVGxjZWNZa2NiR2ZGb01MeVJTNTBweFVUaEp4?=
 =?utf-8?B?RVBUcTJjbDNiR1cyanlCZ0hOZHdvM04zRUpZYXkydGZrK1ZLYVc0L1pObjQ5?=
 =?utf-8?B?cmgvOHBLRm1zbkZZQkFDR2twMnNzcW9XeExSK1R5RWNqd0w3dUsrWkNNSVAv?=
 =?utf-8?B?MlpPQWV2ME55a2t5RGdIKzJJWFlQUWVaaVZHdS9QWnpiMlpkeFRMM3N6Mmpa?=
 =?utf-8?B?QVVyNzAvOW1HeHVtNjhrYVdNTlZkcjBSQVhraGlwVGZBUmpIeDdQQVR0VXJt?=
 =?utf-8?B?Qk00TDBKcU05QmRSS29xZ1hDcGJjZEZUQ2ZPbEZ2VlBDZDdEUjUvOWtoRTVV?=
 =?utf-8?B?Mm1pQXNqVVF2cmEyMFo2M0JoNmJWV21pbmtINFBtb0U4eGVDbEVOQlNHUjlh?=
 =?utf-8?B?MHNJQzcvbzlTUWNUbkpKVlFUdVRHTXgwOVhtSEpwNlBkNDAzeVBUbnBmbEJt?=
 =?utf-8?B?RUd4TmZhTGFJUWd1WEpZdEtvcWpYSUFmMS82Ui94SWwvc293cUtkRWZYRzNY?=
 =?utf-8?B?bEUzMnl1dzFCNlRIL29jY2JwSXNKYjY3RWw2M3pWUWUyczUvZkdJcDIrNDJG?=
 =?utf-8?B?SGs3b1p2R1NOYWdEbU9HUjFVaTJDeGlOMzhmbnd3UEpYOVhwNHo2UWxLZzFx?=
 =?utf-8?B?a2t4cnM1Q2dRWnBaTW5JbUIrU2lQR09oOERkYWFTaUdGZjVQNUZIT28xN1cx?=
 =?utf-8?B?elk1ai92UnRHYWtQWHlHWFAyNTY0WEoxWkpteEo0TzBQNlFzZkN0dkluRE5B?=
 =?utf-8?B?M0hoQ2JaeHgwK0dSb3haUEYxTURGV29YampWSjY4eVBWTitFTjR6NWkrY3dR?=
 =?utf-8?B?K3RpOW9xN1I3d08zbFpZYURJNVlaaWdJS2VobTgxYjV1S1hBZ253VEpzdW40?=
 =?utf-8?B?MFNWUXFscUM0UitvNkhTN1gwZXMyN2E0SVJ1YXNXamdhYkdiUmZyK2ZCSHRC?=
 =?utf-8?B?dmpxWSt0VXU2MXdLRlZBVE9yWDd3bm93MTQ1SnBYalgwYTBEZkE5U2kzR2I1?=
 =?utf-8?B?ZU0rYWdlOHdkZEd6UWxDSXhXQy9yOWtubDRUNnFSbmdBamR5eU9yMDAvTGdQ?=
 =?utf-8?B?TDZ6c2hDODR0YU5qOVNWRXVTeTA2bk5VTGdJTlNvbXkwK2krb2hzT3RSd3FE?=
 =?utf-8?Q?D6CF1+24CyowuE54Ph0NV1aWi?=
X-MS-Exchange-CrossTenant-Network-Message-Id: 5b2bb5f6-93d0-4dad-403a-08dca567281e
X-MS-Exchange-CrossTenant-AuthSource: IA1PR11MB7200.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jul 2024 07:16:05.6392
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: a2VrUTsEhlSB3KGnZSwOalVR4SKQMVJgyXNRxGf7imRVfvuUUl52rglAlkTdJTIqcEuIWyqZto1KazGxjCGG4A==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM4PR11MB6432
X-OriginatorOrg: intel.com

On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
>
> Current code is expecting Type3 or CXL_DECODER_HOSTONLYMEM devices only.
> Suport for Type2 implies region type needs to be based on the endpoint
> type instead.
>
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/region.c | 14 +++++++++-----
>  1 file changed, 9 insertions(+), 5 deletions(-)
>
> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
> index ca464bfef77b..5cc71b8868bc 100644
> --- a/drivers/cxl/core/region.c
> +++ b/drivers/cxl/core/region.c
> @@ -2645,7 +2645,8 @@ static ssize_t create_ram_region_show(struct device *dev,
>  }
>  
>  static struct cxl_region *__create_region(struct cxl_root_decoder *cxlrd,
> -					  enum cxl_decoder_mode mode, int id)
> +					  enum cxl_decoder_mode mode, int id,
> +					  enum cxl_decoder_type target_type)
>  {
>  	int rc;
>  
> @@ -2667,7 +2668,7 @@ static struct cxl_region *__create_region(struct cxl_root_decoder *cxlrd,
>  		return ERR_PTR(-EBUSY);
>  	}
>  
> -	return devm_cxl_add_region(cxlrd, id, mode, CXL_DECODER_HOSTONLYMEM);
> +	return devm_cxl_add_region(cxlrd, id, mode, target_type);
>  }
>  
>  static ssize_t create_pmem_region_store(struct device *dev,
> @@ -2682,7 +2683,8 @@ static ssize_t create_pmem_region_store(struct device *dev,
>  	if (rc != 1)
>  		return -EINVAL;
>  
> -	cxlr = __create_region(cxlrd, CXL_DECODER_PMEM, id);
> +	cxlr = __create_region(cxlrd, CXL_DECODER_PMEM, id,
> +			       CXL_DECODER_HOSTONLYMEM);
>  	if (IS_ERR(cxlr))
>  		return PTR_ERR(cxlr);
>  
> @@ -2702,7 +2704,8 @@ static ssize_t create_ram_region_store(struct device *dev,
>  	if (rc != 1)
>  		return -EINVAL;
>  
> -	cxlr = __create_region(cxlrd, CXL_DECODER_RAM, id);
> +	cxlr = __create_region(cxlrd, CXL_DECODER_RAM, id,
> +			       CXL_DECODER_HOSTONLYMEM);
>  	if (IS_ERR(cxlr))
>  		return PTR_ERR(cxlr);
>  
> @@ -3364,7 +3367,8 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
>  
>  	do {
>  		cxlr = __create_region(cxlrd, cxled->mode,
> -				       atomic_read(&cxlrd->region_id));
> +				       atomic_read(&cxlrd->region_id),
> +				       cxled->cxld.target_type);
>  	} while (IS_ERR(cxlr) && PTR_ERR(cxlr) == -EBUSY);
>  
>  	if (IS_ERR(cxlr)) {

I think that one more check between the type of root decoder and endpoint decoder is necessary in this case. Currently, root decoder type is hard coded to CXL_DECODER_HOSTONLYMEM, but it should be CXL_DECODER_DEVMEM or CXL_DECODER_HOSTONLYMEM based on cfmws->restrictions.




From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-CO1-obe.outbound.protection.outlook.com (mail-co1nam11on2046.outbound.protection.outlook.com [40.107.220.46])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 28E6A2D05E;
	Tue, 16 Jul 2024 08:10:28 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.220.46
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721117431; cv=fail; b=PqgUZReizs50ml8APYoqvONwd4PKjXW2yjOgSOQT8hdfM+zeb/8+1eXGW5gCku2Y10120I4ozttraz1XQ9zk+IT+VPcOZyFpJmFyYS5blTobMjdJ8/wKz8SyDK+Zs7JU0KKu8GuebhzNjnOwY/uwVJNNPrmMQAvzkUEr8h6Oalk=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721117431; c=relaxed/simple;
	bh=uYcT2X6w5mgOwINRPIVWMWNjVywqTziuZUN+J9sfrEo=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Zy+8BrFKMcBEBgdRrpJfKZ3neoI0LpDpQHbnVcD0zU9Jm6+VBWrUHyT7Rk2/O55BKTEroPyIeVBy2R04ceez1DYhLgjjzMcR2XsTk6Ut+ojNxFkZdLbzskaOA3KEaCiSkgPBdKIKq7MzwncKyEtvYG7EmgJSAX7qCn9GpFE5yB0=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=A8hkiaX/; arc=fail smtp.client-ip=40.107.220.46
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="A8hkiaX/"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=nAYdnvLBBG4YgzQQM4lypp1AHe4CxvVEHhTvIlN1ZC/gM9o0UNA3lNX0L969A+6Z8vVl3N0lx83h+FP0TGGAqGyMupkH4TCS00yv0TDU6aGd4oHwKV/7rWxmXXWsMbCQq9j4g7+sKLbah2BWsAnAtXvBUSnVxA4Jh15Scz6nDog90LIv6aiDucS3z93jHNcXtGnfW7fJRd7INyylhW+cyiryKHrEcVhRFjmoyPGgrB7tfh+mZtgoCijYMy4fe0C/pSfHa3wXBvUV8DO5ebERnr2bdcqfzrPo56vZMsNqxE21YpbeROah49uHSFFo/1ZF4ieFNrjdrQ0slX7ezQglKA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=7IkvKQ3h+BRao8/pFW36dFPLSenVVWv4/PXRwC3xf/A=;
 b=F0VsqSt5XuiURU3deZ3WYwqMbylboqPjOvmLn/Dr4PrjmbJ+TkVgB+bkMPnMqTUjLve2skdyC1Sr86LFfryJIe6Q2MRegsVdramwNkaFEO/MP8X3C5DthajBqYPm3ej0Ms57L8LD/Dl7k35nuvbyBEewuOq4mufDoFMLWHAZ+gg+M4gwBpiidIhWSGopYFyN8BMCi9DcvinEdbxw4I/D8cnja0z+jqSr/XsJgBT2KSu73DdHul5zqgN+ImmqV6M95RKLB2Gc6givIZYNdcHy/vJ8Q5hFaZcCcURX4l/n6c9N4TJLG7akdgPSwN/hdK/DsfU9OoE5Byai5obPbqykdw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=7IkvKQ3h+BRao8/pFW36dFPLSenVVWv4/PXRwC3xf/A=;
 b=A8hkiaX/AWxh9SQ+J8VqirdfF3mZ9mpESLDAaT6YumIdNPtTVUAr+nWeieLhuvxz21KUKC2KKEO6rZlas62LwyQXUKZlCGtRmgGxvbLOjwO6lnmPZHrXkf/y4Uj7JUny9OKIpjbQe53UlqTNblwWig7Ubi9EcnZ6n6DiCtEQlPY=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DM6PR12MB4417.namprd12.prod.outlook.com (2603:10b6:5:2a4::12) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7784.14; Tue, 16 Jul
 2024 08:10:26 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%6]) with mapi id 15.20.7784.013; Tue, 16 Jul 2024
 08:10:26 +0000
Message-ID: <f618e6df-d296-23e4-8fd1-94256afd4612@amd.com>
Date: Tue, 16 Jul 2024 09:10:18 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.11.0
Subject: Re: [PATCH v2 08/15] cxl: indicate probe deferral
Content-Language: en-US
To: "Li, Ming4" <ming4.li@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
 <b2a99894-9c20-49e2-8c76-6e53aa390d9f@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <b2a99894-9c20-49e2-8c76-6e53aa390d9f@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LO4P265CA0196.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:318::6) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DM6PR12MB4417:EE_
X-MS-Office365-Filtering-Correlation-Id: dfccb142-6cbd-4a1e-0422-08dca56ebfb3
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|1800799024|366016|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?Wnh3ZGNMRHRzSkhRUXhwY1FXVitCMTI3cmNHTWkrNDdNbVJZWkJpaHBmbnlz?=
 =?utf-8?B?QkgxemhpWUVxcnkzRUZ0Q3lBcDdYUEx0SzV0Y1dOZ1NscGl5UE5hbndvMUR3?=
 =?utf-8?B?d0RJdjNrb2xKL2doYjNHTC9SNEZBdG1XMVl5enR2UER6a1EvdHVZY1NSOUpQ?=
 =?utf-8?B?UVBCVVlZYTlReXVVREEvaWxQcXJQaTF5NVdQRTh6T0lwM01hYi9yRzFnazNT?=
 =?utf-8?B?andWdjJWOW0vd1FEbTd4L1ArZ1dweC9KQW5OcnltWHBVRzZRaWcwaVVhUFR4?=
 =?utf-8?B?aE1Zcmwxd1h6Y2lWUkgrNXpONnMvMzRjU281QlBCOEFzZmJQUjk4N2t2N1lY?=
 =?utf-8?B?d1dYUHcyWSt5Zk5VUlUxbEdsYnVMZkhXcjBEbnZNR2ZuZm1QWFBPd3dKNFBI?=
 =?utf-8?B?QThlcm1xUXN3TWVFWlNCa2RiV2tlL05DejFUT1hPRHczWkNNajhLcG9rNGYy?=
 =?utf-8?B?ekl3bUxSN0NOWXFYdWI3SENEby9XR0dBY0pxWndQQUQzbWtLSmpRMUh4L0gx?=
 =?utf-8?B?dHB0NHRyR2kyZ0FUT1VpdERGaXJ4ZGQ5SkN2MSs3cWwwK2U4Zi9SZFZObmo4?=
 =?utf-8?B?SENPemZnQ1hGbjArM0s0WUlLanN6aklOTWhrc2hNd2gzR1o3RHhHZ2t3MitU?=
 =?utf-8?B?Wmcwa1Q5Zzd6bzZDa2QzeEEwSWo3Zyt2R0grRjdVQ3BqWVgzWG9nbmFFcFg5?=
 =?utf-8?B?MnoxLzZmSSttYUxWeTRmVmFpcEQzQW1QWm5IOS8xVXl6czdKQ3FINmdMU3NP?=
 =?utf-8?B?dm1VL0hSUERZd3pYS3JsRUVWOXBDWmlua2k3NXQvV1daQWFaYkJjWmlMTkZl?=
 =?utf-8?B?S2N6eGZDd3ZkVUpjdjZsckVmdjFYS0cyOUkwYVhZdnMrb2tBeE9JLzZXOUZs?=
 =?utf-8?B?NklFSDF4ODcwZ1JuZDFXaTUwNnZzdnF0b3Urc3p1QXdiT3krbXJGNnJERElK?=
 =?utf-8?B?UG1lV3dCSFV2WTB0amdOZHd6R2NaWlhCMUZ2Q3krSGZkTTZxdi9CNk9xNnZw?=
 =?utf-8?B?QVBJRVJ1R1R1dzNVMkZtZHp5NGFyZ1M2VUYxaE9SWmNjZjI2dEtQNTJNKzZB?=
 =?utf-8?B?emJVSXBCaXVVaW5GZEZUUitvZzVqU3AxNHo5SXZDM1k3WHZNWlJ3U21xWEw1?=
 =?utf-8?B?WGRUdGZtQ2NkV0NHVEpSUUFyQnh5QUhiNzR5VGVDK05UMGJhY25YRzFsSE5l?=
 =?utf-8?B?VVdqbXJXUVBwbDZBL0pmWWhjekN6c0pRMkJzK1NweXNVTmd4cVVNUkFJb1c2?=
 =?utf-8?B?dWZBQTF3SVdYeGN6dE5aT2M5cXQ1MGk4MlV0U2tYSnJFc0VrMjJwVVNuUXpS?=
 =?utf-8?B?UmpEUk05T1hESnQ3VmwyNlQ1M2tza2hwWjEyRUR4TU9ZUGkvWFNqclR1cVdE?=
 =?utf-8?B?QnJRVHMwUGNFNHI5REw3aEovYTBqOU11MFp0UTlzSkIvUkF6YnJZL1N2NmM3?=
 =?utf-8?B?elk4WFltNHlCa0VlSmo3RE1kejBYRGQvMm1vd2VYWmFzOTZ0M2JQYVJuMHZ2?=
 =?utf-8?B?VVcwZVYydy9wblNrbnhGN3J4THFQMHNwUmVaemF6VkhzeGNoaGdoRmM3dzU2?=
 =?utf-8?B?ckhCY2N5V2J5bHN5MWoxaGI2blJYYURuMWRlM0tLdXNHU0lCVkUwL1hQYTY3?=
 =?utf-8?B?WFZreURHdEJhZHF4SFNYc3FRc2N5dSs2UUJmK29jMldLZXA2UzlVT3dEUk1y?=
 =?utf-8?B?MmxKZW4yKzkvRUI5aDd0UHhCZzZlY1RBelZUbmdIMkFtTkxOak53TG5JdHhj?=
 =?utf-8?B?MmJDVnhCUHhaZ0hTOVFkSS9ZTEJtWU5XODliNDBlbFRrNUpZQkVWRkVMcFhq?=
 =?utf-8?B?R2I3YzlDMzBrREJJUmlXdz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(1800799024)(366016)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?cGNXMThTZGxVRklzS0MrbGZJbDIyWC9FVVlVWTF0UGgzS1g2K2x3WjNMaTA3?=
 =?utf-8?B?K3NjTUUvbnNZSUo2bExrVUgzaTBqcnBUQzA3ejc4VmZxaWZ3ZkdaeWc4L2lK?=
 =?utf-8?B?NFRxMk04M0ZzTzlXMmdyaE16RFlzMEpoOFVrWUlEOStVMExMMUQ3TXdlNlhD?=
 =?utf-8?B?c3ZrOEhOWmZQcThaWGxaRTZpSHVVTXRYU1ZZY09JRTNwSm8wRnZCaDhiLzBR?=
 =?utf-8?B?SGxGcDREaEdYWHk2STNNOFBqTUNmSlRVZXhPcXBDUUQ2L3FPYk9pWUcyNElM?=
 =?utf-8?B?aW1xMWxvMmNMTHo5VXdqUkJhTHRnYTMvd0RzY2Y4VzJNT2dadkxER0hQOHZU?=
 =?utf-8?B?WGtnMi91RzV3NUlEUVA1WGRWQWlMUTZrSjU3Ymk3TlBYWmxNQVpCUjhjY3dQ?=
 =?utf-8?B?a2c3Zjg2Z3Y2RktmK3IzeXFYQVRLRXd2eXFmSlhMQUhpQ09WcG9GMUlTRDhW?=
 =?utf-8?B?TTlpZnZoWlRINFdSSUtRQ0ROSCsrZ1o3WmlTdjBIN01yclFqUWJOMVpSekR5?=
 =?utf-8?B?RFBDRGhBM294cXBaUUxOUW9VRUpuQXY2STRuVDFOVUhPcVZHbHhaZFdLb2Nh?=
 =?utf-8?B?WHRManV1d29OUmU1WmRJZ2FyU2t4MEFqYXFURGk5VXgyMnFLd3ZJMHQ0RWRq?=
 =?utf-8?B?d2xVTVlPRWZNWWM5RGh5MVdaMXErWE16ZERRaDd3TlR5VVdRTnVZM1c3MkdV?=
 =?utf-8?B?L1N2cGpxVkJjWG4rcURORDdHVmxTK0RqQVlrSCtyRjUyTzNSaVUrc3ViOXYv?=
 =?utf-8?B?Y0V5ZFBrMjZYV21mSHFjM21QKzZBMWVnU29LL2tlQTZJUm0vd1YybjlHdElo?=
 =?utf-8?B?RytvRjk2azA4THpBVUlmRVFQSnZxclB0bmFuUGZ5aER2enc4VmMzSFFRL21P?=
 =?utf-8?B?UC9pdldVdjM3R3NsNTV4NmxMR1g1TGpIMCtvOGpkbVZmMlp4VTFKK1F1N2lC?=
 =?utf-8?B?TkRxOS9JSVJaOUlaam9ZUWtETEJJUHE1UHdwT2JGamhLbVVOWWRnU1VaRWp4?=
 =?utf-8?B?a24rd1BMd1M4K2lGNEFVRk1yQ3g1bW5xdzBKVHkvTUdiekdycWM4NVk2K1JB?=
 =?utf-8?B?Q3BOZkpXOTRxb0NkcGU0eDVIejVDRk5FcFpGeXBheHI4TEZNdnFDWS9mWDUx?=
 =?utf-8?B?T0FRRFhpS2NjU2Y0YWxJY1FuMU1vK0orT015Qmxldm9LdyszaWtWeTlaU3Zi?=
 =?utf-8?B?bXZhVWFPUlNDTXVveUhjTUIySEs4RGZmWXRENXdiMGV6R2VabWE5M3JOb09y?=
 =?utf-8?B?WlBHQk1iZ01KdFdhUjZxMzNyM3ozcmdtMzVwRElsdmVUM2ZCcmp3Mzh3YUsz?=
 =?utf-8?B?eTF4UXFTQTljYVBJdkZjcnB3UDhUUFdQMnN6dEtOTVR0aUZUR0cvTUFSRkxG?=
 =?utf-8?B?Yy94a1ZLOUUrQU1BV21XdjRTTFlEQTJycGhGcXhqb3JYdDE0UzdDV1I4cE1Y?=
 =?utf-8?B?aXMwTUxpeU5NczlyMU1pbHVMRTU0WW0za3JYRlNxM1pYOVRlTVFmY29jQ3E4?=
 =?utf-8?B?R0Y3ZTlMUEdleGNGKytQa1R0NmdNb0NxVHVvSmNuTnRDdHlrK3JmYVBZSnQ4?=
 =?utf-8?B?NEZPSDV5R3prT3NkNEg0SS9SNW1mMER5Uno0K2w5a1d1alkrcXlBYUQvY04v?=
 =?utf-8?B?R0lNaUJzbjUxdEVBUVBlWGdUcVpBTGcrcjdOMzdyMzJQZ280aHdhVnpIbWJt?=
 =?utf-8?B?QkV2d2I3UnJ1ZGRwcUNZekhBODN2QzRkS3h4NU1WZ3pFN00zR1UzNGtTOUZN?=
 =?utf-8?B?VzdEYUYrWnhvdGE4anhpOU9EK3QvOW1mV1pmMm1RdjZsR3h2YW12YnFCYkV5?=
 =?utf-8?B?MFE5blIvTE5HSmMvRmhKTlh4T1V3bWtRcFRodnlDZ2JzSU1lS3Z2NURLUjgy?=
 =?utf-8?B?Q1RhaStkMjRnR1EvNVBIOG5VbXNoRzlUWlJ1SW9mSXJjd3l4cjU1WWEydENP?=
 =?utf-8?B?MmhNQjNOUWNKVlQya1N3Znc3b3ArdXpOdmJlNVQ4d2oyWDhHVzY2TmVtT3pl?=
 =?utf-8?B?ZzZHM2hIdFVoL1hJeThmODAyTmtsZFp1cXJ0OTQ5bGFncDZXRlRJc0NKb3FO?=
 =?utf-8?B?a3R5cWZvSGNsdUV5aTZMUXh1YkJGN2Nvak9RRnFVT0ZJM0RzQ3hMMTRWYjAr?=
 =?utf-8?Q?eBaMC8wE7Y0r+3SfsxlBTd6zU?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: dfccb142-6cbd-4a1e-0422-08dca56ebfb3
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jul 2024 08:10:26.3309
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: gMhNNpz61T/M+tQuJxuulMAck5jb/u8kjHEAffzzG7gfTqkkI3diAQdvN9l13Hr2oL13WBcANErkUcVAnTh/yg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB4417


On 7/16/24 06:52, Li, Ming4 wrote:
> On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> The first stop for a CXL accelerator driver that wants to establish new
>> CXL.mem regions is to register a 'struct cxl_memdev. That kicks off
>> cxl_mem_probe() to enumerate all 'struct cxl_port' instances in the
>> topology up to the root.
>>
>> If the root driver has not attached yet the expectation is that the
>> driver waits until that link is established. The common cxl_pci_driver
>> has reason to keep the 'struct cxl_memdev' device attached to the bus
>> until the root driver attaches. An accelerator may want to instead defer
>> probing until CXL resources can be acquired.
>>
>> Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
>> accelerator driver probing should be defferred vs failed. Provide that
>> indication via a new cxl_acquire_endpoint() API that can retrieve the
>> probe status of the memdev.
>>
>> The first consumer of this API is a test driver that excercises the CXL
>> Type-2 flow.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>> ---
>>   drivers/cxl/core/memdev.c          | 41 ++++++++++++++++++++++++++++++
>>   drivers/cxl/core/port.c            |  2 +-
>>   drivers/cxl/mem.c                  |  7 +++--
>>   drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
>>   include/linux/cxl_accel_mem.h      |  3 +++
>>   5 files changed, 59 insertions(+), 4 deletions(-)
>>
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index b902948b121f..d51c8bfb32e3 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>>   }
>>   EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
>>   
>> +/*
>> + * Try to get a locked reference on a memdev's CXL port topology
>> + * connection. Be careful to observe when cxl_mem_probe() has deposited
>> + * a probe deferral awaiting the arrival of the CXL root driver
>> +*/
>> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
>> +{
>> +	struct cxl_port *endpoint;
>> +	int rc = -ENXIO;
>> +
>> +	device_lock(&cxlmd->dev);
>> +	endpoint = cxlmd->endpoint;
>> +	if (!endpoint)
>> +		goto err;
>> +
>> +	if (IS_ERR(endpoint)) {
>> +		rc = PTR_ERR(endpoint);
>> +		goto err;
>> +	}
>> +
>> +	device_lock(&endpoint->dev);
>> +	if (!endpoint->dev.driver)
>> +		goto err_endpoint;
>> +
>> +	return endpoint;
>> +
>> +err_endpoint:
>> +	device_unlock(&endpoint->dev);
>> +err:
>> +	device_unlock(&cxlmd->dev);
>> +	return ERR_PTR(rc);
>> +}
>> +EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
>> +
>> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint)
>> +{
>> +	device_unlock(&endpoint->dev);
>> +	device_unlock(&cxlmd->dev);
>> +}
>> +EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
>> +
>>   static void sanitize_teardown_notifier(void *data)
>>   {
>>   	struct cxl_memdev_state *mds = data;
>> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
>> index d66c6349ed2d..3c6b896c5f65 100644
>> --- a/drivers/cxl/core/port.c
>> +++ b/drivers/cxl/core/port.c
>> @@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev *cxlmd,
>>   		 */
>>   		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
>>   			dev_name(dport_dev));
>> -		return -ENXIO;
>> +		return -EPROBE_DEFER;
>>   	}
>>   
>>   	parent_port = find_cxl_port(dparent, &parent_dport);
>> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
>> index f76af75a87b7..383a6f4829d3 100644
>> --- a/drivers/cxl/mem.c
>> +++ b/drivers/cxl/mem.c
>> @@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
>>   		return rc;
>>   
>>   	rc = devm_cxl_enumerate_ports(cxlmd);
>> -	if (rc)
>> +	if (rc) {
>> +		cxlmd->endpoint = ERR_PTR(rc);
>>   		return rc;
>> +	}
>>   
>>   	parent_port = cxl_mem_find_port(cxlmd, &dport);
>>   	if (!parent_port) {
>>   		dev_err(dev, "CXL port topology not found\n");
>> -		return -ENXIO;
>> +		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
>> +		return -EPROBE_DEFER;
>>   	}
>>   
>>   	if (resource_size(&cxlds->pmem_res) && IS_ENABLED(CONFIG_CXL_PMEM)) {
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index 0abe66490ef5..2cf4837ddfc1 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -65,8 +65,16 @@ void efx_cxl_init(struct efx_nic *efx)
>>   	}
>>   
>>   	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
>> -	if (IS_ERR(cxl->cxlmd))
>> +	if (IS_ERR(cxl->cxlmd)) {
>>   		pci_info(pci_dev, "CXL accel memdev creation failed");
>> +		return;
>> +	}
>> +
>> +	cxl->endpoint = cxl_acquire_endpoint(cxl->cxlmd);
>> +	if (IS_ERR(cxl->endpoint))
>> +		pci_info(pci_dev, "CXL accel acquire endpoint failed");
>> +
>> +	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
> there is no need to invoke cxl_release_endpoint() if cxl_acquire_endpoint() failed. right?
>
>

Right. BTW,  I do that in a following patch.

I should just add the functions to the CXL core here, and to use them in 
a subsequent patch where it makes sense.

Thanks


>>   }
>>   
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index 442ed9862292..701910021df8 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -29,4 +29,7 @@ int cxl_await_media_ready(struct cxl_dev_state *cxlds);
>>   
>>   struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>>   				       struct cxl_dev_state *cxlds);
>> +
>> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
>> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint);
>>   #endif
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (mail-mw2nam10on2074.outbound.protection.outlook.com [40.107.94.74])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id B551457888;
	Tue, 16 Jul 2024 08:13:29 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.94.74
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721117611; cv=fail; b=EI0wg98zU8pxR3wYpMkYrIPgniYwfiMNScl2GtnHpAYIUV5BGl43QcLoH+hZtCxOY/3Lp3wwnOU1SHz03JgAHJ/jtRiFhPDIqCvJqlj2bXNvm6Yd0gwrJvhqrZi6mLoQVP8FMuNRjEcFgttbRP+dzrnTwDPbXvW27P2b5XQDXtQ=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721117611; c=relaxed/simple;
	bh=fpOTZPoD6Wn9M/G73DvF35FW8NQF9DpNdPKb/4erBg0=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=WqsEAvsb9Y6OeJlMJQ1rNjwtIIXxpHszxbCujSJyhwG4f9e/zqidfsU/2jLTnJALDFUh+fLXV/raoA0zTybMVk3os+gLN0344YC7CzyMaS6UBIC9yuDxDFl6Fe+UwTPupRVUr8cMlIAbHmrFXs7b8xDdH1zDdDmE2l/Rx+E9etM=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=pTASlASo; arc=fail smtp.client-ip=40.107.94.74
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="pTASlASo"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=YuWojO3XLfQF35Hgi8oAqg6ev1oXeyS2Z5b7aXcMAphvnRsvEnwHbzDTy5QmDvhmEg25PdG2Z3a07i1yj2MJ4SxAHhqutsGYXNtPnlRGTcGzfZICLZOMfqJnJQBoSXriWlz+sXsQ495Bv4/LHc0CklR7fU0bh+3q/Fgnl12cfw7Z6Z2vY3f1JFU55gO7DfoYbwneoBU+6ce23eJBYTBodnd8dtVAIfgxak+apEQt5Kuwk5FD9WwavedsH2Dp33wvuZCVGjNQS/SWTXv3BKCoSnNpU+iyQxxSnBsYarSNM0AfEZ9dTgzJlIYA69S3YfmqVHbVUMB+a+mQLGojO/0DpA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=FWuhMWNKZJopAo/kX1ef4hrkJD51Ehbe9yW/RNY7i34=;
 b=ZeTAyixEtRHLs72WyftnDZYrmhdK98W7CHgI7W7bGE+uDwBVi/BnPp585FbmCe9FVF6bYatqnPd7VRhObGlqp6+Uy/nmWQkr8OJ9w9ZaXjXunxaOSPDFnVl0dubYYZEmkfQAr7UYWnS3PTs5M2nuuVhLc8RawIMZmX6b99OhH6Cy001GSy1yZZnp7ZLHQuaz/ouA/HvVJ/MQy3wD+Y+jaEQzXgUzOfOyS5hAswHh40V4cwb0xBkWkyV64T/w51VCNja/wa9hEfLabckyiF11YjyahzY1ZJLFncXCd8OwxVyugBDcse3oUcU2rRqYpmxKpYlje2Vv5WLUo6/9rZ+ClA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=FWuhMWNKZJopAo/kX1ef4hrkJD51Ehbe9yW/RNY7i34=;
 b=pTASlASo5J1g+cIV+BwJsZcTJ5dOczxVo9TMJSiOVkXkwhD0F7CepdXOwKujDdq7pnQ7sUNZmkpoXvpP9OaoZtRyBH1MRJK1hToRKg6KwLUe2jWmf8EV/Xykq/sdFIZSrcEQ9UzuHxxzMiFTuoCujT462+gTt83Z5lW+tU8Xlz0=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH8PR12MB6964.namprd12.prod.outlook.com (2603:10b6:510:1bf::13) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.24; Tue, 16 Jul
 2024 08:13:27 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%6]) with mapi id 15.20.7784.013; Tue, 16 Jul 2024
 08:13:27 +0000
Message-ID: <1cd50929-35f5-d0f1-9a68-d22e28cdf1b6@amd.com>
Date: Tue, 16 Jul 2024 09:13:18 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.11.0
Subject: Re: [PATCH v2 11/15] cxl: make region type based on endpoint type
Content-Language: en-US
To: "Li, Ming4" <ming4.li@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-12-alejandro.lucero-palau@amd.com>
 <1f082012-1ad6-4b12-8eb4-96bcc61704a0@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <1f082012-1ad6-4b12-8eb4-96bcc61704a0@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0352.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:18d::15) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH8PR12MB6964:EE_
X-MS-Office365-Filtering-Correlation-Id: 795adb95-805a-4e06-ec1b-08dca56f2b16
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|366016|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?YXl5RXhsMytCaGJuS1RGekVlaEZqZXhkSnova3FlbkNacTVFUGc5UUtvVzZH?=
 =?utf-8?B?SEV0Q2grRklQTXUrWXJLaXlPNGlMWWd3dG5IbzV2Zjk0WXBLbC9xb2EzWldy?=
 =?utf-8?B?NjhGR2xhOEZaOFd2bWxSbXR3RkRRYWQ3ekcxTkJUUHRqUUFreHZYMmI4dysw?=
 =?utf-8?B?N2dMdkFGZ3MyVFJTUEpnTTEwaU1EKzgyTmxPT3BhL056bitvMG5mRWVBTTVm?=
 =?utf-8?B?Qmp3NWdjZ0cvM0tYNG45b0Z6RmN6MVk1czFNQktKRndrMFUvWEVsN2lkZ1Zy?=
 =?utf-8?B?RTBqN0tuVStNYU1TZHV0QzRhT21POGlHN1JCVmc0ZjNENkoyZzlQZDlBVDVB?=
 =?utf-8?B?b0dZTmxKZnpPUWFLd2JjOXJ0bXFWYWpRKzRWcUY4endBSDJtUlpwL3R5V3dN?=
 =?utf-8?B?SktqbVZ5RitXa1dZeDdzOEd2WlBsaTByQ1QxTkt1WDFGNlZRRWUyakR6M2tH?=
 =?utf-8?B?YnhtSW5jYUttUmx5RkkyY3MrdlN2Z3ROZjRPZ0tIT3dnamllSkNKNWNFdnBB?=
 =?utf-8?B?cGVlS3o0UXllZGtKQ2lTcHY3dVRyakNldVNtY1ZnazROdVRjbTUrZWtpUWpl?=
 =?utf-8?B?T1hYL2xOblhIa3gya0FVVzJlcTdZNExPT2FQcTlVNVZlUnBkSkYxdENIZ0FE?=
 =?utf-8?B?ZzZnNk4vNHZWUnVwZ1BqeUdTVWpSWnlsU3RSYlhOUERtZlY2N252ajFCR2NJ?=
 =?utf-8?B?d3ljU2FUK1FScjdZa0lteDlGUDJoK3gzUlYzdjVkVCtJTzF3VHhGY3pmQmNL?=
 =?utf-8?B?RnRTY2NUanRkcmZzSkJubkk4OWNxMTQyS2ZsSHg5aVdZWkdCSVRjVWJzeWpD?=
 =?utf-8?B?azRSekNwSDhoOGloQXZEeTI0aVdsa0x4Y09GVFNZb29VVlpxQ09tUEdmalcv?=
 =?utf-8?B?NXdOaElacjNadEJUdld0MmVrdUFXdy84TUtMUFhVRmRDZVRsS3J0djd0dm5a?=
 =?utf-8?B?REpJUkUzR3NMNEVEaHpjanM1MFBYL0Y4ZUVjcXNiMi9JRTd0NHZzZVM0Y1J6?=
 =?utf-8?B?UVh2SlhyMFFJV0F4Z3RrSklCbW1haHFZTGdHSGhuRXpDMmlLQTJqSzlCZGlK?=
 =?utf-8?B?ZUV6RnhLc2RoVktPWmxXZ0hteFBkWk4xWTZXeS9yV3JKclJydTlqdW1uUEM2?=
 =?utf-8?B?TlVJSk9KMnI0aHE3Y0ZldXV1b0oyWDE5VVFiNVZXcHl3TlhWckQ2bko1U0dU?=
 =?utf-8?B?TnNXdEJmTTV4a3hzLzZ5MEt6M3RHQXIzaVNWc214RitCNVUxQVNMR3RpS29G?=
 =?utf-8?B?YmFRbitPLzh0VHk1bWIrSUg0b3RvOWMwMFJhN3o2U2pHT09Wd0pFU1J0OXZD?=
 =?utf-8?B?ZHE4bEhRdE01SmEwM3ZVRGhwRXZnUkd3eHlQWUFiaENLaEtKU2FWSlF0QXdH?=
 =?utf-8?B?M0xMaG1aOGlkdjZubXhqbHJtWUJ2dWV0WVZCSFZFN05xU3kyZS9la1p1UVFP?=
 =?utf-8?B?dWlmMTJlRVgvRXphU2VtcHN5bGZnS3ZnaXBsZlMybFBxQ1orUk1DQkdjQUVy?=
 =?utf-8?B?VnBEWmNnOUVaYkJvMWl2ck95TlptbGR0MkpmVWJrR3dhQUV2bGNHTjRabDZw?=
 =?utf-8?B?UGQ5K0JWRmhqays2MXRkcnJGaml4TkpSc1ArczVPTDlHMUZ3UVZpYXVmb1h0?=
 =?utf-8?B?d05CZVR2d1RKV3hMSW0xOTluaGgzSEpIUkJ1SlBhYjBKYjYwNTBSdGgvYVc2?=
 =?utf-8?B?UVhOdGE1STJnS1g5aFhIeFBnbkZqeGM4bjBidDRETFpuVjRpT2p2cmhIb3B3?=
 =?utf-8?B?SzBkVi9GcEwraS9Kem55Q1BTQmZSZDFmMjh2OEtoQXBzOTAyeDhoTllaUVdL?=
 =?utf-8?B?MUpRTkprTGdyeEFueUtHRUdySHh3MU53dkZORWFJT0JqT3hLWkZKMGhXbHVj?=
 =?utf-8?Q?mSE3CoLF8d48T?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(366016)(376014)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?QkxJSlF4NzBiT1RNYWVsaVBjdlZFeGxubW9SR0V4eHEyY0JhQzhkVWF6N2xl?=
 =?utf-8?B?MWRjd3lPV1FkYkNzajVCdVZRSDdlL0VGNzU4MVRpMjE1V0tXMkxwdm9mLzkz?=
 =?utf-8?B?WElUSG8yWURyNlVuVVVYR05WYlVLMDlJTVJmWWxTSS9FOTl0Z2tSeFBmcFNQ?=
 =?utf-8?B?WlVQOFhIOTBodjlmcTdjM244Y2RSeTVvRjlSU1BLa05zdU1OTndWRk5OK3Uy?=
 =?utf-8?B?aDBZMXB2NzN2N0kvYi9ycitCenRVZHVsRS9YaXdMa0hHYm9Oa1kybVB6djFo?=
 =?utf-8?B?a3JBMEJNUVI4MFlnMUlQL1ZnekQ0eU03aEJXSzlEQ2pWQ3VvZjlxcmdSTkwy?=
 =?utf-8?B?MGtId2hMWmlwZUtVVXFDWmY1YVBkYll3OHFjTFJOMndCZFl2YVJDdVR5OUZR?=
 =?utf-8?B?Y0VrL0JhV0dTTDRXZTFveGtrSFVLSEVMbTdnMTA4K25tR2IzVDZRc09MVmZH?=
 =?utf-8?B?N1FaLytFYXMvUDRhejBXUzN1Y1VHNW5uellpZ1hyc1pFWFBzZS9rVUxJTmpF?=
 =?utf-8?B?S1pEYjR3RysvbUlESW1nRjlkUFI3anhyd3Q3dStxcDdhRXFpSy91WVZHVXpB?=
 =?utf-8?B?cWpKSVEwTkdSYnpwdDZja3JzcE9DMmtRRVloZnQraHYyTm5KZnNnSnI5SS9m?=
 =?utf-8?B?TlRGOU9TNVFTR05lcWFhcUxoOVRKMFNCQ29wMEp5aE5wZkZxZzAySU9ibDRz?=
 =?utf-8?B?czZmU0twMTRaZ1MrMFRzREszNzQrWVg3cjNWekpxL2wzTktnaDMyMXM2YUUx?=
 =?utf-8?B?bnY0Ni9VaDF5TmxTWng2cEtrTlU2clNvRHE0YWR5TzF4UzZMMHdyVTM3eWZ1?=
 =?utf-8?B?dldnVDN3aDZERUlyZ2lPL0xIY3p4RGtwVTE0NC9jZTlBVWdLRzg0aVRnTXIv?=
 =?utf-8?B?MDRPVlVCSXdqaWp3R01WUmZYYXRSckhoNzZsQndXeHB3TVVQMnVqZ2dIY3J3?=
 =?utf-8?B?QkxuVUhvSXY1K016S1Nzb2xURWpkaWh2NFh1WkFwM1d4S1p3b3lmelowc0JR?=
 =?utf-8?B?Uk8zdDNRWUN3NEF5NWRaVHFONGF4SHBsNHU4RVRwZi90V0E1SzB2Z0R1QUdU?=
 =?utf-8?B?WkpnZkc4Wm5MbUI0SXRqWENUemROaWNIRDBhWi95b3Q0eS83UmlUSjVRN0lY?=
 =?utf-8?B?QStVYnhMTFV6ODVVRFV5RUdDUzdFdDFNYTRqOFBkVnJiSGxUM3N5U1I3ZkhR?=
 =?utf-8?B?UEZnQzNCZ0lNQXlSYzNSeGFVcndWNjF3bFZBL3doUmRsL1hzWFFadTVsRStk?=
 =?utf-8?B?ZktxTCs2Y2FoL3J5UjErUWNSLzJIL1BVaEJvQ29JckhwcGYwSWY2clJiRUZv?=
 =?utf-8?B?SXBKRFNKN3hEdDArZmtZNEFFaU1QSnh4ZGFncXNQUlZIVmhBVG1zQVJXOEVG?=
 =?utf-8?B?T0IrQ01naERnT1NwWDVWemQyKzdLbDBodFBvWi9yVm00RXZVajIvYndHUGtj?=
 =?utf-8?B?L2t0clQ5Y3JFVDR6bHIyYW13a2VoZXA2WHp2TndWOVllY0FlNllwSFBydWhQ?=
 =?utf-8?B?NUQyT3hpRDc2bWw4Mm8xS3BBS3g1NGtiSldZZEV6alUzN20yRXVEM2t1bnNL?=
 =?utf-8?B?VkltRUR0amFGSHRtTnlXUU10NkR5VEZ1clgzTnlEOHFNNkluZ2doNElWTk13?=
 =?utf-8?B?T08zb09GVE1QSUF3dk93dHllVUNlR0hRUmdJWmV1bVQvendhUnYxZ09SSE9Y?=
 =?utf-8?B?KzB6WC93RFNVN0NqVlBkZDlySWtabEU0bzZLT05YODhvZ09iNkJzcmEzN0I3?=
 =?utf-8?B?RytZa2xGTEZNSmUxakVweXRxQzFEcEdpbk1wZXJxY25TU3dPbVIvU09zcW1I?=
 =?utf-8?B?R2pVV0ZJbm04aElwRS96UU0xZ1B4S0xQR3M2bGV6R29udDNsN1VieklyWjk0?=
 =?utf-8?B?T2hUQUZ4NVhPeVdxZDJ4NHJGbG5DYmhDNjJSVURSREhkZ0Z6Q3NSVFNzUXJu?=
 =?utf-8?B?QU1xRGYrbmp2U2ZaVVFmMHJJMzRLRnlTekZxNEpRbTlvbXZlUGNzTFpQV1RF?=
 =?utf-8?B?MGFpSUI4RllOVjRRWnJKUkRCK01VbmprVVYwZ3N0TENtcnlDWHU3U28xRUZ5?=
 =?utf-8?B?WHgycEVHaDk2K2haRFQvclBnWEJWZzdFckVqUWJjMmRnWEROaXNqZVBJTFBq?=
 =?utf-8?Q?pCe2bpf0rF3eUbMx1c9OI1/XX?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 795adb95-805a-4e06-ec1b-08dca56f2b16
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jul 2024 08:13:27.0186
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: aUtUZPbyFs/hwSvZY7ksKRTSIxgy5OALUw93+1PQCgrUJfFW9N7jhkHC2W6uYuBy6e6S+b001VbFTjfWT8xe7g==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH8PR12MB6964


On 7/16/24 08:14, Li, Ming4 wrote:
> On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Current code is expecting Type3 or CXL_DECODER_HOSTONLYMEM devices only.
>> Suport for Type2 implies region type needs to be based on the endpoint
>> type instead.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/region.c | 14 +++++++++-----
>>   1 file changed, 9 insertions(+), 5 deletions(-)
>>
>> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
>> index ca464bfef77b..5cc71b8868bc 100644
>> --- a/drivers/cxl/core/region.c
>> +++ b/drivers/cxl/core/region.c
>> @@ -2645,7 +2645,8 @@ static ssize_t create_ram_region_show(struct device *dev,
>>   }
>>   
>>   static struct cxl_region *__create_region(struct cxl_root_decoder *cxlrd,
>> -					  enum cxl_decoder_mode mode, int id)
>> +					  enum cxl_decoder_mode mode, int id,
>> +					  enum cxl_decoder_type target_type)
>>   {
>>   	int rc;
>>   
>> @@ -2667,7 +2668,7 @@ static struct cxl_region *__create_region(struct cxl_root_decoder *cxlrd,
>>   		return ERR_PTR(-EBUSY);
>>   	}
>>   
>> -	return devm_cxl_add_region(cxlrd, id, mode, CXL_DECODER_HOSTONLYMEM);
>> +	return devm_cxl_add_region(cxlrd, id, mode, target_type);
>>   }
>>   
>>   static ssize_t create_pmem_region_store(struct device *dev,
>> @@ -2682,7 +2683,8 @@ static ssize_t create_pmem_region_store(struct device *dev,
>>   	if (rc != 1)
>>   		return -EINVAL;
>>   
>> -	cxlr = __create_region(cxlrd, CXL_DECODER_PMEM, id);
>> +	cxlr = __create_region(cxlrd, CXL_DECODER_PMEM, id,
>> +			       CXL_DECODER_HOSTONLYMEM);
>>   	if (IS_ERR(cxlr))
>>   		return PTR_ERR(cxlr);
>>   
>> @@ -2702,7 +2704,8 @@ static ssize_t create_ram_region_store(struct device *dev,
>>   	if (rc != 1)
>>   		return -EINVAL;
>>   
>> -	cxlr = __create_region(cxlrd, CXL_DECODER_RAM, id);
>> +	cxlr = __create_region(cxlrd, CXL_DECODER_RAM, id,
>> +			       CXL_DECODER_HOSTONLYMEM);
>>   	if (IS_ERR(cxlr))
>>   		return PTR_ERR(cxlr);
>>   
>> @@ -3364,7 +3367,8 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
>>   
>>   	do {
>>   		cxlr = __create_region(cxlrd, cxled->mode,
>> -				       atomic_read(&cxlrd->region_id));
>> +				       atomic_read(&cxlrd->region_id),
>> +				       cxled->cxld.target_type);
>>   	} while (IS_ERR(cxlr) && PTR_ERR(cxlr) == -EBUSY);
>>   
>>   	if (IS_ERR(cxlr)) {
> I think that one more check between the type of root decoder and endpoint decoder is necessary in this case. Currently, root decoder type is hard coded to CXL_DECODER_HOSTONLYMEM, but it should be CXL_DECODER_DEVMEM or CXL_DECODER_HOSTONLYMEM based on cfmws->restrictions.
>

I think you are completely right.

I will work on this looking also for other implications.

Thanks


>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-MW2-obe.outbound.protection.outlook.com (mail-mw2nam12on2073.outbound.protection.outlook.com [40.107.244.73])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 4A4244206A;
	Tue, 16 Jul 2024 08:50:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.244.73
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721119859; cv=fail; b=OJxBlpx6ciPrBrCPYRUUv1MItdFZYHJKEeG4rK8n1ZI5xmEIeMrNjX2Ku9wqa536Akw2PniawFOFYbPAasfHD0fHWjJbpMd/MGW7PMSx6FxdOrQ8Yd8fm5BCrXkXWHMGD8d53z/APVdTV5rYf40GBIJbc+Smw3F6nCKC2hmh8ks=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721119859; c=relaxed/simple;
	bh=Jg6Zrmv4GJOCAx3A0I5ocFFp31aaSmOEj2qQcRHIgmA=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=rLNR41ASvtKJj4K6qXwfmZIgNTm7yAIr5+FF9OAD/o+Oq/NjOMNnLPp4NUD037unsLFOQmZxZKGANkfJ3XOhESjfI3MMU91wiO+KsLBFQirVVRTsBCdHC5TL3SbA8x1A+MF+ELfIXqhr14TPSUi0Vvlbq2RaZNT3EXtvzl4JIbI=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=nB1v5qCB; arc=fail smtp.client-ip=40.107.244.73
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="nB1v5qCB"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=t6lOvWCCVrLT3ZoL1uPbdGjnqjmbk5oJnKDmnCZdc/eEz7FH+kRGjspSWWiKf4mzOfctcu1pGbGTMAUVYGBFB+JI2eRQiu6iwP+Y9Rum4aCCAJA9WPLKI7Z9QyH49N0mQst9mQ1PUkaVfQnGMmZZv7xaJRhtOlJCniG4hUx0zWPf+BKELSjfYXB2/XNKq284smko/hH6AtXdylwurII6JMvxcp1wHTRchac/pEemmerjfHiiuq4rLE+6tTAK0qb9NN/WUY6cltRxJGbnMVJBwj0jGIWzaZuwVYhBB7olfX9717iZ5bY6ImqTe7QDTcR4pVrXaEkPtX6a2uEB4sKFtg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=gPz+7ZSMil65FY4Pea2a1s1pqrjx5D9ihw4O9o0KGds=;
 b=d/FTm+1ItAUyU1H4KFV19e+0no7uDK1TvYrw1Wx5F8dSWxIT2iTTP0MIgMfQaKhilINWJ1JCULEf8W3ZN07ghz2WodELogP1H3M7kEsmZksSQi+zKCbxoMpSsp1vQrCoCNL5EkkWGx/n5cGvl4/nP97Akl47HfXhnwg3mpDF1CDyAPlYKHgPiQBx9hqoR5McQ2Y4g0iEhYlndbIENeyReoHwqyOtTWtetXKFgLwL3+yn7OnQhl1xZ6OeohPq/IciADjcQoPTqsz6cUCZa702eli3R68pkNocIjrh/ZsyAMfEvXiYHOXwI/5wDHgVjVtHuqXfgeb3u02vYF+U9nfoCA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=gPz+7ZSMil65FY4Pea2a1s1pqrjx5D9ihw4O9o0KGds=;
 b=nB1v5qCBZKttCnXsE5CHUCEK29Cy8+tGW1gESYNEZs78H5NttSU3lms1EECxB9bVBpcDx46GhDJ7i5/nDljDzozMYrO03HG0EZXxuP97fss22LLdMGsCYOtQBZW9k91MPiFv98Rs2LqGxJtcurQDNCp6GuvZ6S2ZAbZkaV01B4w=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH7PR12MB6740.namprd12.prod.outlook.com (2603:10b6:510:1ab::7) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7762.27; Tue, 16 Jul
 2024 08:50:55 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%6]) with mapi id 15.20.7784.013; Tue, 16 Jul 2024
 08:50:55 +0000
Message-ID: <799c897d-facf-e6d1-6c13-ccbc09630389@amd.com>
Date: Tue, 16 Jul 2024 09:50:47 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
To: Andrew Lunn <andrew@lunn.ch>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <72858182-c0e6-4c05-a11b-fc137f8f1edb@lunn.ch>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <72858182-c0e6-4c05-a11b-fc137f8f1edb@lunn.ch>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0153.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:2c7::16) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH7PR12MB6740:EE_
X-MS-Office365-Filtering-Correlation-Id: a70a123a-704b-4a8a-f9bc-08dca5746749
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|1800799024|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?djFNUXlRVS9mZWN4WlpLTm9DVjU0M0JjdERYTHpJd2UxWHkrM1R3b3dKSlRv?=
 =?utf-8?B?QlJZZTdaM0VqWWk2aEVVL1hiK0ozNWZkZGE5UC9VUDRIMkFWTlQrcnkwNGIr?=
 =?utf-8?B?OXZmYzR3clYwMnpQL2YrbStaMDNKTzJWNU8vS2RtUG1GSkRZREdXNFhKUlg3?=
 =?utf-8?B?T01wVnNxMTVXREVPYzFIaitWQkNsRHQ5L3hlZnEvTk05VlNCdTBMVFhUeEht?=
 =?utf-8?B?dEpHVWRONVBva2h2em5MQTVIMGhvdFhkQVA1cXdQQ1l6YXN5OXFwZHg0RjBV?=
 =?utf-8?B?eUtkVU5NNnZXNTVwS3lYb3JXSTJsL3dXWUlTeEM2RjNwMlpSTGo5NUZBRHdG?=
 =?utf-8?B?Q0NQUHFlVXY0NGpTMnpIK0VWdGdLZU1PU3E4V0JhanA5cTJpNDNQWXZ3V0tO?=
 =?utf-8?B?aTFtaXRDbTN5b0lxNm1oTFEzalYvZWY3STRGbmhQY0dLVXJVcHh4WUkrcVh3?=
 =?utf-8?B?eGJNYzkrRVNKRTVOZytVczZUaUNGYVQ0UnJueXNJNjBuYlN5Q2U4d014d29P?=
 =?utf-8?B?V2VHSVhFZVd2amk5L1IvaEErN3huN1JPM05SS0FreFUvTE5Rd1E1d3NNSStk?=
 =?utf-8?B?UUpVVGlyVjk0M2t4WEwwYThkajBSWHlmS0RtY1FERytROTRIQTlsVHFmditY?=
 =?utf-8?B?SUt2cmdIeVA0OFBIcjl4SkRwNVVOUk9iS0dMUWcrd3JOaFU2ekh2dFU5VVJH?=
 =?utf-8?B?K3dSTjdEVGlNU0syVzYxd2t5dEFObUhXZkorR3A5eFJUdEhtU1hpWFJNZFc2?=
 =?utf-8?B?L0JiM2J0b3UxVkFuU0t6M29oeGtWTFM0LzBGdSs5WEk4NDdGdjlXZnJFOE1M?=
 =?utf-8?B?MnlwV3g1OGk2Z0lEREk3NWNwaGxHZ0xoMXd2WWF0NTNVY3laMHM4TkRYUTYr?=
 =?utf-8?B?YW4xbDVRVkRpRnlzUUdMWjRjbW9QUWliYkpkUW9mSmlyOTJMVnU2NnRQY1Vy?=
 =?utf-8?B?dUQ0VDJVdmtOMnFkU0NIcnUrMW1tSy94L05kYisrcGpZWUFFRHprdGhxK0d5?=
 =?utf-8?B?WU5ocDl4QzZJNkhEUmN3SlVSbDNoZ0FFNFhpVzJBY2xHWFZCcHFiMkt3RDlQ?=
 =?utf-8?B?U2dVUk42M1N0Vmp5V0NYQmFPUzlVZFhtTTNCc0lGOVhvWXRidnZGaGxZb1J2?=
 =?utf-8?B?dTA2REJKRFFHanVYeUpycGFwL0h4T2dybmttQW1nYjZSWWJ0M0MvNHlGcmEw?=
 =?utf-8?B?ZDRScVJDOVpZWW84aWtMdU5NWmZUQlJOQmtub3lxVHhpUHVGUTk2VGxJbWRn?=
 =?utf-8?B?aElwaWcwMElWMFFnNG01TEh1MWVDVkVzaXBkemlSZlZhTEVxRmlmeUpaUHNi?=
 =?utf-8?B?YmVHaG9rTEhOcy9CVnFseTZJbG9mRFdkN2ltM08rSWloZDIrM21QQnJLMHZi?=
 =?utf-8?B?SE1wSlpqTlREZisvSmppaG9nYkZ5dFIxbWxicGQ4bDJGb2czUjBuaUUrcnFC?=
 =?utf-8?B?MVhublFtTGV5WW5EWTE5TXhyUkRMQk90RjlwS2crN1ZBcHZvYXdyQldlWGU1?=
 =?utf-8?B?T0RSMEpiOTN1TW1mTXFMNW4xdmRUNEVrMHB1aktYOVp0Ynh0d1cxaXNWR052?=
 =?utf-8?B?ZmhGMDZHalpGSlhqM3g4RTFYY1I4d3NCSlRZQzFwUjVrSW9qdy9pSU5wSlNN?=
 =?utf-8?B?d3JuMEl2U0MrZlBSd215QUEzS2ZaSGp5MzNHOGhGK29yK1F3eC8wMXBtYnEx?=
 =?utf-8?B?aG9wMjdvTFBmR3p2WWtBcWFXYnd0UG53OEVDYnJrbFBkb3JhL253QnJrNWdW?=
 =?utf-8?B?Yi9nbThteFZlZUhlVjJPczRHLzM1bC90RWJOMFJBUDRVOHM5L2R2VDQ2ZEQr?=
 =?utf-8?B?bldVS0xOdFkyclAxb0NGdz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(1800799024)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?TjJxS1FJOWdCQ2xRajNkVmFoWGFHL0xpS0NWZnZuYlR5SnFYUy9vNWZnSzl4?=
 =?utf-8?B?TnJXTnNqck9ueXEvQzZNM0xsd2Vua2lCMEtUTHhZeitvYUVibVZmaHMwRTd0?=
 =?utf-8?B?Qm9Gcm5Gc0lGMWhFcytPK1RaUHRUOVRocS9uUDlqVW8xSGN4RS9FYzhTV2Ew?=
 =?utf-8?B?WnRyR0JxRitiZ3dLMG03Wk15ckNLNTU0ZWg4a0ZPMlBWM0JNWnVyS05HSWl3?=
 =?utf-8?B?TmdWRDNrRnNpZWIzQU9oS2RSTnVDNTRyc2xQWFdzQ2VYd1lDbEhDMlhGdkxP?=
 =?utf-8?B?cytGZ0dLYVl3RmtKUVZ0L2Jrd08xazBydnB3YmJMWGUwNmVCak5aL1laYVdM?=
 =?utf-8?B?TElKMFdKN2Z4NnhNWVpRa2xIMCtibUx0TXljZ3FjaGNiQlFmclJKeWdyaTZU?=
 =?utf-8?B?cGlPMnZyYU81QmJmdHhIeFFjNVZRSlBLU2NWQXdxUlBqU3ZJREtYcDFZcFVW?=
 =?utf-8?B?RmtDNHYxVXlleE9YNEZUaUdRcXRtTHYyU2xCa3ZERUI2eUpzUS9OUHE3K2I1?=
 =?utf-8?B?dnJlRnVSaFNaQnpBNU40ZEZNaTUyNDVJRlEwR2pWbUpHNzBEeHJQMHFEQU9n?=
 =?utf-8?B?UVlaRitCcTJ0WVl6THFBd2dWOUR4UHNSa01Qb21vRGFES1lGZWJ3MGdGU2o4?=
 =?utf-8?B?TnFIL1NiaGxmT1VBZW56Y2VUZVhhdVFPTHNJS1RadkIxVG9HWkQrS2lTTGpa?=
 =?utf-8?B?TmJ3OE1UdGxoSUl2Q2ZSNEx0aVdCLzlvN0RlRzVNT3plMEw0SnhpNWlyWFBC?=
 =?utf-8?B?ODl6REkvUHQ1cks5SkdvOUhURHgxeHhMWnJBUmxFdHhnbEVYdVJLdHlJV2lI?=
 =?utf-8?B?eXEwenpMbFlvMnlUMmJHK2Q1ZjAremhFT2JySTdKMUlQTjdCK3JEOThVWW5t?=
 =?utf-8?B?R3ViMVVkUzJVakxnaFAzTzZxaTZlaDk3dkZHWnBZVDVjV0Q2Y3hmV3FjZFU1?=
 =?utf-8?B?S3Q3N0VMZFFNMjFjMjNYc3hwSFUvYWt2OEVEald5SnhDbnZES3hkaXZwcXc1?=
 =?utf-8?B?SFc4VTlCYjhjMkVRK0FJaXJ5TjBNenBSZGVtbHorRkxjcEVSZ3dHMGdZUEtN?=
 =?utf-8?B?VUk1UVNQc3VCWS9CMnhuWDM0cFBjbTR1alRBVVFlVWk2aGVWMXJtdVc4Q3Iy?=
 =?utf-8?B?NUc0YXpYQmRmWkZ2WUt1VnJIcllNWENMYU01SXUzU3AxbzVzNE16REQ4VWF2?=
 =?utf-8?B?dUxQdnZFL1N3aC9CcmJlZzlzNktpUUs5MGZmM05tMHBQeGZCZ3ZjaXk4S2Rp?=
 =?utf-8?B?ZkxyVDQ5RThWLy85MkdRZUFiRDcvRGNHUTl4aUFZK2VTWVJKNUFvVjlBSWNj?=
 =?utf-8?B?T05jUVFFR1hPcFZidE9xWUtXNWtQTWM4T2FGeHdHL1hNZlRCWGx0K2prVUxY?=
 =?utf-8?B?SzhOcE02N1k0QzRtWTNKeHMxMTU4R3NBK2FqNG5hRzhISGVjeFlVcklTcVVB?=
 =?utf-8?B?T3NVNHQ4SnhqdWRNek83SXBHa3hjcFNZMGtlTVYyUVVGeHo1RUt2bGR2YUo4?=
 =?utf-8?B?Q25FZDl6Slhrc3ZCL0plTWo4b1pBLzBZbzRoUlYzdFY4MCtUVkdycldPQmZt?=
 =?utf-8?B?RG84ckhlN3pZTkdlSW95VFcyU0hTSnoydzZtL0l5emRxcXc4WkdjYUJTVVlM?=
 =?utf-8?B?amxKMjFRcTBwTmhsNXhPWHhYNElGd0ZaWE1NNzZ2SHZHUUhpUzdvdFB3KzNw?=
 =?utf-8?B?S1FGQnlPS1FBM3Awb1dsWWk3TTlxTUp2UTZ0VEp4bWxOODhrUlV5VzRaclpD?=
 =?utf-8?B?VGdlczkwWldZMmtTVFcwL2VEMmVHZzE0MkJrRk9laVpmWmNKSXgyQXR1RzUy?=
 =?utf-8?B?TTV5UXVzUjdvQlpvdXllNCt4ZC9FVjZXSmFrTWY5RVV2Y3l5M3lGSjkxNEZ6?=
 =?utf-8?B?TmhGN0ZlTGZLcWJhTE1OVVFxM1FjT2xkUllKU3BTTE01Kzh4V2c4MnlZYkFL?=
 =?utf-8?B?bUF0RmtnUkpFS2VJSXpTUjYzZktIN3NsZzhpWWJsc1ptVTRiOG5YYkVGVEpK?=
 =?utf-8?B?TjNsU2MxYlNMZ3IzNTN2dHRRaUFNSGplZWhiZDhPTDdsV3p4T1dCck9KS3Yz?=
 =?utf-8?B?WGtrYUQ5ZlpzKzVsTDh4KytEbkhPL3M5YW5IZ1NzR3pQOFdZUkhSSk9ocm5a?=
 =?utf-8?Q?LPsQBxE8tq2Crj/YzAHHZkB87?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: a70a123a-704b-4a8a-f9bc-08dca5746749
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Jul 2024 08:50:54.9421
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: Y7qW6jCOVQZ5nk/Pc/7ngnId29SCfPPmymbfYLh4xHTJqWurjOGejjA1yVZzMSOJ2hI0WHETkrCd5g/Y7h5r9g==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB6740


On 7/15/24 19:48, Andrew Lunn wrote:
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -0,0 +1,22 @@
>> +/* SPDX-License-Identifier: GPL-2.0 */
>> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
>> +
>> +#include <linux/cdev.h>
> That is generally a red flag that something not good is about to be
> found. But it does not appear to be used in this patch....
>
>         Andrew
>

I have no explanation about how it ended up there. I suspect it comes 
from V1 --> V2 transition. cxlmem.h includes it and V1 was moving that 
file to include/linux.


Anyway, I'll get rid of it.

Thanks


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.9])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 25D04145A1C;
	Thu, 18 Jul 2024 23:12:29 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=198.175.65.9
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721344352; cv=none; b=a/30WU9BfE8kIXxQk6V2kB5fL/UqpSC368p7g4Lv8NY8R+NIVgUE1o0oT5lhPxzHkeggN0i8pe7r/AvxCwtKm6h15MwJzPeHV546UPq6GoepENSP3WaM8RgnbZ2q9fOgBWnPqSj/0xmiCcW26SR+yoDX/pHjgGnYla4PduVuxrk=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721344352; c=relaxed/simple;
	bh=vW1p0Rkqd6tUlF+S/3y/oWhnFBHM8+eaOf6HiZXXmCE=;
	h=Message-ID:Date:MIME-Version:Subject:To:Cc:References:From:
	 In-Reply-To:Content-Type; b=oFzhbend6GKgp/wnvjOU8bKAQU/FJMVpt7OjYWzZTKLGy9CbKtpgqzsK7DtEI+JTksK18YqIBb+ayJFMBe9KerB2+4aDOQx3VAQcicHNU/iW33lIKG55NDdfJ0/3mYC0yWc2O6AaDNlxD8C0hHVyCuXmxo5cNUP6oUXS5d3BKUQ=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=icQuaz3/; arc=none smtp.client-ip=198.175.65.9
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="icQuaz3/"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721344350; x=1752880350;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=vW1p0Rkqd6tUlF+S/3y/oWhnFBHM8+eaOf6HiZXXmCE=;
  b=icQuaz3/zC5Z3dDNu6AYeWpXcc+Z2derkplPm5QfrK1eKK/5qW/6eDSf
   KOnm9zqwBc/ASbmYS8KdL6M9WIUgI9SzpPVPFjhOxom+IFVH9AWhP02K/
   ULbbnGZjDIofkYo3IiTjpjmI0U7sXc8ox9wAYbeNXc/W5rvZlSVBCb+xA
   h4hcmvl6X92tKGHqDDfCRzwn/msR2mPxa1kPydkiLQk5gc74p/CffICVH
   b2Vj3q2OUgEzUa5cwO28J/0MXmdmwgULMoFrQVDTPPs29RaUtYaWH6jxv
   Efzyv6hyukT7FYlknmpufT1BqyeOpxJ2mG3AzdlIG9UYYzQpzhVprl8Vu
   Q==;
X-CSE-ConnectionGUID: oL7+gE76SceOHKZPyfhR/Q==
X-CSE-MsgGUID: fK4p23+YSQK6lHmlziV7Ew==
X-IronPort-AV: E=McAfee;i="6700,10204,11137"; a="41467618"
X-IronPort-AV: E=Sophos;i="6.09,219,1716274800"; 
   d="scan'208";a="41467618"
Received: from orviesa002.jf.intel.com ([10.64.159.142])
  by orvoesa101.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 18 Jul 2024 16:12:30 -0700
X-CSE-ConnectionGUID: zPFmW2snSpyKYG2kXfhp9g==
X-CSE-MsgGUID: qKjTw1cJSlaJX5vLN9WzuQ==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,219,1716274800"; 
   d="scan'208";a="81557677"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.125.108.184]) ([10.125.108.184])
  by orviesa002-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 18 Jul 2024 16:12:29 -0700
Message-ID: <936eecad-2e98-4336-b775-d28fa1d87d76@intel.com>
Date: Thu, 18 Jul 2024 16:12:27 -0700
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
To: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
Cc: Alejandro Lucero <alucerop@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
Content-Language: en-US
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit



On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
> 
> Differientiate Type3, aka memory expanders, from Type2, aka device
> accelerators, with a new function for initializing cxl_dev_state.
> 
> Create opaque struct to be used by accelerators relying on new access
> functions in following patches.
> 
> Add SFC ethernet network driver as the client.
> 
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/memdev.c             | 52 ++++++++++++++++++++++++++
>  drivers/net/ethernet/sfc/Makefile     |  2 +-
>  drivers/net/ethernet/sfc/efx.c        |  4 ++
>  drivers/net/ethernet/sfc/efx_cxl.c    | 53 +++++++++++++++++++++++++++
>  drivers/net/ethernet/sfc/efx_cxl.h    | 29 +++++++++++++++
>  drivers/net/ethernet/sfc/net_driver.h |  4 ++
>  include/linux/cxl_accel_mem.h         | 22 +++++++++++
>  include/linux/cxl_accel_pci.h         | 23 ++++++++++++

Maybe create an include/linux/cxl and then we can put headers in there.

>  8 files changed, 188 insertions(+), 1 deletion(-)
>  create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
>  create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
>  create mode 100644 include/linux/cxl_accel_mem.h
>  create mode 100644 include/linux/cxl_accel_pci.h
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 0277726afd04..61b5d35b49e7 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -8,6 +8,7 @@
>  #include <linux/idr.h>
>  #include <linux/pci.h>
>  #include <cxlmem.h>
> +#include <linux/cxl_accel_mem.h>
>  #include "trace.h"
>  #include "core.h"
>  
> @@ -615,6 +616,25 @@ static void detach_memdev(struct work_struct *work)
>  
>  static struct lock_class_key cxl_memdev_key;
>  
> +struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
> +{
> +	struct cxl_dev_state *cxlds;
> +
> +	cxlds = devm_kzalloc(dev, sizeof(*cxlds), GFP_KERNEL);

Naked cxlds. Do you think you'll need an accel_dev_state to wrap around cxl_dev_state similar to cxl_memdev_state in order to store accel related information? I also wonder if 'struct cxl_dev_state' should be a public definition. Need to look at the rest of the patchset to circle back. 

> +	if (!cxlds)
> +		return ERR_PTR(-ENOMEM);
> +
> +	cxlds->dev = dev;
> +	cxlds->type = CXL_DEVTYPE_DEVMEM;
> +
> +	cxlds->dpa_res = DEFINE_RES_MEM_NAMED(0, 0, "dpa");
> +	cxlds->ram_res = DEFINE_RES_MEM_NAMED(0, 0, "ram");
> +	cxlds->pmem_res = DEFINE_RES_MEM_NAMED(0, 0, "pmem");
> +
> +	return cxlds;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);

I do wonder if we should have a common device state init helper function to init all the common bits:
int cxlds_init(struct *dev, enum cxl_devtype devtype)


> +
>  static struct cxl_memdev *cxl_memdev_alloc(struct cxl_dev_state *cxlds,
>  					   const struct file_operations *fops)
>  {
> @@ -692,6 +712,38 @@ static int cxl_memdev_open(struct inode *inode, struct file *file)
>  	return 0;
>  }
>  
> +
> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
> +{
> +	cxlds->cxl_dvsec = dvsec;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_dvsec, CXL);
> +
> +void cxl_accel_set_serial(struct cxl_dev_state *cxlds, u64 serial)
> +{
> +	cxlds->serial= serial;

Missing space before '='
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_serial, CXL);
> +
> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
> +			    enum accel_resource type)
> +{
> +	switch (type) {
> +	case CXL_ACCEL_RES_DPA:
> +		cxlds->dpa_res = res;
> +		return;
> +	case CXL_ACCEL_RES_RAM:
> +		cxlds->ram_res = res;
> +		return;
> +	case CXL_ACCEL_RES_PMEM:
> +		cxlds->pmem_res = res;
> +		return;
> +	default:
> +		dev_err(cxlds->dev, "unkown resource type (%u)\n", type);
> +	}
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
> +
>  static int cxl_memdev_release_file(struct inode *inode, struct file *file)
>  {
>  	struct cxl_memdev *cxlmd =
> diff --git a/drivers/net/ethernet/sfc/Makefile b/drivers/net/ethernet/sfc/Makefile
> index 8f446b9bd5ee..e80c713c3b0c 100644
> --- a/drivers/net/ethernet/sfc/Makefile
> +++ b/drivers/net/ethernet/sfc/Makefile
> @@ -7,7 +7,7 @@ sfc-y			+= efx.o efx_common.o efx_channels.o nic.o \
>  			   mcdi_functions.o mcdi_filters.o mcdi_mon.o \
>  			   ef100.o ef100_nic.o ef100_netdev.o \
>  			   ef100_ethtool.o ef100_rx.o ef100_tx.o \
> -			   efx_devlink.o
> +			   efx_devlink.o efx_cxl.o
>  sfc-$(CONFIG_SFC_MTD)	+= mtd.o
>  sfc-$(CONFIG_SFC_SRIOV)	+= sriov.o ef10_sriov.o ef100_sriov.o ef100_rep.o \
>                             mae.o tc.o tc_bindings.o tc_counters.o \
> diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
> index e9d9de8e648a..cb3f74d30852 100644
> --- a/drivers/net/ethernet/sfc/efx.c
> +++ b/drivers/net/ethernet/sfc/efx.c
> @@ -33,6 +33,7 @@
>  #include "selftest.h"
>  #include "sriov.h"
>  #include "efx_devlink.h"
> +#include "efx_cxl.h"
>  
>  #include "mcdi_port_common.h"
>  #include "mcdi_pcol.h"
> @@ -899,6 +900,7 @@ static void efx_pci_remove(struct pci_dev *pci_dev)
>  	efx_pci_remove_main(efx);
>  
>  	efx_fini_io(efx);
> +

stray blank line

>  	pci_dbg(efx->pci_dev, "shutdown successful\n");
>  
>  	efx_fini_devlink_and_unlock(efx);
> @@ -1109,6 +1111,8 @@ static int efx_pci_probe(struct pci_dev *pci_dev,
>  	if (rc)
>  		goto fail2;
>  
> +	efx_cxl_init(efx);

No error checks? Does the device expect to work whether CXL is setup or not?

> +
>  	rc = efx_pci_probe_post_io(efx);
>  	if (rc) {
>  		/* On failure, retry once immediately.
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> new file mode 100644
> index 000000000000..4554dd7cca76
> --- /dev/null
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -0,0 +1,53 @@
> +// SPDX-License-Identifier: GPL-2.0-only
> +/****************************************************************************
> + * Driver for AMD network controllers and boards
> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
> + *
> + * This program is free software; you can redistribute it and/or modify it
> + * under the terms of the GNU General Public License version 2 as published
> + * by the Free Software Foundation, incorporated herein by reference.
> + */
> +
> +
> +#include <linux/pci.h>
> +#include <linux/cxl_accel_mem.h>
> +#include <linux/cxl_accel_pci.h>
> +
> +#include "net_driver.h"
> +#include "efx_cxl.h"
> +
> +#define EFX_CTPIO_BUFFER_SIZE	(1024*1024*256)
> +
> +void efx_cxl_init(struct efx_nic *efx)
> +{
> +	struct pci_dev *pci_dev = efx->pci_dev;
> +	struct efx_cxl *cxl = efx->cxl;
> +	struct resource res;
> +	u16 dvsec;
> +
> +	dvsec = pci_find_dvsec_capability(pci_dev, PCI_VENDOR_ID_CXL,
> +					  CXL_DVSEC_PCIE_DEVICE);
> +
> +	if (!dvsec)
> +		return;
> +
> +	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability found");

Seem like unnecessary kern log emission

> +
> +	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
> +	if (IS_ERR(cxl->cxlds)) {
> +		pci_info(pci_dev, "CXL accel device state failed");

pci_err()? or maybe pci_warn() given it's ignoring error returns. 
> +		return;
> +	}
> +
> +	cxl_accel_set_dvsec(cxl->cxlds, dvsec);
> +	cxl_accel_set_serial(cxl->cxlds, pci_dev->dev.id);
> +
> +	res = DEFINE_RES_MEM(0, EFX_CTPIO_BUFFER_SIZE);
> +	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_DPA);
> +
> +	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
> +	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
> +}
> +
> +
> +MODULE_IMPORT_NS(CXL);
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.h b/drivers/net/ethernet/sfc/efx_cxl.h
> new file mode 100644
> index 000000000000..76c6794c20d8
> --- /dev/null
> +++ b/drivers/net/ethernet/sfc/efx_cxl.h
> @@ -0,0 +1,29 @@
> +// SPDX-License-Identifier: GPL-2.0-only
> +/****************************************************************************
> + * Driver for AMD network controllers and boards
> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
> + *
> + * This program is free software; you can redistribute it and/or modify it
> + * under the terms of the GNU General Public License version 2 as published
> + * by the Free Software Foundation, incorporated herein by reference.
> + */
> +
> +#ifndef EFX_CXL_H
> +#define EFX_CLX_H
> +
> +#include <linux/cxl_accel_mem.h>
> +
> +struct efx_nic;
> +
> +struct efx_cxl {
> +	cxl_accel_state *cxlds;
> +	struct cxl_memdev *cxlmd;
> +	struct cxl_root_decoder *cxlrd;
> +	struct cxl_port *endpoint;
> +	struct cxl_endpoint_decoder *cxled;
> +	struct cxl_region *efx_region;
> +	void __iomem *ctpio_cxl;
> +};
> +
> +void efx_cxl_init(struct efx_nic *efx);
> +#endif
> diff --git a/drivers/net/ethernet/sfc/net_driver.h b/drivers/net/ethernet/sfc/net_driver.h
> index f2dd7feb0e0c..58b7517afea4 100644
> --- a/drivers/net/ethernet/sfc/net_driver.h
> +++ b/drivers/net/ethernet/sfc/net_driver.h
> @@ -814,6 +814,8 @@ enum efx_xdp_tx_queues_mode {
>  
>  struct efx_mae;
>  
> +struct efx_cxl;
> +
>  /**
>   * struct efx_nic - an Efx NIC
>   * @name: Device name (net device name or bus id before net device registered)
> @@ -962,6 +964,7 @@ struct efx_mae;
>   * @tc: state for TC offload (EF100).
>   * @devlink: reference to devlink structure owned by this device
>   * @dl_port: devlink port associated with the PF
> + * @cxl: details of related cxl objects
>   * @mem_bar: The BAR that is mapped into membase.
>   * @reg_base: Offset from the start of the bar to the function control window.
>   * @monitor_work: Hardware monitor workitem
> @@ -1148,6 +1151,7 @@ struct efx_nic {
>  
>  	struct devlink *devlink;
>  	struct devlink_port *dl_port;
> +	struct efx_cxl *cxl;
>  	unsigned int mem_bar;
>  	u32 reg_base;
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> new file mode 100644
> index 000000000000..daf46d41f59c
> --- /dev/null
> +++ b/include/linux/cxl_accel_mem.h
> @@ -0,0 +1,22 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> +
> +#include <linux/cdev.h>

Don't think this header is needed?

> +
> +#ifndef __CXL_ACCEL_MEM_H
> +#define __CXL_ACCEL_MEM_H
> +
> +enum accel_resource{
> +	CXL_ACCEL_RES_DPA,
> +	CXL_ACCEL_RES_RAM,
> +	CXL_ACCEL_RES_PMEM,
> +};
> +
> +typedef struct cxl_dev_state cxl_accel_state;
Please use 'struct cxl_dev_state' directly. There's no good reason to hide the type.

> +cxl_accel_state *cxl_accel_state_create(struct device *dev);
> +
> +void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
> +void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
> +			    enum accel_resource);
> +#endif
> diff --git a/include/linux/cxl_accel_pci.h b/include/linux/cxl_accel_pci.h
> new file mode 100644
> index 000000000000..c337ae8797e6
> --- /dev/null
> +++ b/include/linux/cxl_accel_pci.h
> @@ -0,0 +1,23 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> +
> +#ifndef __CXL_ACCEL_PCI_H
> +#define __CXL_ACCEL_PCI_H
> +
> +/* CXL 2.0 8.1.3: PCIe DVSEC for CXL Device */
> +#define CXL_DVSEC_PCIE_DEVICE					0
> +#define   CXL_DVSEC_CAP_OFFSET		0xA
> +#define     CXL_DVSEC_MEM_CAPABLE	BIT(2)
> +#define     CXL_DVSEC_HDM_COUNT_MASK	GENMASK(5, 4)
> +#define   CXL_DVSEC_CTRL_OFFSET		0xC
> +#define     CXL_DVSEC_MEM_ENABLE	BIT(2)
> +#define   CXL_DVSEC_RANGE_SIZE_HIGH(i)	(0x18 + (i * 0x10))
> +#define   CXL_DVSEC_RANGE_SIZE_LOW(i)	(0x1C + (i * 0x10))
> +#define     CXL_DVSEC_MEM_INFO_VALID	BIT(0)
> +#define     CXL_DVSEC_MEM_ACTIVE	BIT(1)
> +#define     CXL_DVSEC_MEM_SIZE_LOW_MASK	GENMASK(31, 28)
> +#define   CXL_DVSEC_RANGE_BASE_HIGH(i)	(0x20 + (i * 0x10))
> +#define   CXL_DVSEC_RANGE_BASE_LOW(i)	(0x24 + (i * 0x10))
> +#define     CXL_DVSEC_MEM_BASE_LOW_MASK	GENMASK(31, 28)

This looks like a copy/paste of drivers/cxl/cxlpci.h definition. I suggest create a include/linux/cxl/pci.h and stick it in there and delete the copy in cxlpci.h. Also update the CXL spec version to latest (3.1) if you don't mind if we are going to move it. 
> +
> +#endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.13])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id CC1FB80C07;
	Thu, 18 Jul 2024 23:28:01 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=198.175.65.13
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721345284; cv=none; b=iuF/ufhuWoSVEJcBDrGohz40UWr6noWQNA9C6ZGdSmXkzvNkojLcgGtSBivpkKn6zf1ACJkOKFY4k/roGmqNx+v7VpZRcDuMdiJxk+eD4aRCQgzdF9uTbrztN+5DzOEczu0/uFxzYksH5ycJZev7GBJRTg2Svm1KsFibNao2gyE=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721345284; c=relaxed/simple;
	bh=QD1QghOQFNrENYCU65uuFoB5yjsiBE3UL5/XQnpp6rU=;
	h=Message-ID:Date:MIME-Version:Subject:To:Cc:References:From:
	 In-Reply-To:Content-Type; b=Vqp30NdQWDBsR209q0xPzPb6vfwPfZjixOCTVqFcUy/gcL2MNyvon0r4I5i1+SR+tUBIXR+87Fixx0q0vdx2dCK37C6xTENsDr4G1X0UxNy2yicgI28gAPVQ9VHJy0KBBOuiJeSHhbXKYvXvtnTtO01Yipzl8NNPz/EN+N1ahos=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=aXAqyHjV; arc=none smtp.client-ip=198.175.65.13
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="aXAqyHjV"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721345282; x=1752881282;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=QD1QghOQFNrENYCU65uuFoB5yjsiBE3UL5/XQnpp6rU=;
  b=aXAqyHjVBUJR1PSwyNbf4XGQgoO79wDIrIYsD+wGEVoJP6eLWnrNmrcu
   ngZrnPXaRiPuMBeF1RYiWEYFbBc8vHPKe+5WZX8G9pq6/PRmRpXziKxnJ
   /kYQuEJjUzomUZv4XLWqcf0o6QKR9pX2wbTZ4/bFq4U+f2/V3RGcjoAJI
   11ClTkZA/hC3uWk+cW5QtyBdzd0x2L1Lh/BBJlaxzwbdw+zAWm2hqQbC7
   GPDA853JsS8ELIaIR7XPaOJoWHbrllAbrwloyEOgwdUscNezPr7OAVpki
   eqem0ePKtegXyeXL/NcjC0Meg9x8FxmAoWKbD+WBQz8GHd483jQrrwQvK
   w==;
X-CSE-ConnectionGUID: GHpCuspEQ0mEk8W/3qGhbA==
X-CSE-MsgGUID: DKmuK59dRJidK7j0KPW5gg==
X-IronPort-AV: E=McAfee;i="6700,10204,11137"; a="30098696"
X-IronPort-AV: E=Sophos;i="6.09,219,1716274800"; 
   d="scan'208";a="30098696"
Received: from orviesa007.jf.intel.com ([10.64.159.147])
  by orvoesa105.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 18 Jul 2024 16:28:01 -0700
X-CSE-ConnectionGUID: 2r360qDhToK1XvF2+XOO/Q==
X-CSE-MsgGUID: U1Yp8Jb/RDenoJcqYspsSA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,219,1716274800"; 
   d="scan'208";a="51532661"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.125.108.184]) ([10.125.108.184])
  by orviesa007-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 18 Jul 2024 16:28:00 -0700
Message-ID: <33c34f2d-55cb-4b50-888d-1293ea2fa67d@intel.com>
Date: Thu, 18 Jul 2024 16:27:59 -0700
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
To: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
Cc: Alejandro Lucero <alucerop@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
Content-Language: en-US
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit



On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
> 
> Create a new function for a type2 device initialising the opaque
> cxl_dev_state struct regarding cxl regs setup and mapping.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/pci.c                  | 28 ++++++++++++++++++++++++++++
>  drivers/net/ethernet/sfc/efx_cxl.c |  3 +++
>  include/linux/cxl_accel_mem.h      |  1 +
>  3 files changed, 32 insertions(+)
> 
> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> index e53646e9f2fb..b34d6259faf4 100644
> --- a/drivers/cxl/pci.c
> +++ b/drivers/cxl/pci.c
> @@ -11,6 +11,7 @@
>  #include <linux/pci.h>
>  #include <linux/aer.h>
>  #include <linux/io.h>
> +#include <linux/cxl_accel_mem.h>
>  #include "cxlmem.h"
>  #include "cxlpci.h"
>  #include "cxl.h"
> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
>  	return cxl_setup_regs(map);
>  }
>  
> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)

Function should go into cxl/core/pci.c

> +{
> +	struct cxl_register_map map;
> +	int rc;
> +
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
> +	if (rc)
> +		return rc;
> +
> +	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
> +	if (rc)
> +		return rc;
> +
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> +				&cxlds->reg_map);
> +	if (rc)
> +		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
> +
> +	rc = cxl_map_component_regs(&cxlds->reg_map, &cxlds->regs.component,
> +				    BIT(CXL_CM_CAP_CAP_ID_RAS));
> +	if (rc)
> +		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");

dev_warn()? also maybe add the errno in the error emissioni. 

> +
> +	return rc;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_pci_accel_setup_regs, CXL);
> +
>  static int cxl_pci_ras_unmask(struct pci_dev *pdev)
>  {
>  	struct cxl_dev_state *cxlds = pci_get_drvdata(pdev);
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 4554dd7cca76..10c4fb915278 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -47,6 +47,9 @@ void efx_cxl_init(struct efx_nic *efx)
>  
>  	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>  	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
> +
> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
> +		pci_info(pci_dev, "CXL accel setup regs failed");

pci_warn()? although seems unnecesary since error emitted in cxl_pci_accel_setup_regs(). 

>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index daf46d41f59c..ca7af4a9cefc 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -19,4 +19,5 @@ void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>  void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>  void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>  			    enum accel_resource);
> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>  #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.10])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 8FB362AF18;
	Thu, 18 Jul 2024 23:36:02 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=198.175.65.10
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721345764; cv=none; b=kwXMJbG2WXlgE+Nka3lHu5uIxUMjwftdSLCXFkHRJoAtwyhJwNCakiIIb9IsjNLZNLxUZeUwrAc+TBMTmCmaP94LoHzKMEPTaoh8p5FnpraEU8p8CoEAUl359Wce5HZIbHHbc8GXOoB+NjzJAVIeXpIUC1zfE9IgawuowUwRcxk=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721345764; c=relaxed/simple;
	bh=ep5eWrhAXKMT3a1EI4DLi3Mu5MhwEqP3OAgzzQUi5xo=;
	h=Message-ID:Date:MIME-Version:Subject:To:Cc:References:From:
	 In-Reply-To:Content-Type; b=aDn1TeEURlJZn3Ce9+IhzJoO/9M0XlRKaZJR0urmObEhn7aJizGFyWjCy5dUOOErdg0ikBSqLFwXWyh5fOmyJf43lwvglvpaJzjz1eOp05zlauPJ2o1FsW0HN2Xdg7CcR0eoAfDMSzgKRlvn3fEwhkCXbM2k6MwAHS9HKljRiZM=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=a3azep9B; arc=none smtp.client-ip=198.175.65.10
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="a3azep9B"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721345762; x=1752881762;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=ep5eWrhAXKMT3a1EI4DLi3Mu5MhwEqP3OAgzzQUi5xo=;
  b=a3azep9BRUj2UMLjvO/9JwBqtl+s/QaHK45i1wQEFceLUfztPQAypG6X
   G3aH7mffTPwaQr5KP9dSfuuxguTzIoLNG9/tSEwv09wpB7Z6Y8hj0LCMB
   0yXCXDTMyKtrTFALgFAuiUla6/jTaTwDbuBjMnVcn1ZUagiEsJyPmeswt
   symHVH4UUl8XlXshBgr1ljf0AYsh8rle6Jnyv5Gfpn05pzCwW9Nqe6RF0
   x3CWeoGiX3BFSmzEK5nT2aNiHxxAhHSE/+6B9xmdG/ylVThhnusmifbno
   wmGOYSDyac4YdY80OLPGJwFFVpriSW0YBqfUuwYUItV+mErxEDQ/KvUmv
   g==;
X-CSE-ConnectionGUID: 1oSghVNnR8aLdFwz8ZOXQw==
X-CSE-MsgGUID: DtWISr8sQoe7H4JNnamjog==
X-IronPort-AV: E=McAfee;i="6700,10204,11137"; a="36380985"
X-IronPort-AV: E=Sophos;i="6.09,219,1716274800"; 
   d="scan'208";a="36380985"
Received: from orviesa003.jf.intel.com ([10.64.159.143])
  by orvoesa102.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 18 Jul 2024 16:36:01 -0700
X-CSE-ConnectionGUID: 9QbGHwy+Q/GOIGQqvzaYcw==
X-CSE-MsgGUID: rIBhblh5QxWij0HjDc9PXA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,219,1716274800"; 
   d="scan'208";a="55786036"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.125.108.184]) ([10.125.108.184])
  by ORVIESA003-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 18 Jul 2024 16:36:00 -0700
Message-ID: <abff9def-a878-47e9-b9c8-27cf3c008c29@intel.com>
Date: Thu, 18 Jul 2024 16:36:00 -0700
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 03/15] cxl: add function for type2 resource request
To: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
Cc: Alejandro Lucero <alucerop@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-4-alejandro.lucero-palau@amd.com>
Content-Language: en-US
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20240715172835.24757-4-alejandro.lucero-palau@amd.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit



On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
> 
> Create a new function for a type2 device requesting a resource
> passing the opaque struct to work with.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/memdev.c          | 13 +++++++++++++
>  drivers/net/ethernet/sfc/efx_cxl.c |  7 ++++++-
>  include/linux/cxl_accel_mem.h      |  1 +
>  3 files changed, 20 insertions(+), 1 deletion(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 61b5d35b49e7..04c3a0f8bc2e 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -744,6 +744,19 @@ void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>  }
>  EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
>  
> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram)
Maybe declare a common enum like cxl_resource_type instead of 'enum accel_resource' and use here instead of bool?

> +{
> +	int rc;
> +
> +	if (is_ram)
> +		rc = request_resource(&cxlds->dpa_res, &cxlds->ram_res);
> +	else
> +		rc = request_resource(&cxlds->dpa_res, &cxlds->pmem_res);
> +
> +	return rc;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
> +
>  static int cxl_memdev_release_file(struct inode *inode, struct file *file)
>  {
>  	struct cxl_memdev *cxlmd =
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 10c4fb915278..9cefcaf3caca 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -48,8 +48,13 @@ void efx_cxl_init(struct efx_nic *efx)
>  	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>  	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>  
> -	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds)) {
>  		pci_info(pci_dev, "CXL accel setup regs failed");
> +		return;
> +	}
> +
> +	if (cxl_accel_request_resource(cxl->cxlds, true))
> +		pci_info(pci_dev, "CXL accel resource request failed");

pci_warn()? also emitting the errno would be nice. 

>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index ca7af4a9cefc..c7b254edc096 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -20,4 +20,5 @@ void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>  void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>  			    enum accel_resource);
>  int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
>  #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-DM6-obe.outbound.protection.outlook.com (mail-dm6nam10on2068.outbound.protection.outlook.com [40.107.93.68])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 4526A38FA0;
	Fri, 19 Jul 2024 06:04:19 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.93.68
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721369062; cv=fail; b=cFyXejnPAE2FuHL8rH+zATsfBXKUkib+adly7knSTqGhYx03d/vof+zOxgD+wSnkKWKKcRY6VpuAEWcNM7IssucSejkg3xxAnH0NtKCZ3GPPFCVE9C5wCmggYch5KEzvUshqLviz4cqi5PqkSVslTttCOO1YKARinGM3IniG3xA=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721369062; c=relaxed/simple;
	bh=H3OYa0JGwt5zlmTfCaxYNkSyL5cKjby2EPPQbYUr+Uo=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Z5usIJweHguqDh7QuSNNJVEUsbXpXTkCRUu0QOpcJ7297znO6/eVWaUo0khEKt52rp9vO9CeLFQgeKHPUlNDX9Ih9DII9491tdVVj7nHP6VvnUPSY6GD5Cdw4q1YGJ2qWHLNk3tmZgu7plkA9lqmAIWi7xl+tJLBtHN/PKXhP/g=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=48JqrG4+; arc=fail smtp.client-ip=40.107.93.68
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="48JqrG4+"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=rw90SD2Pk2AburF7fEuHFw9ApI3jsR5IxisEI1uG7zo9OQAV6lPfeAeixehW1tuMcRFkzGapptfcCBtFQGlJHSV5c6qkj/Bdi9g2VHe939KATJXC2OjVnPyRhUMyMqLEaxzUJo4y3g8gS30JVh4ivWnmfi+3iLfGA59HZ1BDDNnwYLn7GedyEP5rlgQc6BTYzRZ9LxS0mU7PjRHQz4Ul7c5Wi5uVrfZbQfYbQkjZNI/t3vGKnd3orfWwWUWkN1J3gh2LLvOvfZ10iRiocWbzHDsx8sb0GfHCVh20s0wU25Ows/9XjWw4xkjviY5/kK0xsersI3y3ZMUQLfJVNi4Oqw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Od1895//0taMBRV1jEjumzUGEdNodF75YJwFZNY56EU=;
 b=HPFfjRvd2xfCOiMwy+2Li7lyjI1a/qwe3GlSrCAZeO0uE8H1IM9vWFRYy9Lm3iQI/WVn3M83whdAztY7llev2EplmrpnnxAFuD9uf1W8xDpmsRUu75fGhPt1BBxFnTWTu+g2fYetyLNT8tnMKJ/uWIm3D81lTCoxKtjIvztqtlhZmq6C5PDWUkdsvIkGMrHW8rJEFGttDxdsSNy1gqM0UQeegVEZ2VOIqmze6RRyv58lm1mrfVcb2ntv8nFqYRiR/tJHeW9xEwEUfEW+SiGxXF+uEYXVX2o5qG0zP0DmqUASV4THdnBDPNcES2ot5wAy15ccW/Dc5qZfiXIromszhg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Od1895//0taMBRV1jEjumzUGEdNodF75YJwFZNY56EU=;
 b=48JqrG4+Fnqueb436ov0sE605OKbdeTh9BEQLlR/8RK0oRkdWB7zoAT0v54ehtXLl3NirnA7OoAO9nE7gXCaRhsfaA5DOXEq3IafIIPo/D4Qj+Aq85W3oHV4voCLnYEeTpTyLdGfpV5IodgwHp25GgvMCw6AQQLSfV9Ud4VfCFc=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by IA0PR12MB7580.namprd12.prod.outlook.com (2603:10b6:208:43b::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7784.19; Fri, 19 Jul
 2024 06:04:16 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%6]) with mapi id 15.20.7784.013; Fri, 19 Jul 2024
 06:04:15 +0000
Message-ID: <e5a4836d-a405-5b12-62a7-e45b39fb12ad@amd.com>
Date: Fri, 19 Jul 2024 07:03:58 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
To: Dave Jiang <dave.jiang@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <936eecad-2e98-4336-b775-d28fa1d87d76@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <936eecad-2e98-4336-b775-d28fa1d87d76@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LNXP265CA0015.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:5e::27) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|IA0PR12MB7580:EE_
X-MS-Office365-Filtering-Correlation-Id: 6765e7ef-80be-42ce-e962-08dca7b89e38
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?dmVQWDkyNHNaTGhXdU4wNEhRRThLRElXem0xdFltUWlpb2E3ZEFNTFIvTGNx?=
 =?utf-8?B?K1F6a25DNWs3akdlMUxtMWNMSjFQbmt0Nnk3MjFFVUdtR2xrWlZXQWZzOWUv?=
 =?utf-8?B?VlRGV3pKRXF2S2FzSTZpNnVlUWRQODRKcHI2cnZKV1E4UHkvSTY3U2cwOVBt?=
 =?utf-8?B?b3hyTzNrTDc3Sm4rbVVnNzRFUjV4alBTV1IzdmJNQVpDZ0NjYndPQ3IzeCtz?=
 =?utf-8?B?dHBnbGJYV1pKcFVZendEYXk2TCtVNzlDa2thT016cm9La3NieHM3Wnd5UjVv?=
 =?utf-8?B?VmtieGhrNTB0NUVsSHNqYWI3bWpqR0dzVE1WcXk5a3NRYTlUVFB5OFVSbWti?=
 =?utf-8?B?RktkcklLcjVKcjJoLzlsWVlvUkJrTzd3QWY4UnhHNkJ4WlZkYU9SUFdxRzMy?=
 =?utf-8?B?b0U4TUg1NUpKQ1VjVVFhRWFZRUd3RDVNYWhPWnNzTEwvRU1QYzRkVkZvcElu?=
 =?utf-8?B?eXhkOUVGc1lIM0pRMGZXS09za2xzQTJ0NStyazN3MkRRdnJQOHlBTDFYUGVj?=
 =?utf-8?B?SG5nZjhXSjhXZ280V2ZiSGd1UnJPeUhZRnZ2ZlVJTGcwNGZCYjJETXdXREhy?=
 =?utf-8?B?cXg5SE1kZUVocFI2ZHhRVnFTTjZ1TE5YTjVCaUw1ckppdlVjWHQxSkMzWlJt?=
 =?utf-8?B?ZW9ackVOTStaQXk4NkZ1SUZSWEgzQkxPbGxCNEhXcTNRNHgvZCtrYm1oa1RN?=
 =?utf-8?B?V1N2SEVkVC9pSzhoL0ovMWRiQVpTZDIvTjhsbGplZk1BL292QlBCMXgwcDJP?=
 =?utf-8?B?S3F1aUFGUDZmekZPYWRsTFlNdW03UjJ6K1Q2UXFPMFFzc0lobURKN1dYdEcz?=
 =?utf-8?B?OVFGMUpwcnRyRXhaU0tVVEhJbjR5dHNOTzZ0aCt0NEJ3ZlhiTHVqaGtIQy85?=
 =?utf-8?B?dmZwQmtRbDBzLy9ZWlZQTHpQNVloWEhQTVVjNk5neDFURldDWXp3YTBxRmgx?=
 =?utf-8?B?NUxDWm5oWEpJZUhrZmJ0VDhtMTJBd1R4czBYYUtrQkFFeW5odXBqSFdmdHRa?=
 =?utf-8?B?NXMrMmlqQUdTNk9GNFVQd2ZNb3NsR3l0dmUyZWYxQSs0czJNcWpvSUtxRmVM?=
 =?utf-8?B?cW00RnFaNFNVQk5yZ1UvYVEzK1M4OFFOcW92WUhodlBROEV6OERKN2hmWGJP?=
 =?utf-8?B?eXB1cFpjd2lIWWtzSXc0QjA2aXFObzg2cUs3TDhIenZ5Qm9ab0JtaGVEOHYx?=
 =?utf-8?B?bGZQR1BFYlBmaUl5ZlFKRXZXM0JUK25NOVh3M1pBNU1IY3UzcFVJekNRNVU3?=
 =?utf-8?B?bzIxdGdROHVuRmVrNFZIaFRhdVd1dVdxMUVPY2FBcEtwalkrcCthSXkvRG15?=
 =?utf-8?B?WGpmbVhTY1dwNVBlQ29JbzFNbm9tcDBCQU9MbEU2SGY4ZkQydDg2eGE3eTJF?=
 =?utf-8?B?L1NoVTZIcjVybVpEVG4xK2xGQlFNR0YvY0RGUDBZN2t0ODRqa0JubDJtWUln?=
 =?utf-8?B?WVRlcGF3RCtyajJ3TDZUNENrbHcxVmgveUcvZkIwSE55MmxlYmhYQ0EwZnNj?=
 =?utf-8?B?alp2dSs5S1psZGd3d2E2SDNYakllcldvd3p2WCtMOVBHaUhnbUhzdmVWUmFL?=
 =?utf-8?B?YUpJSnlMaFRmRTk1dTJzYTBuVWluVHNQLzlmRU1BcjRZQmRsdzhoL2ZBL1kw?=
 =?utf-8?B?cURCazhrcW5sTnNzUWo0WnBQbk8zWnVrR090QXFoQ3JDQm5FS09VTXNkOGJa?=
 =?utf-8?B?V1k2azMySWppYUZyNy9GTlZNSmRQSTRHYmxybjVxaWtsZmUzb1NTdGdoY212?=
 =?utf-8?B?Q3ViRkEyNXRaV2UrS3ZqWWJKdms2Y3N3bzhveUhUOU1oSDlQYUhNdnZxL3BQ?=
 =?utf-8?B?MGIyZjN3TGVZZVNBNnRqQT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?bU9VTGFPWjJFMm1TYWxKaXY2MDZPM2NNN0ZGdGVzTEdRdmk1cVpsZzV5Z0RS?=
 =?utf-8?B?cjRTV2Vrd2djRFRmV1BmeS9nbmNIR2hrYXlzaFYyc2RBa2U1T2liVHN1aWZR?=
 =?utf-8?B?cHpFUW9qbmlTL2RUQVhtNnp5TlBmRVVNRUIzQ3FtUVhvT0pHSE9qcDlEOGw2?=
 =?utf-8?B?V0c1TFpqakhxaERqVm9kYmxDY0tIdHVmYUpDM3cvdUREcDBUME1vL3FnME1R?=
 =?utf-8?B?MmplbFFSeTFDRjFoWlZsdjZvRjQxTjlWQWZyUDVKUVlacVMyUmpFZElYeFpa?=
 =?utf-8?B?c09QZ2pRTnRQQWoyMi9nck9xVXU4UzhzcTdSTzl3ellaR2ZYUGtvWHdHQ2w1?=
 =?utf-8?B?aHJXTk1jcXNINHpraUVnQ3NJcUZMOHJWS2hoZ3BDYlMvUFYwTVhZa3BvZW9s?=
 =?utf-8?B?d2w0Y0dCMGhiaVVhOTYrdXN6ZVVKZEZvc1RmWGh3aDU3NTdFUWNod3RIeDVN?=
 =?utf-8?B?UHhMbjBuR05wL1djcjV6M0c1RGhjSXZ4K01HdU5xMEZBd2pWSThhKzZoSjFo?=
 =?utf-8?B?dDd5WE5MdmxZN2xwejlxaUZqWHRJY0MxRU9oQVRrOVhNMWZybEV3OElRL0Rv?=
 =?utf-8?B?ekx1NjdZVG9UVUlZY2xHOXp1M3hNU2I3cTJSWkNUdTNQaXdySkMvejEzbTJH?=
 =?utf-8?B?V0dJR3p4MklrcFFjNlcxOXJScnpzOHordEJWWjN3Tk5zaHZKNEFuRzEwclZy?=
 =?utf-8?B?SEtXZ2diODdWcmo4MXdPRUVGZ1dXVmJyeUNYRXFGQXcvbmZueWF2Ry9STjc1?=
 =?utf-8?B?VDFWc21UUno0alliRUFpR1VvKzdqUGpweDI0Q2tyVS81ekZQOHJmbk0zalI2?=
 =?utf-8?B?VmtoMW9RV2M4MFQ2NW9nNHhhTkRTdC9HMVVvTjFXaWh2Q0EwbFVBQ2Q2MkUw?=
 =?utf-8?B?VzlFZElNUUl0R0F3eDFWSTZvbnFJbnhGVE1JaHBSdHpKbXMyYTVNckR1NHVM?=
 =?utf-8?B?UGxvRk9qVHQ0SEVxV21pODhKQmF6NktpdFV6TFROY09vQlIvbDFtU1dxUUY2?=
 =?utf-8?B?ckFqZmhUZDUwQVpnZm4zWkFYREMyWU9yaUcwWlQrN2RnSzI3dmwyWEZ4WkJE?=
 =?utf-8?B?MWh6YjRwSVo1SzRiRHQranhtWVZJS21rTzB4SzErSU9pZUc1MkVHd3M0YW8v?=
 =?utf-8?B?b2pkNEhDby9aYU9IQVNPQ0lNSVFVTFAwVzVUakpkZmdaaitvY2kwaG1SbXlx?=
 =?utf-8?B?bnlmYjdGSmNIRjFaYWFEU004MC9rcG9rdTlNLzJyeDZKODJnQUtYSFFiMnRt?=
 =?utf-8?B?dkxhSE9OTWdPTW5aYytUQ0xmRjkwUmNDUy9hK2xxSGJhV2tGKy82cWxEcDUv?=
 =?utf-8?B?cktuWU5TYkk3c2FkWW5kNFNCNlZHWWQvSy9LNVJIZk9NNkx3YkZyL3lTaFp0?=
 =?utf-8?B?THRhQjBLUkliUm8wc2xpUGdUUS84Yy9selNxS1lyWTQyL1V1SUV0WGYwTVR3?=
 =?utf-8?B?dzBjcjVoYWZrNGxUVlNVVHBBdmlLMENYbm02M3lZdUd5WHNKWW1TQXFaSllV?=
 =?utf-8?B?YjdYM29yNlRNN1NSOGxoaVZhTWkrWWJTSitNNWpRMlhaY3pQZG05dkUvVDd4?=
 =?utf-8?B?dmNOc1Fsa3pLcVZaUndVSlQ4WnVVd2IycmpYdTJEb21MK2IwUFY3N1ZVV3Ir?=
 =?utf-8?B?eE1zbkgxWmFuRzNvYVcvcCtsVFd0TzZDSSt5RU1MTHhHYmZqZU1Ld2s5QVdK?=
 =?utf-8?B?N2x6WUJUZ2MvUFBFajIwQ0FQOEhGZ2tCN3JPMkR2NUo0UzE4dSt1V21yMUIr?=
 =?utf-8?B?Qlg0bkZuU3ZYb2EzYjVKcVFYWmo3VHBqMUVJb0dUL1BlaTRhNTlIMEl3SVpS?=
 =?utf-8?B?LzhydnhqaVNyMmZ6K2VENDJwMVA4U0NBbTdNYXpUZjB5MjNWcjN1eFFSUklv?=
 =?utf-8?B?SzQ0c3BUb1hhK01EVTNoVmVOK0tVOTVQS1BnTWZ1OTJDQjEyNmRxQmdsS1g0?=
 =?utf-8?B?UUd3U3FtU0g0UFhWM3VwU1l0QlQ3UVlZblN1ZFhvWHNiUS9nQnR3NFBHSXc0?=
 =?utf-8?B?ZWV4MnpkWFNWU2VIdFNNcmhDZzJMYzd3K1pzS1NweDVIQ3BiSmorSjZlc3RW?=
 =?utf-8?B?K1daQ005RFBDaXd2VkVBZXY1KzdpQkliYjF3WlNwT0ZCKzQ2MEFZTDVpdUMz?=
 =?utf-8?Q?63WA0BEC23PlgL2lok4v3C4GX?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 6765e7ef-80be-42ce-e962-08dca7b89e38
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Jul 2024 06:04:15.3029
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: bRmXouki8cb/J7oqNxdZHE4r9a9s05fu39HJWFERRQ9f6qpqCOwA1YqFoJ0DbGy+ONk8nlgaFTu6UDsf489NDw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA0PR12MB7580


On 7/19/24 00:12, Dave Jiang wrote:
>
> On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Differientiate Type3, aka memory expanders, from Type2, aka device
>> accelerators, with a new function for initializing cxl_dev_state.
>>
>> Create opaque struct to be used by accelerators relying on new access
>> functions in following patches.
>>
>> Add SFC ethernet network driver as the client.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>> ---
>>   drivers/cxl/core/memdev.c             | 52 ++++++++++++++++++++++++++
>>   drivers/net/ethernet/sfc/Makefile     |  2 +-
>>   drivers/net/ethernet/sfc/efx.c        |  4 ++
>>   drivers/net/ethernet/sfc/efx_cxl.c    | 53 +++++++++++++++++++++++++++
>>   drivers/net/ethernet/sfc/efx_cxl.h    | 29 +++++++++++++++
>>   drivers/net/ethernet/sfc/net_driver.h |  4 ++
>>   include/linux/cxl_accel_mem.h         | 22 +++++++++++
>>   include/linux/cxl_accel_pci.h         | 23 ++++++++++++
> Maybe create an include/linux/cxl and then we can put headers in there.
>
>>   8 files changed, 188 insertions(+), 1 deletion(-)
>>   create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
>>   create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
>>   create mode 100644 include/linux/cxl_accel_mem.h
>>   create mode 100644 include/linux/cxl_accel_pci.h
>>
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index 0277726afd04..61b5d35b49e7 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -8,6 +8,7 @@
>>   #include <linux/idr.h>
>>   #include <linux/pci.h>
>>   #include <cxlmem.h>
>> +#include <linux/cxl_accel_mem.h>
>>   #include "trace.h"
>>   #include "core.h"
>>   
>> @@ -615,6 +616,25 @@ static void detach_memdev(struct work_struct *work)
>>   
>>   static struct lock_class_key cxl_memdev_key;
>>   
>> +struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
>> +{
>> +	struct cxl_dev_state *cxlds;
>> +
>> +	cxlds = devm_kzalloc(dev, sizeof(*cxlds), GFP_KERNEL);
> Naked cxlds. Do you think you'll need an accel_dev_state to wrap around cxl_dev_state similar to cxl_memdev_state in order to store accel related information? I also wonder if 'struct cxl_dev_state' should be a public definition. Need to look at the rest of the patchset to circle back.
>

Not sure I understand your concern. Are you saying we need to introduce 
an cxl_accel_state struct? Fro my work and I guess from Dan's original 
patch, it seems it is not needed, although I have already raised my 
concerns about, maybe, current structs requiring a refactoring due to 
the optional capabilities for Type2.

Regarding if cxl_dev_state needs to be public, this patchet version 
defines it as opaque for addressing the concerns about accel drivers 
need to be "controlled".


>> +	if (!cxlds)
>> +		return ERR_PTR(-ENOMEM);
>> +
>> +	cxlds->dev = dev;
>> +	cxlds->type = CXL_DEVTYPE_DEVMEM;
>> +
>> +	cxlds->dpa_res = DEFINE_RES_MEM_NAMED(0, 0, "dpa");
>> +	cxlds->ram_res = DEFINE_RES_MEM_NAMED(0, 0, "ram");
>> +	cxlds->pmem_res = DEFINE_RES_MEM_NAMED(0, 0, "pmem");
>> +
>> +	return cxlds;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
> I do wonder if we should have a common device state init helper function to init all the common bits:
> int cxlds_init(struct *dev, enum cxl_devtype devtype)
>
>
>> +
>>   static struct cxl_memdev *cxl_memdev_alloc(struct cxl_dev_state *cxlds,
>>   					   const struct file_operations *fops)
>>   {
>> @@ -692,6 +712,38 @@ static int cxl_memdev_open(struct inode *inode, struct file *file)
>>   	return 0;
>>   }
>>   
>> +
>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>> +{
>> +	cxlds->cxl_dvsec = dvsec;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_dvsec, CXL);
>> +
>> +void cxl_accel_set_serial(struct cxl_dev_state *cxlds, u64 serial)
>> +{
>> +	cxlds->serial= serial;
> Missing space before '='
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_serial, CXL);
>> +
>> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>> +			    enum accel_resource type)
>> +{
>> +	switch (type) {
>> +	case CXL_ACCEL_RES_DPA:
>> +		cxlds->dpa_res = res;
>> +		return;
>> +	case CXL_ACCEL_RES_RAM:
>> +		cxlds->ram_res = res;
>> +		return;
>> +	case CXL_ACCEL_RES_PMEM:
>> +		cxlds->pmem_res = res;
>> +		return;
>> +	default:
>> +		dev_err(cxlds->dev, "unkown resource type (%u)\n", type);
>> +	}
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
>> +
>>   static int cxl_memdev_release_file(struct inode *inode, struct file *file)
>>   {
>>   	struct cxl_memdev *cxlmd =
>> diff --git a/drivers/net/ethernet/sfc/Makefile b/drivers/net/ethernet/sfc/Makefile
>> index 8f446b9bd5ee..e80c713c3b0c 100644
>> --- a/drivers/net/ethernet/sfc/Makefile
>> +++ b/drivers/net/ethernet/sfc/Makefile
>> @@ -7,7 +7,7 @@ sfc-y			+= efx.o efx_common.o efx_channels.o nic.o \
>>   			   mcdi_functions.o mcdi_filters.o mcdi_mon.o \
>>   			   ef100.o ef100_nic.o ef100_netdev.o \
>>   			   ef100_ethtool.o ef100_rx.o ef100_tx.o \
>> -			   efx_devlink.o
>> +			   efx_devlink.o efx_cxl.o
>>   sfc-$(CONFIG_SFC_MTD)	+= mtd.o
>>   sfc-$(CONFIG_SFC_SRIOV)	+= sriov.o ef10_sriov.o ef100_sriov.o ef100_rep.o \
>>                              mae.o tc.o tc_bindings.o tc_counters.o \
>> diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
>> index e9d9de8e648a..cb3f74d30852 100644
>> --- a/drivers/net/ethernet/sfc/efx.c
>> +++ b/drivers/net/ethernet/sfc/efx.c
>> @@ -33,6 +33,7 @@
>>   #include "selftest.h"
>>   #include "sriov.h"
>>   #include "efx_devlink.h"
>> +#include "efx_cxl.h"
>>   
>>   #include "mcdi_port_common.h"
>>   #include "mcdi_pcol.h"
>> @@ -899,6 +900,7 @@ static void efx_pci_remove(struct pci_dev *pci_dev)
>>   	efx_pci_remove_main(efx);
>>   
>>   	efx_fini_io(efx);
>> +
> stray blank line
>
>>   	pci_dbg(efx->pci_dev, "shutdown successful\n");
>>   
>>   	efx_fini_devlink_and_unlock(efx);
>> @@ -1109,6 +1111,8 @@ static int efx_pci_probe(struct pci_dev *pci_dev,
>>   	if (rc)
>>   		goto fail2;
>>   
>> +	efx_cxl_init(efx);
> No error checks? Does the device expect to work whether CXL is setup or not?
>

Right. The netdev functionality will not be jeopardized because CXL 
initialization errors. If it is all fine, the PIO buffers will be mapped 
using the created CXL region, if not, PIO buffers will be used mapping 
at specific BAR offset.


>> +
>>   	rc = efx_pci_probe_post_io(efx);
>>   	if (rc) {
>>   		/* On failure, retry once immediately.
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> new file mode 100644
>> index 000000000000..4554dd7cca76
>> --- /dev/null
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -0,0 +1,53 @@
>> +// SPDX-License-Identifier: GPL-2.0-only
>> +/****************************************************************************
>> + * Driver for AMD network controllers and boards
>> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
>> + *
>> + * This program is free software; you can redistribute it and/or modify it
>> + * under the terms of the GNU General Public License version 2 as published
>> + * by the Free Software Foundation, incorporated herein by reference.
>> + */
>> +
>> +
>> +#include <linux/pci.h>
>> +#include <linux/cxl_accel_mem.h>
>> +#include <linux/cxl_accel_pci.h>
>> +
>> +#include "net_driver.h"
>> +#include "efx_cxl.h"
>> +
>> +#define EFX_CTPIO_BUFFER_SIZE	(1024*1024*256)
>> +
>> +void efx_cxl_init(struct efx_nic *efx)
>> +{
>> +	struct pci_dev *pci_dev = efx->pci_dev;
>> +	struct efx_cxl *cxl = efx->cxl;
>> +	struct resource res;
>> +	u16 dvsec;
>> +
>> +	dvsec = pci_find_dvsec_capability(pci_dev, PCI_VENDOR_ID_CXL,
>> +					  CXL_DVSEC_PCIE_DEVICE);
>> +
>> +	if (!dvsec)
>> +		return;
>> +
>> +	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability found");
> Seem like unnecessary kern log emission
>

Uhmm, yes, maybe something more linked to how PIO buffer end up being 
used at a later time.

>> +
>> +	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
>> +	if (IS_ERR(cxl->cxlds)) {
>> +		pci_info(pci_dev, "CXL accel device state failed");
> pci_err()? or maybe pci_warn() given it's ignoring error returns.


Right. I will change this and other similar ones.


>> +		return;
>> +	}
>> +
>> +	cxl_accel_set_dvsec(cxl->cxlds, dvsec);
>> +	cxl_accel_set_serial(cxl->cxlds, pci_dev->dev.id);
>> +
>> +	res = DEFINE_RES_MEM(0, EFX_CTPIO_BUFFER_SIZE);
>> +	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_DPA);
>> +
>> +	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>> +	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>> +}
>> +
>> +
>> +MODULE_IMPORT_NS(CXL);
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.h b/drivers/net/ethernet/sfc/efx_cxl.h
>> new file mode 100644
>> index 000000000000..76c6794c20d8
>> --- /dev/null
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.h
>> @@ -0,0 +1,29 @@
>> +// SPDX-License-Identifier: GPL-2.0-only
>> +/****************************************************************************
>> + * Driver for AMD network controllers and boards
>> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
>> + *
>> + * This program is free software; you can redistribute it and/or modify it
>> + * under the terms of the GNU General Public License version 2 as published
>> + * by the Free Software Foundation, incorporated herein by reference.
>> + */
>> +
>> +#ifndef EFX_CXL_H
>> +#define EFX_CLX_H
>> +
>> +#include <linux/cxl_accel_mem.h>
>> +
>> +struct efx_nic;
>> +
>> +struct efx_cxl {
>> +	cxl_accel_state *cxlds;
>> +	struct cxl_memdev *cxlmd;
>> +	struct cxl_root_decoder *cxlrd;
>> +	struct cxl_port *endpoint;
>> +	struct cxl_endpoint_decoder *cxled;
>> +	struct cxl_region *efx_region;
>> +	void __iomem *ctpio_cxl;
>> +};
>> +
>> +void efx_cxl_init(struct efx_nic *efx);
>> +#endif
>> diff --git a/drivers/net/ethernet/sfc/net_driver.h b/drivers/net/ethernet/sfc/net_driver.h
>> index f2dd7feb0e0c..58b7517afea4 100644
>> --- a/drivers/net/ethernet/sfc/net_driver.h
>> +++ b/drivers/net/ethernet/sfc/net_driver.h
>> @@ -814,6 +814,8 @@ enum efx_xdp_tx_queues_mode {
>>   
>>   struct efx_mae;
>>   
>> +struct efx_cxl;
>> +
>>   /**
>>    * struct efx_nic - an Efx NIC
>>    * @name: Device name (net device name or bus id before net device registered)
>> @@ -962,6 +964,7 @@ struct efx_mae;
>>    * @tc: state for TC offload (EF100).
>>    * @devlink: reference to devlink structure owned by this device
>>    * @dl_port: devlink port associated with the PF
>> + * @cxl: details of related cxl objects
>>    * @mem_bar: The BAR that is mapped into membase.
>>    * @reg_base: Offset from the start of the bar to the function control window.
>>    * @monitor_work: Hardware monitor workitem
>> @@ -1148,6 +1151,7 @@ struct efx_nic {
>>   
>>   	struct devlink *devlink;
>>   	struct devlink_port *dl_port;
>> +	struct efx_cxl *cxl;
>>   	unsigned int mem_bar;
>>   	u32 reg_base;
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> new file mode 100644
>> index 000000000000..daf46d41f59c
>> --- /dev/null
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -0,0 +1,22 @@
>> +/* SPDX-License-Identifier: GPL-2.0 */
>> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
>> +
>> +#include <linux/cdev.h>
> Don't think this header is needed?
>
>> +
>> +#ifndef __CXL_ACCEL_MEM_H
>> +#define __CXL_ACCEL_MEM_H
>> +
>> +enum accel_resource{
>> +	CXL_ACCEL_RES_DPA,
>> +	CXL_ACCEL_RES_RAM,
>> +	CXL_ACCEL_RES_PMEM,
>> +};
>> +
>> +typedef struct cxl_dev_state cxl_accel_state;
> Please use 'struct cxl_dev_state' directly. There's no good reason to hide the type.


That is what I think I was told to do although not explicitly. There 
were concerns in the RFC about accel drivers too loose for doing things 
regarding CXL and somehow CXL core should keep control as much as 
possible.  I was even thought I was being asked to implement auxbus with 
the CXL part of an accel as an auxiliar device which should be bound to 
a CXL core driver. Then Jonathan Cameron the only one explicitly giving 
the possibility of the opaque approach and disadvising the auxbus idea.


Maybe I need an explicit action here.


>> +cxl_accel_state *cxl_accel_state_create(struct device *dev);
>> +
>> +void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>> +void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>> +			    enum accel_resource);
>> +#endif
>> diff --git a/include/linux/cxl_accel_pci.h b/include/linux/cxl_accel_pci.h
>> new file mode 100644
>> index 000000000000..c337ae8797e6
>> --- /dev/null
>> +++ b/include/linux/cxl_accel_pci.h
>> @@ -0,0 +1,23 @@
>> +/* SPDX-License-Identifier: GPL-2.0 */
>> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
>> +
>> +#ifndef __CXL_ACCEL_PCI_H
>> +#define __CXL_ACCEL_PCI_H
>> +
>> +/* CXL 2.0 8.1.3: PCIe DVSEC for CXL Device */
>> +#define CXL_DVSEC_PCIE_DEVICE					0
>> +#define   CXL_DVSEC_CAP_OFFSET		0xA
>> +#define     CXL_DVSEC_MEM_CAPABLE	BIT(2)
>> +#define     CXL_DVSEC_HDM_COUNT_MASK	GENMASK(5, 4)
>> +#define   CXL_DVSEC_CTRL_OFFSET		0xC
>> +#define     CXL_DVSEC_MEM_ENABLE	BIT(2)
>> +#define   CXL_DVSEC_RANGE_SIZE_HIGH(i)	(0x18 + (i * 0x10))
>> +#define   CXL_DVSEC_RANGE_SIZE_LOW(i)	(0x1C + (i * 0x10))
>> +#define     CXL_DVSEC_MEM_INFO_VALID	BIT(0)
>> +#define     CXL_DVSEC_MEM_ACTIVE	BIT(1)
>> +#define     CXL_DVSEC_MEM_SIZE_LOW_MASK	GENMASK(31, 28)
>> +#define   CXL_DVSEC_RANGE_BASE_HIGH(i)	(0x20 + (i * 0x10))
>> +#define   CXL_DVSEC_RANGE_BASE_LOW(i)	(0x24 + (i * 0x10))
>> +#define     CXL_DVSEC_MEM_BASE_LOW_MASK	GENMASK(31, 28)
> This looks like a copy/paste of drivers/cxl/cxlpci.h definition. I suggest create a include/linux/cxl/pci.h and stick it in there and delete the copy in cxlpci.h. Also update the CXL spec version to latest (3.1) if you don't mind if we are going to move it.


That makes sense. I'll do it.

Thanks


>> +
>> +#endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.9])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 216FB8C06;
	Fri, 19 Jul 2024 19:01:21 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=198.175.65.9
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721415684; cv=none; b=cmYvzXof64grxolZCX4WuJ3LCiGS/UiYBFgstwevunLMpiTa+Sm9OWwGHE0A7DrdOWqQELk2jTX4qQOTvD9A54FgdtV9AkZzKhkYHpBbwQ1CoyArquAynM5v8XCViwiFSUNN++z90tVA0wW/z1kMy385TpOTCJEnJLx8N6HErt4=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721415684; c=relaxed/simple;
	bh=t8wJxfySrx9yT+L43uDzmQbZIng5UQmL699Jdm9hlDs=;
	h=Message-ID:Date:MIME-Version:Subject:To:Cc:References:From:
	 In-Reply-To:Content-Type; b=hlIcu2VjQpxwX5MFIHiiRmsQfzjpv+9sXy+sZR1vt4k54ppddmN7vusEb7QRvfG59JkJMw9B6dAdOKHR4i81mOuG/xrA29U4YDVSgZw+3S70w+A+fl1VVabPtUy6oV7xWhbx56r1v3uWstLpOnHoQocnXOWTpqrUhb8aVPj7KtU=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=GXjt3SrC; arc=none smtp.client-ip=198.175.65.9
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="GXjt3SrC"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721415682; x=1752951682;
  h=message-id:date:mime-version:subject:to:cc:references:
   from:in-reply-to:content-transfer-encoding;
  bh=t8wJxfySrx9yT+L43uDzmQbZIng5UQmL699Jdm9hlDs=;
  b=GXjt3SrCJDrYaxpmYplcHw+LCkwXy1afUOErDQZvpy0kyemwM2hls5/E
   FFxu82739P3e7IFvISRj0hrkuoLa+AkT5b1tZhelKrOz58cA+42SBlVXM
   C3pf0oND2GVlo4EMTMgWMHp3vo837ckUMsZgHKNKAwZm/cI6CuLCinH1v
   Qnl8wKSdy2DZGY10NPHR/R3leLzad6IKHU3TK8ZMvwGzWv/wqBRfBxfIV
   MiHGPV7JU3lxilaad6cGwMKiIKdDcIEZTbBTUcmZt+VnBn7qwnBrFhb3r
   Fz9voag7mMKl3MGp3hN19IWfJetbrcWLaWmg5tJWl0UsYw6nCMqck/RNm
   A==;
X-CSE-ConnectionGUID: kg4VJkajRS6x+5n89laq+A==
X-CSE-MsgGUID: dns5tlWfQZ+DDarDMb5QKA==
X-IronPort-AV: E=McAfee;i="6700,10204,11138"; a="41574091"
X-IronPort-AV: E=Sophos;i="6.09,221,1716274800"; 
   d="scan'208";a="41574091"
Received: from orviesa005.jf.intel.com ([10.64.159.145])
  by orvoesa101.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 19 Jul 2024 12:01:21 -0700
X-CSE-ConnectionGUID: rCxvpFuyRYCM0C2p0GJP4w==
X-CSE-MsgGUID: wZlS/KHrRiacth6tuS/O9g==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,221,1716274800"; 
   d="scan'208";a="56046735"
Received: from djiang5-mobl3.amr.corp.intel.com (HELO [10.125.109.46]) ([10.125.109.46])
  by orviesa005-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 19 Jul 2024 12:01:20 -0700
Message-ID: <e3ea1b1a-8439-40c6-99bf-4151ecf4d04f@intel.com>
Date: Fri, 19 Jul 2024 12:01:19 -0700
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
To: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
Cc: Alejandro Lucero <alucerop@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
Content-Language: en-US
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit



On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
> 
> Type2 devices have some Type3 functionalities as optional like an mbox
> or an hdm decoder, and CXL core needs a way to know what a CXL accelerator
> implements.
> 
> Add a new field for keeping device capabilities to be initialised by
> Type2 drivers. Advertise all those capabilities for Type3.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/mbox.c            |  1 +
>  drivers/cxl/core/memdev.c          |  4 +++-
>  drivers/cxl/core/port.c            |  2 +-
>  drivers/cxl/core/regs.c            | 11 ++++++-----
>  drivers/cxl/cxl.h                  |  2 +-
>  drivers/cxl/cxlmem.h               |  4 ++++
>  drivers/cxl/pci.c                  | 15 +++++++++------
>  drivers/net/ethernet/sfc/efx_cxl.c |  3 ++-
>  include/linux/cxl_accel_mem.h      |  5 ++++-
>  9 files changed, 31 insertions(+), 16 deletions(-)
> 
> diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
> index 2626f3fff201..2ba7d36e3f38 100644
> --- a/drivers/cxl/core/mbox.c
> +++ b/drivers/cxl/core/mbox.c
> @@ -1424,6 +1424,7 @@ struct cxl_memdev_state *cxl_memdev_state_create(struct device *dev)
>  	mds->cxlds.reg_map.host = dev;
>  	mds->cxlds.reg_map.resource = CXL_RESOURCE_NONE;
>  	mds->cxlds.type = CXL_DEVTYPE_CLASSMEM;
> +	mds->cxlds.capabilities = CXL_DRIVER_CAP_HDM | CXL_DRIVER_CAP_MBOX;
>  	mds->ram_perf.qos_class = CXL_QOS_CLASS_INVALID;
>  	mds->pmem_perf.qos_class = CXL_QOS_CLASS_INVALID;
>  
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 04c3a0f8bc2e..b4205ecca365 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -616,7 +616,7 @@ static void detach_memdev(struct work_struct *work)
>  
>  static struct lock_class_key cxl_memdev_key;
>  
> -struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
> +struct cxl_dev_state *cxl_accel_state_create(struct device *dev, uint8_t caps)
>  {
>  	struct cxl_dev_state *cxlds;
>  
> @@ -631,6 +631,8 @@ struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
>  	cxlds->ram_res = DEFINE_RES_MEM_NAMED(0, 0, "ram");
>  	cxlds->pmem_res = DEFINE_RES_MEM_NAMED(0, 0, "pmem");
>  
> +	cxlds->capabilities = caps;
> +
>  	return cxlds;
>  }
>  EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
> index 887ed6e358fb..d66c6349ed2d 100644
> --- a/drivers/cxl/core/port.c
> +++ b/drivers/cxl/core/port.c
> @@ -763,7 +763,7 @@ static int cxl_setup_comp_regs(struct device *host, struct cxl_register_map *map
>  	map->reg_type = CXL_REGLOC_RBI_COMPONENT;
>  	map->max_size = CXL_COMPONENT_REG_BLOCK_SIZE;
>  
> -	return cxl_setup_regs(map);
> +	return cxl_setup_regs(map, 0);
>  }
>  
>  static int cxl_port_setup_regs(struct cxl_port *port,
> diff --git a/drivers/cxl/core/regs.c b/drivers/cxl/core/regs.c
> index e1082e749c69..9d218ebe180d 100644
> --- a/drivers/cxl/core/regs.c
> +++ b/drivers/cxl/core/regs.c
> @@ -421,7 +421,7 @@ static void cxl_unmap_regblock(struct cxl_register_map *map)
>  	map->base = NULL;
>  }
>  
> -static int cxl_probe_regs(struct cxl_register_map *map)
> +static int cxl_probe_regs(struct cxl_register_map *map, uint8_t caps)
>  {
>  	struct cxl_component_reg_map *comp_map;
>  	struct cxl_device_reg_map *dev_map;
> @@ -437,11 +437,12 @@ static int cxl_probe_regs(struct cxl_register_map *map)
>  	case CXL_REGLOC_RBI_MEMDEV:
>  		dev_map = &map->device_map;
>  		cxl_probe_device_regs(host, base, dev_map);
> -		if (!dev_map->status.valid || !dev_map->mbox.valid ||
> +		if (!dev_map->status.valid ||
> +		    ((caps & CXL_DRIVER_CAP_MBOX) && !dev_map->mbox.valid) ||
>  		    !dev_map->memdev.valid) {
>  			dev_err(host, "registers not found: %s%s%s\n",
>  				!dev_map->status.valid ? "status " : "",
> -				!dev_map->mbox.valid ? "mbox " : "",
> +				((caps & CXL_DRIVER_CAP_MBOX) && !dev_map->mbox.valid) ? "mbox " : "",

According to the r3.1 8.2.8.2.1, the device status registers and the primary mailbox registers are both mandatory if regloc id=3 block is found. So if the type2 device does not implement a mailbox then it shouldn't be calling cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map) to begin with from the driver init right? If the type2 device defines a regblock with id=3 but without a mailbox, then isn't that a spec violation?

DJ

>  				!dev_map->memdev.valid ? "memdev " : "");
>  			return -ENXIO;
>  		}
> @@ -455,7 +456,7 @@ static int cxl_probe_regs(struct cxl_register_map *map)
>  	return 0;
>  }
>  
> -int cxl_setup_regs(struct cxl_register_map *map)
> +int cxl_setup_regs(struct cxl_register_map *map, uint8_t caps)
>  {
>  	int rc;
>  
> @@ -463,7 +464,7 @@ int cxl_setup_regs(struct cxl_register_map *map)
>  	if (rc)
>  		return rc;
>  
> -	rc = cxl_probe_regs(map);
> +	rc = cxl_probe_regs(map, caps);
>  	cxl_unmap_regblock(map);
>  
>  	return rc;
> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
> index a6613a6f8923..9973430d975f 100644
> --- a/drivers/cxl/cxl.h
> +++ b/drivers/cxl/cxl.h
> @@ -300,7 +300,7 @@ int cxl_find_regblock_instance(struct pci_dev *pdev, enum cxl_regloc_type type,
>  			       struct cxl_register_map *map, int index);
>  int cxl_find_regblock(struct pci_dev *pdev, enum cxl_regloc_type type,
>  		      struct cxl_register_map *map);
> -int cxl_setup_regs(struct cxl_register_map *map);
> +int cxl_setup_regs(struct cxl_register_map *map, uint8_t caps);
>  struct cxl_dport;
>  resource_size_t cxl_rcd_component_reg_phys(struct device *dev,
>  					   struct cxl_dport *dport);
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index af8169ccdbc0..8f2a820bd92d 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -405,6 +405,9 @@ struct cxl_dpa_perf {
>  	int qos_class;
>  };
>  
> +#define CXL_DRIVER_CAP_HDM	0x1
> +#define CXL_DRIVER_CAP_MBOX	0x2
> +
>  /**
>   * struct cxl_dev_state - The driver device state
>   *
> @@ -438,6 +441,7 @@ struct cxl_dev_state {
>  	struct resource ram_res;
>  	u64 serial;
>  	enum cxl_devtype type;
> +	uint8_t capabilities;
>  };
>  
>  /**
> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> index b34d6259faf4..e2a978312281 100644
> --- a/drivers/cxl/pci.c
> +++ b/drivers/cxl/pci.c
> @@ -502,7 +502,8 @@ static int cxl_rcrb_get_comp_regs(struct pci_dev *pdev,
>  }
>  
>  static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
> -			      struct cxl_register_map *map)
> +			      struct cxl_register_map *map,
> +			      uint8_t cxl_dev_caps)
>  {
>  	int rc;
>  
> @@ -519,7 +520,7 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
>  	if (rc)
>  		return rc;
>  
> -	return cxl_setup_regs(map);
> +	return cxl_setup_regs(map, cxl_dev_caps);
>  }
>  
>  int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
> @@ -527,7 +528,8 @@ int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
>  	struct cxl_register_map map;
>  	int rc;
>  
> -	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
> +				cxlds->capabilities);
>  	if (rc)
>  		return rc;
>  
> @@ -536,7 +538,7 @@ int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
>  		return rc;
>  
>  	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> -				&cxlds->reg_map);
> +				&cxlds->reg_map, cxlds->capabilities);
>  	if (rc)
>  		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
>  
> @@ -850,7 +852,8 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
>  		dev_warn(&pdev->dev,
>  			 "Device DVSEC not present, skip CXL.mem init\n");
>  
> -	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
> +				cxlds->capabilities);
>  	if (rc)
>  		return rc;
>  
> @@ -863,7 +866,7 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
>  	 * still be useful for management functions so don't return an error.
>  	 */
>  	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> -				&cxlds->reg_map);
> +				&cxlds->reg_map, cxlds->capabilities);
>  	if (rc)
>  		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
>  	else if (!cxlds->reg_map.component_map.ras.valid)
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 9cefcaf3caca..37d8bfdef517 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -33,7 +33,8 @@ void efx_cxl_init(struct efx_nic *efx)
>  
>  	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability found");
>  
> -	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
> +	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev,
> +					    CXL_ACCEL_DRIVER_CAP_HDM);
>  	if (IS_ERR(cxl->cxlds)) {
>  		pci_info(pci_dev, "CXL accel device state failed");
>  		return;
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index c7b254edc096..0ba2195b919b 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -12,8 +12,11 @@ enum accel_resource{
>  	CXL_ACCEL_RES_PMEM,
>  };
>  
> +#define CXL_ACCEL_DRIVER_CAP_HDM	0x1
> +#define CXL_ACCEL_DRIVER_CAP_MBOX	0x2
> +
>  typedef struct cxl_dev_state cxl_accel_state;
> -cxl_accel_state *cxl_accel_state_create(struct device *dev);
> +cxl_accel_state *cxl_accel_state_create(struct device *dev, uint8_t caps);
>  
>  void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>  void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2082.outbound.protection.outlook.com [40.107.92.82])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 372A9152DED;
	Tue, 23 Jul 2024 13:43:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.82
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721742240; cv=fail; b=pgUKxV3T3O/wBAN0hGM/i0KAdBkyp4vnuzjnaHRj8mjQGgVmcsiIr5lGokm1J/L9KUyv1/Y8vki7/ZFXxXzgqjGlFLtNvJI+adOWYAKnCE2erQqXlNqLNHb3yFl5b6XXCRL/K5gK/CUUerz3xvnW5rq4Q70jo2J30uUq/nit58Q=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721742240; c=relaxed/simple;
	bh=sypmGApwBWct34q8rSXQGMX7Z9mrNqS3lt5sg5rmD80=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=uEKTzrwsAwWwvWXFG0oVQBDhbC/ecQPVP9PRspNkvxDYb4rOIq/NHEk9lAYxyBVZd6wubZHqOwcCIw9ASJbuAOX7mXqdp/NB+0D5GE2lmyalc27A41RtSnRw1IoALkuh9fewUHe0ywOEBGdIQf3BCjJtDeOKCbTOYnseXwKEPS4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=yx2WrW1v; arc=fail smtp.client-ip=40.107.92.82
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="yx2WrW1v"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=oBZFTiNvcwijuwhf+mUfJNISvzb/OqZP4ugPk7JV4VUDpo4xKJf+hAeZOn2u0ig5az0J0B8gQOaX6xXdwzFVJ17lSLZyAec7yqC/yzPeLoJkmhWgtrbAz98HV8IaYoJxWecYX4DLBXycEf4EFeVAhIO04wVUz4H9SgYtV6zpun2bU0nakzBtDxJOCHnowHfW/a9eSCrUkAGp1rBx5r2Yf9mz5FG4WrS21VmPvvj+3KIsHBD4FO5sanTNX2Ll30rMfv2nFMMsuhf2XJtrLfEFmzUZR+iwXl351sgfHtfj3OaQ3PMZdNmlMiHCDR/CQ6ltSxporypL7zp+n7muokVucw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=3b+a9QyXm8VPQdg3Q282L5MgszBJHCuRbTnv73j6YkQ=;
 b=BMjUeciATgJNwTJBMB8oIWOEzczoqxgdCbpeoNtvI0pBtiz6BFs8ohRcP5ZHWsVVXYMm4a4L61X/jQHCUcVWfZrFxE0V6xcTRSyPMVQkacEpTSQ7ZDp1U14BjytL7Rpv8KExXOiI0cOb3jLTaKe5f6iR+929nev+OWWZAkJTSXqrAu9bfBiBJMaQERfd00nh5/JI1Wm8AFVlK+QGmflllTHWKGp2V8kWtlXKjRhf7/tjCoiEljrFoxY+z6l1f8glc10DyKDUGoNreubWjQbT+yF2RpnzyTtT8qbowxoCNJe4o36lKx6cJC3BgQg5XTK9LYajpyJkpfQTU4eUuoj5TA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=3b+a9QyXm8VPQdg3Q282L5MgszBJHCuRbTnv73j6YkQ=;
 b=yx2WrW1vNyRwqbNzTr2TH726bS8+kFD8UkMdBy9n8EX/EppqXqv2u0chlNOp1OMKMNEX4U7wMbYm5pIqNf7QDCp2QW872yWdXeJSyTFiwmUWLmz+sHSksINA6/rjqGKucf4s3zBvuVDQMhET3f1oKKQyDHMGRT9AT6kFFS5ixX8=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH7PR12MB5975.namprd12.prod.outlook.com (2603:10b6:510:1da::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7784.18; Tue, 23 Jul
 2024 13:43:54 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%6]) with mapi id 15.20.7784.013; Tue, 23 Jul 2024
 13:43:53 +0000
Message-ID: <7dbcdb5d-3734-8e32-afdc-72d898126a0c@amd.com>
Date: Tue, 23 Jul 2024 14:43:24 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.11.0
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Content-Language: en-US
To: Dave Jiang <dave.jiang@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
 <e3ea1b1a-8439-40c6-99bf-4151ecf4d04f@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <e3ea1b1a-8439-40c6-99bf-4151ecf4d04f@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: DUZPR01CA0241.eurprd01.prod.exchangelabs.com
 (2603:10a6:10:4b5::24) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH7PR12MB5975:EE_
X-MS-Office365-Filtering-Correlation-Id: c396c0dc-289b-46f6-fa11-08dcab1d7dbd
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?RjNrYWV1NnU4VDJuaitRems4U0kvMWwxdzFhU2Q2dFhGQUdLVmgvQ3JuTmhn?=
 =?utf-8?B?bjZKMWpxbzB4azRRVmEzMDRJOVQ3bDNETFZLdGZMTlRQa1hBSExoQkZQRXpN?=
 =?utf-8?B?NzlacnRqWk1nQnNUVDR1V3VYVEZQRkVwZEFDZXFCM0ZzRlBERFIvUi82MzJh?=
 =?utf-8?B?Nnc2eTh0RGsxMmM1ZHJiWlBnWVUzRFdTSkpKaDlpK0tUQ3ZudVQ1K2tabVll?=
 =?utf-8?B?Mm05VzI0YkE0aUFteHdKM2pyajlOdVZZZnFEWGlDT05qVGpIZnZqVk1Ic2Vy?=
 =?utf-8?B?WnZFTVBqOTRoaDlCdE9LTzZ3cWNHaTc0ZDZKbWVUSCsvaTA4djN4TFRJNzRk?=
 =?utf-8?B?Y1luR0JpNEtaR2tpOFRIbUppWEZVOEd4K1RVbjIyNk5kSGdMS0k3akhDeEti?=
 =?utf-8?B?RXUvQVZ1UkorK3NnenFPajBoRWUzVTVRY2pnRkYvOUVwdGo1UUpvSVg4L3RL?=
 =?utf-8?B?NFhvVE1KUTFnd1YxblN2Y2VEZWM4VTJoR1RiSXoxNXYxcXFwUmZGcGZYNVoy?=
 =?utf-8?B?KzE3Ty9LQXV0RndSeURFSEJiSm9NdTZKaFFoaDZiRzZGWU1jcGovdFUzWGxH?=
 =?utf-8?B?c3N1eW43Z2FVNEg5czFQUlFwR2FMRE1LREVuWFJWSlNuZDNOMG01dnQrNTVo?=
 =?utf-8?B?Uk5NNEkyLzBLa1dmdUR2OENaUExRR1NVK05ESG81NUpwNFNqREZIdmdEV3k1?=
 =?utf-8?B?ZTRDcnNSdjl6WUxrVE54YlVpKzZ5WUxLS3c4Y2IyUFZPbXhTZXU1MUNkVWRa?=
 =?utf-8?B?RmNmdEpDcXZiTWwzTFIwMWFNeGtCS2RmVG5DWDBZWHBrUmUxT01PMC9WblB0?=
 =?utf-8?B?MUI5bzBjYzlxejlGUjYzdXQvTGxMOG0wRDFDUGFSaGd2L3hncnpuS0dlNDJu?=
 =?utf-8?B?aFY1WnNHTmJiL20yUFFCZ3F5SHpnZXlWWWdjVTgybzZ5d0FScGgwVGlVQmxT?=
 =?utf-8?B?citpOFlQWjMzcFZ1QmI5N3FwQU16T2pHS1ZvV0FnUjVjdzNGUFk0UVZtOElF?=
 =?utf-8?B?emZCWTBuOWR4T3pHNE01Q05sQS9JMmsyZ2NGY0hCQ1RvRUk5ek1WWU4zcVlK?=
 =?utf-8?B?UzdoMHNpUVo0ZGZTUFpsMHhDODRkMG5yaDhyckIrMEU3MXFWVW5uVzJWSnVH?=
 =?utf-8?B?U0xHbkNtQnhhcys5c3loMkhoL2Z4SGkvdU9DeTBKQjJTZWJpbFZEKzZ3ejZh?=
 =?utf-8?B?c2FUV2dRcjdzTnZGZE5QWE13Tng4dFhsNUcvNERuZ3BQZUhKY3gxanBINGl1?=
 =?utf-8?B?R0dNWEt0M0d0Nk5uVUNUYjlsTUpUbTBldTBtUUhMR3I0bmE5MVczcVRoVU5W?=
 =?utf-8?B?WXpQSnREVkRlMXhNelNBdHRvdW9tWnl6WnlYUmRTaVh0alRtdXNkTC93MDdo?=
 =?utf-8?B?ZkpacENOWXlsL05ucWR3eUlwSGVDcWY2Vlp6d3VuMitRUHc1QmRLeElpck1N?=
 =?utf-8?B?MnAzR2ZJbDBVWHJUUWxveVN0T1dESzIxUnIzZWFxSms2SlFLeStoTEIxVjg0?=
 =?utf-8?B?cmFiMWF2U2U5UXl2U1FWRWJDMFZybnBHUEJ2L09UN2Zsckh0K3p0cW5rR0to?=
 =?utf-8?B?dGlmYk9Hclp1QzJjdHk5cWkzVHZOMUFEeHhnSlYrRW54ZnVTUlBsOTZJNW1y?=
 =?utf-8?B?dnZobkZ3ZWQ5aHlCQldXcmlsY1F0d1BVREVjdlhKMUhYVHdSRWc1Y0d6SEJ3?=
 =?utf-8?B?TlpjUXVMSldsdW10RHB1cHBINHp6bjR1T21BdnFUZ3VmWnhUeGI1aTZJQng0?=
 =?utf-8?B?djVGbzRhKzJ0dndXUGVac0JMUDhYc1B4THNWZSttYmdXOHJlMXQvcmtoNEJp?=
 =?utf-8?B?ay9BMnFsMm1JRGZoeWpzdWphR09Bb3FzMWFGSmZLdE40RERMRGx1VkV4Vith?=
 =?utf-8?Q?KIfgrU3jb/Qa9?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?c01BMG9kdFhUVmdrUFlxMGN5bzFNd3FnMC90Z3FJTzltYmJQME9PbnlGNnZK?=
 =?utf-8?B?a243Zjh6RWFmSWF3dy9HVmpoZTFmc201ZC9TRGZqZEhZTzVoQlozZHFINDlv?=
 =?utf-8?B?V3JheUpoeUJRSjJvSU9KM045aUdWL0pLSGc5VU5iaXVRZFozZmUwR3VBTU01?=
 =?utf-8?B?dEh1NHMwOXBFV0FRdjZ5VFlGaFNqMm5nenU5WWQwZFFvdFFpZWw0UjJTcDgx?=
 =?utf-8?B?N3hocG45NDBCZnRINVdFQmIvUDhzZ3JuRmVGNjFiMHBXckZMMkJ3QUlySFVU?=
 =?utf-8?B?LzRFZE5QeHM4TmZiQkhMdGRiV3VyVmpUWDN0bFp1Y0lkVnJYM1A3ejcrNlQ2?=
 =?utf-8?B?bEhTUWUrWlBETmNrWlJ2eERZVHZ2M1JKdGl2dGgxTFJGdDV5bkt6TTVmOUxU?=
 =?utf-8?B?SzdWZnRKdWJNMllXcXJRWGVTdy91MkV2V0VkSlZhSzlEZGlTVVJtZHp2ZHNG?=
 =?utf-8?B?dkNWWHZNcWNrQWdSSXIwSzBnSTJHSFIzcnFMUTBLYkZZeXBJRW9ROEhYYXJk?=
 =?utf-8?B?d3BDbVgrQXQ5TVRHTkFlQUc2WFdVQVpqaWhVYkdTM0pLSldpUkdnSXRxcndG?=
 =?utf-8?B?TTNJeWZaU0ZtaSs0QkhlUkRldzFyN0tSc0NUM2REQ2JDQ0lvdmRXd3g2ZVpo?=
 =?utf-8?B?QVg1cks2TjAwbzQxWjBibEtoOGI1Mjl4bXY1N3NJelI1Zm1ITW5NU3N1VEw0?=
 =?utf-8?B?YVRkTzdQQXBZWU9hb2FIZ2hyYmZad2wyUXFGdEtlc3ZhaGR6b2hmRG9ubjAz?=
 =?utf-8?B?N2R1WGFIMWVYVURTYzFIYVMxSGNkMmdtTHRnVWFLcEhIejNyRm14MkkxQ2RO?=
 =?utf-8?B?U0M1UzlqZ3NERXVvMXdNU3MxeFlQM0pWd1dOeWpOWnp6aXZhamFmLzV5eFBO?=
 =?utf-8?B?OHVRWFkxWi9zM3MwYzd4c3NjanhxdCtLK2NrKzhMdzVocjRmYk1aQ2RqMnNT?=
 =?utf-8?B?SjRLVnBtcnh0dWxxTEV5QTIvckJtNGZneDd5QnVuNDBWR2x1NEJ1U1dlbUwz?=
 =?utf-8?B?TzNoWkxNRTAzc01QUTJiRnpiQnBldlFsRk9hdEVyWHBrRExRUDFXYmRiZXBh?=
 =?utf-8?B?T3IwMDZUVEZjMTZzaE9HajlrdmlnaXVua0dUbEppeXMwWTA5VjdFa2Q2RUM1?=
 =?utf-8?B?YVJoa3F6aEFJSXV6ZVBmeVNIUzZRekRlNWVqTWxsUytkYSs3cVh6TkFaeUIr?=
 =?utf-8?B?bUw4QXE2djIvRzdPOFUvbG9CQjJzTTR6RU1JYXdUOFBaMEgyYUpPU1AwaTRZ?=
 =?utf-8?B?Q2hhc1JXczduQ0xURUpuR2hYY0dPYjJhTlp2ZmJSZmxpaHZ3WjNDdlNuMFIz?=
 =?utf-8?B?L21lU2tKMjNyUFFyVytDNXk1ZVpMaVp5WmhMcnpnTjBkbXExMlRTRTRMaUo3?=
 =?utf-8?B?QzQ0TGREcUl2SGxTZjE3ZEQ3Z0cxendReWVPczMvRXRNaVNQSUFRTy96TCtG?=
 =?utf-8?B?TGR1ZkdHMTBvdGJwQVhkRVc3SE8rdDJZUzZUNTFuQStmb2dScDJMd3NlcVV3?=
 =?utf-8?B?WGI1VVFhSVRna0tXVkJ1ZXN4by9hOVViT0xUc0pmS0JhM3NxYi95aTVSb0Ey?=
 =?utf-8?B?TXdkZVdhbEdZVzhLMlNLQjFnNzh5aWxFMk5WdndqaVVXSllLL2dRWVQ5SW9v?=
 =?utf-8?B?aGlqOTlIcmpJTFhWcnpyZlp6V3B3WVVGQ0FzamlGaTArU0hNRGxJYmFpdDdU?=
 =?utf-8?B?RHRQTlhlL1ZZMTBSUktUTkNBejNacmErd2J2WC82M21EdXVPTm9neitRc2ZT?=
 =?utf-8?B?YVAxRnVEazFTMTRyNUwwVGhaK0RCR05MV2F2MTMvZHpSVndRcWhmZ3JGZ3Bm?=
 =?utf-8?B?WVU2b3VOaGxzWVV2dmFzSWVQT2NJMjUycjBmUXBxenhBTlBzR3E4eGMyMnlq?=
 =?utf-8?B?N0QyTVZyalZJdGtuNVRxUExvVzViU0lLTGRFeU1yZk5lLzFGL2g4TXFObjl6?=
 =?utf-8?B?L2ZCUEgvWWtiMlVSbFFmS3B1ZjhQdU9sZkdLSG1pNUJlWURJM1hKVTZTYlFU?=
 =?utf-8?B?TzlHUEsxNUVXRGJYV0ErK1Uva2wvd0Rta3A0MnhPV2lXZDBqYlpIVFVhMmFB?=
 =?utf-8?B?OGpWZXU0a0lBcFd1NEhhcWtJeWtQcVFkbzBIOUxkVk10TGYxZE54TENLenE2?=
 =?utf-8?Q?v6jGNkYRgsVYgn9PXNxXSx0qr?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: c396c0dc-289b-46f6-fa11-08dcab1d7dbd
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 23 Jul 2024 13:43:53.5031
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: HNtgZyd0MBAurh4ax8LxgWiS7vxrWaVmnRqiau46TxUD+kwQ6QQdp/EVYNFXFu2VDrgwS+SH7/4WD9Wx5XR5jQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB5975


On 7/19/24 20:01, Dave Jiang wrote:
>
>>   
>> -static int cxl_probe_regs(struct cxl_register_map *map)
>> +static int cxl_probe_regs(struct cxl_register_map *map, uint8_t caps)
>>   {
>>   	struct cxl_component_reg_map *comp_map;
>>   	struct cxl_device_reg_map *dev_map;
>> @@ -437,11 +437,12 @@ static int cxl_probe_regs(struct cxl_register_map *map)
>>   	case CXL_REGLOC_RBI_MEMDEV:
>>   		dev_map = &map->device_map;
>>   		cxl_probe_device_regs(host, base, dev_map);
>> -		if (!dev_map->status.valid || !dev_map->mbox.valid ||
>> +		if (!dev_map->status.valid ||
>> +		    ((caps & CXL_DRIVER_CAP_MBOX) && !dev_map->mbox.valid) ||
>>   		    !dev_map->memdev.valid) {
>>   			dev_err(host, "registers not found: %s%s%s\n",
>>   				!dev_map->status.valid ? "status " : "",
>> -				!dev_map->mbox.valid ? "mbox " : "",
>> +				((caps & CXL_DRIVER_CAP_MBOX) && !dev_map->mbox.valid) ? "mbox " : "",
> According to the r3.1 8.2.8.2.1, the device status registers and the primary mailbox registers are both mandatory if regloc id=3 block is found. So if the type2 device does not implement a mailbox then it shouldn't be calling cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map) to begin with from the driver init right? If the type2 device defines a regblock with id=3 but without a mailbox, then isn't that a spec violation?
>
> DJ


Right. The code needs to support the possibility of a Type2 having a 
mailbox, and if it is not supported, the rest of the dvsec regs 
initialization needs to be performed. This is not what the code does 
now, so I'll fix this.


A wider explanation is, for the RFC I used a test driver based on QEMU 
emulating a Type2 which had a CXL Device Register Interface defined 
(03h) but not a CXL Device Capability with id 2 for the primary mailbox 
register, breaking the spec as you spotted.


Thanks.



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-MW2-obe.outbound.protection.outlook.com (mail-mw2nam12on2067.outbound.protection.outlook.com [40.107.244.67])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 81C63AD23;
	Wed, 24 Jul 2024 08:25:18 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.244.67
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721809520; cv=fail; b=imLhgyGhrUpfrjn/asPevUXAXMV4rrQtv5bceEYgLxN3nLQ5FeGlXe7NAUw/LuY1vHKKH8Ih7ZDgqM6GY3z5rPZtruofWDq/odNEH83i6nS5WZIiTIJORijxB3ub+JAGU9COa3KjMIl0NvOBnaOwplVk9h7lfQq2zBRxnp6onr0=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721809520; c=relaxed/simple;
	bh=3/UV+RWmCe8UJdZaT8sPrEHgV0yhPgKs3SFsysnasS4=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=sIuuyz9Jt3//p3Y1QGaVClUxldaZ7yVWH+SpFxHEofdesMS8Ll+dqs7zt++TYUHWFoi4JVlsoLimg+F4dhTZqjIxKCsZ4B5ECVkWUjyWy8yRSEDIxXm3mChAOHHHCXIuJFHyOwHEdVnNCdsAEa2dLveJkpnIbid2CFunw1O1avg=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=Tn/Ldqv2; arc=fail smtp.client-ip=40.107.244.67
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="Tn/Ldqv2"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=I8Hn2NWOv4XV4OFUp/4RP+JZDsdWEj/vgQmHwVXr7cnt98f+7Oy9uUq6Y14GID4ANQ7SbYrRJtGjEYEQldFYkl+YZvaQOJtKWIZBccCncGciA9ock6pLPtxclvmzRgWUHs2CrqNQHxqM/+YP9NyejEiiOw37P3OfQqVZI+Dt/tPBAnBRJlecKkT3e28hjfDgL9w0fMxxn37E2b0l1q1v/SbdoNt1S3eOAD6ct366X1a41F0xisOEp0XUs6OrZ9fs3+2D0XY1Kub9IxokFC5Q2F29TfIoKX3ANcNJ0zTHvTs3oOAyhgKTPz0q3oWdoVfzHYuj4dt3sZMjQz52RFAJlg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=w71eBTfLtYSGYpS+Qw1AggejR1MoUEQe6+4NQvKhbf0=;
 b=klDoPE/JD6d23CQkj0xa2trFsffgmaiTtOsWPMnG8siGJdtx6fdNSLVmmweCEp8JCNe+9ucBki++3oRZ75Rips+6NGirtQjvU11M20orKFXQ88zm+LKsKueCqJmPhmfIkD8+8U7tnbJx1SXyqIgVZDJU+fAmY3jAdlZ6ZQGENEt3pl1d4u+UtVJjlEWl7L6nS0Xb71BBVPz1wZAzpPAFHyVsZRdLfKEhlZ5Higs5I2o0d/90WGi0nC1PeSTmWqgbGv/ewNmzBdddXUmoGRgoq2Sq/WQ4EP3jWTdOle369m/r5rbkFZ5oaXNEtgMIDv/NQvHogSuLOn/lBnHEsDK7RQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=w71eBTfLtYSGYpS+Qw1AggejR1MoUEQe6+4NQvKhbf0=;
 b=Tn/Ldqv2WIbklQKJ+bCi+5xLtmLd2L7e9mtU5TkdiuIhDfwExKyY4LN/80M0sCfb0NXXmybnHGrVww6xfg7LRzUl21TV0+iewhVnJjGsJizeZVtZHHGE7UGIz4/2GZLRVkDjUuj/SiHYeFDbpfmFjRQyKOY9Ws55yyIl7M6LTLA=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by IA0PR12MB8086.namprd12.prod.outlook.com (2603:10b6:208:403::7) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7784.16; Wed, 24 Jul
 2024 08:25:14 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%6]) with mapi id 15.20.7784.013; Wed, 24 Jul 2024
 08:25:12 +0000
Message-ID: <f40312b1-8ac7-973b-5519-ee185eec8560@amd.com>
Date: Wed, 24 Jul 2024 09:24:40 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.11.0
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Content-Language: en-US
To: "Li, Ming4" <ming4.li@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
 <73311003-6b8e-4140-935a-55bd63a723e6@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <73311003-6b8e-4140-935a-55bd63a723e6@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LO4P123CA0663.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:316::10) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|IA0PR12MB8086:EE_
X-MS-Office365-Filtering-Correlation-Id: b35dffa3-c33b-44a8-5eda-08dcabba235b
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|1800799024|366016|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?REwvRENiZzcwVWhvK3gyR0V4N2tkd2JWZWwyVmlIbTEzVnp4cUJFN3hDajRG?=
 =?utf-8?B?dDR1L1RTeWNPQVF3dlo0MnBEQVR4Wnp1WTJSd0Q3TjUrdHlYMGJQWkZMeHhS?=
 =?utf-8?B?eisrZzh4Y3BNNFVhaUk1MnNZUkkwYXBhY0l6VTl5c0NEdkJXWFJWclVFR2dG?=
 =?utf-8?B?L3crNGV0cjFvUXVNRk1xcjllYnJvUzBtT3YycGMrU1BhWjBSdlVmTzZEYkM2?=
 =?utf-8?B?ZGFzcmRFa0IrakxjTFE0YTZHUVdjR05BTktXazc1WEo5NjV0RDJHRjd0RlFu?=
 =?utf-8?B?ajZBeW1HRzQ2SmROK0VUaWFhNk9iY0hFZVkxMG9QZlB3WTY1My9PVm1QaU9L?=
 =?utf-8?B?NVdxOGlrZlpKb1RmM1dJMUh5TVEvTHpCRjNHbng0dXl0WEgvaDF3ZmxNVFpv?=
 =?utf-8?B?d2NlZkFuY1N4SzJwQzhKUDlKeHdMTTg5amVXWldwc3VLaGxnMXBDK3p0K1J3?=
 =?utf-8?B?akNrbEw0ckgrdFk0a3NDQjJWMHFuT2taWFh3aXlxdEtXZ2o5OWtBcEVsUE9F?=
 =?utf-8?B?NXQ5TGhFMWg4VVp1aTd4RStuUW84T1NWN0p0UTJHc21LQ1pvR1g0UHdYRFlm?=
 =?utf-8?B?c2drVnBqY2NEcjhUbGtweUxtMEpjSFNRL0FYNzZpblBLekl5RFo4VG1ueXV5?=
 =?utf-8?B?aG5Jd0xVdEttMksxR1BLLzgwbU8yZ0ZwTWp2bzBQL2NiTG52cW1GVGdwNkpa?=
 =?utf-8?B?TElEb1VPWjh6TWJYL29JTHJSVXptNEMwRGlkZ253L3FldlZpK2ZaSmdzbXdE?=
 =?utf-8?B?cjRHdGJzTnUzRU9WT3RMUlU2RjdOSm9KS2ZvbkQzQ1dJUDgrTnlWa3QxOERv?=
 =?utf-8?B?YnI1Mjh3blFPSzdJTFhNbHkrdnUvT0hlU3Q5YjhTakJ5ME1mV0NTb1dNaVc4?=
 =?utf-8?B?ai9vSHR3N0VwbS8yMHFoOEI1RnJxV3FIWVlLbFZDNjF2Zlk1UnMxZVlmVytK?=
 =?utf-8?B?eGRvVmRCeXFPTFFDNUxqbmcyUU9NNGRUTEhZSDd0M1pUY25LTXA5YjQ0Nkdo?=
 =?utf-8?B?dEwwaVg2ZFNRcHRMdkdjaDcvUkJETGxXSkZPeWlkWEQxZ2ZVNGZBSEFuVFNa?=
 =?utf-8?B?dnhYUm5EaXZPc0tiNHd5ZWJEOHNYcW02NVJGNzVPeEtJTkxpdFg1TllSR2dL?=
 =?utf-8?B?R2NBWnVmL3hLMVFNREI4emo1ZStoTTVxemNrUU9iU3JWbDlzRENHYUorc3pR?=
 =?utf-8?B?eHk5emhxYnFIMTNSUStrcjhIbWQ1c0R1REpPNHJ5ZE1BR0l5TTlGNjVWWGln?=
 =?utf-8?B?UUJ6WG5zdjVPZVlGWnR2K0I5RnBsYWV5MTRWL2gxUFpXcytVLzNpRXozV0h4?=
 =?utf-8?B?cXpPbmlPRTZlSEx1NCtVNDFmaExBb2dybnVPR1MwNWN5RW1RT0ZtWjQzaElW?=
 =?utf-8?B?WHlCQThyS3NYSk02bEN1L2lyNGczN1JwUm1BVGx5U2FpckhtMm4zMWtBeUlR?=
 =?utf-8?B?TUJ1c05TWDJmNXZQam1iVDEvb1I3bEZGRjdmRUY0VFl5ZjdrOVlEQ2hhZHdK?=
 =?utf-8?B?bkdkWTY3dFNBOURleTVwcjFkYkQ4eFV0cUpQci9zeVV5aFdYcm1IWkgrYzda?=
 =?utf-8?B?K2JlL2M4cGt4UU1BUzBObjlYcHBOSDhHTUZyTFIzUCtMRHMrS3dZY3dMY3NY?=
 =?utf-8?B?V3pRZ1pjbllQVmJuSkJCenYxUmZRWGg5My9QQnhuZ0lhODU1bmRNZXpaYVph?=
 =?utf-8?B?MFJHSU93ek1SWmJqU0NyK0kwWVlyQ1hPUDJqU21aeFZhNkE4cEZPZjNOdlBC?=
 =?utf-8?B?WmluR2hrUFBIZXNhNzlYVFNXWmVQd01sV1gyOHpqMmR6VTlyQTE1aFU5WVl0?=
 =?utf-8?B?N3dOemZITnRiRXdaTkR6UT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(1800799024)(366016)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?VHhHQ0JCM2VIV3ZzNmNwcmdNVlBzUCtIV1JCbGFVSi9IOWhlMFZTRStuemNO?=
 =?utf-8?B?YXpmaC9JNkEwZitPaVRVWVRLUmZwV0VhT01PL3ZuczRad1ZRVXBucjNiSXp4?=
 =?utf-8?B?ckhmbjd6YTBBNjhDd2tzc3IwYWNsZC9vNkNZckluc3g5eUdPajBMQ1d0NmRS?=
 =?utf-8?B?T29MU0ZnQ3A3czFHczJrblgrZ3VGUjBvcWNjcGxSSk9MbTRCZUFnZElwRWhH?=
 =?utf-8?B?d1ZlMDlpbGhCTkx5WWJnUXRHSmRjaTNFeHRYVVBtK2RHUnpSKzY3TDRwdE1F?=
 =?utf-8?B?cEhJREVoZEFPQmR6ZlJhclA3Umo4amN1dUQyQUZ1QjNsbS96VU5rcFZNZ0Vp?=
 =?utf-8?B?ZXZjbHVxZWVZRWNlVmM5RG51SVhIejV3OXBFbTRaY0NCWGZ5c0VJZ0k1elVF?=
 =?utf-8?B?NWNIM2RNNjF4QThlNUNZVllYQVdTZWhaU1dhaTA5ZVhZeEtiVXJjeHQ0Mmx1?=
 =?utf-8?B?NzN2WEQvbGlDWllVRUNRK1d5UVVaazBIWWtJMmFEYy9lRW0xSC9MN2UrK2tC?=
 =?utf-8?B?YWllVmk4OUV6aFRrMk9YRG5VZjVXV2w5NURsVWtZbmZsMXc1UjBzRTluUmc0?=
 =?utf-8?B?SGRVYVRNa1JhdjdGQk01eHFpaDdCOUd2K25PTjdESjJFdkcrUUI3WjBiYlJF?=
 =?utf-8?B?YlVodG1mdmdsbWtBZEpIaTluSVd5eG0rVDFYYXcrMlFsNUptUE9PeXkvSUJu?=
 =?utf-8?B?b3NZSDRUQkQyQlhtNk1HS2RFOXBuOGRSakZYdGtJR3I2bk04c3NnMWRVSHN6?=
 =?utf-8?B?ZWZIUG5LZVFqMEg0RDZJTUVZdzNqL1lxWVdFN2VFZWhZalpWdE1Ea2Y3SXNE?=
 =?utf-8?B?RVhyblJZMjN6a2FWQmhDVVNVR1dwMUZXekZGV0VmRVZNRTFXZXorS1FFSmdn?=
 =?utf-8?B?bndVSEI4NHRZVnhWMUdKUUErbHIxcEo4Yy9rMWtxTkJGOHZ5SVpmQStZTWdP?=
 =?utf-8?B?V3Y3RldYdWJza3c3VTFLeHdmSUxiOWFKeWhXZWIvajdkenAwUW1ZaHpLck9n?=
 =?utf-8?B?NXRsSDNxY3JxaWhwMHNGSmF2Qm01aGsyMnRiZllRd010Ti9hNmJxdmsyeXll?=
 =?utf-8?B?Lzk2MmtGcVJIWWNkZUJsUHMvamRnTVJrazAxZTl0a0t1OU5nUTRLUVVyM0tS?=
 =?utf-8?B?Tmx4Y00wck1VM2ZpZXBBZmxlc2VHMDZhMjVCOGhWNmNvT3pmNEZzei9jNU9x?=
 =?utf-8?B?dXlSMC9QTHlnYnB4NkFFRHNFY0xWVC9xQnRUWWFNL080dm5xRHdHek4yUHRY?=
 =?utf-8?B?L083UnI0clUxVkFwd0RvOC9nQWpvdmdMcEdyVC9hMWlCR1FSdmpkb1VBK0dl?=
 =?utf-8?B?R0tzcXhsTUd4TnRONnp2Y2FCMXZMOWc5Q0tpMlFuazVRRmJsTnFmRHZ2YWNV?=
 =?utf-8?B?RldpYXhMVlFqdGJ2ZXdRa055cVl6M2V5YXFReWFrYTYyY1BWZDlvejZ1Y054?=
 =?utf-8?B?NFFRR3B1cVdzdXRrUklDOVJFV1BKNkRmcnN6Sm1VWHorR1YzQjIyaW10ZFhh?=
 =?utf-8?B?RHNsWUpDZ3hVL0lQdWpLd1U4NnZwSHhOTjBtS1ZHMEJoeXowbFJheFM0bUZm?=
 =?utf-8?B?ZjRnejRQSjhNSVVSWXlUZyttclJXWmYxUkpTNWZaUzJBYnU3a05scDBHMEVU?=
 =?utf-8?B?K3c2cHBOOGo5MzVpMFlkNC9IZkYvTS9lZzM0QmpmbXkzSG56Z2wwbkFWNzVR?=
 =?utf-8?B?cHk5K01NTVBKdVROYm0yZmRudVQ1a1dCcnZUbXNTYU5hSGkwUHlSZ2tOMWZt?=
 =?utf-8?B?MXFjcVVPclFIc2Z1MllrR24zUHU1ZVRQK2ZsN09rRVVNdTcxbVJ1R1NJTm5N?=
 =?utf-8?B?aUVpL1ZhT2RhZzAydUlBY0owNHJWZHkvc2k2SXBLZVZRS2U1eXNMc3JBUXg4?=
 =?utf-8?B?R2RHN3plRmlrLzBiT1ZQdWQ1R0xJN3dady95cWMyUVNFcEJPQVdoNzZ6RlJK?=
 =?utf-8?B?S0hDWUlzZ2FEcVcrR04zcDBFVjljTzNtUVpOQ0V0Q1V1bDN1SlNwZmZwTytj?=
 =?utf-8?B?V0wrV1kwMmVFeXpqeCtSeEQzUVZDdi8vM3JMS3JtdjRNNWpRZzIyQTl0cEZK?=
 =?utf-8?B?Uk56T2FRWjVnSmZRdzc2K25WbkRPQUw2eFh4dS9CbGprWjRVM0lvK3lpTHBu?=
 =?utf-8?Q?3PLyCFu7b9b2NQYyv3RffEwLo?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: b35dffa3-c33b-44a8-5eda-08dcabba235b
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 24 Jul 2024 08:25:12.8092
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: aKLszZkHb5bVH8wtLR3YKyp5Xavp0PkEGMwmcn9KUXsijOnHPY9FcGc7nGhM7kRe1rFhcARMVqHyI7fR8L+MUw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA0PR12MB8086


On 7/16/24 07:06, Li, Ming4 wrote:
> On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> CXL region creation involves allocating capacity from device DPA
>> (device-physical-address space) and assigning it to decode a given HPA
>> (host-physical-address space). Before determining how much DPA to
>> allocate the amount of available HPA must be determined. Also, not all
>> HPA is create equal, some specifically targets RAM, some target PMEM,
>> some is prepared for device-memory flows like HDM-D and HDM-DB, and some
>> is host-only (HDM-H).
>>
>> Wrap all of those concerns into an API that retrieves a root decoder
>> (platform CXL window) that fits the specified constraints and the
>> capacity available for a new region.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95c8acdc347345b4f
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>> ---
>>   drivers/cxl/core/region.c          | 161 +++++++++++++++++++++++++++++
>>   drivers/cxl/cxl.h                  |   3 +
>>   drivers/cxl/cxlmem.h               |   5 +
>>   drivers/net/ethernet/sfc/efx_cxl.c |  14 +++
>>   include/linux/cxl_accel_mem.h      |   9 ++
>>   5 files changed, 192 insertions(+)
>>
>> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
>> index 538ebd5a64fd..ca464bfef77b 100644
>> --- a/drivers/cxl/core/region.c
>> +++ b/drivers/cxl/core/region.c
>> @@ -702,6 +702,167 @@ static int free_hpa(struct cxl_region *cxlr)
>>   	return 0;
>>   }
>>   
>> +
>> +struct cxlrd_max_context {
>> +	struct device * const *host_bridges;
>> +	int interleave_ways;
>> +	unsigned long flags;
>> +	resource_size_t max_hpa;
>> +	struct cxl_root_decoder *cxlrd;
>> +};
>> +
>> +static int find_max_hpa(struct device *dev, void *data)
>> +{
>> +	struct cxlrd_max_context *ctx = data;
>> +	struct cxl_switch_decoder *cxlsd;
>> +	struct cxl_root_decoder *cxlrd;
>> +	struct resource *res, *prev;
>> +	struct cxl_decoder *cxld;
>> +	resource_size_t max;
>> +	int found;
>> +
>> +	if (!is_root_decoder(dev))
>> +		return 0;
>> +
>> +	cxlrd = to_cxl_root_decoder(dev);
>> +	cxld = &cxlrd->cxlsd.cxld;
>> +	if ((cxld->flags & ctx->flags) != ctx->flags) {
>> +		dev_dbg(dev, "find_max_hpa, flags not matching: %08lx vs %08lx\n",
>> +			      cxld->flags, ctx->flags);
>> +		return 0;
>> +	}
>> +
>> +	/* A Host bridge could have more interleave ways than an
>> +	 * endpoint, couldn´t it?
>> +	 *
>> +	 * What does interleave ways mean here in terms of the requestor?
>> +	 * Why the FFMWS has 0 interleave ways but root port has 1?
>> +	 */
>> +	if (cxld->interleave_ways != ctx->interleave_ways) {
>> +		dev_dbg(dev, "find_max_hpa, interleave_ways  not matching\n");
>> +		return 0;
>> +	}
>> +
>> +	cxlsd = &cxlrd->cxlsd;
>> +
>> +	guard(rwsem_read)(&cxl_region_rwsem);
>> +	found = 0;
>> +	for (int i = 0; i < ctx->interleave_ways; i++)
>> +		for (int j = 0; j < ctx->interleave_ways; j++)
>> +			if (ctx->host_bridges[i] ==
>> +					cxlsd->target[j]->dport_dev) {
>> +				found++;
>> +				break;
>> +			}
>> +
>> +	if (found != ctx->interleave_ways) {
>> +		dev_dbg(dev, "find_max_hpa, no interleave_ways found\n");
>> +		return 0;
>> +	}
>> +
>> +	/*
>> +	 * Walk the root decoder resource range relying on cxl_region_rwsem to
>> +	 * preclude sibling arrival/departure and find the largest free space
>> +	 * gap.
>> +	 */
>> +	lockdep_assert_held_read(&cxl_region_rwsem);
>> +	max = 0;
>> +	res = cxlrd->res->child;
>> +	if (!res)
>> +		max = resource_size(cxlrd->res);
>> +	else
>> +		max = 0;
>> +
>> +	for (prev = NULL; res; prev = res, res = res->sibling) {
>> +		struct resource *next = res->sibling;
>> +		resource_size_t free = 0;
>> +
>> +		if (!prev && res->start > cxlrd->res->start) {
>> +			free = res->start - cxlrd->res->start;
>> +			max = max(free, max);
>> +		}
>> +		if (prev && res->start > prev->end + 1) {
>> +			free = res->start - prev->end + 1;
>> +			max = max(free, max);
>> +		}
>> +		if (next && res->end + 1 < next->start) {
>> +			free = next->start - res->end + 1;
>> +			max = max(free, max);
>> +		}
>> +		if (!next && res->end + 1 < cxlrd->res->end + 1) {
>> +			free = cxlrd->res->end + 1 - res->end + 1;
>> +			max = max(free, max);
>> +		}
>> +	}
>> +
>> +	if (max > ctx->max_hpa) {
>> +		if (ctx->cxlrd)
>> +			put_device(CXLRD_DEV(ctx->cxlrd));
>> +		get_device(CXLRD_DEV(cxlrd));
>> +		ctx->cxlrd = cxlrd;
>> +		ctx->max_hpa = max;
>> +		dev_info(CXLRD_DEV(cxlrd), "found %pa bytes of free space\n", &max);
>> +	}
>> +	return 0;
>> +}
>> +
>> +/**
>> + * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
>> + * @endpoint: an endpoint that is mapped by the returned decoder
>> + * @interleave_ways: number of entries in @host_bridges
>> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
>> + * @max: output parameter of bytes available in the returned decoder
>> + *
>> + * The return tuple of a 'struct cxl_root_decoder' and 'bytes available (@max)'
>> + * is a point in time snapshot. If by the time the caller goes to use this root
>> + * decoder's capacity the capacity is reduced then caller needs to loop and
>> + * retry.
>> + *
>> + * The returned root decoder has an elevated reference count that needs to be
>> + * put with put_device(cxlrd_dev(cxlrd)). Locking context is with
>> + * cxl_{acquire,release}_endpoint(), that ensures removal of the root decoder
>> + * does not race.
>> + */
>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>> +					       int interleave_ways,
>> +					       unsigned long flags,
>> +					       resource_size_t *max)
>> +{
>> +
>> +	struct cxlrd_max_context ctx = {
>> +		.host_bridges = &endpoint->host_bridge,
>> +		.interleave_ways = interleave_ways,
>> +		.flags = flags,
>> +	};
>> +	struct cxl_port *root_port;
>> +	struct cxl_root *root;
>> +
>> +	if (!is_cxl_endpoint(endpoint)) {
>> +		dev_dbg(&endpoint->dev, "hpa requestor is not an endpoint\n");
>> +		return ERR_PTR(-EINVAL);
>> +	}
>> +
>> +	root = find_cxl_root(endpoint);
> Could use scope-based resource management  __free() here to drop below put_device(&root_port->dev);
>
> e.g. struct cxl_root *cxl_root __free(put_cxl_root) = find_cxl_root(endpoint);
>

I need to admit not familiar yet with scope-based macros, but I think 
these are different things. The scope of the pointer is inside this 
function, but the data referenced is likely to persist.


  get_device, inside find_cxl_root, is needed to avoid the 
device-related data disappearing while referenced by the code inside 
this function, and at the time of put_device, the data will be freed if 
ref counter reaches 0. Am I missing something?


>> +	if (!root) {
>> +		dev_dbg(&endpoint->dev, "endpoint can not be related to a root port\n");
>> +		return ERR_PTR(-ENXIO);
>> +	}
>> +
>> +	root_port = &root->port;
>> +	down_read(&cxl_region_rwsem);
>> +	device_for_each_child(&root_port->dev, &ctx, find_max_hpa);
>> +	up_read(&cxl_region_rwsem);
>> +	put_device(&root_port->dev);
>> +
>> +	if (!ctx.cxlrd)
>> +		return ERR_PTR(-ENOMEM);
>> +
>> +	*max = ctx.max_hpa;
>> +	return ctx.cxlrd;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_get_hpa_freespace, CXL);
>> +
>> +
>>   static ssize_t size_store(struct device *dev, struct device_attribute *attr,
>>   			  const char *buf, size_t len)
>>   {
>> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
>> index 9973430d975f..d3fdd2c1e066 100644
>> --- a/drivers/cxl/cxl.h
>> +++ b/drivers/cxl/cxl.h
>> @@ -770,6 +770,9 @@ struct cxl_decoder *to_cxl_decoder(struct device *dev);
>>   struct cxl_root_decoder *to_cxl_root_decoder(struct device *dev);
>>   struct cxl_switch_decoder *to_cxl_switch_decoder(struct device *dev);
>>   struct cxl_endpoint_decoder *to_cxl_endpoint_decoder(struct device *dev);
>> +
>> +#define CXLRD_DEV(cxlrd) &cxlrd->cxlsd.cxld.dev
>> +
>>   bool is_root_decoder(struct device *dev);
>>   bool is_switch_decoder(struct device *dev);
>>   bool is_endpoint_decoder(struct device *dev);
>> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
>> index 8f2a820bd92d..a0e0795ec064 100644
>> --- a/drivers/cxl/cxlmem.h
>> +++ b/drivers/cxl/cxlmem.h
>> @@ -877,4 +877,9 @@ struct cxl_hdm {
>>   struct seq_file;
>>   struct dentry *cxl_debugfs_create_dir(const char *dir);
>>   void cxl_dpa_debug(struct seq_file *file, struct cxl_dev_state *cxlds);
>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>> +					       int interleave_ways,
>> +					       unsigned long flags,
>> +					       resource_size_t *max);
>> +
>>   #endif /* __CXL_MEM_H__ */
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index 2cf4837ddfc1..6d49571ccff7 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -22,6 +22,7 @@ void efx_cxl_init(struct efx_nic *efx)
>>   {
>>   	struct pci_dev *pci_dev = efx->pci_dev;
>>   	struct efx_cxl *cxl = efx->cxl;
>> +	resource_size_t max = 0;
>>   	struct resource res;
>>   	u16 dvsec;
>>   
>> @@ -74,6 +75,19 @@ void efx_cxl_init(struct efx_nic *efx)
>>   	if (IS_ERR(cxl->endpoint))
>>   		pci_info(pci_dev, "CXL accel acquire endpoint failed");
>>   
>> +	cxl->cxlrd = cxl_get_hpa_freespace(cxl->endpoint, 1,
>> +					    CXL_DECODER_F_RAM | CXL_DECODER_F_TYPE2,
>> +					    &max);
>> +
>> +	if (IS_ERR(cxl->cxlrd)) {
>> +		pci_info(pci_dev, "CXL accel get HPA failed");
>> +		goto out;
>> +	}
>> +
>> +	if (max < EFX_CTPIO_BUFFER_SIZE)
>> +		pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
>> +				  max, EFX_CTPIO_BUFFER_SIZE);
>> +out:
>>   	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>>   }
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index 701910021df8..f3e77688ffe0 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -6,6 +6,10 @@
>>   #ifndef __CXL_ACCEL_MEM_H
>>   #define __CXL_ACCEL_MEM_H
>>   
>> +#define CXL_DECODER_F_RAM   BIT(0)
>> +#define CXL_DECODER_F_PMEM  BIT(1)
>> +#define CXL_DECODER_F_TYPE2 BIT(2)
>> +
>>   enum accel_resource{
>>   	CXL_ACCEL_RES_DPA,
>>   	CXL_ACCEL_RES_RAM,
>> @@ -32,4 +36,9 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>>   
>>   struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
>>   void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint);
>> +
>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>> +					       int interleave_ways,
>> +					       unsigned long flags,
>> +					       resource_size_t *max);
>>   #endif
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-yw1-f169.google.com (mail-yw1-f169.google.com [209.85.128.169])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 12D066F068;
	Wed, 24 Jul 2024 21:25:32 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.128.169
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721856334; cv=none; b=V3oK/vGH/hhuQ+AQDFD8M3yGic7ne5FBpStBYePfenaeavlLZs3C6nbIOs/uZyEuwS+wyUJj8crr8HQ/VO0b0pS/XB7N8vx09uihWJltBAIncrVofZXFZP8GN0pRGzXuJVKMkdStNvwNdB/nd6SSVAGNzrJiytdW2t5BFRZPudI=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721856334; c=relaxed/simple;
	bh=1NH08U6BGBVe8khrqnXgkPBVMo9qPyuXxOiZxEmiL7A=;
	h=From:Date:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=QrgCDhHxpnzz71UONj0ZyiP+TaUl8xgvU5S2t5qpdOh7U9CEmFtPoSgxLidTtIRFE8PO7y18CmRYIyupQVJWlsOpkMMAYVojUCaUHvuWKULbuQPnxGTqVVJhLL2b3Xw13ZZ6UNqzvrl2f5Xk2ymwTEKvWrTgjtbSprGlqAB+Ycc=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=aA4uWSIz; arc=none smtp.client-ip=209.85.128.169
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="aA4uWSIz"
Received: by mail-yw1-f169.google.com with SMTP id 00721157ae682-65cd720cee2so2553747b3.1;
        Wed, 24 Jul 2024 14:25:32 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1721856332; x=1722461132; darn=vger.kernel.org;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:date:from:from:to:cc:subject:date:message-id:reply-to;
        bh=wXMzawJgF7d8QM1EjmcWHU4EhRglJETzEU0mZ5bhStg=;
        b=aA4uWSIzAUCOXQchhHRvt/llWp76jYldvn7AGn6J4sJTJ7txIQdu9WlRjaXW4KeRUY
         AF0tPNQBZtQcsePtVT3ck0mSm0vt8cDgwaGemETMxs4bJQ9PTgqPu5ztBEQzoFX45+fA
         GiIZo0137D7CiWFZ8m/z6j/6R3eHPiOeBu2ef7QZXq9+bqbH5IpFU6arkw8Dloeh5yl6
         5st2i4Vz6UxZYIPUjrpLW+9b2D2FFZNtexlqjBapVF1sXP8o+T4AVa7vjTOkXcJhp60I
         oSyfK1/Z/HC38ZXtkGNxTo6/FjHVZG8tOJw16MBWvS34Ptq3TfkL09ngx29v9BcIlyAq
         IVTw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1721856332; x=1722461132;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:date:from:x-gm-message-state:from:to:cc:subject:date
         :message-id:reply-to;
        bh=wXMzawJgF7d8QM1EjmcWHU4EhRglJETzEU0mZ5bhStg=;
        b=wtwEH+qjFY9e15AUXgvgxMr441wyUlcMy4ec4LVJzCQtFKztvjo0GMj73Cq5IofdpD
         5Akvcqev5vl+avHYJgk1w3GXtPjgT1I6jQ9WUHrodGruyuAlA7zLHrveT2N55YbIr2q2
         xVMLa984p9530fTPSzHi2zKxEQKAYLJEn8mLdf5Qt3BK7TSSwkihGR5auSXe6vEuhMeu
         ViF9OD4I0/bXvObBKI2l3ldFu98zZOwhGx6TNNNlOx1cc20qMPWiiDrksqB0mvQAdMzv
         mYiBkv3I8kH1fZJWi9m0OAQAWEbKkJbBzFcL/opJc1QC0VJspFdKgRJqDFe6/ovJD4u2
         xy/Q==
X-Forwarded-Encrypted: i=1; AJvYcCVKVRgprx0bQ2fmTUQBErMJFs8qL8Vah0CBVUTvRUMZouK+gQRKq3puKN183PaLIDj37zRINek9zAd/anWG6yaLgX93SmL5
X-Gm-Message-State: AOJu0Yyp3VIgj2Lp0zlpF+KVOTMYhEfF6tTI1QLUybrvWOsSmOEwu5sD
	cVve4a7L0JnmQEs5EtQUGYqY+a6V5jpukPta6l0Mg5mt3bmPTMe4
X-Google-Smtp-Source: AGHT+IEoAl+CJ57tB/r7tBH2TfairOoFqMQSaQgbYQvoiKceckzLiGz7uqh8WrlpD1uYZnNUeHpSvg==
X-Received: by 2002:a81:6e02:0:b0:61a:d846:9858 with SMTP id 00721157ae682-67511b60918mr8104047b3.20.1721856331852;
        Wed, 24 Jul 2024 14:25:31 -0700 (PDT)
Received: from debian ([50.205.20.42])
        by smtp.gmail.com with ESMTPSA id 00721157ae682-67566dd9000sm360627b3.27.2024.07.24.14.25.30
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Wed, 24 Jul 2024 14:25:31 -0700 (PDT)
From: fan <nifan.cxl@gmail.com>
X-Google-Original-From: fan <fan@debian>
Date: Wed, 24 Jul 2024 14:25:14 -0700
To: alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
	dan.j.williams@intel.com, martin.habets@xilinx.com,
	edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
	pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 05/15] cxl: fix use of resource_contains
Message-ID: <ZqFxOge1S654X4Uf@debian>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-6-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240715172835.24757-6-alejandro.lucero-palau@amd.com>

On Mon, Jul 15, 2024 at 06:28:25PM +0100, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
> 
> For a resource defined with size zero, resource contains will also
> return true.

s/resource contains/resource_contains/

Fan
> 
> Add resource size check before using it.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/hdm.c | 7 +++++--
>  1 file changed, 5 insertions(+), 2 deletions(-)
> 
> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
> index 3df10517a327..4af9225d4b59 100644
> --- a/drivers/cxl/core/hdm.c
> +++ b/drivers/cxl/core/hdm.c
> @@ -327,10 +327,13 @@ static int __cxl_dpa_reserve(struct cxl_endpoint_decoder *cxled,
>  	cxled->dpa_res = res;
>  	cxled->skip = skipped;
>  
> -	if (resource_contains(&cxlds->pmem_res, res))
> +	if ((resource_size(&cxlds->pmem_res)) && (resource_contains(&cxlds->pmem_res, res))) {
> +		printk("%s: resource_contains CXL_DECODER_PMEM\n", __func__);
>  		cxled->mode = CXL_DECODER_PMEM;
> -	else if (resource_contains(&cxlds->ram_res, res))
> +	} else if ((resource_size(&cxlds->ram_res)) && (resource_contains(&cxlds->ram_res, res))) {
> +		printk("%s: resource_contains CXL_DECODER_RAM\n", __func__);
>  		cxled->mode = CXL_DECODER_RAM;
> +	}
>  	else {
>  		dev_warn(dev, "decoder%d.%d: %pr mixed mode not supported\n",
>  			 port->id, cxled->cxld.id, cxled->dpa_res);
> -- 
> 2.17.1
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-yw1-f169.google.com (mail-yw1-f169.google.com [209.85.128.169])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id B3A0C2AE6C;
	Wed, 24 Jul 2024 21:32:24 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.128.169
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721856746; cv=none; b=jnXmJKqOYDojScDZr1GxINLrROLRJ87iSHhz9tidY3juDbH/gFpwC8hFxU3WEUhnCVaFseXj5acTYscRPOd7P36XtiYysRdpFvZad8O1ZepHStbnk6OnGq07b4AenP6wjfwezpIafVKg1vFiDSZIidHKqhrQdFuvC2Bj9lwF3SU=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721856746; c=relaxed/simple;
	bh=+ceRbvkOAsiXk+0vxG/RnajAafcgaRWEjhFXGM+A8OQ=;
	h=From:Date:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=UreRbXsIMCCjkEhbiYklmxVuJYVbQ13wxDzqTpCI0pC+0o7OChgrUfpeot9VmG0cJhgwQsIb1SNkhHbZVKahy0lXOoEjh3jxEqS9Iv/dBVKJAequRfe0e7m+yOsJoTTq6G7rBASos8XbGi3QRCJD9MCXrGOa1QgIicgMaxbFiZM=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=G1P64xPd; arc=none smtp.client-ip=209.85.128.169
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="G1P64xPd"
Received: by mail-yw1-f169.google.com with SMTP id 00721157ae682-64f4fd64773so3182397b3.0;
        Wed, 24 Jul 2024 14:32:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1721856743; x=1722461543; darn=vger.kernel.org;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:date:from:from:to:cc:subject:date:message-id:reply-to;
        bh=gkBRhoPvjuzb7AB9u4D8EiiPMWnQNiwyXDpxcHy1w2U=;
        b=G1P64xPdl/N85hUSvOvRggW4/tq7uCTzUjy/XF6z2PvriKFtyNLt1A6LCbu21vivWc
         RjHqKehbRjFLzvB2QykPbyefF4xyx+8TdOZvP2PH2l1iMBsYxW1G+gRfTfiyDInsTY2K
         soI+gnhSLeoa06g+LN8jNNRDReg8IDlrp2zMTkos6DA+zlNav/zfz2UySE5ork0HlDIv
         Wm306zupqKj0Fg3oJWLmKQpEg9U0TrC67OOlkJWZn3TbNR+Ob0ojlAkKZfwy2X5h6/O5
         MLtGSb6EyJANv94BMV5zPSkpSMWluiD9BeowigFGRwFLxYBB0wGi1uK3EXM8dnXUeAoM
         Xkeg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1721856743; x=1722461543;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:date:from:x-gm-message-state:from:to:cc:subject:date
         :message-id:reply-to;
        bh=gkBRhoPvjuzb7AB9u4D8EiiPMWnQNiwyXDpxcHy1w2U=;
        b=tTH9sq7PUHAXIHWo934tU/V3GIhJd04w6qzE7A73+qbLLstLYzf6SQ/ddlThbFWEwb
         Sutblv8+Sdbyo7nme6VC4Yry73HgnEikXT9nJKFbsEQ4v6E3EK+fsAA5JVxHDsrgZE5W
         ZDfXXEafL5QFZyIjc1BX/+5Z4nS8bLMcmP/gHOWETAeyx/B+fK6IHfjPrnRN6gNgL7tw
         FSf/nNtJ5aIXZn13oMniE7d+yHTNvBdpKoXLsAuBLVs/6tm9Ay0V8kOnCPJUxZQ0CSiq
         uG+p5T9ALEDOme+6zlV/2aH/VmMRjPvySHFMdcX5jPy0j3/sx8ezMBAiNcgN10bNgJeI
         fRXQ==
X-Forwarded-Encrypted: i=1; AJvYcCXhG/THSQZA4FOKX3yvRGYGGfOXEBcXcp1SlxCjh20cR349DoyRiGM84vpy1ZsLwzH01pmHJBM6NfXSNPu6lf8/WSinnZP8
X-Gm-Message-State: AOJu0YyQGidVgvT5hLHNI8lKmSDrZxV9d2wDQn0V/Qhl6iaYZnkLy/2I
	iOJ1eVAS9mFYJwX21mfKDLG/7vgScEin8/5tMmix2C/bj8A23caE
X-Google-Smtp-Source: AGHT+IHsG9cid3UIa2iQSmsvwOYgxNuZ9ZpoicAuwYcMFu9F6qhyGAPDsb3jX8kEpNCxMXz4f3KA4A==
X-Received: by 2002:a81:8541:0:b0:61a:d30f:a9c4 with SMTP id 00721157ae682-67510736cf5mr9345347b3.8.1721856743552;
        Wed, 24 Jul 2024 14:32:23 -0700 (PDT)
Received: from debian ([50.205.20.42])
        by smtp.gmail.com with ESMTPSA id 00721157ae682-67566dd9000sm389127b3.27.2024.07.24.14.32.22
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Wed, 24 Jul 2024 14:32:23 -0700 (PDT)
From: fan <nifan.cxl@gmail.com>
X-Google-Original-From: fan <fan@debian>
Date: Wed, 24 Jul 2024 14:32:21 -0700
To: alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
	dan.j.williams@intel.com, martin.habets@xilinx.com,
	edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
	pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 07/15] cxl: support type2 memdev creation
Message-ID: <ZqFy5Qsg_uLncLRr@debian>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-8-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240715172835.24757-8-alejandro.lucero-palau@amd.com>

On Mon, Jul 15, 2024 at 06:28:27PM +0100, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
> 
> Add memdev creation from sfc driver.
> 
> Current cxl core is relying on a CXL_DEVTYPE_CLASSMEM type device when
> creating a memdev leading to problems when obtaining cxl_memdev_state
> references from a CXL_DEVTYPE_DEVMEM type. This last device type is
> managed by a specific vendor driver and does not need same sysfs files
> since not userspace intervention is expected. This patch checks for the
> right device type in those functions using cxl_memdev_state.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/cdat.c            |  3 +++
>  drivers/cxl/core/memdev.c          |  9 +++++++++
>  drivers/cxl/mem.c                  | 17 +++++++++++------
>  drivers/net/ethernet/sfc/efx_cxl.c | 10 ++++++++--
>  include/linux/cxl_accel_mem.h      |  3 +++
>  5 files changed, 34 insertions(+), 8 deletions(-)
> 
> diff --git a/drivers/cxl/core/cdat.c b/drivers/cxl/core/cdat.c
> index bb83867d9fec..0d4679c137d4 100644
> --- a/drivers/cxl/core/cdat.c
> +++ b/drivers/cxl/core/cdat.c
> @@ -558,6 +558,9 @@ void cxl_region_perf_data_calculate(struct cxl_region *cxlr,
>  	};
>  	struct cxl_dpa_perf *perf;
>  
> +	if (!mds)
> +		return;
> +
>  	switch (cxlr->mode) {
>  	case CXL_DECODER_RAM:
>  		perf = &mds->ram_perf;
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 58a51e7fd37f..b902948b121f 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -468,6 +468,9 @@ static umode_t cxl_ram_visible(struct kobject *kobj, struct attribute *a, int n)
>  	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
>  	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
>  
> +	if (!mds)
> +		return 0;
> +
>  	if (a == &dev_attr_ram_qos_class.attr)
>  		if (mds->ram_perf.qos_class == CXL_QOS_CLASS_INVALID)
>  			return 0;
> @@ -487,6 +490,9 @@ static umode_t cxl_pmem_visible(struct kobject *kobj, struct attribute *a, int n
>  	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
>  	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
>  
> +	if (!mds)
> +		return 0;
> +
>  	if (a == &dev_attr_pmem_qos_class.attr)
>  		if (mds->pmem_perf.qos_class == CXL_QOS_CLASS_INVALID)
>  			return 0;
> @@ -507,6 +513,9 @@ static umode_t cxl_memdev_security_visible(struct kobject *kobj,
>  	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
>  	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
>  
> +	if (!mds)
> +		return 0;
> +
>  	if (a == &dev_attr_security_sanitize.attr &&
>  	    !test_bit(CXL_SEC_ENABLED_SANITIZE, mds->security.enabled_cmds))
>  		return 0;
> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
> index 2f1b49bfe162..f76af75a87b7 100644
> --- a/drivers/cxl/mem.c
> +++ b/drivers/cxl/mem.c
> @@ -131,12 +131,14 @@ static int cxl_mem_probe(struct device *dev)
>  	dentry = cxl_debugfs_create_dir(dev_name(dev));
>  	debugfs_create_devm_seqfile(dev, "dpamem", dentry, cxl_mem_dpa_show);
>  
> -	if (test_bit(CXL_POISON_ENABLED_INJECT, mds->poison.enabled_cmds))
> -		debugfs_create_file("inject_poison", 0200, dentry, cxlmd,
> -				    &cxl_poison_inject_fops);
> -	if (test_bit(CXL_POISON_ENABLED_CLEAR, mds->poison.enabled_cmds))
> -		debugfs_create_file("clear_poison", 0200, dentry, cxlmd,
> -				    &cxl_poison_clear_fops);
> +	if (mds) {
> +		if (test_bit(CXL_POISON_ENABLED_INJECT, mds->poison.enabled_cmds))
> +			debugfs_create_file("inject_poison", 0200, dentry, cxlmd,
> +					    &cxl_poison_inject_fops);
> +		if (test_bit(CXL_POISON_ENABLED_CLEAR, mds->poison.enabled_cmds))
> +			debugfs_create_file("clear_poison", 0200, dentry, cxlmd,
> +					    &cxl_poison_clear_fops);
> +	}
>  
>  	rc = devm_add_action_or_reset(dev, remove_debugfs, dentry);
>  	if (rc)
> @@ -222,6 +224,9 @@ static umode_t cxl_mem_visible(struct kobject *kobj, struct attribute *a, int n)
>  	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
>  	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
>  
> +	if (!mds)
> +		return 0;
> +
>  	if (a == &dev_attr_trigger_poison_list.attr)
>  		if (!test_bit(CXL_POISON_ENABLED_LIST,
>  			      mds->poison.enabled_cmds))
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index a84fe7992c53..0abe66490ef5 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -57,10 +57,16 @@ void efx_cxl_init(struct efx_nic *efx)
>  	if (cxl_accel_request_resource(cxl->cxlds, true))
>  		pci_info(pci_dev, "CXL accel resource request failed");
>  
> -	if (!cxl_await_media_ready(cxl->cxlds))
> +	if (!cxl_await_media_ready(cxl->cxlds)) {
>  		cxl_accel_set_media_ready(cxl->cxlds);
> -	else
> +	} else {
>  		pci_info(pci_dev, "CXL accel media not active");
pci_warning() ??
> +		return;
> +	}
> +
> +	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
> +	if (IS_ERR(cxl->cxlmd))
> +		pci_info(pci_dev, "CXL accel memdev creation failed");
pci_err()

Fan
>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index b883c438a132..442ed9862292 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -26,4 +26,7 @@ int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>  int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
>  void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds);
>  int cxl_await_media_ready(struct cxl_dev_state *cxlds);
> +
> +struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
> +				       struct cxl_dev_state *cxlds);
>  #endif
> -- 
> 2.17.1
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [192.198.163.10])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 861771CD32;
	Thu, 25 Jul 2024 05:51:40 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=192.198.163.10
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721886702; cv=fail; b=nptaD6wmmcA8v6XElxA87wkiRvNgWXL6SVlQ2xsuRuOxKs+0Dy49tryWoFkorula2NqiPw1p1GE/tiabsOKghkmF4kQVSIj/gmDDKsukM8mm3EcsZYRyT+UwqOzK04u8jo2nHbFRRZFMe6U8qQZn4FTsyn2H/lUsExKSQuQN9Xc=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721886702; c=relaxed/simple;
	bh=C1SLK+Hkk9aARkyg/dh3sCtS+R8Xjwr5/WUtFrTkVfc=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=CbDjq13F8aKkwyv0X0lJ8hTGyeHv7H/wJN4S+bggPwOxEz/dN+XCN+Dk2gqPWwEYEuD2tRT9+AU9NQnhl1gFSF614JPb+r0lo2N2ncWncc5XDE5I4BAwKXHM66zLDuivXceDAyu0W1PbqT3bgXAf188M+PI7heDSnT1VPJFeKP0=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=SCLrhDsg; arc=fail smtp.client-ip=192.198.163.10
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="SCLrhDsg"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721886700; x=1753422700;
  h=message-id:date:subject:to:references:from:in-reply-to:
   content-transfer-encoding:mime-version;
  bh=C1SLK+Hkk9aARkyg/dh3sCtS+R8Xjwr5/WUtFrTkVfc=;
  b=SCLrhDsgEH2qw/RpHSO7XJ12BHa8jifDBJ5DASmdhdVLGAQ4IhAQsgkw
   6iFtADwsvy0giNPP6jlpTPzljYhUghqgjt/r5kHXnPY2P6FwEa4Hx2iqP
   +dU+tiqmusxzVKgg5FnsYon1ZmUDTVrM8QIA6U4AfiPooXjftqvl2uXaZ
   XzHWnWcNOuROm0nWhUFElsuKdvLHPC303XPmlUuTkJg7sdAE06f6k7oan
   o+7+9a8pqyX5xgkeWlbhPUyZES/5bVFszLjo/sZHr755/+Ws7pAAHcVvP
   wXe5ynmBeTCEYPgj8XVui7UPXfkuR8thjE7jjzOfmwxt/ujtWZVZBYf1T
   w==;
X-CSE-ConnectionGUID: fZIgxXj/SZOCL91BadltRA==
X-CSE-MsgGUID: aozJ//jHTV+vQMVz/DOqyA==
X-IronPort-AV: E=McAfee;i="6700,10204,11143"; a="31018885"
X-IronPort-AV: E=Sophos;i="6.09,235,1716274800"; 
   d="scan'208";a="31018885"
Received: from fmviesa006.fm.intel.com ([10.60.135.146])
  by fmvoesa104.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 24 Jul 2024 22:51:39 -0700
X-CSE-ConnectionGUID: QFsqd8ZXRcSNB20RPH5ZOQ==
X-CSE-MsgGUID: zJmKcRS1TC+t5gt70kyTig==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,235,1716274800"; 
   d="scan'208";a="52505485"
Received: from fmsmsx602.amr.corp.intel.com ([10.18.126.82])
  by fmviesa006.fm.intel.com with ESMTP/TLS/AES256-GCM-SHA384; 24 Jul 2024 22:51:38 -0700
Received: from fmsmsx611.amr.corp.intel.com (10.18.126.91) by
 fmsmsx602.amr.corp.intel.com (10.18.126.82) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39; Wed, 24 Jul 2024 22:51:38 -0700
Received: from fmsmsx603.amr.corp.intel.com (10.18.126.83) by
 fmsmsx611.amr.corp.intel.com (10.18.126.91) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39; Wed, 24 Jul 2024 22:51:37 -0700
Received: from fmsedg602.ED.cps.intel.com (10.1.192.136) by
 fmsmsx603.amr.corp.intel.com (10.18.126.83) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.39 via Frontend Transport; Wed, 24 Jul 2024 22:51:37 -0700
Received: from NAM02-BN1-obe.outbound.protection.outlook.com (104.47.51.45) by
 edgegateway.intel.com (192.55.55.71) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.39; Wed, 24 Jul 2024 22:51:37 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=L6PWGt25aRNbvHRjA/6ve9QNo/DvvkMOPfBRHp72q5swT/XvQLlJQP/OdfqaiPdDdULRJtqAhD4OqUOORb7DodhzLMBqYOhYxkEtnRsPU2MaIJ9HlY0r0VE+bGQA3dBa4rkWcpylbnBbOoDrp9rnsuA1LgPAj+dfT9T33/gy7IlNWWX3VQhaYNq2A3natKsaKwDMIwMnoKIOoRpm7cCyrQwSykyb4ftUBVAdN4qBU67Xh6Ep7n1EX6bmyu7QYyDnvRGySRBAJcnSklwxCxhVwpzTrIo8AHURLBVgyr6PXKF4UBMURCR2sX2/48wW9UuD+jjXqfIXkhatbIdcqnR//A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=C1SLK+Hkk9aARkyg/dh3sCtS+R8Xjwr5/WUtFrTkVfc=;
 b=uUVCvX82OzcGyCtrSSaLIBQUkkvYNtdxtnOTlab/wahX+2HbHdAMwWDFesQ8ZO/IlToDQixJdxbmCIyqf/iFcN6jww2QlTI2yiRaxtbzNyZsjZ/bkzYHnCt7i8FKPzU8q30S5MOmZlQuP/PfC3d1K5nQWYcpWGxvYcZ1WvaaW8XpcdCAgAMq1nuwjkhrXC4L3684zGFQmon4HjcGAyEM6jF/owAFmKHMcnKTV6CDy5fG/dkFThnX5JpTxFVvPz6+SPnWu1ILosv1Yw1+hgZnIUqV06d9sN6PKdRxdDt3DYI/o6slU0hY3hYTVfGqFjLdx2gBHBNLIc5nnPOfVqWseQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from IA1PR11MB7200.namprd11.prod.outlook.com (2603:10b6:208:42f::11)
 by DM4PR11MB7280.namprd11.prod.outlook.com (2603:10b6:8:108::8) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7784.16; Thu, 25 Jul
 2024 05:51:34 +0000
Received: from IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0]) by IA1PR11MB7200.namprd11.prod.outlook.com
 ([fe80::8f47:b4ca:ec7f:d2c0%6]) with mapi id 15.20.7784.017; Thu, 25 Jul 2024
 05:51:34 +0000
Message-ID: <85432fe0-b9be-4892-89b6-3e986838c5d2@intel.com>
Date: Thu, 25 Jul 2024 13:51:22 +0800
User-Agent: Mozilla Thunderbird
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
To: Alejandro Lucero Palau <alucerop@amd.com>,
	<alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
 <73311003-6b8e-4140-935a-55bd63a723e6@intel.com>
 <f40312b1-8ac7-973b-5519-ee185eec8560@amd.com>
Content-Language: en-US
From: "Li, Ming4" <ming4.li@intel.com>
In-Reply-To: <f40312b1-8ac7-973b-5519-ee185eec8560@amd.com>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: SG2P153CA0029.APCP153.PROD.OUTLOOK.COM (2603:1096:4:c7::16)
 To IA1PR11MB7200.namprd11.prod.outlook.com (2603:10b6:208:42f::11)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: IA1PR11MB7200:EE_|DM4PR11MB7280:EE_
X-MS-Office365-Filtering-Correlation-Id: 833af959-bbda-4cc4-76fa-08dcac6dd73a
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|376014|7416014|1800799024|921020;
X-Microsoft-Antispam-Message-Info: =?utf-8?B?czVyVFZBdlMvNXU0eThSd0VLa2tydmhIZVlVVU81R0E2R25HWDZKTmZlQXlr?=
 =?utf-8?B?UHhQL3lWTjNiZ3ZuNmxHRU9NcDVZeG83SG1ZOHlvcnVJS0RxUDhpR1E4c24z?=
 =?utf-8?B?bm1XNUMyS2pCZm5UaUNaMlVCYjAyZU9vVTRZc0xsSGZsQmhLVndsOC85QkQ1?=
 =?utf-8?B?Uy9IZmc0UlE5QnZGdi9CQWRTNEhBcW9yN0djNHBQdE00djUyOFZvL2xLOHFZ?=
 =?utf-8?B?MWgxMXFWbHV5WGRvQ3RiUThJZDZOVjhOc0g5OWpKM1lVd093QzVoKzhPenBU?=
 =?utf-8?B?cXRYcEpwQ1R4RlNiaXc1YjNudm9WWEIxMmRaKzBBak9EbjlmeVNCSy9aNFlC?=
 =?utf-8?B?RjhQYjBkR0ZaN0VGOUlNL0x0L1Y0YXI0bnpSTkc1TmhQSVZZZXA4NEs0a0Fo?=
 =?utf-8?B?VW1wenBiYitVSkcvTy9WL204K2g0NTlrMTdOQXhPRndxUldqQmRCQUUvck5o?=
 =?utf-8?B?N2FpdlJBSXBLLzh2RXB1K0tJUkhpTGRrVFVhNUtZS2owNjg2RHFHaWZtOHZE?=
 =?utf-8?B?THNRKzhpYXROaUhhSFkwSm8rYitqV0theHVqOXRQZWs3ZERLUCtvc3ZWN0Jw?=
 =?utf-8?B?SjU3MGFoMlBoWG5uS2QwQnpXVVRKNXhacU5KVWYyVzkyYlRqYitFZkFOWi9H?=
 =?utf-8?B?K2I1ckVXUEVKdlZMUnNMWndzaTlneUR6ZGYxM0hDa2lvZ2ZnY0VobHRuNGFM?=
 =?utf-8?B?RG1JaVo2WFV2MVY4eXR5L0RHanlDRVQvUC80RFVDQVRSTWpQeTJ4SzJDczg5?=
 =?utf-8?B?a2haVVdVYVlCT1ViZ0FEY3ptajFxZnFLbDloOU1nQU5qdDRuL0RoYXNxOFEr?=
 =?utf-8?B?cE9HdlFoOFNDV3JEWTNuU0VrejBIV2dsUzI5N1RYNjNqSVQwWWh4V0tJNHBi?=
 =?utf-8?B?cmZmVlFCZXRoRzRpLzYwZTV4bUI3Z2VpTGVqSzhoSDhxWkNWenpvOUFpNWQ2?=
 =?utf-8?B?eVJSYW5WNTlISXVyZUhHeHA1cHBvK3puQ0QwMUJValVoOTBXaWE2LzFaSXJ2?=
 =?utf-8?B?Zi8xc2xsUnd6UjI5YVB0ZmFuL0QycUZpb2Z3OUFhdWtLcGlYTlVVbWJ5bkFF?=
 =?utf-8?B?ZTkzRVZmQ0U4aGIyRmY0dTEwU1h5cTRoVDdnblFwSHdvd0REa3BQRkVtazdZ?=
 =?utf-8?B?NGYzRDFVU0RISlZ5YjJ0azZZelNaeUQxbFJwQWNUWTlrNTRWcm4rR0ZzQm5p?=
 =?utf-8?B?S1M2QkZkQTZnSGxDeEM1Vm1RSURNc0FkUU1kbGxub0ZmeXcrMTJ6WjQ0TmJ3?=
 =?utf-8?B?ZjJsSGpkTnlvNDdNVEhOLzhwdnQyTHJIR2RBL1dTUG1uSnlpQWN5bm1pR295?=
 =?utf-8?B?ZEluTWZzakFkcHY1NEtEWi9KcXAxL05vSTdHWVI4K3piQkM5OFBOMURHM3Ax?=
 =?utf-8?B?VzVkc1h0YWJOeWRMTWduRWZqSFBXZkpnRVN5b1NmS21nTitDckZ1b1RjVTRk?=
 =?utf-8?B?emthdG5CdDJ2a1ZoVyszVUsxd1lDK2lpT2JzN2s0VEY5QXlla2NMZTNLejdX?=
 =?utf-8?B?WW1XT1BNR2JNUXgweWd2Y1ZZK2thN2pQNkhOZmV2ZzFhbHhETC85b1BLSENM?=
 =?utf-8?B?QUhXODBCUUI2SW1HYXJJL2t4czd3am42djdUSHNFS29QRC9lZjYxUk14OWNx?=
 =?utf-8?B?dWF1WDNwVVVBQTlmU0orNnVFT1pGT2Z6TDB3RFFUZm9wMVgzNjdQMmNBN3VJ?=
 =?utf-8?B?MGhTOUhIT3M4dlczelF0alZ2Rmo3MEZWaVpBSWhtU3RRSlRPZzRhRGV4QXZN?=
 =?utf-8?B?Q2Q1azVWUGhMQk8yTzhKR1NCUjBSRDhESVg1ZUpFRUR6SXZUdE1DeUZ2T3lu?=
 =?utf-8?Q?wrE7r33Rv/jjVByINlmq0iQ4F0sAqfOHd+SYQ=3D?=
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:IA1PR11MB7200.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(376014)(7416014)(1800799024)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?utf-8?B?L0hzcHQzL1BVYnRnZk5HMkkzUi9qcUlmZC9JMDF2MW9SVjhCeUw5a1dwcFoz?=
 =?utf-8?B?Y2lrV3BmajVUb1FidE9GNDl6S3Jsay84Lzc4L3RVUWNoOGg0bW11NjB3KzFi?=
 =?utf-8?B?UmJDakwwelliRTl0SmdJK1l2Q0JIcVM3MTVjeGZ2U2NZcTI4QnZzWXhsczF0?=
 =?utf-8?B?QkZ4UlNGWXl0VXJnWG9sV0gxSmsxQ2huL1h0dUFrZ0xUY3l3dWdtUlZkandE?=
 =?utf-8?B?ZDJHbnJmeXJxWlEvUkU1UHZxd3psaGszcWtqSk8xZ0l3bVltNmNmcWRabHp6?=
 =?utf-8?B?alpQRUZSU1N4V3Bsd3hVaW92eE9xWXdFMmxzTUNMYVc0cjQrK21WR0o0Qi9I?=
 =?utf-8?B?bWkyOTBESUx3TEVjekZ2Ym1PWDl0b25obHZLWDJlVC90c1hHYUllcU5iT0pn?=
 =?utf-8?B?THZMN2ZaV204clQ2Q0VhVjNvQ0dDbHpwK3RaTFpTZktyc1RQVWM1L1JIMlBq?=
 =?utf-8?B?LzVsVkxxNGdwSUxqMytUT0lVbTJndG5OcEVFZXVwVVhjUWU3M0FWMTFjM0d6?=
 =?utf-8?B?L3ZyeFNKRzZIK2p4YjV1WXgrYjhtR2NjSWRQZitsRUttV0lxZmF0V3N1TUJY?=
 =?utf-8?B?RGYvRmN4V01LY2xuZ0FFd2hkSGNqb2RWSnBPdVVPMDVtTzh2NWRQQmFNbXpt?=
 =?utf-8?B?bDdLSUY1Q0tDc0lWcjU5dS9zWVcxb2RzVjRJK2pZTFgrcGJhUU45VVhOQ2s5?=
 =?utf-8?B?aTRETG9TblpVMDdmSjZFUzBhR09nUHV6bDlNWFMvTTlrMkp5UXFaZEVyaGFL?=
 =?utf-8?B?c0YzNXFDTHNNaWZtYVdnRzlwTW81RFBKd2tiR0h3UzF0V1d1RzJjRjZVV1h0?=
 =?utf-8?B?c3V3ZklSRGUxcEd5R09kSGozUTNEakR2MTFoaWVEd0htZXEvWnBRWWdzOUZv?=
 =?utf-8?B?SlNBTlpUOWxUaFlLQjdBUWJiQmI0Q3ZMSUZHSjRNbzFWMGZINHNYT2tRamFP?=
 =?utf-8?B?UkJSS1ZZK3paM3ZSbUUzSC9QNEFubW9wOGNBRFRCUzYxTUtCNXZPV29iVkRC?=
 =?utf-8?B?UXBCMldRNzViR0g2U1N0bUprMzYvMTBIU0RuN0dkN3NvbEVPb0d3dGJxanc2?=
 =?utf-8?B?QllBaC9lTmhoUGtYTEdZVUthR3FxcUxaejVTdjJ5TURDMGxVMzRzVVYzMTd3?=
 =?utf-8?B?V1ppVDZwOGQwNFJ6TUNFNG9VeU9ncVAwRllmY282QzlISUY0REp5Sy9nN242?=
 =?utf-8?B?cVdCMFMxZm0rMDJndE9PU0dKVmx6NnEwemNDNStSYjNIb2RCRkJqSGVIZDI3?=
 =?utf-8?B?WVArK2x0ajBhRGo0V3gwUUlTV3VHSm1iRGN6YVE4a3RIRE95UUhkSE1TSUtJ?=
 =?utf-8?B?c3BIdy9VT3lRS0lubjFNTUJhb202VnV2NXVUSUh2L2JZNHBJSGVKWUlIdVp2?=
 =?utf-8?B?Ukl6dzdZNTFVUmNtMGI5cUpYL0xjcU83TUNQM0hrRHNWTU1qT0tJbE13TEFI?=
 =?utf-8?B?b0ZkVlpJVis1Y1pOWE9keFNneVBXNEUvL2ErYkFGV0szQ0dncE1Udm1LY0po?=
 =?utf-8?B?RzAzbzVURjNUUnRvbTBtT1I3VGhHREtQTUlGc0t0cml4ajM0NEZ4ajN5N2Rh?=
 =?utf-8?B?QzIxRVljMEkzR25MY1VPb0piWm9zTGwzTEZ1NVRWTklzMVpFcGRnUEo3M3Fu?=
 =?utf-8?B?SUdIVFQ1TFgwNDJ5Z2xjYVQ3bWhFaGpaUytyRUxSRE16VmZpM1A5NFFVMnVh?=
 =?utf-8?B?MkZPS3FSdW13ZmJ5czl5SFhSdkNmTEhrNDN5bVNFR3pEam5rU3BMTXhyaitM?=
 =?utf-8?B?NWE3ZXVXSzkyejJBY2ZtcEhsUytpSUNMQUFadTVpNnptTjZGcDl3VjAzN3kz?=
 =?utf-8?B?Rjl3Q3BmeWl4WG04VzRBM3JDWmpYNDNHeDR4U2lpcGdBTElNNDBuOVF4c1hz?=
 =?utf-8?B?RE81eXI1cGorSWVSNHNmalh3SHp4U2tKWDRXZzE4K0lyTUYzcmZEUUZ6NVgw?=
 =?utf-8?B?eGpLa2ZJajUrRkVTOGw3enZxdHE0YUlFendya1I3ZkYrZ1dPYWVFczB0ZlJG?=
 =?utf-8?B?MWIvZ3BXQXpCNURFZU94eFNERHhuUm4vZ053ZXBUOE4vNHJ2M0l4dDZ5eE5s?=
 =?utf-8?B?dGVNeSswZHpRL3U5TnpBdFlzZWx0TGgxN1B2L2ZXczFRTVJWc0FFN0pvSTdU?=
 =?utf-8?Q?EFEtY/iw//o5ny1MSgbjDeCJL?=
X-MS-Exchange-CrossTenant-Network-Message-Id: 833af959-bbda-4cc4-76fa-08dcac6dd73a
X-MS-Exchange-CrossTenant-AuthSource: IA1PR11MB7200.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 25 Jul 2024 05:51:34.5231
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: e/QZSiaGRm3OsVfBbObbBslL/Eb6m3CWP54cBYSOvoPf32K4MCBgdxoexBqfUgl7+R8bp5Nsa9/cYAwra6PcDw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM4PR11MB7280
X-OriginatorOrg: intel.com

On 7/24/2024 4:24 PM, Alejandro Lucero Palau wrote:
>
> On 7/16/24 07:06, Li, Ming4 wrote:
>> On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
>>> From: Alejandro Lucero <alucerop@amd.com>
>>>
>>> CXL region creation involves allocating capacity from device DPA
>>> (device-physical-address space) and assigning it to decode a given HPA
>>> (host-physical-address space). Before determining how much DPA to
>>> allocate the amount of available HPA must be determined. Also, not all
>>> HPA is create equal, some specifically targets RAM, some target PMEM,
>>> some is prepared for device-memory flows like HDM-D and HDM-DB, and some
>>> is host-only (HDM-H).
>>>
>>> Wrap all of those concerns into an API that retrieves a root decoder
>>> (platform CXL window) that fits the specified constraints and the
>>> capacity available for a new region.
>>>
>>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95c8acdc347345b4f
>>>
>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>>> ---
>>>   drivers/cxl/core/region.c          | 161 +++++++++++++++++++++++++++++
>>>   drivers/cxl/cxl.h                  |   3 +
>>>   drivers/cxl/cxlmem.h               |   5 +
>>>   drivers/net/ethernet/sfc/efx_cxl.c |  14 +++
>>>   include/linux/cxl_accel_mem.h      |   9 ++
>>>   5 files changed, 192 insertions(+)
>>>
>>> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
>>> index 538ebd5a64fd..ca464bfef77b 100644
>>> --- a/drivers/cxl/core/region.c
>>> +++ b/drivers/cxl/core/region.c
>>> @@ -702,6 +702,167 @@ static int free_hpa(struct cxl_region *cxlr)
>>>       return 0;
>>>   }
>>>   +
>>> +struct cxlrd_max_context {
>>> +    struct device * const *host_bridges;
>>> +    int interleave_ways;
>>> +    unsigned long flags;
>>> +    resource_size_t max_hpa;
>>> +    struct cxl_root_decoder *cxlrd;
>>> +};
>>> +
>>> +static int find_max_hpa(struct device *dev, void *data)
>>> +{
>>> +    struct cxlrd_max_context *ctx = data;
>>> +    struct cxl_switch_decoder *cxlsd;
>>> +    struct cxl_root_decoder *cxlrd;
>>> +    struct resource *res, *prev;
>>> +    struct cxl_decoder *cxld;
>>> +    resource_size_t max;
>>> +    int found;
>>> +
>>> +    if (!is_root_decoder(dev))
>>> +        return 0;
>>> +
>>> +    cxlrd = to_cxl_root_decoder(dev);
>>> +    cxld = &cxlrd->cxlsd.cxld;
>>> +    if ((cxld->flags & ctx->flags) != ctx->flags) {
>>> +        dev_dbg(dev, "find_max_hpa, flags not matching: %08lx vs %08lx\n",
>>> +                  cxld->flags, ctx->flags);
>>> +        return 0;
>>> +    }
>>> +
>>> +    /* A Host bridge could have more interleave ways than an
>>> +     * endpoint, couldn´t it?
>>> +     *
>>> +     * What does interleave ways mean here in terms of the requestor?
>>> +     * Why the FFMWS has 0 interleave ways but root port has 1?
>>> +     */
>>> +    if (cxld->interleave_ways != ctx->interleave_ways) {
>>> +        dev_dbg(dev, "find_max_hpa, interleave_ways  not matching\n");
>>> +        return 0;
>>> +    }
>>> +
>>> +    cxlsd = &cxlrd->cxlsd;
>>> +
>>> +    guard(rwsem_read)(&cxl_region_rwsem);
>>> +    found = 0;
>>> +    for (int i = 0; i < ctx->interleave_ways; i++)
>>> +        for (int j = 0; j < ctx->interleave_ways; j++)
>>> +            if (ctx->host_bridges[i] ==
>>> +                    cxlsd->target[j]->dport_dev) {
>>> +                found++;
>>> +                break;
>>> +            }
>>> +
>>> +    if (found != ctx->interleave_ways) {
>>> +        dev_dbg(dev, "find_max_hpa, no interleave_ways found\n");
>>> +        return 0;
>>> +    }
>>> +
>>> +    /*
>>> +     * Walk the root decoder resource range relying on cxl_region_rwsem to
>>> +     * preclude sibling arrival/departure and find the largest free space
>>> +     * gap.
>>> +     */
>>> +    lockdep_assert_held_read(&cxl_region_rwsem);
>>> +    max = 0;
>>> +    res = cxlrd->res->child;
>>> +    if (!res)
>>> +        max = resource_size(cxlrd->res);
>>> +    else
>>> +        max = 0;
>>> +
>>> +    for (prev = NULL; res; prev = res, res = res->sibling) {
>>> +        struct resource *next = res->sibling;
>>> +        resource_size_t free = 0;
>>> +
>>> +        if (!prev && res->start > cxlrd->res->start) {
>>> +            free = res->start - cxlrd->res->start;
>>> +            max = max(free, max);
>>> +        }
>>> +        if (prev && res->start > prev->end + 1) {
>>> +            free = res->start - prev->end + 1;
>>> +            max = max(free, max);
>>> +        }
>>> +        if (next && res->end + 1 < next->start) {
>>> +            free = next->start - res->end + 1;
>>> +            max = max(free, max);
>>> +        }
>>> +        if (!next && res->end + 1 < cxlrd->res->end + 1) {
>>> +            free = cxlrd->res->end + 1 - res->end + 1;
>>> +            max = max(free, max);
>>> +        }
>>> +    }
>>> +
>>> +    if (max > ctx->max_hpa) {
>>> +        if (ctx->cxlrd)
>>> +            put_device(CXLRD_DEV(ctx->cxlrd));
>>> +        get_device(CXLRD_DEV(cxlrd));
>>> +        ctx->cxlrd = cxlrd;
>>> +        ctx->max_hpa = max;
>>> +        dev_info(CXLRD_DEV(cxlrd), "found %pa bytes of free space\n", &max);
>>> +    }
>>> +    return 0;
>>> +}
>>> +
>>> +/**
>>> + * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
>>> + * @endpoint: an endpoint that is mapped by the returned decoder
>>> + * @interleave_ways: number of entries in @host_bridges
>>> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
>>> + * @max: output parameter of bytes available in the returned decoder
>>> + *
>>> + * The return tuple of a 'struct cxl_root_decoder' and 'bytes available (@max)'
>>> + * is a point in time snapshot. If by the time the caller goes to use this root
>>> + * decoder's capacity the capacity is reduced then caller needs to loop and
>>> + * retry.
>>> + *
>>> + * The returned root decoder has an elevated reference count that needs to be
>>> + * put with put_device(cxlrd_dev(cxlrd)). Locking context is with
>>> + * cxl_{acquire,release}_endpoint(), that ensures removal of the root decoder
>>> + * does not race.
>>> + */
>>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>>> +                           int interleave_ways,
>>> +                           unsigned long flags,
>>> +                           resource_size_t *max)
>>> +{
>>> +
>>> +    struct cxlrd_max_context ctx = {
>>> +        .host_bridges = &endpoint->host_bridge,
>>> +        .interleave_ways = interleave_ways,
>>> +        .flags = flags,
>>> +    };
>>> +    struct cxl_port *root_port;
>>> +    struct cxl_root *root;
>>> +
>>> +    if (!is_cxl_endpoint(endpoint)) {
>>> +        dev_dbg(&endpoint->dev, "hpa requestor is not an endpoint\n");
>>> +        return ERR_PTR(-EINVAL);
>>> +    }
>>> +
>>> +    root = find_cxl_root(endpoint);
>> Could use scope-based resource management  __free() here to drop below put_device(&root_port->dev);
>>
>> e.g. struct cxl_root *cxl_root __free(put_cxl_root) = find_cxl_root(endpoint);
>>
>
> I need to admit not familiar yet with scope-based macros, but I think these are different things. The scope of the pointer is inside this function, but the data referenced is likely to persist.
>
>
>  get_device, inside find_cxl_root, is needed to avoid the device-related data disappearing while referenced by the code inside this function, and at the time of put_device, the data will be freed if ref counter reaches 0. Am I missing something?
>
Yes, get_device() is to avoid the device-related data disappearing, __free(put_cxl_root) will help to release the reference of cxl_root->port.dev when cxl_get_hpa_freespace() finished, so that you don't need a put_device(&root_port->dev) in the function.

I think that your case is similar to this patch

https://lore.kernel.org/all/170449247353.3779673.5963704495491343135.stgit@djiang5-mobl3/


>
>>> +    if (!root) {
>>> +        dev_dbg(&endpoint->dev, "endpoint can not be related to a root port\n");
>>> +        return ERR_PTR(-ENXIO);
>>> +    }
>>> +
>>> +    root_port = &root->port;
>>> +    down_read(&cxl_region_rwsem);
>>> +    device_for_each_child(&root_port->dev, &ctx, find_max_hpa);
>>> +    up_read(&cxl_region_rwsem);
>>> +    put_device(&root_port->dev);
>>> +
>>> +    if (!ctx.cxlrd)
>>> +        return ERR_PTR(-ENOMEM);
>>> +
>>> +    *max = ctx.max_hpa;
>>> +    return ctx.cxlrd;
>>> +}
>>> +EXPORT_SYMBOL_NS_GPL(cxl_get_hpa_freespace, CXL);
>>> +
>>> +
>>>   static ssize_t size_store(struct device *dev, struct device_attribute *attr,
>>>                 const char *buf, size_t len)
>>>   {
>>> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
>>> index 9973430d975f..d3fdd2c1e066 100644
>>> --- a/drivers/cxl/cxl.h
>>> +++ b/drivers/cxl/cxl.h
>>> @@ -770,6 +770,9 @@ struct cxl_decoder *to_cxl_decoder(struct device *dev);
>>>   struct cxl_root_decoder *to_cxl_root_decoder(struct device *dev);
>>>   struct cxl_switch_decoder *to_cxl_switch_decoder(struct device *dev);
>>>   struct cxl_endpoint_decoder *to_cxl_endpoint_decoder(struct device *dev);
>>> +
>>> +#define CXLRD_DEV(cxlrd) &cxlrd->cxlsd.cxld.dev
>>> +
>>>   bool is_root_decoder(struct device *dev);
>>>   bool is_switch_decoder(struct device *dev);
>>>   bool is_endpoint_decoder(struct device *dev);
>>> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
>>> index 8f2a820bd92d..a0e0795ec064 100644
>>> --- a/drivers/cxl/cxlmem.h
>>> +++ b/drivers/cxl/cxlmem.h
>>> @@ -877,4 +877,9 @@ struct cxl_hdm {
>>>   struct seq_file;
>>>   struct dentry *cxl_debugfs_create_dir(const char *dir);
>>>   void cxl_dpa_debug(struct seq_file *file, struct cxl_dev_state *cxlds);
>>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>>> +                           int interleave_ways,
>>> +                           unsigned long flags,
>>> +                           resource_size_t *max);
>>> +
>>>   #endif /* __CXL_MEM_H__ */
>>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>>> index 2cf4837ddfc1..6d49571ccff7 100644
>>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>>> @@ -22,6 +22,7 @@ void efx_cxl_init(struct efx_nic *efx)
>>>   {
>>>       struct pci_dev *pci_dev = efx->pci_dev;
>>>       struct efx_cxl *cxl = efx->cxl;
>>> +    resource_size_t max = 0;
>>>       struct resource res;
>>>       u16 dvsec;
>>>   @@ -74,6 +75,19 @@ void efx_cxl_init(struct efx_nic *efx)
>>>       if (IS_ERR(cxl->endpoint))
>>>           pci_info(pci_dev, "CXL accel acquire endpoint failed");
>>>   +    cxl->cxlrd = cxl_get_hpa_freespace(cxl->endpoint, 1,
>>> +                        CXL_DECODER_F_RAM | CXL_DECODER_F_TYPE2,
>>> +                        &max);
>>> +
>>> +    if (IS_ERR(cxl->cxlrd)) {
>>> +        pci_info(pci_dev, "CXL accel get HPA failed");
>>> +        goto out;
>>> +    }
>>> +
>>> +    if (max < EFX_CTPIO_BUFFER_SIZE)
>>> +        pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
>>> +                  max, EFX_CTPIO_BUFFER_SIZE);
>>> +out:
>>>       cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>>>   }
>>>   diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>>> index 701910021df8..f3e77688ffe0 100644
>>> --- a/include/linux/cxl_accel_mem.h
>>> +++ b/include/linux/cxl_accel_mem.h
>>> @@ -6,6 +6,10 @@
>>>   #ifndef __CXL_ACCEL_MEM_H
>>>   #define __CXL_ACCEL_MEM_H
>>>   +#define CXL_DECODER_F_RAM   BIT(0)
>>> +#define CXL_DECODER_F_PMEM  BIT(1)
>>> +#define CXL_DECODER_F_TYPE2 BIT(2)
>>> +
>>>   enum accel_resource{
>>>       CXL_ACCEL_RES_DPA,
>>>       CXL_ACCEL_RES_RAM,
>>> @@ -32,4 +36,9 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>>>     struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
>>>   void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint);
>>> +
>>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>>> +                           int interleave_ways,
>>> +                           unsigned long flags,
>>> +                           resource_size_t *max);
>>>   #endif
>>
>


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-DM6-obe.outbound.protection.outlook.com (mail-dm6nam12on2044.outbound.protection.outlook.com [40.107.243.44])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 23D7A199389;
	Thu, 25 Jul 2024 11:59:44 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.243.44
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721908788; cv=fail; b=sY7uFAYG6ZeJWddrx2YYj4zHgZgPKYpLHTCDKnNyIG6zQ1DRZ7JYXa2yvzHzzMdutYlwisPm9GMAI6Ll0HD8iLB97aXTb/sfcgkul3Gpl13lv/TQzKvdumRsqZJE/i8Q++Gc2FKknmK2j1ccq7maccleBd/DdK3BXW4nQcPmD5M=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721908788; c=relaxed/simple;
	bh=BMvvD/TQQAD31xkIjwLBafQBj/1j2YMhk5qArd63g8Q=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=affFXB3BqYSL9fabL4t/JVIJyuB4zJ8Zturk6pt9r5a8ZwY197lvzJBCD7yzNGdBjEgTOCZFrH9R3XgXlgzDC4GDA0MsuyVhcJcSyBMWpo1bQEkaLt6tsLT6s3/9aTYWB4sRruFmRtetZjoOudCNvc/HZyHlqqguuQ5g99K4MQw=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=OZcPT8ET; arc=fail smtp.client-ip=40.107.243.44
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="OZcPT8ET"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Dcxjk6V1chlkAxLYPrVRgRydGeKBIF073uLlVAX8i51XQIcj4Ths0UY+4/v+ZZZB0Ivac4B14u++ThXqQffMW17fTxdbi4NVAFt/D7A1YmTw77AbpzQyCVbKLiGGcV7Ia7RMTkuccw9a2PnTZiEGepH5akof9naAVyPVJxA0rbrPhMCqyCxZHtdWZua33xPinSD4C6HeyjZRJFp6QL5bmIlAIBIMWj/j7eJtdjlbR+d/6FlbI4R/ONE0khGIcA2AeQP6Od1InGV6z0mPlvIrlRXODCyT9P6FL96fx61qssMR/1RET7or6Jni7/k0uEODxfAP6Cs/0Np/91vz2XXevg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=6QOaWMfpGGipSpoAkTTZvnklpD8HcTCs8yu5cJSojRk=;
 b=rFiAKRpzqwmtg8PKOiDM+zaIn+rEE52YSnvNnr2mnzmbmzYjASDMfmnMhaeq7FifUzHlv+5TmmZe5uZ88jPCzhsvcFK1VBrTOe3BsnXK3tGnMKhIQtC+A8QkI3UliEbNseW+fhmnvVo3VYNorigJsvnhNzWfpug7QVxJMIx8OZIw25DZZFTAnLUoJ+YZ0pWMPGi4ZNsSrmuZqt1DGr/AyMB1XwQfAJNwZ9LRXCgrIhd+ormBOzUWv1zLag9lpVhAq4cwYLeOWJHKgSPnlUqNYIyNtEFKE0wFS3ltOp+BhoqU9i6Uhrzfp0SIE9FkKuR7VddlrEkPUz8n5IcAdu1ZXQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=6QOaWMfpGGipSpoAkTTZvnklpD8HcTCs8yu5cJSojRk=;
 b=OZcPT8ETu4ZzN9xESFBKKZrCxFQTN1yqTPLCFWOVMD4kuyXYStNmi7+pfhXo93L5tYbmbxkOr4cy4OTtJmTNz2vkRAK+yyrIv09SEkieWi3m9+H+dlC1mKKMEl5TSklBvl0RzLUjdk2V7js0B4WpOs/QOm7uqBLsaumJqEAntzE=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by CH3PR12MB7690.namprd12.prod.outlook.com (2603:10b6:610:14e::20) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7784.28; Thu, 25 Jul
 2024 11:59:42 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%6]) with mapi id 15.20.7784.013; Thu, 25 Jul 2024
 11:59:42 +0000
Message-ID: <3e8b9c3e-f533-8eab-d560-0afe68108e10@amd.com>
Date: Thu, 25 Jul 2024 12:59:07 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101
 Thunderbird/91.11.0
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Content-Language: en-US
To: "Li, Ming4" <ming4.li@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
 <73311003-6b8e-4140-935a-55bd63a723e6@intel.com>
 <f40312b1-8ac7-973b-5519-ee185eec8560@amd.com>
 <85432fe0-b9be-4892-89b6-3e986838c5d2@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <85432fe0-b9be-4892-89b6-3e986838c5d2@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LO4P302CA0001.GBRP302.PROD.OUTLOOK.COM
 (2603:10a6:600:2c2::6) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|CH3PR12MB7690:EE_
X-MS-Office365-Filtering-Correlation-Id: f6b25c23-82e7-4b3c-b139-08dcaca144ab
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|376014|1800799024|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?OTRrdjVWOGk1UjQrR2hUZWVGR2toWlZrajNlOEJ1bTVuN0tBRFdYWjRodDNW?=
 =?utf-8?B?ZEo4UUh5U1RNaWM3ZmMxSzdRSTJlQ3JIVXNrYlpjUTc4QjFEOFJhYm9XOWFi?=
 =?utf-8?B?bWhMRU56SW5iR2xUR2lpSStIOEIzUUxhMlhHWkcrb3BwR2hOWllDYjN1YWxY?=
 =?utf-8?B?NUlSZTBoWUtpSkgzcHlIdXBQZDlweGN0UlErNk9ZeG5mTno4WEVOQkRNWFll?=
 =?utf-8?B?VXhWZVQ5amJldDB2SlB5K0pGTnRUR2M5YXZnZnh1aDI5aytSMGo3WnJYSmRU?=
 =?utf-8?B?WkZQSnBSTFlGNWc4MVdLWVNOUHhzWm5oUjB3Qkpwai85T3BycnFYR2FqbU1l?=
 =?utf-8?B?SGFsVWxQdXpFRXp5dlFUTjZubXk4TVBlbWdEVFFCcGJLcW1RRndvaW56ZUZG?=
 =?utf-8?B?bG1DL3ZXRjUwRGlHckFuenM4YytqVDQxcG0zR1U4MnlvbzdUN2VlaEJCRm1Z?=
 =?utf-8?B?UFJrd2NNeU9CZkczemRUa2JGTXFIeStKSTQ0T0Jwb29mWnl5OFNSTFp1RzB0?=
 =?utf-8?B?eTc2aUNhcUV0REhNcjBPWFNGMWdvbUhSaEhzWE5ENWN3b0gwa3RyRXdrR0tY?=
 =?utf-8?B?VWVDUzZ0NjFMUmQzRmk0Y2ZZZGlIbUhLZ01Ic2hCWURScnIrRjdwYkRUUThw?=
 =?utf-8?B?YVF0MHBwMUxlYWpudEhOamVUTytsTnVDUi9HL0NHSjUwS0NLaDZtL3FWbGlQ?=
 =?utf-8?B?MU1JSWlTQnR0S1ZJNnF4SnVlUExOZ3FQNmF0cGJtSW5UTE5XenpSNzZ4eFdD?=
 =?utf-8?B?ZHBmSjdPa2wyT3NmNEtpcFZEa3ZKSFh2T0hBSzdGcjBNTmFKeVpXODg5OE53?=
 =?utf-8?B?RzBBVTFXZ1pTNVpOV2pVTk9VY3JIV2s2REkwRm5YdDZXQlpmL2NOYzV4cmNl?=
 =?utf-8?B?QzR4bU9iTU4vRit6QnluTFplMzR3d3ZLakM1dWdqWjVMS0o1dlAxUE1qcFdj?=
 =?utf-8?B?SW4rQzhlSGhiZ0c1U0xGZjM4b21VV2ppSTNpZDg0dFVtUEZqdVNtbFJ0bWQw?=
 =?utf-8?B?MVA2bDE2T080dzlsc0dWcjFkRmhFQVhEUmdqZHpXTjVEU1lDdmxjZ0h2OTRF?=
 =?utf-8?B?dnBhQWZqbVBEcS9odVFQdWZUaHRpN2YyOWtwRVhuMTN4cWFiN3BQVkxFU2xF?=
 =?utf-8?B?N3VyamJVMzRtYVhrNFZ3bnlrRXAySFZ1YWZkdkZ6N1hpNzBUcW9mRkJmeXpa?=
 =?utf-8?B?MkdBTEJ3K1hzUVZ5M3NnNW9ZNHc1SStJbVFsZklocFMzL0huMnhkeFRqc0Nt?=
 =?utf-8?B?WjhNS01Eb2diOHI0NG15WlNVcng1b3NBYnpjb3FTOVZseUkvRUtISnQvNkc0?=
 =?utf-8?B?ZzErSGE5b3FBMTZrZWEwVE1ObDhmeWtlREdpemUzdFY2QzB5S01Za1dlMURi?=
 =?utf-8?B?NDZvYXpPcGZHWGtQRlFEek4xS2YvdHlKamZXbEo0Z0s5Ky83SFdSVUIxTWNs?=
 =?utf-8?B?dkxsWlJxaUltQndpNmN0MkpBbUxnM1FxMHJHOS9XR0lZOUh5ejhiNzk1bEdy?=
 =?utf-8?B?YjdGOGxSckVFN3JrVjhDeHRzU3FrQTVpY3JsMllVcUlmNVlPUnd0bElwRnJi?=
 =?utf-8?B?WEthMzhaRUNhb1VZK1NUS3JDaUVBdUFLL0NhaGFVVTZIaHpOdm5zMzhBZjB6?=
 =?utf-8?B?N0EyKzhCb25tbUpBaTdYL2FiMzFTb0VvZFM0Q0RVS3hSSHB6N1hmZ0tGRFcv?=
 =?utf-8?B?UndQMm15OWFjblFjYkRPNVlHaGFnc2VpU0lIbVRRTWRHRTU4VjgwbnVzemNN?=
 =?utf-8?B?STlNdFE0ZG15aVJHdkpzUHVqZE5PVDlpSmk0ZXFmanNNUEFwN3FWRHpJRE5S?=
 =?utf-8?B?bDRvZlFWM3ViVys5WEovdz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(376014)(1800799024)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?T1l3TE1UQVJReW9ucEg5SEl5dDJnZ2ZDT1Y3K0tPb2ZnQnA0Z2p6ZnBzSmMw?=
 =?utf-8?B?S3BOdElRM0JLTDg4WmV3STNGV0U5akFINjEySWRRU1VZZGIxcGRzOEdpWEVl?=
 =?utf-8?B?dlpWc29NbEFCVERoQURueXhQQnBLRTFTKzU3RHhrSVlQWVJ4c0tSd0ZhL0g0?=
 =?utf-8?B?K3FKbFdLL1B6aWNpbEVxaXpNYm0wSWpNbXJOTW13aW9xYjBPOE8rNmo1S2Nw?=
 =?utf-8?B?OW5SQWxKdWJVUm5sV3hBODhQK0NBT21DalhFSUM4T1pvbnB0SWoxSHFxcU5M?=
 =?utf-8?B?UnhTckZwUnRTUnJTclBmLzY2SVQ2eHcxQ0FNRWxSRzRaSE1NMjdWYXVDVXlS?=
 =?utf-8?B?OEVici9mVDZMdHAwSGdHRW41WGc5UUVsWDU3c21JaDRNNUtPWUt1dnJ6eXpQ?=
 =?utf-8?B?QkpCVk5sallPVHpqL1VyWTNwSFpicW94TVpnUFhkYWVlZjNWUXNwajIwWHZu?=
 =?utf-8?B?V1FCaS9nWDc3RnVUVGdaRHZOcElSNklBRFBURDZ1LytLSWFGcncvVzNWOUJz?=
 =?utf-8?B?UFQvakttZkoyQzUyQ0pZZGhoYnJVckhrV2tQOFA2UklwRmlYNElUT3VaVGgy?=
 =?utf-8?B?ajBaMTJSYlhDZEJFbXE5YTJHZFlkLzBFV2oxR0gveXRwbnZvMWp1Vi9iSkEw?=
 =?utf-8?B?d3NrTG9VTVFvdzQ0ZW96b1dHQ1I5ckRNempjSUM5d2NpWG1aNDBZcmtMQ29O?=
 =?utf-8?B?VWFiYi94VGIwdkJMaGE1anhrY1YrallYT0c1ZWNaZlVkeEVzMm41ZkRGQ0dv?=
 =?utf-8?B?dGFHeVBGbTZQd0VPOTZhYVJUNGVKdjA5eEt3TFRuV1RvNFZhVnZtT1NLQ3JO?=
 =?utf-8?B?UW5JblhSTDdtbEJsMVF5blRBV09wazI5WmpzKzFDSEYrQnVtcnIzdjBPbnQ2?=
 =?utf-8?B?UUtLUHcyRWdQQU1nYzRLMUZoNTZhaStkWm43ang4ZWVaMS8vcUVyalppWWU1?=
 =?utf-8?B?OEpqV1ltVmNpNFZaNlVPeUZQOS96MEduZlJnRlFJZ1JVRERRdk4yZ1hhRnJD?=
 =?utf-8?B?cHVWVHhja3VFcEVJT001eGp5UU5EZWh5NDhKUTU5YzEzdU41cmc4OGl3aEpG?=
 =?utf-8?B?RmdabUdQUlEzRUtScTFJOGFQN0hJNk4wc3pGdFMwSXY2dTVmdjRrd1lCQ3A3?=
 =?utf-8?B?cUVKOTZMVktPcFBRcnlpdWlGWkxVNExiZjYwQzFsTU52SzMvdnpGUGNsUmlP?=
 =?utf-8?B?TnExemV6SnJUdXNUQVJxKzBhZnVKTzh2elVteVcxMkdKVlJjeUVmZlZrMzdl?=
 =?utf-8?B?YmlDVHJKSUxnZlhYUXczVXpaeW50bkJhMnUvRHMvdk0rRkxNdjRzWGRvdkNV?=
 =?utf-8?B?SnczNzhQOGlEZ09ucThiSWtyT0pKcnFSZ3BCNzlHZ0o5QUQ1eXprRGpxNjR0?=
 =?utf-8?B?Smpjd2xDQThJVXpPbXJiNDhOWHB4cVpid0pONHpYY1k4RzhyaWNmcW94Z2tq?=
 =?utf-8?B?UXVzcFQrZ1VhYmJaU2FrbjRrVmN4YUk5bXdxWUg3akZKaWVOZWJ3cnJNVktN?=
 =?utf-8?B?YzRmTTRMMy9PMDBuRmwyQU5jWENlKzNaYkJkRHAwWHlHVjY2NEJkV3hTYkNL?=
 =?utf-8?B?ZTJoUTlLVHhjVWZIWkh3R1ViMjRvRTdKSmthVlZrWElac0hNTUc2MkZ2QXhN?=
 =?utf-8?B?OXBPRmFHYVJsOEkrZ2JKd1B0aGlDZUx3RWZhdmg1WUtQbEZWcHlZUUtubWFN?=
 =?utf-8?B?c0E1Lzh5MHkxcTViTjdaQmtxbEcraFE2YlhsR28xMXR4ZlZiVWFEMmQ4QWhX?=
 =?utf-8?B?MXVvU3VIQklySHdlM1ROR3IzN2pEQnJrTjVQNnpqQnBadkxEeW5lS3RhOTdj?=
 =?utf-8?B?S042OURoWlpnaVFyZ3pWekxRdDJTVWRvRkVIRzBlZ0FJRHBxa25CQ2haa04w?=
 =?utf-8?B?RkIvbXFXYlhYamtzNnhJczdLcDhUN0NDUjAyVi9jNDJKMWVCNTRkT2toeHJC?=
 =?utf-8?B?L1g0TElueDJraVVYTlVDSlJrczRqTC9hTUcrc3ZMd2ZuNnVFaFlDZ2VCdTNN?=
 =?utf-8?B?UHpBbW02WEtCUGs2cDNGeXh4VlU3cC9BTTZJcFFLM2M1cWx2bkdjblA3a0dD?=
 =?utf-8?B?SnZKSzNLZ3dnRDFETmZnWVozWEZUNS9uMGdSTlgyT0U2N2gzcy9mYVVlbGR1?=
 =?utf-8?Q?iZK2HvgxVsKywcRGeb2oODLIb?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: f6b25c23-82e7-4b3c-b139-08dcaca144ab
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 25 Jul 2024 11:59:42.3850
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: cqZBySw7yy3rXqzDX71jpTWs61fnxPuR+WHgD8V6gkARP7cwdvjB+Q2PTw4H0/uNKVVBDQEuDZ6HrSnd+NxkzQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH3PR12MB7690


On 7/25/24 06:51, Li, Ming4 wrote:
> On 7/24/2024 4:24 PM, Alejandro Lucero Palau wrote:
>> On 7/16/24 07:06, Li, Ming4 wrote:
>>> On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
>>>> From: Alejandro Lucero <alucerop@amd.com>
>>>>
>>>>
>>> Could use scope-based resource management  __free() here to drop below put_device(&root_port->dev);
>>>
>>> e.g. struct cxl_root *cxl_root __free(put_cxl_root) = find_cxl_root(endpoint);
>>>
>> I need to admit not familiar yet with scope-based macros, but I think these are different things. The scope of the pointer is inside this function, but the data referenced is likely to persist.
>>
>>
>>   get_device, inside find_cxl_root, is needed to avoid the device-related data disappearing while referenced by the code inside this function, and at the time of put_device, the data will be freed if ref counter reaches 0. Am I missing something?
>>
> Yes, get_device() is to avoid the device-related data disappearing, __free(put_cxl_root) will help to release the reference of cxl_root->port.dev when cxl_get_hpa_freespace() finished, so that you don't need a put_device(&root_port->dev) in the function.
>
> I think that your case is similar to this patch
>
> https://lore.kernel.org/all/170449247353.3779673.5963704495491343135.stgit@djiang5-mobl3/
>

OK. It makes sense. I was blinded assuming it was just about freeing 
memory, but the function to call for cleaning up can do other things as 
well.

I will use it in next version.

Thanks


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-yw1-f182.google.com (mail-yw1-f182.google.com [209.85.128.182])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 590EC14831F;
	Tue, 30 Jul 2024 16:44:05 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.128.182
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722357847; cv=none; b=UusPATecJ96u8BTZ4kVYFKrq3T0ccFUa9SBeoiDIfz9SRwgForsuB8Y+l1cnOEJg9DONxX7sL5SuJQ2//rZrVzpanS40xQa0YNx9NOPK5JkAkhZEFRIjElvNZujjE/GFkkj7R/flCY6Opi89grvzDSkCe+cFtpgN/uOv16ehePs=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722357847; c=relaxed/simple;
	bh=3a6OvZo4Hj14qRFssrmzs6wWYxe5MMQzPlkSR22rbPo=;
	h=From:Date:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=MiTZqJWxpChHn72Y14BsP/vfMEDLPto9UycskV0+FeRJMRiq2JEOVVDPfdKEDCGSMe53Pu4Gb7I3YqsZE4c1xpPu89jPcKjsGByPLKDCVKJgTk947PWR9331qYhuh51jWKEhj4l/hTK793eLoQix6JKzVVYxvOMUjiOt1DQV05U=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=APykGfmu; arc=none smtp.client-ip=209.85.128.182
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="APykGfmu"
Received: by mail-yw1-f182.google.com with SMTP id 00721157ae682-65f9e25fffaso35804437b3.3;
        Tue, 30 Jul 2024 09:44:05 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1722357844; x=1722962644; darn=vger.kernel.org;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:date:from:from:to:cc:subject:date:message-id:reply-to;
        bh=Kp1ZetS0sXF1CjQKcb+ztjQ+Hp2ujG7Nc++ITl8dDtw=;
        b=APykGfmuesax07hJMvBR1Ad6L4UriNJQc8HZaQKX6StNoSp/xQWohtAb5GSV9f5s+C
         93nj4vm4v1y0XiOBbrTRQYOSNNtPE6G85ikqxk361ivmAQPQNfyJaZk30FLwkHaYPkE3
         Xk5c01G+1nhLiQlT0xHu2GprfWLZ9+KG5K3VByjFWXE+7FiIlDMp8la5eX/7QPeO4rs7
         LUCx5pfNOMV7y0BlQVOOsF7jPP7KOM2grdgUaXpSKZOlprf+OrUbzi3SN0WT6lwNW3jT
         YFHHdWV3IseLoB6kmHP14y8Ip65FmetdOZjsGKSui6eEh9hwuhKQQry3Cb0VfZFqCk3A
         026Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1722357844; x=1722962644;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:date:from:x-gm-message-state:from:to:cc:subject:date
         :message-id:reply-to;
        bh=Kp1ZetS0sXF1CjQKcb+ztjQ+Hp2ujG7Nc++ITl8dDtw=;
        b=DDtFm0GXxwylRopFbgLMUcIKHP4wLkpTRws8cHRPOaCkqTIWqZb2tFU8+Cqi3K5YNU
         vJTZocAkS0bNbzk64NYe4xvQfNSw2/wWPyFI2pKXfxWWuEG6emjCgYwgA+tBxJtS25C5
         1Hd18gX/cIJSvhl/++cDqyRWEwTwzVWCxrnq9v8umUaK6Am/HLmeRWmZ0eeTvFpzX0Nv
         UQYZtaAm9u1WQrZsaejLv8efXCd/wRZxUeJvGC7r0h76nad9fwRjzJbOsEfisJj3JBDD
         KkcDyXpkjKp7MCidZew7KKOy1tQI/UxQxcNlHO4aMmkE4moE/Fn1Ujb3LUyGxsTMsNin
         ikEA==
X-Forwarded-Encrypted: i=1; AJvYcCWRdN4OC9OJrbNwiuTEh0fHncP8ebyAxf6indhcPxu/JR2LP6tMjj6pKlOjHs6nwcJDBkxC27k65DbNvyTFOfq/ly94Yv1a
X-Gm-Message-State: AOJu0YxMd2ojuj0y9aS0B7j7YFAJM0sITquqy68IQOmF5iuLxqsYSJ1R
	Yxw4O4ZYJMFPW/mYCXyFSagkITHc1HR/mkAbakUwXPDdB37VuOou
X-Google-Smtp-Source: AGHT+IFe5PZBuMhFo9qgsnjbZWUpKAIuKDWIOXlpCW214Z62FPN+hpZZUtGFamo1JesAs3jjMXpjaw==
X-Received: by 2002:a81:c244:0:b0:64b:4a9f:540d with SMTP id 00721157ae682-67a0959294bmr128318997b3.31.1722357844146;
        Tue, 30 Jul 2024 09:44:04 -0700 (PDT)
Received: from debian ([50.205.20.42])
        by smtp.gmail.com with ESMTPSA id 00721157ae682-67567869dfbsm26171317b3.35.2024.07.30.09.44.02
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Tue, 30 Jul 2024 09:44:03 -0700 (PDT)
From: Fan Ni <nifan.cxl@gmail.com>
X-Google-Original-From: Fan Ni <fan.ni@samsung.com>
Date: Tue, 30 Jul 2024 09:43:49 -0700
To: alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
	dan.j.williams@intel.com, martin.habets@xilinx.com,
	edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
	pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 08/15] cxl: indicate probe deferral
Message-ID: <ZqkYRYsWm2kgtYUt@debian>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240715172835.24757-9-alejandro.lucero-palau@amd.com>

On Mon, Jul 15, 2024 at 06:28:28PM +0100, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
> 
> The first stop for a CXL accelerator driver that wants to establish new
> CXL.mem regions is to register a 'struct cxl_memdev. That kicks off
> cxl_mem_probe() to enumerate all 'struct cxl_port' instances in the
> topology up to the root.
> 
> If the root driver has not attached yet the expectation is that the
> driver waits until that link is established. The common cxl_pci_driver
> has reason to keep the 'struct cxl_memdev' device attached to the bus
> until the root driver attaches. An accelerator may want to instead defer
> probing until CXL resources can be acquired.
> 
> Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
> accelerator driver probing should be defferred vs failed. Provide that
> indication via a new cxl_acquire_endpoint() API that can retrieve the
> probe status of the memdev.
> 
> The first consumer of this API is a test driver that excercises the CXL
> Type-2 flow.
> 
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/memdev.c          | 41 ++++++++++++++++++++++++++++++
>  drivers/cxl/core/port.c            |  2 +-
>  drivers/cxl/mem.c                  |  7 +++--
>  drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
>  include/linux/cxl_accel_mem.h      |  3 +++
>  5 files changed, 59 insertions(+), 4 deletions(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index b902948b121f..d51c8bfb32e3 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>  }
>  EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
>  
> +/*
> + * Try to get a locked reference on a memdev's CXL port topology
> + * connection. Be careful to observe when cxl_mem_probe() has deposited
> + * a probe deferral awaiting the arrival of the CXL root driver
> +*/
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
> +{
> +	struct cxl_port *endpoint;
> +	int rc = -ENXIO;
> +
> +	device_lock(&cxlmd->dev);
> +	endpoint = cxlmd->endpoint;
> +	if (!endpoint)
> +		goto err;
> +
> +	if (IS_ERR(endpoint)) {
> +		rc = PTR_ERR(endpoint);
> +		goto err;
> +	}
> +
> +	device_lock(&endpoint->dev);
> +	if (!endpoint->dev.driver)
> +		goto err_endpoint;
> +
> +	return endpoint;
> +
> +err_endpoint:
> +	device_unlock(&endpoint->dev);
> +err:
> +	device_unlock(&cxlmd->dev);
> +	return ERR_PTR(rc);
> +}
> +EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
> +
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint)
> +{
> +	device_unlock(&endpoint->dev);
> +	device_unlock(&cxlmd->dev);
> +}
> +EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
> +
>  static void sanitize_teardown_notifier(void *data)
>  {
>  	struct cxl_memdev_state *mds = data;
> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
> index d66c6349ed2d..3c6b896c5f65 100644
> --- a/drivers/cxl/core/port.c
> +++ b/drivers/cxl/core/port.c
> @@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev *cxlmd,
>  		 */
>  		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
>  			dev_name(dport_dev));
> -		return -ENXIO;
> +		return -EPROBE_DEFER;
>  	}
>  
>  	parent_port = find_cxl_port(dparent, &parent_dport);
> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
> index f76af75a87b7..383a6f4829d3 100644
> --- a/drivers/cxl/mem.c
> +++ b/drivers/cxl/mem.c
> @@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
>  		return rc;
>  
>  	rc = devm_cxl_enumerate_ports(cxlmd);
> -	if (rc)
> +	if (rc) {
> +		cxlmd->endpoint = ERR_PTR(rc);
>  		return rc;
> +	}
>  
>  	parent_port = cxl_mem_find_port(cxlmd, &dport);
>  	if (!parent_port) {
>  		dev_err(dev, "CXL port topology not found\n");
> -		return -ENXIO;
> +		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
> +		return -EPROBE_DEFER;
>  	}
>  
>  	if (resource_size(&cxlds->pmem_res) && IS_ENABLED(CONFIG_CXL_PMEM)) {
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 0abe66490ef5..2cf4837ddfc1 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -65,8 +65,16 @@ void efx_cxl_init(struct efx_nic *efx)
>  	}
>  
>  	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
> -	if (IS_ERR(cxl->cxlmd))
> +	if (IS_ERR(cxl->cxlmd)) {
>  		pci_info(pci_dev, "CXL accel memdev creation failed");
pci_err()?
> +		return;
> +	}
> +
> +	cxl->endpoint = cxl_acquire_endpoint(cxl->cxlmd);
> +	if (IS_ERR(cxl->endpoint))
> +		pci_info(pci_dev, "CXL accel acquire endpoint failed");
pci_err()?
> +
> +	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index 442ed9862292..701910021df8 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -29,4 +29,7 @@ int cxl_await_media_ready(struct cxl_dev_state *cxlds);
>  
>  struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>  				       struct cxl_dev_state *cxlds);
> +
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint);
>  #endif
> -- 
> 2.17.1
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 6C92382486;
	Sun,  4 Aug 2024 16:44:30 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722789873; cv=none; b=d+UKMKlBJE7lefu4OHKu64Zd67UyR7MiKleO5effsUD2U68hXiIgjUl6DncN8rgGwW45YiwE0SsQ15DnFtjko7naa+do2ekLn7T0a3LuZureJRuJ4jsjyHuM+6FWgj1nKMbA+Fb1wn65DDzWkUSwwoeJIgZ88lG+PbJv7tdCYbI=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722789873; c=relaxed/simple;
	bh=1kciJ2/x/qzd9muqvODhkrXTdVxR8web0yC0JeiRvzU=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=pgeCJbRWAHDS1bWIWbIx7N0Xdgy6wQJqki8w3w1+mLdu/2JGF9vruzNTp+lZqdtphnDXEvKXz2pmyXq8ZJ8/3NGs/Jg3qFNcsAJFMh5LbIHlMHByqBevX1NhEIMKqg4xRySvFdQR43YSE/qd8qR3pNiu6U34P1Lp7YRaiUjlY0w=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcQMs061Hz6K5nl;
	Mon,  5 Aug 2024 00:42:17 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id EF8291406AC;
	Mon,  5 Aug 2024 00:44:27 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 17:44:27 +0100
Date: Sun, 4 Aug 2024 17:44:24 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: Dave Jiang <dave.jiang@intel.com>, <alejandro.lucero-palau@amd.com>,
	<linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <20240804174424.00007011@Huawei.com>
In-Reply-To: <e5a4836d-a405-5b12-62a7-e45b39fb12ad@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-2-alejandro.lucero-palau@amd.com>
	<936eecad-2e98-4336-b775-d28fa1d87d76@intel.com>
	<e5a4836d-a405-5b12-62a7-e45b39fb12ad@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="ISO-8859-1"
Content-Transfer-Encoding: quoted-printable
X-ClientProxiedBy: lhrpeml500004.china.huawei.com (7.191.163.9) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

> >> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_m=
em.h
> >> new file mode 100644
> >> index 000000000000..daf46d41f59c
> >> --- /dev/null
> >> +++ b/include/linux/cxl_accel_mem.h
> >> @@ -0,0 +1,22 @@
> >> +/* SPDX-License-Identifier: GPL-2.0 */
> >> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> >> +
> >> +#include <linux/cdev.h> =20
> > Don't think this header is needed?
> > =20
> >> +
> >> +#ifndef __CXL_ACCEL_MEM_H
> >> +#define __CXL_ACCEL_MEM_H
> >> +
> >> +enum accel_resource{
> >> +	CXL_ACCEL_RES_DPA,
> >> +	CXL_ACCEL_RES_RAM,
> >> +	CXL_ACCEL_RES_PMEM,
> >> +};
> >> +
> >> +typedef struct cxl_dev_state cxl_accel_state; =20
> > Please use 'struct cxl_dev_state' directly. There's no good reason to h=
ide the type. =20
>=20
>=20
> That is what I think I was told to do although not explicitly. There=20
> were concerns in the RFC about accel drivers too loose for doing things=20
> regarding CXL and somehow CXL core should keep control as much as=20
> possible.=A0 I was even thought I was being asked to implement auxbus wit=
h=20
> the CXL part of an accel as an auxiliar device which should be bound to=20
> a CXL core driver. Then Jonathan Cameron the only one explicitly giving=20
> the possibility of the opaque approach and disadvising the auxbus idea.

I wasn't thinking a typedef to hide it.
More making all state accesses that are needed through accessor functions so
that from the 'internals' become opaque to the accelerator code and
we can radically change how things are structured internally with
no impact to the (hopefully large number of) CXL accelerator drivers.

So here, I'd just expect a
struct cxl_device_state; forwards declaration.

Or potentially one to a a different structure after refactors etc.

>=20
>=20
> Maybe I need an explicit action here.

J

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 3BA4B6026A;
	Sun,  4 Aug 2024 17:10:51 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722791455; cv=none; b=kvskHnUWoMVd9HbaAutOJ3SuHUEsUy2bpsx8edcWRWI7QstqtHIVRd7yN2PZAEQVDMXdrnnB8IQUl365oN8XM/qK4pyALb7v2mTzutr/PWj08MvqyXBpoZttEYtx+BKuGUuSimLbdKCfrkFkhCY711uUm0WZ9roXYJSeS57j8bM=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722791455; c=relaxed/simple;
	bh=ECa8I4p9RGAZkPds6u++HJiDtVMLM+MhAz3qBPiHkTA=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=dzjaOFAZ4rg1Qf08G0xq+LZTZ2IIp2/S/Stjdmkp4RRb+0ihw+BpkyDzBfdaRMPiOLib583TqovpZfATl/dwfMyaPh+GXpD07SBhYp5lhkpU0Xma/RDQJa6kjBZp7hCiyLZ4v8wZ4hbJdWnmphLOsCdJeGfYn6L0QqeKfldcZ5w=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.231])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcQyG1lkQz67gJd;
	Mon,  5 Aug 2024 01:08:38 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 41D391401DC;
	Mon,  5 Aug 2024 01:10:49 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:10:48 +0100
Date: Sun, 4 Aug 2024 18:10:45 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <20240804181045.000009dc@Huawei.com>
In-Reply-To: <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-2-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100001.china.huawei.com (7.191.160.183) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:21 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Differientiate Type3, aka memory expanders, from Type2, aka device
> accelerators, with a new function for initializing cxl_dev_state.
> 
> Create opaque struct to be used by accelerators relying on new access
> functions in following patches.
> 
> Add SFC ethernet network driver as the client.
> 
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
Hi Alejandro,

Various comments inline. Mostly minor detail as I need to get my head
around the whole thing which will take a while yet!

Some will seem very fussy given the stage we are at (and fairly
long way to go), but cleaner code will generally be easier to read
so may help move the bigger stuff forwards quicker.
+ I had my review brain in gear so couldn't ignore things.

Jonathan

> ---
>  drivers/cxl/core/memdev.c             | 52 ++++++++++++++++++++++++++
>  drivers/net/ethernet/sfc/Makefile     |  2 +-
>  drivers/net/ethernet/sfc/efx.c        |  4 ++
>  drivers/net/ethernet/sfc/efx_cxl.c    | 53 +++++++++++++++++++++++++++
>  drivers/net/ethernet/sfc/efx_cxl.h    | 29 +++++++++++++++
>  drivers/net/ethernet/sfc/net_driver.h |  4 ++
>  include/linux/cxl_accel_mem.h         | 22 +++++++++++
>  include/linux/cxl_accel_pci.h         | 23 ++++++++++++
>  8 files changed, 188 insertions(+), 1 deletion(-)
>  create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
>  create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
>  create mode 100644 include/linux/cxl_accel_mem.h
>  create mode 100644 include/linux/cxl_accel_pci.h
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 0277726afd04..61b5d35b49e7 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c

> @@ -692,6 +712,38 @@ static int cxl_memdev_open(struct inode *inode, struct file *file)
>  	return 0;
>  }
>  
> +
> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
> +{
> +	cxlds->cxl_dvsec = dvsec;

Nothing to do with accel. If these make sense promote to cxl
core and a linux/cxl/ header.  Also we may want the type3 driver to
switch to them long term. If nothing else, making that handle the
cxl_dev_state as more opaque will show up what is still directly
accessed and may need to be wrapped up for a future accelerator driver
to use.


> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_dvsec, CXL);
> +
> +void cxl_accel_set_serial(struct cxl_dev_state *cxlds, u64 serial)
> +{
> +	cxlds->serial= serial;

Run checkpatch over this series before v3 with --strict and fix the
warnings. Probably would have spotted missing space before =

Sure it's a series that is kind of RFC ish at the moment but clean
code means you don't get nitpickers like me pointing this stuff out!

> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_serial, CXL);
> +
> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
> +			    enum accel_resource type)
> +{
> +	switch (type) {
> +	case CXL_ACCEL_RES_DPA:
> +		cxlds->dpa_res = res;
> +		return;
> +	case CXL_ACCEL_RES_RAM:
> +		cxlds->ram_res = res;
> +		return;
> +	case CXL_ACCEL_RES_PMEM:
> +		cxlds->pmem_res = res;
> +		return;
> +	default:
> +		dev_err(cxlds->dev, "unkown resource type (%u)\n", type);
typo. Plus I'd let this return an error as we may well have more types
in future and not handle them all.

> +	}
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
> +
>  static int cxl_memdev_release_file(struct inode *inode, struct file *file)
>  {
>  	struct cxl_memdev *cxlmd =

> diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
> index e9d9de8e648a..cb3f74d30852 100644
> --- a/drivers/net/ethernet/sfc/efx.c
> +++ b/drivers/net/ethernet/sfc/efx.c
> @@ -33,6 +33,7 @@
>  #include "selftest.h"
>  #include "sriov.h"
>  #include "efx_devlink.h"
> +#include "efx_cxl.h"
>  
>  #include "mcdi_port_common.h"
>  #include "mcdi_pcol.h"
> @@ -899,6 +900,7 @@ static void efx_pci_remove(struct pci_dev *pci_dev)
>  	efx_pci_remove_main(efx);
>  
>  	efx_fini_io(efx);
> +

Make sure you don't add noisy whitespace changes in v3. Slows down
review and makes a patch set look bigger than it is.

>  	pci_dbg(efx->pci_dev, "shutdown successful\n");
>  
>  	efx_fini_devlink_and_unlock(efx);
> @@ -1109,6 +1111,8 @@ static int efx_pci_probe(struct pci_dev *pci_dev,
>  	if (rc)
>  		goto fail2;
>  
> +	efx_cxl_init(efx);
> +
As below, have an error code. This is not something we want to fail
and have the driver carry on.

>  	rc = efx_pci_probe_post_io(efx);
>  	if (rc) {
>  		/* On failure, retry once immediately.
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> new file mode 100644
> index 000000000000..4554dd7cca76
> --- /dev/null
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -0,0 +1,53 @@
> +// SPDX-License-Identifier: GPL-2.0-only
> +/****************************************************************************
> + * Driver for AMD network controllers and boards
> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
> + *
> + * This program is free software; you can redistribute it and/or modify it
> + * under the terms of the GNU General Public License version 2 as published
> + * by the Free Software Foundation, incorporated herein by reference.
> + */
> +
> +
> +#include <linux/pci.h>
> +#include <linux/cxl_accel_mem.h>
> +#include <linux/cxl_accel_pci.h>
> +
> +#include "net_driver.h"
> +#include "efx_cxl.h"
> +
> +#define EFX_CTPIO_BUFFER_SIZE	(1024*1024*256)
> +
> +void efx_cxl_init(struct efx_nic *efx)
> +{
> +	struct pci_dev *pci_dev = efx->pci_dev;
> +	struct efx_cxl *cxl = efx->cxl;
> +	struct resource res;
> +	u16 dvsec;
> +
> +	dvsec = pci_find_dvsec_capability(pci_dev, PCI_VENDOR_ID_CXL,
> +					  CXL_DVSEC_PCIE_DEVICE);
> +
> +	if (!dvsec)
> +		return;
> +
> +	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability found");

pci_dbg();  

> +
> +	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
> +	if (IS_ERR(cxl->cxlds)) {
> +		pci_info(pci_dev, "CXL accel device state failed");
> +		return;

Return an error.  A driver calling CXL stuff that fails is going to
want to know

> +	}
> +
> +	cxl_accel_set_dvsec(cxl->cxlds, dvsec);
> +	cxl_accel_set_serial(cxl->cxlds, pci_dev->dev.id);
> +
> +	res = DEFINE_RES_MEM(0, EFX_CTPIO_BUFFER_SIZE);
> +	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_DPA);
> +
> +	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
> +	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
> +}
> +
> +
> +MODULE_IMPORT_NS(CXL);
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.h b/drivers/net/ethernet/sfc/efx_cxl.h
> new file mode 100644
> index 000000000000..76c6794c20d8
> --- /dev/null
> +++ b/drivers/net/ethernet/sfc/efx_cxl.h
> @@ -0,0 +1,29 @@
> +// SPDX-License-Identifier: GPL-2.0-only
> +/****************************************************************************
> + * Driver for AMD network controllers and boards
> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
> + *
> + * This program is free software; you can redistribute it and/or modify it
> + * under the terms of the GNU General Public License version 2 as published
> + * by the Free Software Foundation, incorporated herein by reference.
> + */
> +
> +#ifndef EFX_CXL_H
> +#define EFX_CLX_H
> +
> +#include <linux/cxl_accel_mem.h>

Maybe, or maybe just some more forward defines to keep all the header
nice an separate.

> +
> +struct efx_nic;
> +
> +struct efx_cxl {
> +	cxl_accel_state *cxlds;
There are other ways to keep this opaque that let you embed the structure
into one you do know about.  Usually involve allocating a
cxl_device_state + your structure and some cxl_devstate_private()
accessors to get to the data placed after the cxlds part.

May not be worth bothering here though, particularly as the CXL-ness
of the device may not be the most important part and you may well be
doing similar tricks anyway to hid some other subsystem specific driver.

So for now this looks like a sensible approach to me.

> +	struct cxl_memdev *cxlmd;
> +	struct cxl_root_decoder *cxlrd;
> +	struct cxl_port *endpoint;
> +	struct cxl_endpoint_decoder *cxled;
> +	struct cxl_region *efx_region;
> +	void __iomem *ctpio_cxl;
> +};
> +
> +void efx_cxl_init(struct efx_nic *efx);
> +#endif

> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> new file mode 100644
> index 000000000000..daf46d41f59c
> --- /dev/null
> +++ b/include/linux/cxl_accel_mem.h
> @@ -0,0 +1,22 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> +
> +#include <linux/cdev.h>
> +
> +#ifndef __CXL_ACCEL_MEM_H
> +#define __CXL_ACCEL_MEM_H
> +
> +enum accel_resource{
> +	CXL_ACCEL_RES_DPA,
> +	CXL_ACCEL_RES_RAM,
> +	CXL_ACCEL_RES_PMEM,
> +};
> +
> +typedef struct cxl_dev_state cxl_accel_state;

A forwards def would work like you do for struct efx_cxl
above. Keeps the structure opaque unless code actually needs
to know what is in it. That code can including the header
that defines it.  In many cases it will be an opaque pointer
passed to code in the CXL core.

struct cxl_dev_state;

Then use pointers to that in these functions.

> +cxl_accel_state *cxl_accel_state_create(struct device *dev);
> +
> +void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
> +void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
> +			    enum accel_resource);
> +#endif
> diff --git a/include/linux/cxl_accel_pci.h b/include/linux/cxl_accel_pci.h
> new file mode 100644
> index 000000000000..c337ae8797e6
> --- /dev/null
> +++ b/include/linux/cxl_accel_pci.h
> @@ -0,0 +1,23 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> +
> +#ifndef __CXL_ACCEL_PCI_H
> +#define __CXL_ACCEL_PCI_H
> +
> +/* CXL 2.0 8.1.3: PCIe DVSEC for CXL Device */
> +#define CXL_DVSEC_PCIE_DEVICE					0
> +#define   CXL_DVSEC_CAP_OFFSET		0xA
> +#define     CXL_DVSEC_MEM_CAPABLE	BIT(2)
> +#define     CXL_DVSEC_HDM_COUNT_MASK	GENMASK(5, 4)
> +#define   CXL_DVSEC_CTRL_OFFSET		0xC
> +#define     CXL_DVSEC_MEM_ENABLE	BIT(2)
> +#define   CXL_DVSEC_RANGE_SIZE_HIGH(i)	(0x18 + (i * 0x10))
> +#define   CXL_DVSEC_RANGE_SIZE_LOW(i)	(0x1C + (i * 0x10))
> +#define     CXL_DVSEC_MEM_INFO_VALID	BIT(0)
> +#define     CXL_DVSEC_MEM_ACTIVE	BIT(1)
> +#define     CXL_DVSEC_MEM_SIZE_LOW_MASK	GENMASK(31, 28)
> +#define   CXL_DVSEC_RANGE_BASE_HIGH(i)	(0x20 + (i * 0x10))
> +#define   CXL_DVSEC_RANGE_BASE_LOW(i)	(0x24 + (i * 0x10))
> +#define     CXL_DVSEC_MEM_BASE_LOW_MASK	GENMASK(31, 28)

As I think Dave suggested, pull any defs you need to linux/cxl/pci.h or whatever
makes sense and make the exiting code look for them there.

Ideally do that in a patch that does nothing else as simple
moves are easier to review quickly than ones mixed with real changes.


> +
> +#endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 4213A1DFE8;
	Sun,  4 Aug 2024 17:15:32 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722791735; cv=none; b=dfSw4pDhFRgT7R/tgpdhxAivxAtU5e4G6SR+MQvluOoZqkn7qSvyXiSJlA54TFV2ZvJwW3xpRlAcyg1n7qB+TjJPQTPqYzHRnP6SFZA5x8x0Y15VNSW4KIP+NYFaIexcJhj7o9VETnG/I9DHfwKku0ZlLvedDnd430sKT43C0Co=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722791735; c=relaxed/simple;
	bh=3kKKRkg3NLAuEiyxJ+xtIkx9o2Y5luF9WRvVWfmvXXk=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=MaeS2uLpvsl1AN68UZjbOOoPMnAix1Q22B7ZFrjz4Ad40FRRkjdeW6Dw+Jh6lBE1ielJ5kzjHmon4w4GUeAudMBWZUZSOy7xjwSJ97KmVL3Hc/9JpJB+9mhPLjnTRCk/8HHQnnpWds/TN01oYxh+fA5KfMVmqzhCm6bYLAaYlww=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.216])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcR360FcHz6K92Y;
	Mon,  5 Aug 2024 01:12:50 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id A01321400C9;
	Mon,  5 Aug 2024 01:15:30 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:15:30 +0100
Date: Sun, 4 Aug 2024 18:15:29 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
Message-ID: <20240804181529.00004aa9@Huawei.com>
In-Reply-To: <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-3-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100001.china.huawei.com (7.191.160.183) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:22 +0100
alejandro.lucero-palau@amd.com wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Create a new function for a type2 device initialising the opaque
> cxl_dev_state struct regarding cxl regs setup and mapping.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/pci.c                  | 28 ++++++++++++++++++++++++++++
>  drivers/net/ethernet/sfc/efx_cxl.c |  3 +++
>  include/linux/cxl_accel_mem.h      |  1 +
>  3 files changed, 32 insertions(+)
> 
> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> index e53646e9f2fb..b34d6259faf4 100644
> --- a/drivers/cxl/pci.c
> +++ b/drivers/cxl/pci.c
> @@ -11,6 +11,7 @@
>  #include <linux/pci.h>
>  #include <linux/aer.h>
>  #include <linux/io.h>
> +#include <linux/cxl_accel_mem.h>
>  #include "cxlmem.h"
>  #include "cxlpci.h"
>  #include "cxl.h"
> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
>  	return cxl_setup_regs(map);
>  }
>  
> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
> +{
> +	struct cxl_register_map map;
> +	int rc;
> +
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
> +	if (rc)
> +		return rc;
> +
> +	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
> +	if (rc)
> +		return rc;
> +
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> +				&cxlds->reg_map);
> +	if (rc)
> +		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);

Not fatal?  If we think it will happen on real devices, then dev_warn
is too strong.

> +
> +	rc = cxl_map_component_regs(&cxlds->reg_map, &cxlds->regs.component,
> +				    BIT(CXL_CM_CAP_CAP_ID_RAS));
> +	if (rc)
> +		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");

pci_err() or similar would make sense here as we have asked for something
that isn't happening. Specification says this is mandatory so
definitely smells like a fatal error to me.


> +
> +	return rc;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_pci_accel_setup_regs, CXL);
> +
>  static int cxl_pci_ras_unmask(struct pci_dev *pdev)
>  {
>  	struct cxl_dev_state *cxlds = pci_get_drvdata(pdev);
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 4554dd7cca76..10c4fb915278 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -47,6 +47,9 @@ void efx_cxl_init(struct efx_nic *efx)
>  
>  	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>  	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
> +
> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
> +		pci_info(pci_dev, "CXL accel setup regs failed");
Handle errors fully. That is report them  up to the caller.

>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index daf46d41f59c..ca7af4a9cefc 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -19,4 +19,5 @@ void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>  void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>  void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>  			    enum accel_resource);
> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>  #endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 98FC436AE0;
	Sun,  4 Aug 2024 17:16:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722791820; cv=none; b=JhgTWxBoWJZXfAVmZFm02xbHgaM1QzHf/L3yH1ANmS/WzpRWJzPb5KzRvT3+0A0z/6AhWRgXI65+Zll0FqZ/oq6GYZ1j4bSqE4S8LDUISDkB0D32ChzUvdHhJ5vgCRSJPahf0IFDLdCr2NCDI1Gh6Ajcmrp+7a/G8uFzwzYVYhw=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722791820; c=relaxed/simple;
	bh=b7lXmm5K236DM9x0wcqewiz6y+a9ERMFkPhFY3AJacQ=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=ZRPggzc2ZOWAW4rmr97XviN80CsQxTJjqxFinapflek7q3rNKL+MHHq8JSqk6vFDnlem8ioo76krDgLALByt3QGqJmuhND3OuVGH1P50hMe2ncCJOQ9BHtlmnWunvjbtNirJllbqEei+6NqUUPeCh57cw8mcD163sihcKoHtPMc=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.216])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcR4g0RH3z67fDN;
	Mon,  5 Aug 2024 01:14:11 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id E70071400C9;
	Mon,  5 Aug 2024 01:16:55 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:16:55 +0100
Date: Sun, 4 Aug 2024 18:16:54 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Dave Jiang <dave.jiang@intel.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>, "Alejandro Lucero" <alucerop@amd.com>
Subject: Re: [PATCH v2 03/15] cxl: add function for type2 resource request
Message-ID: <20240804181654.00007279@Huawei.com>
In-Reply-To: <abff9def-a878-47e9-b9c8-27cf3c008c29@intel.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-4-alejandro.lucero-palau@amd.com>
	<abff9def-a878-47e9-b9c8-27cf3c008c29@intel.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100001.china.huawei.com (7.191.160.183) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Thu, 18 Jul 2024 16:36:00 -0700
Dave Jiang <dave.jiang@intel.com> wrote:

> On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
> > From: Alejandro Lucero <alucerop@amd.com>
> > 
> > Create a new function for a type2 device requesting a resource
> > passing the opaque struct to work with.
> > 
> > Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> > ---
> >  drivers/cxl/core/memdev.c          | 13 +++++++++++++
> >  drivers/net/ethernet/sfc/efx_cxl.c |  7 ++++++-
> >  include/linux/cxl_accel_mem.h      |  1 +
> >  3 files changed, 20 insertions(+), 1 deletion(-)
> > 
> > diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> > index 61b5d35b49e7..04c3a0f8bc2e 100644
> > --- a/drivers/cxl/core/memdev.c
> > +++ b/drivers/cxl/core/memdev.c
> > @@ -744,6 +744,19 @@ void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
> >  }
> >  EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
> >  
> > +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram)  
> Maybe declare a common enum like cxl_resource_type instead of 'enum accel_resource' and use here instead of bool?
> 
> > +{
> > +	int rc;
> > +
> > +	if (is_ram)
> > +		rc = request_resource(&cxlds->dpa_res, &cxlds->ram_res);
> > +	else
> > +		rc = request_resource(&cxlds->dpa_res, &cxlds->pmem_res);
> > +
> > +	return rc;
> > +}
> > +EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
> > +
> >  static int cxl_memdev_release_file(struct inode *inode, struct file *file)
> >  {
> >  	struct cxl_memdev *cxlmd =
> > diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> > index 10c4fb915278..9cefcaf3caca 100644
> > --- a/drivers/net/ethernet/sfc/efx_cxl.c
> > +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> > @@ -48,8 +48,13 @@ void efx_cxl_init(struct efx_nic *efx)
> >  	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
> >  	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
> >  
> > -	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
> > +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds)) {
> >  		pci_info(pci_dev, "CXL accel setup regs failed");
> > +		return;
> > +	}
> > +
> > +	if (cxl_accel_request_resource(cxl->cxlds, true))
> > +		pci_info(pci_dev, "CXL accel resource request failed");  
> 
> pci_warn()? also emitting the errno would be nice. 
Don't hide it at all.  Fail if this doesn't succeed and let the caller
know. Not to mention, tear down any other state already set up.
 
> >  }
> >  
> >  
> > diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> > index ca7af4a9cefc..c7b254edc096 100644
> > --- a/include/linux/cxl_accel_mem.h
> > +++ b/include/linux/cxl_accel_mem.h
> > @@ -20,4 +20,5 @@ void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
> >  void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
> >  			    enum accel_resource);
> >  int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
> > +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
> >  #endif  
> 


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 3A1331DFE8;
	Sun,  4 Aug 2024 17:22:38 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722792160; cv=none; b=CgB8Js3ASODzfbcGi5uCSV4OMjHXdxQQtRZW+hjGUe25T4Q2vMJDW7FnY2Y9A0qvfRO4d6v4u8lPddRzNrV/to/BceyjvgTO6M8NPmDspb6bTCbQ0wU7M3pieO049USeAkg3WZvRjYO8ZyFUxg4CHAQYznkikuhvzy1UsCvtVko=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722792160; c=relaxed/simple;
	bh=QrQqf+Z8HKaEv5NUMe2EBKwkcN/Y4NxdavW8jtXmG4o=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=VSPQQggPSXZDK0ABxikNwvK2XuJeXSNW1Vtis5ojF5deEa7pfxEZCxInXLNTNFURv3G1qSUYyCc+NO1ZSmLv86F15+OUk7B10Jfy2u8lKVma7nEJnhhSHnijY3tDK5dbRh7tvWfnmL7npP62lbWVcfk2UsCamUHp2Vrh/zjnzUU=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.216])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcRCB5qQyz6K5Yp;
	Mon,  5 Aug 2024 01:19:50 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 1BBBA1400C9;
	Mon,  5 Aug 2024 01:22:36 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:22:35 +0100
Date: Sun, 4 Aug 2024 18:22:32 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Message-ID: <20240804182232.000014b8@Huawei.com>
In-Reply-To: <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-5-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100001.china.huawei.com (7.191.160.183) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:24 +0100
alejandro.lucero-palau@amd.com wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Type2 devices have some Type3 functionalities as optional like an mbox
> or an hdm decoder, and CXL core needs a way to know what a CXL accelerator
> implements.
> 
> Add a new field for keeping device capabilities to be initialised by
> Type2 drivers. Advertise all those capabilities for Type3.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
In general seems a reasonable approach, so just minor comments.

> ---
>  drivers/cxl/core/mbox.c            |  1 +
>  drivers/cxl/core/memdev.c          |  4 +++-
>  drivers/cxl/core/port.c            |  2 +-
>  drivers/cxl/core/regs.c            | 11 ++++++-----
>  drivers/cxl/cxl.h                  |  2 +-
>  drivers/cxl/cxlmem.h               |  4 ++++
>  drivers/cxl/pci.c                  | 15 +++++++++------
>  drivers/net/ethernet/sfc/efx_cxl.c |  3 ++-
>  include/linux/cxl_accel_mem.h      |  5 ++++-
>  9 files changed, 31 insertions(+), 16 deletions(-)
> 
> diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
> index 2626f3fff201..2ba7d36e3f38 100644
> --- a/drivers/cxl/core/mbox.c
> +++ b/drivers/cxl/core/mbox.c
> @@ -1424,6 +1424,7 @@ struct cxl_memdev_state *cxl_memdev_state_create(struct device *dev)
>  	mds->cxlds.reg_map.host = dev;
>  	mds->cxlds.reg_map.resource = CXL_RESOURCE_NONE;
>  	mds->cxlds.type = CXL_DEVTYPE_CLASSMEM;
> +	mds->cxlds.capabilities = CXL_DRIVER_CAP_HDM | CXL_DRIVER_CAP_MBOX;

Add a reference for this perhaps.  Make it clear that a type3 device must
support mailbox and hdm by pointing at requirement for the various structures
in a spec reference.

> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index af8169ccdbc0..8f2a820bd92d 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -405,6 +405,9 @@ struct cxl_dpa_perf {
>  	int qos_class;
>  };
>  
> +#define CXL_DRIVER_CAP_HDM	0x1
> +#define CXL_DRIVER_CAP_MBOX	0x2
> +
Enum and BIT() for the defines.  Avoids someone in future
thinking they can define 0x3 to be something.

Definitely only one definition as well. Seems reasonable for
this to be CXL wide.


>  /**
>   * struct cxl_dev_state - The driver device state
>   *
> @@ -438,6 +441,7 @@ struct cxl_dev_state {
>  	struct resource ram_res;
>  	u64 serial;
>  	enum cxl_devtype type;
> +	uint8_t capabilities;
>  };


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id E3CA1A95B;
	Sun,  4 Aug 2024 17:25:22 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722792325; cv=none; b=NpCZuWY3YpD4udgynRTyFi8+7LhyzjrN7LC4j68Y4QUT+ylVuIpDFIKAChvEqYF/c691/sk21XKq4bUow9p04r1vQtllS9bCcVSVq6IRdr/lwhsd97INXOcEQPtOVMfQHhBMjHPmrhG0gcaSrHLpn4K9ZYtt8xmf8qyBFI27qBk=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722792325; c=relaxed/simple;
	bh=rctv6ide3X7P7Mo0bNKgPnznHFcdsQgERCNfwR1/IPU=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=PJanvchshrimofODXxyh1k+Fq9nCDt8Nb64ej+Pqe4+DRTPfpcV1M5VTze+1uajv8ejfFzYm8N9wsnIJ3IYBChnoYcaJ6Pe4ccb96V/4ACI/0vorsMkaRHXwQH14bDAaL2wcgf5fFI5F6bAQaF3UAIWrlecSnin06f8+ULX4xwI=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.231])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcRGR6rt9z6K8pm;
	Mon,  5 Aug 2024 01:22:39 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 91AE6140B3C;
	Mon,  5 Aug 2024 01:25:20 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:25:20 +0100
Date: Sun, 4 Aug 2024 18:25:19 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 05/15] cxl: fix use of resource_contains
Message-ID: <20240804182519.00006ea8@Huawei.com>
In-Reply-To: <20240715172835.24757-6-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-6-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100003.china.huawei.com (7.191.160.210) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:25 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> For a resource defined with size zero, resource contains will also
> return true.
> 
> Add resource size check before using it.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
If this can happen in existing type 3 case the fixes tag
and send it separately from this series.

If there is no path due to some external code, then
drop the word fix from the title and call it

cxl: harden resource_contains checks to handle zero size resources

Avoids it getting backported into stable / distros picking it
up if there isn't a real issue before this series.

Thanks,

Jonathan

> ---
>  drivers/cxl/core/hdm.c | 7 +++++--
>  1 file changed, 5 insertions(+), 2 deletions(-)
> 
> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
> index 3df10517a327..4af9225d4b59 100644
> --- a/drivers/cxl/core/hdm.c
> +++ b/drivers/cxl/core/hdm.c
> @@ -327,10 +327,13 @@ static int __cxl_dpa_reserve(struct cxl_endpoint_decoder *cxled,
>  	cxled->dpa_res = res;
>  	cxled->skip = skipped;
>  
> -	if (resource_contains(&cxlds->pmem_res, res))
> +	if ((resource_size(&cxlds->pmem_res)) && (resource_contains(&cxlds->pmem_res, res))) {
> +		printk("%s: resource_contains CXL_DECODER_PMEM\n", __func__);
>  		cxled->mode = CXL_DECODER_PMEM;
> -	else if (resource_contains(&cxlds->ram_res, res))
> +	} else if ((resource_size(&cxlds->ram_res)) && (resource_contains(&cxlds->ram_res, res))) {
> +		printk("%s: resource_contains CXL_DECODER_RAM\n", __func__);
>  		cxled->mode = CXL_DECODER_RAM;
> +	}
>  	else {
>  		dev_warn(dev, "decoder%d.%d: %pr mixed mode not supported\n",
>  			 port->id, cxled->cxld.id, cxled->dpa_res);


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 3C018A95B;
	Sun,  4 Aug 2024 17:26:51 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722792413; cv=none; b=DNvGJJpIihfQJOVBzfATX11QmPAaabUBRTYk9yznAs+ZTtmbNxrWpvjd9+dSz+9hUXjnellV/pQ94ZDHgc3cBhXoPZjnNwh2Zn4HjyPkj1WxDq6JgM9t93xMBQ1/gbVKcKwTgU4ICovm1H8DGng4aBeP3JB3a+ZHjPF9TCzMGEQ=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722792413; c=relaxed/simple;
	bh=RXap8eb+ilvj6dBmSI15dHfnmJWdw7x5LYjsWP8jCcA=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=ULF0qt8dZd4EeXgd75a9sdcy0uT936cIt2oP0bzMVierrPN/262eZQF4QGOn3xanRS5z2ysAa7bxTiLcuzUJhvumKpCgp7xLKjc2p1wJRrXNpSCdNRSL7ENsq+F7Z1naVPvMcDM+nxjohneHVKLs5GZL8wuU3rKgLUOXjZNk6TQ=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.231])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcRJ80VxSz6K8pm;
	Mon,  5 Aug 2024 01:24:08 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id AB6131401DC;
	Mon,  5 Aug 2024 01:26:48 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:26:48 +0100
Date: Sun, 4 Aug 2024 18:26:46 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 06/15] cxl: add function for setting media ready by
 an accelerator
Message-ID: <20240804182646.00004a56@Huawei.com>
In-Reply-To: <20240715172835.24757-7-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-7-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100003.china.huawei.com (7.191.160.210) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:26 +0100
alejandro.lucero-palau@amd.com wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> A Type-2 driver can require to set the memory availability explicitly.
> 
> Add a function to the exported CXL API for accelerator drivers.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/memdev.c          | 7 ++++++-
>  drivers/net/ethernet/sfc/efx_cxl.c | 5 +++++
>  include/linux/cxl_accel_mem.h      | 2 ++
>  3 files changed, 13 insertions(+), 1 deletion(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index b4205ecca365..58a51e7fd37f 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -714,7 +714,6 @@ static int cxl_memdev_open(struct inode *inode, struct file *file)
>  	return 0;
>  }
>  
> -
Grumpy maintainer time ;)
Scrub for this stuff before posting.  Move the whitespace cleanup to the
earlier patch so we have less noise here.

>  void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>  {
>  	cxlds->cxl_dvsec = dvsec;
> @@ -759,6 +758,12 @@ int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram)
>  }
>  EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
>  
> +void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds)
> +{
> +	cxlds->media_ready = true;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_media_ready, CXL);
> +
>  static int cxl_memdev_release_file(struct inode *inode, struct file *file)
>  {
>  	struct cxl_memdev *cxlmd =
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 37d8bfdef517..a84fe7992c53 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -56,6 +56,11 @@ void efx_cxl_init(struct efx_nic *efx)
>  
>  	if (cxl_accel_request_resource(cxl->cxlds, true))
>  		pci_info(pci_dev, "CXL accel resource request failed");
> +
> +	if (!cxl_await_media_ready(cxl->cxlds))
> +		cxl_accel_set_media_ready(cxl->cxlds);
> +	else
> +		pci_info(pci_dev, "CXL accel media not active");
Feels fatal. pci_err() and return an error.

>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index 0ba2195b919b..b883c438a132 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -24,4 +24,6 @@ void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>  			    enum accel_resource);
>  int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>  int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
> +void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds);
> +int cxl_await_media_ready(struct cxl_dev_state *cxlds);
>  #endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 01D0B79C2;
	Sun,  4 Aug 2024 17:31:42 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722792705; cv=none; b=Um6xPVPlAwUR48WV/gR+ppHZHBUwsJkyvKaHrZ4t20cPqtGsRH5Hi7DJ2qq4x8t4SM/WK6vYjRG/liwwW6txz/qkUpIXMlyi4ZxlqSu4Cv9IZ279zb6g1s+VcIJEHAcBZ9/7XQ1oSnq25K0vkJb/glpZL3VNbeK02u/IHhD1AQ8=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722792705; c=relaxed/simple;
	bh=H6Fb4zNnwWKLC2xfcmHf3LD5nyBmHxU/6cjmBvhyYN0=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=Of4mr3vo/4pEESWleT9Ofsb/wXdnVdcIj65TeSb0DxZRzFVo2ahecCRC3F89yUVXaZzxY7wP4tjSeK1wYjn3dZCoBXjJjSE36kTpbIFxVuJeLLFgXnOQImjnZyflMGLNmUOg/Sq9LtD4xM2AzJ7pLYpx3JKlrzvOwzWKGt4S81o=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.216])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcRPl74Kxz6K8pm;
	Mon,  5 Aug 2024 01:28:59 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 99B291400C9;
	Mon,  5 Aug 2024 01:31:40 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:31:39 +0100
Date: Sun, 4 Aug 2024 18:31:39 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 07/15] cxl: support type2 memdev creation
Message-ID: <20240804183139.000019e2@Huawei.com>
In-Reply-To: <20240715172835.24757-8-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-8-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100003.china.huawei.com (7.191.160.210) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:27 +0100
alejandro.lucero-palau@amd.com wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Add memdev creation from sfc driver.
> 
> Current cxl core is relying on a CXL_DEVTYPE_CLASSMEM type device when
> creating a memdev leading to problems when obtaining cxl_memdev_state
> references from a CXL_DEVTYPE_DEVMEM type. This last device type is
> managed by a specific vendor driver and does not need same sysfs files
> since not userspace intervention is expected. This patch checks for the
> right device type in those functions using cxl_memdev_state.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
Same general comment about treating failure to get things you expect
as proper driver probe errors.  Very unlikely we'd ever want to carry
on if these fail. If we do want to, that should be a high level decision
and the chances are the driver needs to know that the error occurred
so it can take some mitigating measures (using some alternative mechanisms
etc).

> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index a84fe7992c53..0abe66490ef5 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -57,10 +57,16 @@ void efx_cxl_init(struct efx_nic *efx)
>  	if (cxl_accel_request_resource(cxl->cxlds, true))
>  		pci_info(pci_dev, "CXL accel resource request failed");
>  
> -	if (!cxl_await_media_ready(cxl->cxlds))
> +	if (!cxl_await_media_ready(cxl->cxlds)) {
>  		cxl_accel_set_media_ready(cxl->cxlds);
> -	else
> +	} else {
>  		pci_info(pci_dev, "CXL accel media not active");
> +		return;
Once you are returning an error in this path you can just have
		return -ETIMEDOUT; or similar here adn avoid
this code changing in this patch.
> +	}
> +
> +	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
> +	if (IS_ERR(cxl->cxlmd))
> +		pci_info(pci_dev, "CXL accel memdev creation failed");

I'd treat this one as fatal as well.

People argue in favor of muddling on to allow firmware upgrade etc.
That is fine, but pass up the errors then decide to ignore them
at the higher levels.

>  }
>  
>  



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id E864F79C2;
	Sun,  4 Aug 2024 17:41:41 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722793305; cv=none; b=pljWgpxEFyacYX0wCyGwRglAvPpfgJfU02IUydiry8+JGLapLSOQEqQIUaTJ6zrN2aLrB6YzwpSy+NyfsbEABr1pQQXuLI9WR5kRn0Nimu6vOWgU00hz8GmnWWgN+Sb3aHJLP5BCtYcSYfZ8FNqbUXGpT4GE8wFHf4eINFktU+k=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722793305; c=relaxed/simple;
	bh=UB90iiNzGYBh9ID0J0EcnhH+D0gsVsP8qfqNsyfFFE4=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=ZyLtz5dW/k5xH0gRcJVUv3Xwie3oFSKb8eipyyWuYfYZwnrXVATfmOdknvUoSzsYqxSWlOOatITHdgLenWqcRRKFj8Y1X6jgW3X+PoxcqXJQG62hWJCiTBQl4uXJZ6NlYLERgKBju2BaRQzSyYmzdws5vjH+Ehk6EpOcJMGgrMM=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcRdr2pc1z6K5Tv;
	Mon,  5 Aug 2024 01:39:28 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 751D6140133;
	Mon,  5 Aug 2024 01:41:39 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:41:38 +0100
Date: Sun, 4 Aug 2024 18:41:35 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 08/15] cxl: indicate probe deferral
Message-ID: <20240804184135.00001666@Huawei.com>
In-Reply-To: <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-9-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml500001.china.huawei.com (7.191.163.213) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:28 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> The first stop for a CXL accelerator driver that wants to establish new
> CXL.mem regions is to register a 'struct cxl_memdev. That kicks off
> cxl_mem_probe() to enumerate all 'struct cxl_port' instances in the
> topology up to the root.
> 
> If the root driver has not attached yet the expectation is that the
> driver waits until that link is established. The common cxl_pci_driver
> has reason to keep the 'struct cxl_memdev' device attached to the bus
> until the root driver attaches. An accelerator may want to instead defer
> probing until CXL resources can be acquired.
> 
> Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
> accelerator driver probing should be defferred vs failed. Provide that
> indication via a new cxl_acquire_endpoint() API that can retrieve the
> probe status of the memdev.
> 
> The first consumer of this API is a test driver that excercises the CXL
Spell check.
exercises

> Type-2 flow.
> 
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/memdev.c          | 41 ++++++++++++++++++++++++++++++
>  drivers/cxl/core/port.c            |  2 +-
>  drivers/cxl/mem.c                  |  7 +++--
>  drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
>  include/linux/cxl_accel_mem.h      |  3 +++
>  5 files changed, 59 insertions(+), 4 deletions(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index b902948b121f..d51c8bfb32e3 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>  }
>  EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
>  
> +/*
> + * Try to get a locked reference on a memdev's CXL port topology
> + * connection. Be careful to observe when cxl_mem_probe() has deposited
> + * a probe deferral awaiting the arrival of the CXL root driver

It might have deposited an error that isn't deferral I think.
I would be careful to make that clear in this comment.

> +*/
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
> +{
> +	struct cxl_port *endpoint;
> +	int rc = -ENXIO;
> +
> +	device_lock(&cxlmd->dev);

I'd not really expect an 'acquire endpoint' to exit
in the good path with the cxlmd->dev device lock held.
Perhaps that needs a bit more shouting in the naming of
the function?

> +	endpoint = cxlmd->endpoint;
> +	if (!endpoint)
> +		goto err;
> +
> +	if (IS_ERR(endpoint)) {
> +		rc = PTR_ERR(endpoint);
> +		goto err;
> +	}
> +
> +	device_lock(&endpoint->dev);
> +	if (!endpoint->dev.driver)
> +		goto err_endpoint;
> +
> +	return endpoint;
> +
> +err_endpoint:
> +	device_unlock(&endpoint->dev);
> +err:
> +	device_unlock(&cxlmd->dev);
> +	return ERR_PTR(rc);
> +}
> +EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
> +
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint)
> +{
> +	device_unlock(&endpoint->dev);
> +	device_unlock(&cxlmd->dev);
> +}
> +EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
> +
>  static void sanitize_teardown_notifier(void *data)
>  {
>  	struct cxl_memdev_state *mds = data;
> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
> index d66c6349ed2d..3c6b896c5f65 100644
> --- a/drivers/cxl/core/port.c
> +++ b/drivers/cxl/core/port.c
> @@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev *cxlmd,
>  		 */
>  		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
>  			dev_name(dport_dev));
> -		return -ENXIO;
> +		return -EPROBE_DEFER;
>  	}
>  
>  	parent_port = find_cxl_port(dparent, &parent_dport);
> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
> index f76af75a87b7..383a6f4829d3 100644
> --- a/drivers/cxl/mem.c
> +++ b/drivers/cxl/mem.c
> @@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
>  		return rc;
>  
>  	rc = devm_cxl_enumerate_ports(cxlmd);
> -	if (rc)
> +	if (rc) {
> +		cxlmd->endpoint = ERR_PTR(rc);
>  		return rc;
> +	}
>  
>  	parent_port = cxl_mem_find_port(cxlmd, &dport);
>  	if (!parent_port) {
>  		dev_err(dev, "CXL port topology not found\n");

Hmm. This seems excessive error print for a deferred path.

> -		return -ENXIO;
> +		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
> +		return -EPROBE_DEFER;
>  	}
>  
>  	if (resource_size(&cxlds->pmem_res) && IS_ENABLED(CONFIG_CXL_PMEM)) {

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 2F91521350;
	Sun,  4 Aug 2024 17:58:02 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722794285; cv=none; b=DODjk+mpG4zgUklY7ySv5XvvO4nZI253s+A2jQMffArXt2p/egzmt7HC5h085wVXtyXmK7/cOgB60hVKlK4kRO/dTZM6fHT/fh9f+E4Hg1M3rTNLZzd75gA0U8kwjq8jkPXf0FhXKPqY1BsGNFRX6PFp2zh8zOEKaKR74jVAB2U=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722794285; c=relaxed/simple;
	bh=AUydgLzX4wrEYlmW4Nj/M7tFG2nFIcDBwEsx4AF4238=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=X18Q73OPFudWKN1dlY7x3Ab6yBJBZi+N0otCg0dm4Y0Hy+oSDk49eBVo6SC+I3XRLVAxxDHTB11OBokhY6lNrpKASXgIyyP7CNQTFT27z1hBbqKX54ETmeOm/mE473Obs/gPjS6unB78kevYVg9HV6YjDlR8NkGHBqn9LO7h6bc=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcS033K4Zz687SH;
	Mon,  5 Aug 2024 01:55:15 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 66690140133;
	Mon,  5 Aug 2024 01:58:00 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 18:57:59 +0100
Date: Sun, 4 Aug 2024 18:57:56 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Message-ID: <20240804185756.000046c5@Huawei.com>
In-Reply-To: <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-10-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="ISO-8859-1"
Content-Transfer-Encoding: quoted-printable
X-ClientProxiedBy: lhrpeml100003.china.huawei.com (7.191.160.210) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:29 +0100
alejandro.lucero-palau@amd.com wrote:

> From: Alejandro Lucero <alucerop@amd.com>
>=20
> CXL region creation involves allocating capacity from device DPA
> (device-physical-address space) and assigning it to decode a given HPA
> (host-physical-address space). Before determining how much DPA to
> allocate the amount of available HPA must be determined. Also, not all
> HPA is create equal, some specifically targets RAM, some target PMEM,
> some is prepared for device-memory flows like HDM-D and HDM-DB, and some
> is host-only (HDM-H).
>=20
> Wrap all of those concerns into an API that retrieves a root decoder
> (platform CXL window) that fits the specified constraints and the
> capacity available for a new region.
>=20
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.866342598=
7110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95c8a=
cdc347345b4f
>=20
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>

Hi.

This seems a lot more complex than an accelerator would need.
If plan is to use this in the type3 driver as well, I'd like to
see that done as a precursor to the main series.
If it only matters to accelerator drivers (as in type 3 I think
we make this a userspace problem), then limit the code to handle
interleave ways =3D=3D 1 only.  Maybe we will care about higher interleave
in the long run, but do you have a multihead accelerator today?

Jonathan

> ---
>  drivers/cxl/core/region.c          | 161 +++++++++++++++++++++++++++++
>  drivers/cxl/cxl.h                  |   3 +
>  drivers/cxl/cxlmem.h               |   5 +
>  drivers/net/ethernet/sfc/efx_cxl.c |  14 +++
>  include/linux/cxl_accel_mem.h      |   9 ++
>  5 files changed, 192 insertions(+)
>=20
> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
> index 538ebd5a64fd..ca464bfef77b 100644
> --- a/drivers/cxl/core/region.c
> +++ b/drivers/cxl/core/region.c
> @@ -702,6 +702,167 @@ static int free_hpa(struct cxl_region *cxlr)
>  	return 0;
>  }
> =20
> +
> +struct cxlrd_max_context {
> +	struct device * const *host_bridges;
> +	int interleave_ways;
> +	unsigned long flags;
> +	resource_size_t max_hpa;
> +	struct cxl_root_decoder *cxlrd;
> +};
> +
> +static int find_max_hpa(struct device *dev, void *data)
> +{
> +	struct cxlrd_max_context *ctx =3D data;
> +	struct cxl_switch_decoder *cxlsd;
> +	struct cxl_root_decoder *cxlrd;
> +	struct resource *res, *prev;
> +	struct cxl_decoder *cxld;
> +	resource_size_t max;
> +	int found;
> +
> +	if (!is_root_decoder(dev))
> +		return 0;
> +
> +	cxlrd =3D to_cxl_root_decoder(dev);
> +	cxld =3D &cxlrd->cxlsd.cxld;
> +	if ((cxld->flags & ctx->flags) !=3D ctx->flags) {
> +		dev_dbg(dev, "find_max_hpa, flags not matching: %08lx vs %08lx\n",
> +			      cxld->flags, ctx->flags);
> +		return 0;
> +	}
> +
> +	/* A Host bridge could have more interleave ways than an
> +	 * endpoint, couldn=B4t it?

EP interleave ways is about working out how the full HPA address (it's
all sent over the wire) is modified to get to the DPA.  So it needs
to know what the overall interleave is.  Host bridge can't interleave
and then have the EP not know about it.  If there are switch HDM decoders
in the path, the host bridge interleave may be less than that the EP needs
to deal with.

Does an accelerator actually cope with interleave? Is aim here to ensure
that IW is never anything other than 1?  Or is this meant to have
more general use? I guess it is meant to. In which case, I'd like to
see this used in the type3 driver as well.

> +	 *
> +	 * What does interleave ways mean here in terms of the requestor?
> +	 * Why the FFMWS has 0 interleave ways but root port has 1?

FFMWS?

> +	 */
> +	if (cxld->interleave_ways !=3D ctx->interleave_ways) {
> +		dev_dbg(dev, "find_max_hpa, interleave_ways  not matching\n");
> +		return 0;
> +	}
> +
> +	cxlsd =3D &cxlrd->cxlsd;
> +
> +	guard(rwsem_read)(&cxl_region_rwsem);
> +	found =3D 0;
> +	for (int i =3D 0; i < ctx->interleave_ways; i++)
> +		for (int j =3D 0; j < ctx->interleave_ways; j++)
> +			if (ctx->host_bridges[i] =3D=3D
> +					cxlsd->target[j]->dport_dev) {
> +				found++;
> +				break;
> +			}
> +
> +	if (found !=3D ctx->interleave_ways) {
> +		dev_dbg(dev, "find_max_hpa, no interleave_ways found\n");
> +		return 0;
> +	}
> +
> +	/*
> +	 * Walk the root decoder resource range relying on cxl_region_rwsem to
> +	 * preclude sibling arrival/departure and find the largest free space
> +	 * gap.
> +	 */
> +	lockdep_assert_held_read(&cxl_region_rwsem);
> +	max =3D 0;
> +	res =3D cxlrd->res->child;
> +	if (!res)
> +		max =3D resource_size(cxlrd->res);
> +	else
> +		max =3D 0;
> +
> +	for (prev =3D NULL; res; prev =3D res, res =3D res->sibling) {
> +		struct resource *next =3D res->sibling;
> +		resource_size_t free =3D 0;
> +
> +		if (!prev && res->start > cxlrd->res->start) {
> +			free =3D res->start - cxlrd->res->start;
> +			max =3D max(free, max);
> +		}
> +		if (prev && res->start > prev->end + 1) {
> +			free =3D res->start - prev->end + 1;
> +			max =3D max(free, max);
> +		}
> +		if (next && res->end + 1 < next->start) {
> +			free =3D next->start - res->end + 1;
> +			max =3D max(free, max);
> +		}
> +		if (!next && res->end + 1 < cxlrd->res->end + 1) {
> +			free =3D cxlrd->res->end + 1 - res->end + 1;
> +			max =3D max(free, max);
> +		}
> +	}
> +
> +	if (max > ctx->max_hpa) {
> +		if (ctx->cxlrd)
> +			put_device(CXLRD_DEV(ctx->cxlrd));
> +		get_device(CXLRD_DEV(cxlrd));
> +		ctx->cxlrd =3D cxlrd;
> +		ctx->max_hpa =3D max;
> +		dev_info(CXLRD_DEV(cxlrd), "found %pa bytes of free space\n", &max);

dev_dbg()

> +	}
> +	return 0;
> +}
> +
> +/**
> + * cxl_get_hpa_freespace - find a root decoder with free capacity per co=
nstraints
> + * @endpoint: an endpoint that is mapped by the returned decoder
> + * @interleave_ways: number of entries in @host_bridges
> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs H=
DM-D[B]
> + * @max: output parameter of bytes available in the returned decoder

@available_size
or something along those lines. I'd expect max to be the end address of the=
 available
region

> + *
> + * The return tuple of a 'struct cxl_root_decoder' and 'bytes available =
(@max)'
> + * is a point in time snapshot. If by the time the caller goes to use th=
is root
> + * decoder's capacity the capacity is reduced then caller needs to loop =
and
> + * retry.
> + *
> + * The returned root decoder has an elevated reference count that needs =
to be
> + * put with put_device(cxlrd_dev(cxlrd)). Locking context is with
> + * cxl_{acquire,release}_endpoint(), that ensures removal of the root de=
coder
> + * does not race.
> + */
> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
> +					       int interleave_ways,
> +					       unsigned long flags,
> +					       resource_size_t *max)
> +{
> +
> +	struct cxlrd_max_context ctx =3D {
> +		.host_bridges =3D &endpoint->host_bridge,
> +		.interleave_ways =3D interleave_ways,
> +		.flags =3D flags,
> +	};
> +	struct cxl_port *root_port;
> +	struct cxl_root *root;
> +
> +	if (!is_cxl_endpoint(endpoint)) {
> +		dev_dbg(&endpoint->dev, "hpa requestor is not an endpoint\n");
> +		return ERR_PTR(-EINVAL);
> +	}
> +
> +	root =3D find_cxl_root(endpoint);
> +	if (!root) {
> +		dev_dbg(&endpoint->dev, "endpoint can not be related to a root port\n"=
);
> +		return ERR_PTR(-ENXIO);
> +	}
> +
> +	root_port =3D &root->port;
> +	down_read(&cxl_region_rwsem);
> +	device_for_each_child(&root_port->dev, &ctx, find_max_hpa);
> +	up_read(&cxl_region_rwsem);
> +	put_device(&root_port->dev);
> +
> +	if (!ctx.cxlrd)
> +		return ERR_PTR(-ENOMEM);
> +
> +	*max =3D ctx.max_hpa;

Rename max_hpa to available_hpa.

> +	return ctx.cxlrd;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_get_hpa_freespace, CXL);
> +
> +


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 282B413A3E6;
	Sun,  4 Aug 2024 18:07:26 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722794849; cv=none; b=FJgj+dp3C+4e/VCAKFOy+yQuGsSDOLbCzPWYYdfpkaOe2dVkpJPoUmhJmifJ3euh4Qwy2Kxuo7uxzXYGmgzc/h+xTLgNlq7YGWh1oIxHvcJfirI6/x1swDOynIl1OzMRdPz9Z/HcSsPl+3eQxmnq6P7Y4KQUC6yEfKF5JnR/coo=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722794849; c=relaxed/simple;
	bh=r4of5t/kADTJHJltqPb4kalaWEqLSKW6WheXLsyAl8k=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=uqlIs/O8Na2vRMd2cpK7wtuODR9tdfD9ALBaVwQcdLllKiKQsGc4l5TFHQQ3d1+9QSiGetSZ3UkUYbC+UOEMq2Mifr8FCJu4I9tObaR5vyegWyEyRZChXN5AlIuBeqvhQkywBd1+GKbEaWXuv1cB5bRDiwEIjxzdypcwWj3cxTY=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.216])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcSCS5Dhvz6K5cH;
	Mon,  5 Aug 2024 02:05:08 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id D5801140C72;
	Mon,  5 Aug 2024 02:07:19 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 19:07:19 +0100
Date: Sun, 4 Aug 2024 19:07:18 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 10/15] cxl: define a driver interface for DPA
 allocation
Message-ID: <20240804190718.0000361c@Huawei.com>
In-Reply-To: <20240715172835.24757-11-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-11-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100003.china.huawei.com (7.191.160.210) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:30 +0100
alejandro.lucero-palau@amd.com wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Region creation involves finding available DPA (device-physical-address)
> capacity to map into HPA (host-physical-address) space. Given the HPA
> capacity constraint, define an API, cxl_request_dpa(), that has the
> flexibility to  map the minimum amount of memory the driver needs to
> operate vs the total possible that can be mapped given HPA availability.
> 
> Factor out the core of cxl_dpa_alloc, that does free space scanning,
> into a cxl_dpa_freespace() helper, and use that to balance the capacity
> available to map vs the @min and @max arguments to cxl_request_dpa.
> 
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m4271ee49a91615c8af54e3ab20679f8be3099393
> 
Use the permalink link under these to get shorter links.
https://lore.kernel.org/linux-cxl/168592158743.1948938.7622563891193802610.stgit@dwillia2-xfh.jf.intel.com/
goes to the same patch.


> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>


> +
> +int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
> +{
> +	struct cxl_port *port = cxled_to_port(cxled);
> +	struct device *dev = &cxled->cxld.dev;
> +	resource_size_t start, avail, skip;
> +	int rc;
> +
> +	down_write(&cxl_dpa_rwsem);

Some cleanup.h magic would help here by allowing early returns.
Needs the scoped lock though to ensure it's released before the
devm_add_action_or_reset() as I'd guess we will deadlock otherwise
if that fails.

> +	if (cxled->cxld.region) {
> +		dev_dbg(dev, "EBUSY, decoder attached to %s\n",
> +			     dev_name(&cxled->cxld.region->dev));
> +		rc = -EBUSY;
>  		goto out;
>  	}
>  
> +	if (cxled->cxld.flags & CXL_DECODER_F_ENABLE) {
> +		dev_dbg(dev, "EBUSY, decoder enabled\n");
> +		rc = -EBUSY;
> +		goto out;
> +	}
> +
> +	avail = cxl_dpa_freespace(cxled, &start, &skip);
> +
>  	if (size > avail) {
>  		dev_dbg(dev, "%pa exceeds available %s capacity: %pa\n", &size,
> -			cxl_decoder_mode_name(cxled->mode), &avail);
> +			     cxled->mode == CXL_DECODER_RAM ? "ram" : "pmem",
> +			     &avail);
>  		rc = -ENOSPC;
>  		goto out;
>  	}
> @@ -550,6 +570,99 @@ int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>  	return devm_add_action_or_reset(&port->dev, cxl_dpa_release, cxled);
>  }
>  
> +static int find_free_decoder(struct device *dev, void *data)
> +{
> +	struct cxl_endpoint_decoder *cxled;
> +	struct cxl_port *port;
> +
> +	if (!is_endpoint_decoder(dev))
> +		return 0;
> +
> +	cxled = to_cxl_endpoint_decoder(dev);
> +	port = cxled_to_port(cxled);
> +
> +	if (cxled->cxld.id != port->hdm_end + 1) {
> +		return 0;

No brackets

> +	}
> +	return 1;
> +}
> +
> +/**
> + * cxl_request_dpa - search and reserve DPA given input constraints
> + * @endpoint: an endpoint port with available decoders
> + * @mode: DPA operation mode (ram vs pmem)
> + * @min: the minimum amount of capacity the call needs
> + * @max: extra capacity to allocate after min is satisfied
> + *
> + * Given that a region needs to allocate from limited HPA capacity it
> + * may be the case that a device has more mappable DPA capacity than
> + * available HPA. So, the expectation is that @min is a driver known
> + * value for how much capacity is needed, and @max is based the limit of
> + * how much HPA space is available for a new region.
We are going to need a policy control on the max value.
Otherwise, if you have two devices that support huge capacity and
not enough space, who gets it will just be a race.

Not a problem for now though!

> + *
> + * Returns a pinned cxl_decoder with at least @min bytes of capacity
> + * reserved, or an error pointer. The caller is also expected to own the
> + * lifetime of the memdev registration associated with the endpoint to
> + * pin the decoder registered as well.
> + */




From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id EE29B57323;
	Sun,  4 Aug 2024 18:13:45 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722795228; cv=none; b=m4XpL4yZQyzL/nbdNnGMVmr27rlp/NQNlv+NhY99F80WZdG0xL2cUggNurk2D85JrtbU7o84FWneBlmEZ6WAGB6Fxo7M+7S1Gx6mmCh72Qy4AYvtkiUKyq96cK9apWBzI95cyVscDpngah93GrOnGytpGtB4cVeGYXqf3ib2n1o=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722795228; c=relaxed/simple;
	bh=AbcT4rG8Zmg3NlVWwKow0kxWVTs5+bmVHu7mq+S6HME=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=f73y37R2zF7/pUlWWAXRxBSWuvD7nLA/pqMbVtZtFRKtCzvWTTflgefcrPOSghElVcq0tpzaZfqgfpHTnANNdCSfF6P976OY/Iy+UTWO68l7Bgc+WKFhqeVNTY4Ms674ts5iDy1UpPvgvnQ0YOaBofZgsCpNIZDvig+lhGVuEhA=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcSLB1R5kz67K7y;
	Mon,  5 Aug 2024 02:10:58 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 33AA3140133;
	Mon,  5 Aug 2024 02:13:43 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 19:13:42 +0100
Date: Sun, 4 Aug 2024 19:13:39 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 15/15] efx: support pio mapping based on cxl
Message-ID: <20240804191339.00001eb9@Huawei.com>
In-Reply-To: <20240715172835.24757-16-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-16-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100003.china.huawei.com (7.191.160.210) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:35 +0100
alejandro.lucero-palau@amd.com wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> With a device supporting CXL and successfully initialised, use the cxl
> region to map the memory range and use this mapping for PIO buffers.

This explains why you weren't worried about any step of the CXL
code failing and why that wasn't a 'bug' as such.

I'd argue that you should still have the cxl intialization return
an error code and cleanup any state it if hits an error.

Then the top level driver can of course elect to use an alternative
path given that failure.  Logically it belongs there rather than relying
on a buffer being mapped or not.

> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/net/ethernet/sfc/ef10.c      | 25 +++++++++++++++++++++----
>  drivers/net/ethernet/sfc/efx_cxl.c   | 12 +++++++++++-
>  drivers/net/ethernet/sfc/mcdi_pcol.h |  3 +++
>  drivers/net/ethernet/sfc/nic.h       |  1 +
>  4 files changed, 36 insertions(+), 5 deletions(-)
> 
> diff --git a/drivers/net/ethernet/sfc/ef10.c b/drivers/net/ethernet/sfc/ef10.c
> index 8fa6c0e9195b..3924076d2628 100644
> --- a/drivers/net/ethernet/sfc/ef10.c
> +++ b/drivers/net/ethernet/sfc/ef10.c
> @@ -24,6 +24,7 @@
>  #include <linux/wait.h>
>  #include <linux/workqueue.h>
>  #include <net/udp_tunnel.h>
> +#include "efx_cxl.h"
>  
>  /* Hardware control for EF10 architecture including 'Huntington'. */
>  
> @@ -177,6 +178,12 @@ static int efx_ef10_init_datapath_caps(struct efx_nic *efx)
>  			  efx->num_mac_stats);
>  	}
>  
> +	if (outlen < MC_CMD_GET_CAPABILITIES_V7_OUT_LEN)
> +		nic_data->datapath_caps3 = 0;
> +	else
> +		nic_data->datapath_caps3 = MCDI_DWORD(outbuf,
> +						      GET_CAPABILITIES_V7_OUT_FLAGS3);
> +
>  	return 0;
>  }
>  
> @@ -1275,10 +1282,20 @@ static int efx_ef10_dimension_resources(struct efx_nic *efx)
>  			return -ENOMEM;
>  		}
>  		nic_data->pio_write_vi_base = pio_write_vi_base;
> -		nic_data->pio_write_base =
> -			nic_data->wc_membase +
> -			(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
> -			 uc_mem_map_size);
> +
> +		if ((nic_data->datapath_caps3 &
> +		    (1 << MC_CMD_GET_CAPABILITIES_V10_OUT_CXL_CONFIG_ENABLE_LBN)) &&
> +		    efx->cxl->ctpio_cxl)
As per comment at the top, I'd prefer to see some clean handling of the an
error passed up to the caller of the cxl init that then sets a flag that
we can clearly see is all about whether we have CXL or not.

Using this buffer mapping is a it too much of a detail in my opinion.

> +		{
> +			nic_data->pio_write_base =
> +				efx->cxl->ctpio_cxl +
> +				(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
> +				 uc_mem_map_size);
> +		} else {
> +			nic_data->pio_write_base =nic_data->wc_membase +
> +				(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
> +				 uc_mem_map_size);
> +		}



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A0B048493;
	Sun,  4 Aug 2024 18:29:29 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722796172; cv=none; b=ExjvCZG6xMxafkHRcuGcUR5z5JG8vNGOA2r0LxznuNzf8i5fdN/izRuHMKeUBIbeYAfCxNX1sfVo0BzcJ32H2cSDbLDuBPN8SEWYwMTE2/pS729hx7F0XgmkLoO+CwbbjTEz0bsF4jIBZCuRtDCXm2XhjZ6zYEGkhNLZPiaxBN8=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722796172; c=relaxed/simple;
	bh=rQ9ZDKKrKTgcOEE4cWsxb9zo6VTWo0G8/ILTLbcJoCw=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=bQYoh82iu7Um04Zar2mobb32Z/PeOsaq/yqpL20FRlbCjxv9VsDtyzGYbIDnZTFiRkyhRdgR2InnYdyxVOTGc4V2rBP05xYPJQjg+s7llVe3hKLdXYuRVcmvjMc3FLBwhgKCQEyvbjE7J1eWp19l+BM89VjPI0EwskSiwRs5CiM=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.216])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WcShK5vWhz6K5pj;
	Mon,  5 Aug 2024 02:26:41 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id D376E140C72;
	Mon,  5 Aug 2024 02:29:26 +0800 (CST)
Received: from localhost (10.195.244.131) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Sun, 4 Aug
 2024 19:29:26 +0100
Date: Sun, 4 Aug 2024 19:29:23 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 12/15] cxl: allow region creation by type2 drivers
Message-ID: <20240804192923.000035bd@Huawei.com>
In-Reply-To: <20240715172835.24757-13-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-13-alejandro.lucero-palau@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100002.china.huawei.com (7.191.160.241) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 15 Jul 2024 18:28:32 +0100
alejandro.lucero-palau@amd.com wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Creating a CXL region requires userspace intervention through the cxl
> sysfs files. Type2 support should allow accelerator drivers to create
> such cxl region from kernel code.
> 
> Adding that functionality and integrating it with current support for
> memory expanders.
> 
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m84598b534cc5664f5bb31521ba6e41c7bc213758
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Signed-off-by: Dan Williams <dan.j.williams@intel.com>
Needs a co-developed or similar given Dan didn't email this patch
(which this sign off list suggests he did).

I'll take another look at the locking, but my main comment is
that it is really confusing so I have no idea if it's right.
Consider different ways of breaking up the code you need
to try and keep the locking obvious.

Jonathan

> +
> +static ssize_t interleave_ways_store(struct device *dev,
> +				     struct device_attribute *attr,
> +				     const char *buf, size_t len)
> +{
> +	struct cxl_region *cxlr = to_cxl_region(dev);
> +	unsigned int val;
> +	int rc;
> +
> +	rc = kstrtouint(buf, 0, &val);
> +	if (rc)
> +		return rc;
> +
> +	rc = down_write_killable(&cxl_region_rwsem);
> +	if (rc)
> +		return rc;
> +
> +	rc = set_interleave_ways(cxlr, val);
>  	up_write(&cxl_region_rwsem);
>  	if (rc)
>  		return rc;
>  	return len;
>  }
> +
This was probably intentional. Common to group a macro like this
with the function it is using by not having a blank line.
>  static DEVICE_ATTR_RW(interleave_ways);
>  
>  static ssize_t interleave_granularity_show(struct device *dev,
> @@ -547,21 +556,14 @@ static ssize_t interleave_granularity_show(struct device *dev,
>  	return rc;
>  }

> +static ssize_t interleave_granularity_store(struct device *dev,
> +					    struct device_attribute *attr,
> +					    const char *buf, size_t len)
> +{
> +	struct cxl_region *cxlr = to_cxl_region(dev);
> +	int rc, val;
> +
> +	rc = kstrtoint(buf, 0, &val);
> +	if (rc)
> +		return rc;
> +
>  	rc = down_write_killable(&cxl_region_rwsem);
>  	if (rc)
>  		return rc;
> -	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
> -		rc = -EBUSY;
> -		goto out;
> -	}
>  
> -	p->interleave_granularity = val;
> -out:
> +	rc = set_interleave_granularity(cxlr, val);
>  	up_write(&cxl_region_rwsem);
>  	if (rc)
>  		return rc;
>  	return len;
>  }
> +

grump.

>  static DEVICE_ATTR_RW(interleave_granularity);

> +/* Establish an empty region covering the given HPA range */
> +static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
> +					   struct cxl_endpoint_decoder *cxled)
> +{
> +	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
> +	struct range *hpa = &cxled->cxld.hpa_range;
> +	struct cxl_region_params *p;
> +	struct cxl_region *cxlr;
> +	struct resource *res;
> +	int rc;
> +
> +	cxlr = construct_region_begin(cxlrd, cxled);
> +	if (IS_ERR(cxlr))
> +		return cxlr;
>  
>  	set_bit(CXL_REGION_F_AUTO, &cxlr->flags);
>  
>  	res = kmalloc(sizeof(*res), GFP_KERNEL);
>  	if (!res) {
>  		rc = -ENOMEM;
> -		goto err;
> +		goto out;
>  	}
>  
>  	*res = DEFINE_RES_MEM_NAMED(hpa->start, range_len(hpa),
>  				    dev_name(&cxlr->dev));
> +
>  	rc = insert_resource(cxlrd->res, res);
>  	if (rc) {
>  		/*
> @@ -3412,6 +3462,7 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
>  			 __func__, dev_name(&cxlr->dev));
>  	}
>  
> +	p = &cxlr->params;
>  	p->res = res;
>  	p->interleave_ways = cxled->cxld.interleave_ways;
>  	p->interleave_granularity = cxled->cxld.interleave_granularity;
> @@ -3419,24 +3470,124 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
>  
>  	rc = sysfs_update_group(&cxlr->dev.kobj, get_cxl_region_target_group());
>  	if (rc)
> -		goto err;
> +		goto out;
>  
>  	dev_dbg(cxlmd->dev.parent, "%s:%s: %s %s res: %pr iw: %d ig: %d\n",
> -		dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev), __func__,
> -		dev_name(&cxlr->dev), p->res, p->interleave_ways,
> -		p->interleave_granularity);
> +				   dev_name(&cxlmd->dev),
> +				   dev_name(&cxled->cxld.dev), __func__,
> +				   dev_name(&cxlr->dev), p->res,
> +				   p->interleave_ways,
> +				   p->interleave_granularity);
>  
>  	/* ...to match put_device() in cxl_add_to_region() */
>  	get_device(&cxlr->dev);
>  	up_write(&cxl_region_rwsem);
> +out:
> +	construct_region_end();

two calls to up_write(&cxl_region_rwsem) next to each other?

> +	if (rc) {
> +		drop_region(cxlr);
> +		return ERR_PTR(rc);
> +	}
> +	return cxlr;
> +}
> +
> +static struct cxl_region *
> +__construct_new_region(struct cxl_root_decoder *cxlrd,
> +		       struct cxl_endpoint_decoder **cxled, int ways)
> +{
> +	struct cxl_decoder *cxld = &cxlrd->cxlsd.cxld;
> +	struct cxl_region_params *p;
> +	resource_size_t size = 0;
> +	struct cxl_region *cxlr;
> +	int rc, i;
> +
> +	/* If interleaving is not supported, why does ways need to be at least 1? */

I think 1 means no interleave. It's simpler to do this than have 0 and 1 both 
mean no interleave because 1 works for programmable decoders.

> +	if (ways < 1)
> +		return ERR_PTR(-EINVAL);
> +
> +	cxlr = construct_region_begin(cxlrd, cxled[0]);

rethink how this broken up.  Taking the cxl_dpa_rwsem
inside this function and is really hard to follow.  Ideally
manage it with scoped_guard()


> +	if (IS_ERR(cxlr))
> +		return cxlr;
> +
> +	rc = set_interleave_ways(cxlr, ways);
> +	if (rc)
> +		goto out;
> +
> +	rc = set_interleave_granularity(cxlr, cxld->interleave_granularity);
> +	if (rc)
here I think cxl_dpa_rwsem is held.
> +		goto out;
> +
> +	down_read(&cxl_dpa_rwsem);
> +	for (i = 0; i < ways; i++) {
> +		if (!cxled[i]->dpa_res)
> +			break;
> +		size += resource_size(cxled[i]->dpa_res);
> +	}
> +	up_read(&cxl_dpa_rwsem);
> +
> +	if (i < ways)

but not here and they go to the same place.

> +		goto out;
> +
> +	rc = alloc_hpa(cxlr, size);
> +	if (rc)
> +		goto out;
> +
> +	down_read(&cxl_dpa_rwsem);
> +	for (i = 0; i < ways; i++) {
> +		rc = cxl_region_attach(cxlr, cxled[i], i);
> +		if (rc)
> +			break;
> +	}
> +	up_read(&cxl_dpa_rwsem);
> +
> +	if (rc)
> +		goto out;
> +
> +	rc = cxl_region_decode_commit(cxlr);
> +	if (rc)
> +		goto out;
>  
> +	p = &cxlr->params;
> +	p->state = CXL_CONFIG_COMMIT;
> +out:
> +	construct_region_end();
> +	if (rc) {
> +		drop_region(cxlr);
> +		return ERR_PTR(rc);
> +	}
>  	return cxlr;
> +}

> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index a0e0795ec064..377bb3cd2d47 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -881,5 +881,7 @@ struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>  					       int interleave_ways,
>  					       unsigned long flags,
>  					       resource_size_t *max);
> -
Avoid whitespace noise.

> +struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
> +				     struct cxl_endpoint_decoder **cxled,
> +				     int ways);
>  #endif /* __CXL_MEM_H__ */

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mail-yw1-f173.google.com (mail-yw1-f173.google.com [209.85.128.173])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 4E469770F3;
	Tue,  6 Aug 2024 17:34:08 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=209.85.128.173
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1722965651; cv=none; b=aROc2Cj6QTlcF9UnfjiK8kqHqwPrgMm51sklqujvnua8ZYCZvMWMdBgtcD/wSNDIYhuugi1SgxHhcFB+Zyeg8GY/aZ+t3ZChwXSg2+u6XnGRrvYhHOtWncRh5lbYvfgk/vLEZZ6JF8udGdZmesUwdOTnyBWhdA1oHC3RbQ45zmo=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1722965651; c=relaxed/simple;
	bh=YYt3i1QwaVLEEfc9XdjMd+mLpl+pnz3P4xY+TvknjRI=;
	h=From:Date:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=e0+ODSylsRjX4kbva8We3PK8JYZG34wB6jSQlCZRh0VMqsIL31LwZUFRnke///iVKwipYlihsP8nq7hVB2YZ92jP9YLEAUi8lgbP8xFUByD4pDThCihf/pHtRfruNfiYYZcPL0zdxz3rXXVQh5ubMciwOF75pCExYMx4fhMjqls=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com; spf=pass smtp.mailfrom=gmail.com; dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b=T+YdayeX; arc=none smtp.client-ip=209.85.128.173
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=gmail.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=gmail.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=gmail.com header.i=@gmail.com header.b="T+YdayeX"
Received: by mail-yw1-f173.google.com with SMTP id 00721157ae682-651da7c1531so7117077b3.0;
        Tue, 06 Aug 2024 10:34:08 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20230601; t=1722965648; x=1723570448; darn=vger.kernel.org;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:date:from:from:to:cc:subject:date:message-id:reply-to;
        bh=x/dijiz0EH92ZFCcCib2UX6qOQ2ginxd/v4yrYrYTM4=;
        b=T+YdayeXn5jzQPqYHL4s86lSPdXZOcHa2wThfPi6ixKXiCOy6NkfCywoI2nnw/E8YZ
         ouSJ5hDVSM2jjBrcnHnyghoJZFhXs77F4kGCVsxd0OJl3YXrQ4eCu0B00mKyhGC2BJ1b
         0+4MhfCltwfjILI6xA05C454Xdl4ofcVXbav8bmHUe3spEpdU+kar0YZGVcMRflfKIZ0
         GGFdD+LUlc48gE8B4eyRrsCm0R71/aWwHRZ8en2yCtXHalTSCjF9of2uaxY0WmxSY2aO
         O2mf9uQRpqXEYCO261hj6A0T+rLHVSFLDP5nbG2SzviYanpsX5bPQi86FYWFmKp6Ny+P
         lNtg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20230601; t=1722965648; x=1723570448;
        h=in-reply-to:content-disposition:mime-version:references:message-id
         :subject:cc:to:date:from:x-gm-message-state:from:to:cc:subject:date
         :message-id:reply-to;
        bh=x/dijiz0EH92ZFCcCib2UX6qOQ2ginxd/v4yrYrYTM4=;
        b=Ol0Mvmn46HBmyQ10yWjX8LpSnzmjGYDOYwjIKDGcjmejZEtdKfzwKeyIq+b63noCkQ
         +5Zbvrz1Eh2I1ORJ6LsTvppTglUnKCOroBSlHU6w3umeCOws7Kgc1/OUwVG/Pw1PubQk
         WWhoirRaaGcGqybxQPSx8MS5FJd+D6uMgZmRwbSuHOQSx5BHqw7uGhzRjkRcZroYjlGZ
         FmYUVgMtk1jG+/qVnIBMjdw5KDrazjMvtIGFrxH/sWirEetvUtc6+Obc/rlZYxNpfi6l
         vm7KhyXuKcvUssjtQSWZ0Xy1jO/vjcGv4y/D3IZ18ei9f9fHDy6u/hFJCeyl+2rXGo46
         bWUA==
X-Forwarded-Encrypted: i=1; AJvYcCV7G1RlXRL1c3FMwXrOFln7zsKF4IHEjitlHSL/a6J0Tw7DcXhtGaFKO3aUE3+yZnRdeW8x4NfpdLDLrbJzNMOKZyUN3W+s
X-Gm-Message-State: AOJu0YwoWtJGrtsIfbsz7jqTT4725itXVNyS2Ou+5FXxewz1a4x5qo1h
	NYGci/HSosnqzlPXLpD3B65V5DqoYYfumE99c2bMV2os1XW7emaJZr+IRA==
X-Google-Smtp-Source: AGHT+IHWLSaNIVrQIOJDYWP+LhgakR9Vk3J9gR3irIr/Ht1U3T4MeVRvDSTpH3gz5YgFxF3cA40ZjQ==
X-Received: by 2002:a0d:e087:0:b0:647:88ba:f91b with SMTP id 00721157ae682-68960777bcemr162128477b3.11.1722965647999;
        Tue, 06 Aug 2024 10:34:07 -0700 (PDT)
Received: from fan ([50.205.20.42])
        by smtp.gmail.com with ESMTPSA id 00721157ae682-68a10659fdasm15936567b3.63.2024.08.06.10.34.06
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Tue, 06 Aug 2024 10:34:07 -0700 (PDT)
From: Fan Ni <nifan.cxl@gmail.com>
X-Google-Original-From: Fan Ni <fan.ni@samsung.com>
Date: Tue, 6 Aug 2024 10:33:38 -0700
To: alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
	dan.j.williams@intel.com, martin.habets@xilinx.com,
	edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
	pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 10/15] cxl: define a driver interface for DPA
 allocation
Message-ID: <ZrJecn2KNn_5_Xef@fan>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-11-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240715172835.24757-11-alejandro.lucero-palau@amd.com>

On Mon, Jul 15, 2024 at 06:28:30PM +0100, alejandro.lucero-palau@amd.com wrote:
> From: Alejandro Lucero <alucerop@amd.com>
> 
> Region creation involves finding available DPA (device-physical-address)
> capacity to map into HPA (host-physical-address) space. Given the HPA
> capacity constraint, define an API, cxl_request_dpa(), that has the
> flexibility to  map the minimum amount of memory the driver needs to
> operate vs the total possible that can be mapped given HPA availability.
> 
> Factor out the core of cxl_dpa_alloc, that does free space scanning,
> into a cxl_dpa_freespace() helper, and use that to balance the capacity
> available to map vs the @min and @max arguments to cxl_request_dpa.
> 
> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m4271ee49a91615c8af54e3ab20679f8be3099393
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/core.h            |   1 +
>  drivers/cxl/core/hdm.c             | 153 +++++++++++++++++++++++++----
>  drivers/net/ethernet/sfc/efx.c     |   2 +
>  drivers/net/ethernet/sfc/efx_cxl.c |  18 +++-
>  drivers/net/ethernet/sfc/efx_cxl.h |   1 +
>  include/linux/cxl_accel_mem.h      |   7 ++
>  6 files changed, 161 insertions(+), 21 deletions(-)
> 
> diff --git a/drivers/cxl/core/core.h b/drivers/cxl/core/core.h
> index 625394486459..a243ff12c0f4 100644
> --- a/drivers/cxl/core/core.h
> +++ b/drivers/cxl/core/core.h
> @@ -76,6 +76,7 @@ int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
>  		     enum cxl_decoder_mode mode);
>  int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size);
>  int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
> +int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);

Function declared twice here.

Fan
>  resource_size_t cxl_dpa_size(struct cxl_endpoint_decoder *cxled);
>  resource_size_t cxl_dpa_resource_start(struct cxl_endpoint_decoder *cxled);
>  
> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
> index 4af9225d4b59..3e53ae222d40 100644
> --- a/drivers/cxl/core/hdm.c
> +++ b/drivers/cxl/core/hdm.c
> @@ -3,6 +3,7 @@
>  #include <linux/seq_file.h>
>  #include <linux/device.h>
>  #include <linux/delay.h>
> +#include <linux/cxl_accel_mem.h>
>  
>  #include "cxlmem.h"
>  #include "core.h"
> @@ -420,6 +421,7 @@ int cxl_dpa_free(struct cxl_endpoint_decoder *cxled)
>  	up_write(&cxl_dpa_rwsem);
>  	return rc;
>  }
> +EXPORT_SYMBOL_NS_GPL(cxl_dpa_free, CXL);
>  
>  int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
>  		     enum cxl_decoder_mode mode)
> @@ -467,30 +469,17 @@ int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
>  	return rc;
>  }
>  
> -int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
> +static resource_size_t cxl_dpa_freespace(struct cxl_endpoint_decoder *cxled,
> +					 resource_size_t *start_out,
> +					 resource_size_t *skip_out)
>  {
>  	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
>  	resource_size_t free_ram_start, free_pmem_start;
> -	struct cxl_port *port = cxled_to_port(cxled);
>  	struct cxl_dev_state *cxlds = cxlmd->cxlds;
> -	struct device *dev = &cxled->cxld.dev;
>  	resource_size_t start, avail, skip;
>  	struct resource *p, *last;
> -	int rc;
> -
> -	down_write(&cxl_dpa_rwsem);
> -	if (cxled->cxld.region) {
> -		dev_dbg(dev, "decoder attached to %s\n",
> -			dev_name(&cxled->cxld.region->dev));
> -		rc = -EBUSY;
> -		goto out;
> -	}
>  
> -	if (cxled->cxld.flags & CXL_DECODER_F_ENABLE) {
> -		dev_dbg(dev, "decoder enabled\n");
> -		rc = -EBUSY;
> -		goto out;
> -	}
> +	lockdep_assert_held(&cxl_dpa_rwsem);
>  
>  	for (p = cxlds->ram_res.child, last = NULL; p; p = p->sibling)
>  		last = p;
> @@ -528,14 +517,45 @@ int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>  			skip_end = start - 1;
>  		skip = skip_end - skip_start + 1;
>  	} else {
> -		dev_dbg(dev, "mode not set\n");
> -		rc = -EINVAL;
> +		avail = 0;
> +	}
> +
> +	if (!avail)
> +		return 0;
> +	if (start_out)
> +		*start_out = start;
> +	if (skip_out)
> +		*skip_out = skip;
> +	return avail;
> +}
> +
> +int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
> +{
> +	struct cxl_port *port = cxled_to_port(cxled);
> +	struct device *dev = &cxled->cxld.dev;
> +	resource_size_t start, avail, skip;
> +	int rc;
> +
> +	down_write(&cxl_dpa_rwsem);
> +	if (cxled->cxld.region) {
> +		dev_dbg(dev, "EBUSY, decoder attached to %s\n",
> +			     dev_name(&cxled->cxld.region->dev));
> +		rc = -EBUSY;
>  		goto out;
>  	}
>  
> +	if (cxled->cxld.flags & CXL_DECODER_F_ENABLE) {
> +		dev_dbg(dev, "EBUSY, decoder enabled\n");
> +		rc = -EBUSY;
> +		goto out;
> +	}
> +
> +	avail = cxl_dpa_freespace(cxled, &start, &skip);
> +
>  	if (size > avail) {
>  		dev_dbg(dev, "%pa exceeds available %s capacity: %pa\n", &size,
> -			cxl_decoder_mode_name(cxled->mode), &avail);
> +			     cxled->mode == CXL_DECODER_RAM ? "ram" : "pmem",
> +			     &avail);
>  		rc = -ENOSPC;
>  		goto out;
>  	}
> @@ -550,6 +570,99 @@ int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>  	return devm_add_action_or_reset(&port->dev, cxl_dpa_release, cxled);
>  }
>  
> +static int find_free_decoder(struct device *dev, void *data)
> +{
> +	struct cxl_endpoint_decoder *cxled;
> +	struct cxl_port *port;
> +
> +	if (!is_endpoint_decoder(dev))
> +		return 0;
> +
> +	cxled = to_cxl_endpoint_decoder(dev);
> +	port = cxled_to_port(cxled);
> +
> +	if (cxled->cxld.id != port->hdm_end + 1) {
> +		return 0;
> +	}
> +	return 1;
> +}
> +
> +/**
> + * cxl_request_dpa - search and reserve DPA given input constraints
> + * @endpoint: an endpoint port with available decoders
> + * @mode: DPA operation mode (ram vs pmem)
> + * @min: the minimum amount of capacity the call needs
> + * @max: extra capacity to allocate after min is satisfied
> + *
> + * Given that a region needs to allocate from limited HPA capacity it
> + * may be the case that a device has more mappable DPA capacity than
> + * available HPA. So, the expectation is that @min is a driver known
> + * value for how much capacity is needed, and @max is based the limit of
> + * how much HPA space is available for a new region.
> + *
> + * Returns a pinned cxl_decoder with at least @min bytes of capacity
> + * reserved, or an error pointer. The caller is also expected to own the
> + * lifetime of the memdev registration associated with the endpoint to
> + * pin the decoder registered as well.
> + */
> +struct cxl_endpoint_decoder *cxl_request_dpa(struct cxl_port *endpoint,
> +					     bool is_ram,
> +					     resource_size_t min,
> +					     resource_size_t max)
> +{
> +	struct cxl_endpoint_decoder *cxled;
> +	enum cxl_decoder_mode mode;
> +	struct device *cxled_dev;
> +	resource_size_t alloc;
> +	int rc;
> +
> +	if (!IS_ALIGNED(min | max, SZ_256M))
> +		return ERR_PTR(-EINVAL);
> +
> +	down_read(&cxl_dpa_rwsem);
> +
> +	cxled_dev = device_find_child(&endpoint->dev, NULL, find_free_decoder);
> +	if (!cxled_dev)
> +		cxled = ERR_PTR(-ENXIO);
> +	else
> +		cxled = to_cxl_endpoint_decoder(cxled_dev);
> +
> +	up_read(&cxl_dpa_rwsem);
> +
> +	if (IS_ERR(cxled))
> +		return cxled;
> +
> +	if (is_ram)
> +		mode = CXL_DECODER_RAM;
> +	else
> +		mode = CXL_DECODER_PMEM;
> +
> +	rc = cxl_dpa_set_mode(cxled, mode);
> +	if (rc)
> +		goto err;
> +
> +	down_read(&cxl_dpa_rwsem);
> +	alloc = cxl_dpa_freespace(cxled, NULL, NULL);
> +	up_read(&cxl_dpa_rwsem);
> +
> +	if (max)
> +		alloc = min(max, alloc);
> +	if (alloc < min) {
> +		rc = -ENOMEM;
> +		goto err;
> +	}
> +
> +	rc = cxl_dpa_alloc(cxled, alloc);
> +	if (rc)
> +		goto err;
> +
> +	return cxled;
> +err:
> +	put_device(cxled_dev);
> +	return ERR_PTR(rc);
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_request_dpa, CXL);
> +
>  static void cxld_set_interleave(struct cxl_decoder *cxld, u32 *ctrl)
>  {
>  	u16 eig;
> diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
> index cb3f74d30852..9cfe29002d98 100644
> --- a/drivers/net/ethernet/sfc/efx.c
> +++ b/drivers/net/ethernet/sfc/efx.c
> @@ -901,6 +901,8 @@ static void efx_pci_remove(struct pci_dev *pci_dev)
>  
>  	efx_fini_io(efx);
>  
> +	efx_cxl_exit(efx);
> +
>  	pci_dbg(efx->pci_dev, "shutdown successful\n");
>  
>  	efx_fini_devlink_and_unlock(efx);
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
> index 6d49571ccff7..b5626d724b52 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -84,12 +84,28 @@ void efx_cxl_init(struct efx_nic *efx)
>  		goto out;
>  	}
>  
> -	if (max < EFX_CTPIO_BUFFER_SIZE)
> +	if (max < EFX_CTPIO_BUFFER_SIZE) {
>  		pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
>  				  max, EFX_CTPIO_BUFFER_SIZE);
> +		goto out;
> +	}
> +
> +	cxl->cxled = cxl_request_dpa(cxl->endpoint, true, EFX_CTPIO_BUFFER_SIZE,
> +				     EFX_CTPIO_BUFFER_SIZE);
> +	if (IS_ERR(cxl->cxled))
> +		pci_info(pci_dev, "CXL accel request DPA failed");
>  out:
>  	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>  }
>  
> +void efx_cxl_exit(struct efx_nic *efx)
> +{
> +	struct efx_cxl *cxl = efx->cxl;
> +
> +	if (cxl->cxled)
> +		cxl_dpa_free(cxl->cxled);
> + 
> + 	return;
> + }
>  
>  MODULE_IMPORT_NS(CXL);
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.h b/drivers/net/ethernet/sfc/efx_cxl.h
> index 76c6794c20d8..59d5217a684c 100644
> --- a/drivers/net/ethernet/sfc/efx_cxl.h
> +++ b/drivers/net/ethernet/sfc/efx_cxl.h
> @@ -26,4 +26,5 @@ struct efx_cxl {
>  };
>  
>  void efx_cxl_init(struct efx_nic *efx);
> +void efx_cxl_exit(struct efx_nic *efx);
>  #endif
> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
> index f3e77688ffe0..d4ecb5bb4fc8 100644
> --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -2,6 +2,7 @@
>  /* Copyright(c) 2024 Advanced Micro Devices, Inc. */
>  
>  #include <linux/cdev.h>
> +#include <linux/pci.h>
>  
>  #ifndef __CXL_ACCEL_MEM_H
>  #define __CXL_ACCEL_MEM_H
> @@ -41,4 +42,10 @@ struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>  					       int interleave_ways,
>  					       unsigned long flags,
>  					       resource_size_t *max);
> +
> +struct cxl_endpoint_decoder *cxl_request_dpa(struct cxl_port *endpoint,
> +					     bool is_ram,
> +					     resource_size_t min,
> +					     resource_size_t max);
> +int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
>  #endif
> -- 
> 2.17.1
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-DM6-obe.outbound.protection.outlook.com (mail-dm6nam12on2063.outbound.protection.outlook.com [40.107.243.63])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id B39F612E7E;
	Fri,  9 Aug 2024 07:27:54 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.243.63
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723188476; cv=fail; b=ejpBMetp745r4VVhtP1Z0fJnriv9iGkPdNwjiVa9kKYbhZo2kczEHhz9h9Yqa04tNQYzKqpJWgfOqXcoMlp3xs2ruks+93n3MldijKqB/lHECEcf561Qdrj/9LT0H0O6m+ExULEMrzyCPGHtYikuR69qbfVXMPgD16XRqT0kqAo=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723188476; c=relaxed/simple;
	bh=6lABGtidBtTa5PAcPQLz21Jg6UxN32WM0AdOQVwAVic=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=WTf/DLSo5ypLWok7M6WALxlo9FPTyzIOz73sQVbdeQEQvXPbqIyVTXvebC5S/FgPYgILJrYIsF1d0HBcTC0AwFKJz7QQ4CwLmWAL0Ot4N53C8etszxQ7akwbWgdavzH46TtjF6Qefike0J4Zy1EATUv0rBJS6SQizpKheX8001A=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=eeIedm2O; arc=fail smtp.client-ip=40.107.243.63
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="eeIedm2O"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=mT1EO1e+CMaNSOAImlSCUky2xUGAoAYLXDVmji6fWO4yz+TfjmOJu1Yvh7WwG9ASk0hF2XkIuzqPtnGuVN272a51jOtsmMteg/wGTx4nTJCK4GrFT8b2FpPK2SqhHzrZxI2exLJYZg7oPLjv9EhmKaBGUIFzcsoTnzb7wbqo9mIEJjJtURLFwA8dm2hstuKSfC6UgQufzhKpgCzy1/jgJpKqh6wzmaogTZPkav90jyQTqwqoSa2G5et6BUI0YgvueFECQNJKKEYeeFHMFiCD7w8EU7JEF0ZFE6r9+yKSi3PaV3gS6bt3TWT3dcna+25zd3mdlTDxLaFMpHm2C/ZV2w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=+RisqBUbSpCju47qk5j8bUykY2nRJi0vaPTyAHDGvjQ=;
 b=zHqQOna/9wtp3GuWI2LHtBihhTqmEz4/5JEf+SvPKRPSijhHbtl2an2F47zj+2NKyNke1XOy2JDcoEraIcnYorOUq9pz0db0YIlCniPin5c6t7cfVqwxXBaiY80XUImuHtpvHuzX7HIKS74y+Ok6ihWjNOh3iaSrzpGPNPdcSOxfcuL90YMmDiDS2g7VlL/SPnNp2fJ+xJ3GB/lTEss3KpmiSUxSs72wDgDKAC/Bl1NMLRbQGnh0dNac6j48i36a5JO2th08sbsn2SSp+Au99x99IzpGDy39s8I7rpkuEM+2TS8r9y/sMEZ4NWNEQPlWxTG9vHMSNhDzpyCynvbjXw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=+RisqBUbSpCju47qk5j8bUykY2nRJi0vaPTyAHDGvjQ=;
 b=eeIedm2ONdYoyHQIuzvyN+eQc30BHPK7pp4MrBSN4fjP4fv/NsyW3JV/SqilBI6gKrRlZ3yZx/QVsE/1gc2mawiJgzlobpyJW2mfvLPnaU8gyClPT7cv8hpJn3An96zbGXEUnTzOwDHIbNJpTYaTM8SGD5wur8wkM8fXVCNMIFc=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH7PR12MB8428.namprd12.prod.outlook.com (2603:10b6:510:243::17) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7807.23; Fri, 9 Aug
 2024 07:26:52 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.014; Fri, 9 Aug 2024
 07:26:50 +0000
Message-ID: <37bb4ee4-9d5f-17f4-7311-5be97ca83c34@amd.com>
Date: Fri, 9 Aug 2024 08:26:38 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
Cc: Dave Jiang <dave.jiang@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <936eecad-2e98-4336-b775-d28fa1d87d76@intel.com>
 <e5a4836d-a405-5b12-62a7-e45b39fb12ad@amd.com>
 <20240804174424.00007011@Huawei.com>
Content-Language: en-US
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804174424.00007011@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LO4P123CA0338.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:18c::19) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH7PR12MB8428:EE_
X-MS-Office365-Filtering-Correlation-Id: eef947e2-644a-432d-fbe2-08dcb844a276
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|7416014|366016|376014|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?bEdxM0hQaG9nNEt5c2FRSE5TcXRmc2JhOTRPVE1TWlExbG1sekRjMlBGajNL?=
 =?utf-8?B?ZWR0WWJQK1VRdWN2aGVzZkpjVk9xLy9pakw3eml3RW1LaGI5UUR3WUthV1VF?=
 =?utf-8?B?bDhaeER6RGtWU283ejR4ZEJIREJINXE4Y2U1elpZR29TQkNKWmtRUUsrRDVL?=
 =?utf-8?B?S1BuL0Q1cTU2RmJDbVRLVzhJM01TRzZLblRNVUMrbmdzVlZhRENyNEtaY3cw?=
 =?utf-8?B?bEVkSDJmeTJtc25yN0U0Zk8xakhOTzNlQ0haTDBRK09NemsxUHVCZVI5SGo3?=
 =?utf-8?B?T2FwVy82bjZONFIwZlNTQmZCWnRQeCtMOHBjVUJiR20xS1dKWk1FUEgrUXNN?=
 =?utf-8?B?ZWhDOUROSjdCd3RiUmJWNVRkSTNlSThQTURkcUd3Y01kemVidDJxTFlLdjZK?=
 =?utf-8?B?d2hMaU5zTGpxR25ZZDdZOUI4VUhnWmh5dTNNb3ZNT2cwWUdtaDVLQmxLd3JE?=
 =?utf-8?B?bVJDUnlCdVU5ZjlwemI5elJIMmNNSXpmVHNJNXMzS01MUnY2ZEpYd29ZMThu?=
 =?utf-8?B?UFU2MHRPaGlSNVBUQnNZWWZGRk1xa082eWNFWmpLbmlDQjgzOXJzTUlXOEts?=
 =?utf-8?B?am55ZlRjNm83M003dUJNZi9QYjBzMnpoMnl6NXpTL0NFckpuSTczTENlNTRm?=
 =?utf-8?B?bmgwc2ZHYzV5bE5CSUZ4OElOdFkwQlpwOVFkREwwMmt0RyttK2NtaXFtMUlt?=
 =?utf-8?B?c2FyZ2ZhdkZYeXIveFRTWmhhM09kUXB1VTlGODF2NExlcUkwT253bE9heWxJ?=
 =?utf-8?B?V09YVFdTWXBBTVZaNnI2SWNhaGxuT3pHMTk3MC8ydFpxcWVvWFRwb0RoRzlv?=
 =?utf-8?B?Ry9VcXJnZ1RjbFNPN1NoWlkwazR6Nzc0REc1WkgvT1BDQVR6bVp5VVFKOFpM?=
 =?utf-8?B?TzFGMGFIeTc1bVVJVUl6ZlNxbXJLa095SlVDRWtoaFdCNDQ5eGNENnBkOVM1?=
 =?utf-8?B?akg3WC8rVzJTVjM5OEZFbDBKVjUvTUlGYno5NXBWYnhWYjZvWFpIb2o5TU8z?=
 =?utf-8?B?azF5aFVZV3JZMEFDZlhoQytyTEdNcU5ScXlDV3o2d2FPNG1JWkg3N2ZBdys2?=
 =?utf-8?B?TnhTZ0phdG5FZGZqT0hXN2xQUjRJblliRW1IY2t6VHBXNUl6dU9mTmtYMXpD?=
 =?utf-8?B?blcrNXNKNk9CcU8yRTU4a0N1K2hJbXVHNitSYUQ0MVQwMWU1NVFJbU53ZTdN?=
 =?utf-8?B?dFk4VW10Nm9sbzJIbU1IWWpoWjlNUmh6QUNrSVRPUTlGTlJ5d3JVaEFYUkVl?=
 =?utf-8?B?dm9uL3NkMTBaNElJZS8rOUNITGwxdmg3b00yZXpEU0kwMlVyVGs1cFhOVFdu?=
 =?utf-8?B?OUIvazgvaTBvVEhtb3AxYzk1ekRGUU9sZWc5elBJZWx3NWlDNnQrM2NrbWVa?=
 =?utf-8?B?dzNVZHFTbHF1eHZKS2tTdk1xbFgvTmRrU01RWHUzY2ZSeXdmTWF4dDBTa2pm?=
 =?utf-8?B?d0tXcjM1NUhxOE1Ebi8vMHZVSGhhcEYzMTUyNUJBeVJSWjE3UTFmRlZnTFFK?=
 =?utf-8?B?QWFZeHZ3WHhGQTFWL3A4NjJBRUJYdGZQNVpxSDYwNWJtNWFiNnNTSnhZYlNC?=
 =?utf-8?B?OVlmVGdSTjhUUlJqYUJLRHIwMVpFN3lleVo1ZW5wT3ZqZWE2OGc4SytrU0wz?=
 =?utf-8?B?L2hpZVFBWWpJTkFOQ3JlZVlZN05ZSzNqVFp3QzNUWU5hYnZtS3EvUSttREpW?=
 =?utf-8?B?WjNWYzUzTVdXWmJadW1wNjAzUHFRWEw1djQ2QnpVcnYvTHFpbVBGVHBxZFp5?=
 =?utf-8?B?RjBPSXV1Mm15MUFKRy9HYkpKZFBJVnB5TjJMVE9rWTE0TTF3c2FQaWl6bFJT?=
 =?utf-8?B?UGw5aHdPQkx0UjQ2aHVYUT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(7416014)(366016)(376014)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?S2l6dmdnR1FwdGlUUDRWUlRiN2htUy9Ic1VZOXBtUnZrUmN4bHNZZWJXNjVa?=
 =?utf-8?B?dTdsZkVCOUIxR0FoQTk0UGo4cVNSOUdjRi9IQjRkbk9uNmZCVVlpdkFxamQ1?=
 =?utf-8?B?bDZWMjJjUGdidFBoNGRyUXJxMk8weVpFQko2NGxycUFjelJNUk5MTG9LK3Ew?=
 =?utf-8?B?cExpVjVRZUp2VS90NXduWElNMEVzU3lkS09xMndVZ2twanpwMjFMbVBBSkJp?=
 =?utf-8?B?T1lJN2xhLzRKZjgzb2dUMjgraW5tRCszZTFsdVBBd3pOZldBVG4rQ1F2RTho?=
 =?utf-8?B?am5mSnVmVWV3ZjZUdkRtUEFiN3ZTZlgzRDJIWHFWWGxpZU15N1JUVnc5NzBi?=
 =?utf-8?B?S096SHRyS3RYQzVsNDZsUkpwUS9Pb2owUTNod3VjVVZHZHVMVWhyeWZjWU50?=
 =?utf-8?B?aEw2UXRYWW5ES1JNYUlLM3cwN3QvaVc3SXhGblZNN0RVdnFzcmd1Rm5TWnpl?=
 =?utf-8?B?L05YOHNiRk5kc3NvZEFEaThNdnhhQjA1Rld2dWFXb2hYem02WnJicUJTTk56?=
 =?utf-8?B?S3czZ1h1MWhjeFNvTUc5TVk4cWRwSmRVYUlMRktMenJrc1VOVFhxV2JoMFho?=
 =?utf-8?B?aDRxTktjNmNhZW1oTGN4SjJGOGdwNXpBY2lxR2hEaFdLZUwxZTNlV1d2Q3hp?=
 =?utf-8?B?dkNDL3BXbndXYng2T1N4cDg5NWkrOHIxQTFNQXozdnluTUtod1QrSWhyMkVM?=
 =?utf-8?B?ZDdSZVFPd2tEQVdkMm9kYjhUUGZOd0loWUc2YWFXb200R3NMR1QvVExKY294?=
 =?utf-8?B?ektnRzFIcDdUWGtxc1J4UUpBSitERGVjZkFqaHR2bzVyL3gzTnBjSmNMWVkx?=
 =?utf-8?B?cG1GRzVyQnV6R3psZlFqcTVKVnFzSTl5SjhWNVNwWldqTklyaFYwUVFCdUYr?=
 =?utf-8?B?MWppTXY1a2ZOZE04Qko1MG5mWTh0Rld0cS9LMUM3UGFCemk4NS9BSS8zUWVS?=
 =?utf-8?B?NUcyQ0RPVW1zLzI5dkpyNExnSXVCOExuOTlSa1ZDbWs3OGc4c0UzT1Iyd1RQ?=
 =?utf-8?B?cWY3dkt0YXVLVmFpTUYyNm4vOFNJQ2J6MEpjVEYwZkZBcVM1UTRxak5uYldn?=
 =?utf-8?B?czVUKzZBQTc3L3pqa1RZdk1vdytlc2txcWNMMkJwQTBweGRmNXJUUFJTSFBI?=
 =?utf-8?B?YkZOZXc1eUFCaUNVWGVWZ01JOGljMjhvVDZVMUhPRTQxTFc2WTJaUkd6ZHoz?=
 =?utf-8?B?R2V2V3prUnFWYmRTTFRWcXJwQkpXSXBIV1BKTm5VOHZ5UGNYUXgrVmFGVWFO?=
 =?utf-8?B?QVVEWjdad3JiMGJXODdIRHIwRHY2SG9xbGFHcVJKUFNZT0IvUzNuTHI3MnRB?=
 =?utf-8?B?NlNSZmlnOVQ1aFo1SElLUklibmtpdEJMS2xweU5TMEUxYlBBOVVsNjFGUE1R?=
 =?utf-8?B?ZWdFei9KL01CeWR5VlpnNVZGaVZ1VEZoc0wvaWtDb3ZhekRuQisxUkd5Umpj?=
 =?utf-8?B?SG9mK09Qa0FXK3ZZaXhWMjUyMFRjWm5YOWFzTVdwUTU3QkxLL1MwS21jMVJt?=
 =?utf-8?B?SGV0L0dZRVR4MnFBdnQveVNyaVBMLzVPSWhtVmd1ZUJWWmxEMDNxV1B6WkZx?=
 =?utf-8?B?ZmNtQVNUYnlxaUE0ZU5WRzNPS1VISFpoZUdzTC80RDRET2NVZmdVRlErb0Js?=
 =?utf-8?B?WDA1QzR5Zk5BS0tZUlpaUFdta09PdERCRVBSN2dwVEJoM0FGaUs5WFdaSHpw?=
 =?utf-8?B?ZHpXWDE5UzFMcFNOa2poTHdKVG9JZkR4cXBvbTVsS3psVzdsQmlLaHdzOVRS?=
 =?utf-8?B?RmNjK1BpVVl1M0Zibjk5Wkw3eFhJOGp2L05uTFpvbytYdXlxWjg0MmpuY28w?=
 =?utf-8?B?SWc3Q0dnRWJCWkE4UVo4aFZKQis2QzJ6cmJ5cUMrWHFtZWVUNU91ZW5halp0?=
 =?utf-8?B?MlA2SVZJMi9mNXA1MVVvUHZKYTdyZWxUZ3kvSkwxaUw5Q2xVOC9yM3hzd21W?=
 =?utf-8?B?L0NQNXkzbG4weVM1MU51NkJFYStrUDU2TlQ2QmNJczRQeFhYaS93Z00zNThR?=
 =?utf-8?B?U1VHbjJNRENEOURmRHpWKzduTFp0Vkw0Q2JVM2Z6QlZGaUlGOERlY1BHR00v?=
 =?utf-8?B?VW16Tkx6dS81STc5bEpMRFBWaWo1cHZ4ODM2ZzQ3MXZHQ2dCNnN1Ni9WVnBO?=
 =?utf-8?Q?aeTkO1m30lg9S/hpzLw5NmYx8?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: eef947e2-644a-432d-fbe2-08dcb844a276
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Aug 2024 07:26:50.5124
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: xxNskDe7lkS93T3AMWWnchKpIhXUxePE50omqs9o540KikMIj6sahJgPmfN7RCJUCZmwwOmaUwiQ/MmOhmdafA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB8428


On 8/4/24 17:44, Jonathan Cameron wrote:
>>>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>>>> new file mode 100644
>>>> index 000000000000..daf46d41f59c
>>>> --- /dev/null
>>>> +++ b/include/linux/cxl_accel_mem.h
>>>> @@ -0,0 +1,22 @@
>>>> +/* SPDX-License-Identifier: GPL-2.0 */
>>>> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
>>>> +
>>>> +#include <linux/cdev.h>
>>> Don't think this header is needed?
>>>   
>>>> +
>>>> +#ifndef __CXL_ACCEL_MEM_H
>>>> +#define __CXL_ACCEL_MEM_H
>>>> +
>>>> +enum accel_resource{
>>>> +	CXL_ACCEL_RES_DPA,
>>>> +	CXL_ACCEL_RES_RAM,
>>>> +	CXL_ACCEL_RES_PMEM,
>>>> +};
>>>> +
>>>> +typedef struct cxl_dev_state cxl_accel_state;
>>> Please use 'struct cxl_dev_state' directly. There's no good reason to hide the type.
>>
>> That is what I think I was told to do although not explicitly. There
>> were concerns in the RFC about accel drivers too loose for doing things
>> regarding CXL and somehow CXL core should keep control as much as
>> possible.  I was even thought I was being asked to implement auxbus with
>> the CXL part of an accel as an auxiliar device which should be bound to
>> a CXL core driver. Then Jonathan Cameron the only one explicitly giving
>> the possibility of the opaque approach and disadvising the auxbus idea.
> I wasn't thinking a typedef to hide it.
> More making all state accesses that are needed through accessor functions so
> that from the 'internals' become opaque to the accelerator code and
> we can radically change how things are structured internally with
> no impact to the (hopefully large number of) CXL accelerator drivers.
>
> So here, I'd just expect a
> struct cxl_device_state; forwards declaration.
>
> Or potentially one to a a different structure after refactors etc.


OK. It makes sense. I thought the concern was about external driver 
modules using the internal cxl structs.

This is the main point in this second patchset version, so if none else 
says the opposite during the next days, I will take it as the right move 
forward and send a new version 3 soon.

Thank you


>>
>> Maybe I need an explicit action here.
> J

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-DM6-obe.outbound.protection.outlook.com (mail-dm6nam12on2066.outbound.protection.outlook.com [40.107.243.66])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id BF47218DF81;
	Fri,  9 Aug 2024 08:34:44 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.243.66
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723192486; cv=fail; b=jpD27Pd/+VrKUHWEoy+B1dRR9vMJDycv9BQmK3bR3VVhhLqI3KFBn0n3hCWEdLRR9lw215kn5Xv8jROlar2pmgoD/FySO4GPFuLEnYkvO3fGV4S65Rk3ZsDjaf0fLeEnQVQRDjBKtZ2cDoeKsZ9n/EDEU4NQggCp0z3PDSntDAw=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723192486; c=relaxed/simple;
	bh=w15ehbYRkqCPZtTt1fPXYvAdegjYXmhjncSw/mcH58s=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=HKNJpa9IByT9wLmqZohSpdRgPIALW+9pjWfYS5L4Cbp7mbIzylsgVZq5XFR0Q0TSbhCuABeSMOQ0Uv8Ook3ENdskFYWERVhEbhT61XxiKOYKpgdkF2N06pVEcxxwK/WDb835xCud2rS6thmZhUdp3ZZZB5+JEOos2a55dMvdkyU=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=OkL1wKcI; arc=fail smtp.client-ip=40.107.243.66
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="OkL1wKcI"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=I9JA74a0cqUYuLHer7PUcdJPWNvu5deePzn0+il+y8oXXKrKbcB+7cvs48tdagbfDLim8PzQRHELzff4GSK+WLEuKlIeZGfMGbLjldCNgBCwFjysj+7X9QF00tKdiVPLSpcxh5GPmiwoE5xHM0ftYtLk7Ay1y7xuzZJ5Luz6XQDw1HvUC0YxccIAmocS2lEF03kOFlni3qzEd4p3IimbggJgN8v2IeV3A6Nsfo1fFA7SfgHBcBJGfFbuKIU41tyGEQgmefuskNRzxEzqTfedkp6zMe70Wr+uEsK/lbQXYbW+c7zU7XOCq9vmqfdRx5L0KR1jIswrFwdRb7qRGy7xxQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=jhLW3pDq+6bCnzTAz/FTRXVPk6QtK0LH95/HIdEiqko=;
 b=KA9hZvIjnGT5ZsSCsK5tT5FhApLifNpA+Cpo5+f0UoVyMZqeE7jb1wqB/yk9k3nGqQX1VYjp06hDivns17DBa3ydbqiBW2m/j0sqQxewyYrYxj7eDjDThDvMdp4wTF1l7J2EV8yNLDplh+8EJlnqZIDmeM3s4JWR2hKRVhhSW2YdjHxVn8+NBNOu/+f9tpHhgy8At67jN2dLj6wFBLEGlcNTCWIpzb+VP+R747MAsZdp93njsEsmcKFtqep4m7IFl+okyNym+QRk/mHzee/QSciMq/qFWhu9gjKJA6iC9nbdXqrdIIoBZGkwg6OSG9Gc9tIrRViY8wbImub3u6N/ig==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.118.233) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=jhLW3pDq+6bCnzTAz/FTRXVPk6QtK0LH95/HIdEiqko=;
 b=OkL1wKcImPEka+DOEKaOHaZtsCgPtpRzTyEZaQ3IcCkmLKkZ0MWrak+Zo3/avDdBDkjd01sDX1iEYxVwxcB7ZiwH72/ElWtPAmVk9FMtRpuIZ4+vdLV2W/+oPdnUX4LPpCOmLulp1g4fMu19GJXfvN6W0MOnK++NNV+i/z8t6FNW3aOnPBIOZuNpvLIfbgLqM9AWb4JTY3s0tOGCnV51WejRpZX+P/WxUGiKK78Engxttdc7c0RNQEt5vV10FwL4bnIeM7fFnbioRQi27CAF8CoF7r2xNJenc4EytEuo7CI51UQcrTtsRSGrEkUraNOuYueOGxkvXsgPmkf4SCB5Bg==
Received: from SA1PR03CA0010.namprd03.prod.outlook.com (2603:10b6:806:2d3::26)
 by SJ2PR12MB8012.namprd12.prod.outlook.com (2603:10b6:a03:4c7::9) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.17; Fri, 9 Aug
 2024 08:34:41 +0000
Received: from SA2PEPF00003F65.namprd04.prod.outlook.com
 (2603:10b6:806:2d3:cafe::cb) by SA1PR03CA0010.outlook.office365.com
 (2603:10b6:806:2d3::26) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7828.32 via Frontend
 Transport; Fri, 9 Aug 2024 08:34:41 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.118.233)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.118.233 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.118.233; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.118.233) by
 SA2PEPF00003F65.mail.protection.outlook.com (10.167.248.40) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7849.8 via Frontend Transport; Fri, 9 Aug 2024 08:34:40 +0000
Received: from drhqmail202.nvidia.com (10.126.190.181) by mail.nvidia.com
 (10.127.129.6) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 01:34:32 -0700
Received: from drhqmail203.nvidia.com (10.126.190.182) by
 drhqmail202.nvidia.com (10.126.190.181) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1544.4; Fri, 9 Aug 2024 01:34:31 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.126.190.182)
 with Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Fri, 9 Aug
 2024 01:34:29 -0700
Date: Fri, 9 Aug 2024 11:34:28 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <20240809113428.00003f58.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-2-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SA2PEPF00003F65:EE_|SJ2PR12MB8012:EE_
X-MS-Office365-Filtering-Correlation-Id: 3a35c6e3-79c6-435d-4c1d-08dcb84e1cdb
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|36860700013|1800799024|82310400026|376014|7416014;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?dQjAKbxA4oub+6ZOjR8gWw4M1mPBonICiOUhSdP/A5LZjK7Wo008aBpN1J0G?=
 =?us-ascii?Q?wE1nBwDDQrqiUF1+SeBJ4WgvOftUwzDeLcD5xo9a4T+6lrsnoFNplh8QIjla?=
 =?us-ascii?Q?90Q8zsOYWbjlSNNUivKu11xgvCsUm9vrSXrtYaIOwnzBO5efeL54v3xtmoym?=
 =?us-ascii?Q?HtzXWi716cz6Oq7jkip0iyQSUFsBg0gi80sWsODugO0BBhLYr3uYtnLsva/+?=
 =?us-ascii?Q?yEgN3cTtId5fqZIGcMxILUUl3XkWAm3j+EKvQ8CRdA0f/CReqJuNNDFzni19?=
 =?us-ascii?Q?C7USCztsCQArJv37uccSlsHbt1/p5lqlBwZPaESDeeq9aGy1ihjXCU7ShyDM?=
 =?us-ascii?Q?7/qFGCQWq+hKUNmPKUtcyUfCNEnDyhm12/OBxMqTTKdTXuSMSCeYqR38appT?=
 =?us-ascii?Q?l/BiiYJPPNrPcBZZOEcAX6yyvb34o2gJaL4m+Xpgg29FOpmc2bVdY3qPQHz8?=
 =?us-ascii?Q?QaAxxv9oMczlqe+d8VPVEoMTgciaPV5aJwg19ChM6cZMk1bGUJHso2nPQ60I?=
 =?us-ascii?Q?KuiyoxWggjpFM8okZ1kQWyIpGXXZhDf9AkodgEbrd9ZXxovU4y8ezT0o42KC?=
 =?us-ascii?Q?xgsxvx7NtgbmaZlDukXc9mer3s8BPSDijxEAni8AzPSDVK76FvMz2cX3imoB?=
 =?us-ascii?Q?9j3sacslBHY2zG+kCcH7awOJ2po1231cC1urqX19p3OLMjZDYYYoWXJTSVZA?=
 =?us-ascii?Q?SVr1Rl0kT8IsLuoApFYK1fCrXt0vup0KNs2HeXE3VQCFZ2XeBQPi/R0rm1GD?=
 =?us-ascii?Q?SMAisZMMQZLLIs7D/HDjWAd8xwaRdGXhnezwGb8HHCBnXT6QpCMG3Oi+bCgS?=
 =?us-ascii?Q?M/DohgusWCLsycfDBSzyqoDOqEbS6992YPdSibHHuMHza/8wpDj3zWOFoi/Z?=
 =?us-ascii?Q?NZlFCIeMEpFIXjbE/dK2b8yLQajT0yigVAlsfen6K4OYzCtm22tbNuqT8pvN?=
 =?us-ascii?Q?yXYwkKNuyUmIr8sB3cwLX0uNfaHOLhqU5cvxwVJH1W8+TFtQi3XAPgTwbuTR?=
 =?us-ascii?Q?x70ut7WYDtyKecZdEjg9eY6NdN0i0K6gbzeAWfzX9hSan4t1GwVpvCjShbov?=
 =?us-ascii?Q?dIg8IYlBL0hwFXE7PdVHBmhZYTyeX4r665vhI4ElxeuBA1IM/qTG/qdAgG9k?=
 =?us-ascii?Q?bYLVxpEZaSmHfOl2JSK8vs/SGLblCV0whGsNgjmQI/oMK60WqFZu9Gt2TnUF?=
 =?us-ascii?Q?dd0xXczhda31MRObBZEsedyZp9LQ474/bcL4NuJAs4kT2huo6VfQkpu3grub?=
 =?us-ascii?Q?QHhDQBTv8Us73+gP0tGCYdBld9NOTkoSj39bsHAaHKO7b9lIOcQ0dWxcKzbW?=
 =?us-ascii?Q?UWWHXKuUlyVjKo/yq1NRq0SmiZxnv/eBWtEvfVUKEL/BSrakPzoVrTSbsubo?=
 =?us-ascii?Q?xlJAKS7+hIgXWkE19lDToWs/FI8ECWEJQnz5TFfDof9TA44KZ1eDf+AVRv/r?=
 =?us-ascii?Q?xlNCf7uBLEp7GbRSLvZm8WLvSXmlL6o3?=
X-Forefront-Antispam-Report: 
	CIP:216.228.118.233;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc7edge2.nvidia.com;CAT:NONE;SFS:(13230040)(36860700013)(1800799024)(82310400026)(376014)(7416014);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Aug 2024 08:34:40.9611
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 3a35c6e3-79c6-435d-4c1d-08dcb84e1cdb
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.118.233];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	SA2PEPF00003F65.namprd04.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SJ2PR12MB8012

On Mon, 15 Jul 2024 18:28:21 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Differientiate Type3, aka memory expanders, from Type2, aka device
> accelerators, with a new function for initializing cxl_dev_state.
> 
> Create opaque struct to be used by accelerators relying on new access
> functions in following patches.
> 
> Add SFC ethernet network driver as the client.
> 
> Based on
> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/memdev.c             | 52 ++++++++++++++++++++++++++
>  drivers/net/ethernet/sfc/Makefile     |  2 +-
>  drivers/net/ethernet/sfc/efx.c        |  4 ++
>  drivers/net/ethernet/sfc/efx_cxl.c    | 53
> +++++++++++++++++++++++++++ drivers/net/ethernet/sfc/efx_cxl.h    |
> 29 +++++++++++++++ drivers/net/ethernet/sfc/net_driver.h |  4 ++
>  include/linux/cxl_accel_mem.h         | 22 +++++++++++
>  include/linux/cxl_accel_pci.h         | 23 ++++++++++++
>  8 files changed, 188 insertions(+), 1 deletion(-)
>  create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
>  create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
>  create mode 100644 include/linux/cxl_accel_mem.h
>  create mode 100644 include/linux/cxl_accel_pci.h
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 0277726afd04..61b5d35b49e7 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -8,6 +8,7 @@
>  #include <linux/idr.h>
>  #include <linux/pci.h>
>  #include <cxlmem.h>
> +#include <linux/cxl_accel_mem.h>

Let's keep the header inclusion in an alphabetical order. The same in
efx_cxl.c

>  #include "trace.h"
>  #include "core.h"
>  
> @@ -615,6 +616,25 @@ static void detach_memdev(struct work_struct
> *work) 
>  static struct lock_class_key cxl_memdev_key;
>  
> +struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
> +{
> +	struct cxl_dev_state *cxlds;
> +
> +	cxlds = devm_kzalloc(dev, sizeof(*cxlds), GFP_KERNEL);
> +	if (!cxlds)
> +		return ERR_PTR(-ENOMEM);
> +
> +	cxlds->dev = dev;
> +	cxlds->type = CXL_DEVTYPE_DEVMEM;
> +
> +	cxlds->dpa_res = DEFINE_RES_MEM_NAMED(0, 0, "dpa");
> +	cxlds->ram_res = DEFINE_RES_MEM_NAMED(0, 0, "ram");
> +	cxlds->pmem_res = DEFINE_RES_MEM_NAMED(0, 0, "pmem");
> +
> +	return cxlds;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
> +
>  static struct cxl_memdev *cxl_memdev_alloc(struct cxl_dev_state
> *cxlds, const struct file_operations *fops)
>  {
> @@ -692,6 +712,38 @@ static int cxl_memdev_open(struct inode *inode,
> struct file *file) return 0;
>  }
> 
> +
> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
> +{
> +	cxlds->cxl_dvsec = dvsec;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_dvsec, CXL);
> +
> +void cxl_accel_set_serial(struct cxl_dev_state *cxlds, u64 serial)
> +{
> +	cxlds->serial= serial;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_serial, CXL);
> +

It would be nice to explain about how the cxl core is using these in
the patch comments, as we just saw the stuff got promoted into the core.

> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct
> resource res,
> +			    enum accel_resource type)
> +{
> +	switch (type) {
> +	case CXL_ACCEL_RES_DPA:
> +		cxlds->dpa_res = res;
> +		return;
> +	case CXL_ACCEL_RES_RAM:
> +		cxlds->ram_res = res;
> +		return;
> +	case CXL_ACCEL_RES_PMEM:
> +		cxlds->pmem_res = res;
> +		return;
> +	default:
> +		dev_err(cxlds->dev, "unkown resource type (%u)\n",
> type);
> +	}
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
> +

I wonder in which situation this error can be triggered.
One can be a newer out-of-tree type-2 driver tries to work on an older
kernel. Other situations should be the coding problem of an in-tree
driver.

I prefer to WARN_ONCE() here.

>  static int cxl_memdev_release_file(struct inode *inode, struct file
> *file) {
>  	struct cxl_memdev *cxlmd =
> diff --git a/drivers/net/ethernet/sfc/Makefile
> b/drivers/net/ethernet/sfc/Makefile index 8f446b9bd5ee..e80c713c3b0c
> 100644 --- a/drivers/net/ethernet/sfc/Makefile
> +++ b/drivers/net/ethernet/sfc/Makefile
> @@ -7,7 +7,7 @@ sfc-y			+= efx.o efx_common.o
> efx_channels.o nic.o \ mcdi_functions.o mcdi_filters.o mcdi_mon.o \
>  			   ef100.o ef100_nic.o ef100_netdev.o \
>  			   ef100_ethtool.o ef100_rx.o ef100_tx.o \
> -			   efx_devlink.o
> +			   efx_devlink.o efx_cxl.o
>  sfc-$(CONFIG_SFC_MTD)	+= mtd.o
>  sfc-$(CONFIG_SFC_SRIOV)	+= sriov.o ef10_sriov.o ef100_sriov.o
> ef100_rep.o \ mae.o tc.o tc_bindings.o tc_counters.o \
> diff --git a/drivers/net/ethernet/sfc/efx.c
> b/drivers/net/ethernet/sfc/efx.c index e9d9de8e648a..cb3f74d30852
> 100644 --- a/drivers/net/ethernet/sfc/efx.c
> +++ b/drivers/net/ethernet/sfc/efx.c
> @@ -33,6 +33,7 @@
>  #include "selftest.h"
>  #include "sriov.h"
>  #include "efx_devlink.h"
> +#include "efx_cxl.h"
>  
>  #include "mcdi_port_common.h"
>  #include "mcdi_pcol.h"
> @@ -899,6 +900,7 @@ static void efx_pci_remove(struct pci_dev
> *pci_dev) efx_pci_remove_main(efx);
>  
>  	efx_fini_io(efx);
> +
>  	pci_dbg(efx->pci_dev, "shutdown successful\n");
>  
>  	efx_fini_devlink_and_unlock(efx);
> @@ -1109,6 +1111,8 @@ static int efx_pci_probe(struct pci_dev
> *pci_dev, if (rc)
>  		goto fail2;
>  
> +	efx_cxl_init(efx);
> +
>  	rc = efx_pci_probe_post_io(efx);
>  	if (rc) {
>  		/* On failure, retry once immediately.
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c
> b/drivers/net/ethernet/sfc/efx_cxl.c new file mode 100644
> index 000000000000..4554dd7cca76
> --- /dev/null
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -0,0 +1,53 @@
> +// SPDX-License-Identifier: GPL-2.0-only
> +/****************************************************************************
> + * Driver for AMD network controllers and boards
> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
> + *
> + * This program is free software; you can redistribute it and/or
> modify it
> + * under the terms of the GNU General Public License version 2 as
> published
> + * by the Free Software Foundation, incorporated herein by reference.
> + */
> +
> +
> +#include <linux/pci.h>
> +#include <linux/cxl_accel_mem.h>
> +#include <linux/cxl_accel_pci.h>
> +

Let's keep them in alphabetical order. :)

> +#include "net_driver.h"
> +#include "efx_cxl.h"
> +
> +#define EFX_CTPIO_BUFFER_SIZE	(1024*1024*256)
> +
> +void efx_cxl_init(struct efx_nic *efx)
> +{
> +	struct pci_dev *pci_dev = efx->pci_dev;
> +	struct efx_cxl *cxl = efx->cxl;
> +	struct resource res;
> +	u16 dvsec;
> +
> +	dvsec = pci_find_dvsec_capability(pci_dev, PCI_VENDOR_ID_CXL,
> +					  CXL_DVSEC_PCIE_DEVICE);
> +
> +	if (!dvsec)
> +		return;
> +
> +	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability
> found"); +
> +	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
> +	if (IS_ERR(cxl->cxlds)) {
> +		pci_info(pci_dev, "CXL accel device state failed");
> +		return;
> +	}
> +
> +	cxl_accel_set_dvsec(cxl->cxlds, dvsec);
> +	cxl_accel_set_serial(cxl->cxlds, pci_dev->dev.id);
> +
> +	res = DEFINE_RES_MEM(0, EFX_CTPIO_BUFFER_SIZE);
> +	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_DPA);
> +
> +	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
> +	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
> +}
> +
> +
> +MODULE_IMPORT_NS(CXL);
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.h
> b/drivers/net/ethernet/sfc/efx_cxl.h new file mode 100644
> index 000000000000..76c6794c20d8
> --- /dev/null
> +++ b/drivers/net/ethernet/sfc/efx_cxl.h
> @@ -0,0 +1,29 @@
> +// SPDX-License-Identifier: GPL-2.0-only
> +/****************************************************************************
> + * Driver for AMD network controllers and boards
> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
> + *
> + * This program is free software; you can redistribute it and/or
> modify it
> + * under the terms of the GNU General Public License version 2 as
> published
> + * by the Free Software Foundation, incorporated herein by reference.
> + */
> +
> +#ifndef EFX_CXL_H
> +#define EFX_CLX_H
> +
> +#include <linux/cxl_accel_mem.h>
> +
> +struct efx_nic;
> +
> +struct efx_cxl {
> +	cxl_accel_state *cxlds;
> +	struct cxl_memdev *cxlmd;
> +	struct cxl_root_decoder *cxlrd;
> +	struct cxl_port *endpoint;
> +	struct cxl_endpoint_decoder *cxled;
> +	struct cxl_region *efx_region;
> +	void __iomem *ctpio_cxl;
> +};
> +
> +void efx_cxl_init(struct efx_nic *efx);
> +#endif
> diff --git a/drivers/net/ethernet/sfc/net_driver.h
> b/drivers/net/ethernet/sfc/net_driver.h index
> f2dd7feb0e0c..58b7517afea4 100644 ---
> a/drivers/net/ethernet/sfc/net_driver.h +++
> b/drivers/net/ethernet/sfc/net_driver.h @@ -814,6 +814,8 @@ enum
> efx_xdp_tx_queues_mode { 
>  struct efx_mae;
>  
> +struct efx_cxl;
> +
>  /**
>   * struct efx_nic - an Efx NIC
>   * @name: Device name (net device name or bus id before net device
> registered) @@ -962,6 +964,7 @@ struct efx_mae;
>   * @tc: state for TC offload (EF100).
>   * @devlink: reference to devlink structure owned by this device
>   * @dl_port: devlink port associated with the PF
> + * @cxl: details of related cxl objects
>   * @mem_bar: The BAR that is mapped into membase.
>   * @reg_base: Offset from the start of the bar to the function
> control window.
>   * @monitor_work: Hardware monitor workitem
> @@ -1148,6 +1151,7 @@ struct efx_nic {
>  
>  	struct devlink *devlink;
>  	struct devlink_port *dl_port;
> +	struct efx_cxl *cxl;
>  	unsigned int mem_bar;
>  	u32 reg_base;
>  
> diff --git a/include/linux/cxl_accel_mem.h
> b/include/linux/cxl_accel_mem.h new file mode 100644
> index 000000000000..daf46d41f59c
> --- /dev/null
> +++ b/include/linux/cxl_accel_mem.h
> @@ -0,0 +1,22 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> +
> +#include <linux/cdev.h>
> +
> +#ifndef __CXL_ACCEL_MEM_H
> +#define __CXL_ACCEL_MEM_H
> +
> +enum accel_resource{
> +	CXL_ACCEL_RES_DPA,
> +	CXL_ACCEL_RES_RAM,
> +	CXL_ACCEL_RES_PMEM,
> +};
> +
> +typedef struct cxl_dev_state cxl_accel_state;

The case of using typedef in kernel coding is very rare (quite many
of them are still there due to history reason, you can also spot that
there is only one typedef in driver/cxl). Be sure to double check the
coding style bible [1] when deciding to use one. :)

[1] https://www.kernel.org/doc/html/v4.14/process/coding-style.html

> +cxl_accel_state *cxl_accel_state_create(struct device *dev);
> +
> +void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
> +void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct
> resource res,
> +			    enum accel_resource);
> +#endif
> diff --git a/include/linux/cxl_accel_pci.h
> b/include/linux/cxl_accel_pci.h new file mode 100644
> index 000000000000..c337ae8797e6
> --- /dev/null
> +++ b/include/linux/cxl_accel_pci.h
> @@ -0,0 +1,23 @@
> +/* SPDX-License-Identifier: GPL-2.0 */
> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> +
> +#ifndef __CXL_ACCEL_PCI_H
> +#define __CXL_ACCEL_PCI_H
> +
> +/* CXL 2.0 8.1.3: PCIe DVSEC for CXL Device */
> +#define CXL_DVSEC_PCIE_DEVICE
> 0 +#define   CXL_DVSEC_CAP_OFFSET		0xA
> +#define     CXL_DVSEC_MEM_CAPABLE	BIT(2)
> +#define     CXL_DVSEC_HDM_COUNT_MASK	GENMASK(5, 4)
> +#define   CXL_DVSEC_CTRL_OFFSET		0xC
> +#define     CXL_DVSEC_MEM_ENABLE	BIT(2)
> +#define   CXL_DVSEC_RANGE_SIZE_HIGH(i)	(0x18 + (i * 0x10))
> +#define   CXL_DVSEC_RANGE_SIZE_LOW(i)	(0x1C + (i * 0x10))
> +#define     CXL_DVSEC_MEM_INFO_VALID	BIT(0)
> +#define     CXL_DVSEC_MEM_ACTIVE	BIT(1)
> +#define     CXL_DVSEC_MEM_SIZE_LOW_MASK	GENMASK(31, 28)
> +#define   CXL_DVSEC_RANGE_BASE_HIGH(i)	(0x20 + (i * 0x10))
> +#define   CXL_DVSEC_RANGE_BASE_LOW(i)	(0x24 + (i * 0x10))
> +#define     CXL_DVSEC_MEM_BASE_LOW_MASK	GENMASK(31, 28)
> +
> +#endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-CO1-obe.outbound.protection.outlook.com (mail-co1nam11on2066.outbound.protection.outlook.com [40.107.220.66])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 1A1CCC8D1;
	Fri,  9 Aug 2024 09:01:49 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.220.66
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723194112; cv=fail; b=R6ASNDkE23ZyB6pUcsLmrbtOLxsaTUufBa2LEjfenOujJCdofvaDUsmx/BoP8XaAvg8e//QUYYCEQz5gIYUvjVruxMCtRY12rfQxS0FZAxwCMKXnNhZqaGSddBElfhvbh+PRaKqgirgv0+wUPRwOShyCeJIjfL+DFSbCOxzw41Q=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723194112; c=relaxed/simple;
	bh=Q1atb1MUgpRZ76xqryJrDdGOjmw+wd2hFCfYJUDKnLI=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=JAoo1L6o/rCIQOdUdTtPK+1Zj6qOwhKLmn38ZS3hjRVHtTAAx/C/9xdGI6Zh46o8RyR5GPEWytHKX28rfeesgwHfrCnsLcNnEqxZHLSgAY4+IbedQh4gGry7EqZ2kX8YF9r7ULvyDyr9NQzu8k3uw06jyed2fKtWA47BEO9elNk=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=GxeEoRf/; arc=fail smtp.client-ip=40.107.220.66
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="GxeEoRf/"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Hw/2NiGeEn7XjEu5Zf2x/WycdnQQcDTkR9gsLABBMskLioCTjjOaC6eNed+B/NZqpjmuSFz2qbjOfaHYwDLcltQwcFM8+FYPxQp/UuXpofm0QYaux6+bmUKPVf18a0Td5F17B4nKy4IwyIR6QrVw8oIRxvK8pk8WAJfpfscx5Ngv6PLy2/4ar+B8tKDeGxXCUzl5H8dY5XPiYc6gYqGy0hgfLZ1DtD2AL28q2CG6PLnFZtTg2oKIi5k+e41VaDTUjKfXwObEDSn35/J81xpI91v2decy33x1TeboXzurA+L9oWxkycTd7S2zxVQKh8iDgiS98DNFiXz1jscVTpwFcw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=gaAgOLY4Cu2/FNQ6lSTBBG3PSilSAKvFVTk2s466QzI=;
 b=wsv5cN/kmyO5PSUO+GwgWTVzcCY7vdirqeQQTkjOVp6ZcDeRxotW4J3tf4WEA1vrlYQNpQHmI7TJZkg176U3HkMmYPSQLhNMOtc25FQ6pcDmU4iPURXNAgWqQUv0dR16Ev+bhplKGY36gwSvBCpjskq0LSmwDPxFDLeBuGEJOHzZYy8zFh5YL2f1GgSVIkK5tY/JwIy2n0VXZkBhmjTdb4AbcJlTZKlquMLOMTI/335ICAO2dDOtOqpLR7B32Shm0FtbFUI3YFOPhvX0Iyv5h474KyI51Nl82prDGFo8Le5fh0EMPyhjhW69wrDFDdM5T8reTc8fUGPfnI5TxfL39A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.117.161) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=gaAgOLY4Cu2/FNQ6lSTBBG3PSilSAKvFVTk2s466QzI=;
 b=GxeEoRf/IPpFR+lYLF92e5IsMmtXlvUV03GMxt2iW/JQen9drcr+fXTanBv8atg2klJeXa7peNdhRRbmKW3xUhRTqzNarwIP53d/hUtYLDjzJNC7UuIlT7OpBaAYo4g+54gZ6sNrKY4MQYmHK0r3cTrCfoUf61xXqeUT7wzoqiCfznQoj0YS80whBy+NQA9FdntFrE8MPQ24GbtZricTrPNUulkqPxv6LMEVmlj5QILCDqZ2MgoWP4Qt1KwDf4Z0U2wNLqxxt0bc2nd66ayq+sYId3lyQ+Vft1a/iuW0I5OSx+RhpZAGifMDSQF82QQgSwtyMEApqHWWA7dizefriQ==
Received: from BN9PR03CA0628.namprd03.prod.outlook.com (2603:10b6:408:106::33)
 by PH7PR12MB6857.namprd12.prod.outlook.com (2603:10b6:510:1af::20) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7828.23; Fri, 9 Aug
 2024 09:01:47 +0000
Received: from BL6PEPF0001AB78.namprd02.prod.outlook.com
 (2603:10b6:408:106:cafe::ac) by BN9PR03CA0628.outlook.office365.com
 (2603:10b6:408:106::33) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7828.32 via Frontend
 Transport; Fri, 9 Aug 2024 09:01:47 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.117.161)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.117.161 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.117.161; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.117.161) by
 BL6PEPF0001AB78.mail.protection.outlook.com (10.167.242.171) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7849.8 via Frontend Transport; Fri, 9 Aug 2024 09:01:46 +0000
Received: from rnnvmail205.nvidia.com (10.129.68.10) by mail.nvidia.com
 (10.129.200.67) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 02:01:29 -0700
Received: from rnnvmail202.nvidia.com (10.129.68.7) by rnnvmail205.nvidia.com
 (10.129.68.10) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 02:01:28 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.129.68.7) with
 Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Fri, 9 Aug 2024
 02:01:25 -0700
Date: Fri, 9 Aug 2024 12:01:25 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>
Subject: Re: [PATCH v2 03/15] cxl: add function for type2 resource request
Message-ID: <20240809120125.000019af.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-4-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-4-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: BL6PEPF0001AB78:EE_|PH7PR12MB6857:EE_
X-MS-Office365-Filtering-Correlation-Id: 790ab876-b6ba-4128-fe1b-08dcb851e5e7
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|82310400026|36860700013|7416014|376014|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?Z643ar++OQHWcm8qh5sumEBWTXgFryiPbHtkiddL+55NyTNldh3KIF8FmHTG?=
 =?us-ascii?Q?5wzDjpG2YQ1ESkMTSHQU3N0ep3I/jwEBnYkswH/t2QUiBMYsFGUGlfRUaGPw?=
 =?us-ascii?Q?h1mNMJR51tDQtBYMrksUijkdTLPEEw/EIBTC3Tmb5MztF5AE0ItmT4PEmNO8?=
 =?us-ascii?Q?ll1NR8NtgNpdkrVHByBNjqN9n3vAO6vQEmcJPJdYocdjgxyhLRrj2FKDkz2B?=
 =?us-ascii?Q?tz8dg4mRGzRCHWvgm0zj+AsNVxU1crM/kXXA6a1vd3R2Vs5IjMBjCbGCdzQS?=
 =?us-ascii?Q?Elqik9lXsRFgHCy6c5PjxCfzx+Pz9fm4NvP8SSfVxv3PScdXcZNR/HTojqV2?=
 =?us-ascii?Q?L71IpexPnpqQRtjXNDcO6SA5s2epId1k/clWJBINqkOlN0EvcOp+8l8dk60r?=
 =?us-ascii?Q?qVjw4SSbWHgwBrGTFiIHD8HryVL4Uhh2KbjARq7FgJb11o4PgVAGbpJ/Z7s3?=
 =?us-ascii?Q?Yr6H9q5BgrPnhJkxGCFfzygCm9CyOJBGT0PvY908K+RMxUhLyublps933Hp3?=
 =?us-ascii?Q?nOC2rL+uytPyu5yiHdVxfLalMrUyGsiSvnLny2SNqKzQAMiXgoihMjHuMs1e?=
 =?us-ascii?Q?Bn7fOeXMDjZHNdSQ98iekh6puWstCjl3Q3qcTbTofffAbnTmw0Ivvlk22mBc?=
 =?us-ascii?Q?hZqURU1HWyjPxRLlA+LhF+rLP4QKwcT/mmh/5a9062r0vmgPnN7UJ/7d4Zre?=
 =?us-ascii?Q?V5DGo8V5KGbimxX/ixiXPiyO+BwgREmwM4spgDt+DFN2AqPZRUD/d/1St+tq?=
 =?us-ascii?Q?PDN8bA5863p3OOXdRsUXtcBgdkVhadUz1o2CcI5NjjRAu0fGMD7jZLF6KVdn?=
 =?us-ascii?Q?piQqeqtgdoiRH0Wfj2YYRsu2raWXQoQs+x0P/xkjFFUir3++ZkSQx9eJ0Aa0?=
 =?us-ascii?Q?V8d/gaS5ZjGO+aLlxKkaN93fY8f46o1iAapF+1iJbWVMg4HnCWJ4q4QrYoU0?=
 =?us-ascii?Q?a1gGFtJjxz6qnh0xb6+Fx/79gBlpc8AWEWQC7f245uYcRMe61pL/hAqTlQnv?=
 =?us-ascii?Q?VR/78A2SRdsr9Uj1hT3m97ZPj+NbHv8H7ytzyN8YAWKc/+U6pV/FRHnBtUHw?=
 =?us-ascii?Q?k1r5D8lo9CODl8VWJM7/NAD1ASp8/Hzt+Pw2LLEhNQG5eezA07UKwGgDyAnl?=
 =?us-ascii?Q?XvirQLME6vPVcDYzOAP8e6nwNqOypupD37m+WiYcm7ulT2cF8exvcvt/u7pq?=
 =?us-ascii?Q?dEQOba8IK04y/KGVW/X1EWZh9hcoJrJDd8V97izXoXe52pqk7AaAtVa3bR0c?=
 =?us-ascii?Q?IQ1U7OELCrV+FoaMxU2kw3WXEOZYx0Uts3pHIovd9+M601XrzXS9Zz3Ht3s3?=
 =?us-ascii?Q?KnFLdy79Bs52PPj0/29X7DeHVnd5/aitdwCBwS+LLYyc+YsI5Q5XnQmsBuOH?=
 =?us-ascii?Q?X5e8MaIX6zgaAWQVX0m8Gm3OCmT/MioVT3P60Hr/FR+Ofxo4swb+MaNTUTzc?=
 =?us-ascii?Q?Zk8htpqX+Uk1PiiaxNny+tIGOwEWsXWg?=
X-Forefront-Antispam-Report: 
	CIP:216.228.117.161;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc6edge2.nvidia.com;CAT:NONE;SFS:(13230040)(82310400026)(36860700013)(7416014)(376014)(1800799024);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Aug 2024 09:01:46.6628
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 790ab876-b6ba-4128-fe1b-08dcb851e5e7
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.117.161];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	BL6PEPF0001AB78.namprd02.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB6857

On Mon, 15 Jul 2024 18:28:23 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Create a new function for a type2 device requesting a resource
> passing the opaque struct to work with.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/memdev.c          | 13 +++++++++++++
>  drivers/net/ethernet/sfc/efx_cxl.c |  7 ++++++-
>  include/linux/cxl_accel_mem.h      |  1 +
>  3 files changed, 20 insertions(+), 1 deletion(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 61b5d35b49e7..04c3a0f8bc2e 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -744,6 +744,19 @@ void cxl_accel_set_resource(struct cxl_dev_state
> *cxlds, struct resource res, }
>  EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
>  
> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool
> is_ram) +{
> +	int rc;
> +

In PATCH 1, you got the resource type enumeration. Let's use them here
instead of a bool. 

> +	if (is_ram)
> +		rc = request_resource(&cxlds->dpa_res,
> &cxlds->ram_res);
> +	else
> +		rc = request_resource(&cxlds->dpa_res,
> &cxlds->pmem_res); +
> +	return rc;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
> +
>  static int cxl_memdev_release_file(struct inode *inode, struct file
> *file) {
>  	struct cxl_memdev *cxlmd =
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c
> b/drivers/net/ethernet/sfc/efx_cxl.c index 10c4fb915278..9cefcaf3caca
> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -48,8 +48,13 @@ void efx_cxl_init(struct efx_nic *efx)
>  	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>  	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>  
> -	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds)) {
>  		pci_info(pci_dev, "CXL accel setup regs failed");
> +		return;
> +	}
> +
> +	if (cxl_accel_request_resource(cxl->cxlds, true))
> +		pci_info(pci_dev, "CXL accel resource request
> failed"); }
>  
> 

The guidelines of error reporting from a driver is mostly considered
from the user perspective. If it is an error, shout, let the user know
what happened. Otherwise, we usually don't disturb the user other than
telling them we are loaded and everything works fine.

Please use pci_err() instead. So the user can spot it from a
message folder filtered by error level in a kernel dmesg logger.

> diff --git a/include/linux/cxl_accel_mem.h
> b/include/linux/cxl_accel_mem.h index ca7af4a9cefc..c7b254edc096
> 100644 --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -20,4 +20,5 @@ void cxl_accel_set_serial(cxl_accel_state *cxlds,
> u64 serial); void cxl_accel_set_resource(struct cxl_dev_state *cxlds,
> struct resource res, enum accel_resource);
>  int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct
> cxl_dev_state *cxlds); +int cxl_accel_request_resource(struct
> cxl_dev_state *cxlds, bool is_ram); #endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM02-BN1-obe.outbound.protection.outlook.com (mail-bn1nam02on2066.outbound.protection.outlook.com [40.107.212.66])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 22072191489;
	Fri,  9 Aug 2024 09:10:53 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.212.66
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723194656; cv=fail; b=XIw+1thxajyp1tE552nTi+AFZBjLwihwomjJlgcBZH6jtS8Ti63Og/FNMr04IX+YRSdYD1LpuHH5l2LbUYC4WqeNhoPPHpFiMVE7VfBT1uIuO/WbrkytDawQNvPC27WarWXyYldEdtu4bqgbRzIVmCKXCqWwDOIIAikS0yQf94E=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723194656; c=relaxed/simple;
	bh=Kirox3+jd0N3JtElKBijsryC1TcjVagUsF8JV8XEyCU=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=hFL2wk7ThPukzd6DqJYqYzGeW9JEb+nzhorsCvxQ2PABGpBj19Nv69pYDDSf4Hvh/n+PyJCSS/S+gevGGZiF+RxLO7RvPvQKkamxBz+eMR9i2nbz1vxkbF/5Eqh9mv9e/08DoJvgE/6vDMEtlQSkPGQpuA3g0AzJJo7CQ/dIaNQ=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=WhDg88kz; arc=fail smtp.client-ip=40.107.212.66
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="WhDg88kz"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=TVtb3Q4TQpmK0W992vNCzqn8JdZKrHVKe0k0TTEd7X7kxXLlUuZv9BLxCUt8zkbuq55hx7wfupYl0mASRUc7MVrRt94OPxFhiWw4dvYB/peIu/3dV0VPqaoX0O0Vt5UqnNsPxzp1f1fQG43w4krihS38HjUjfFZFkroY5gZOuITbI8ny/YKUkA0nRidCF86KAI8O1+OaAKznV3XJ6OslRnm8000vRb6N5l1rtQS9trSU9J3ZasTxFD1Cp/9+NlkcqpUsnE0QsM8VnUz/PvMBCSbrUaIIGzdnMOQK3VY9RSkPrOoPzEcZZfQSpyT2dymSqmb4gd5ib7qH/43D2crT9g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=iRhGZ+TpW8TbFhzXW9D7dGp4Oa5VbaQ222Pi+lI62xs=;
 b=SmMJLA4QcERwHGLkT8l7AkOGGqpK5chh07XeEPTsaTrOmmEPZtiz385TnoZ8ZnzpfHb19C8jUDwP56C3tYs2m87NwuPpAO0tMWNzA2f17dSrDcRABkmpjjzvte7qzHF5EbPY/0q4A6zhAr6pnVFdnGed1dMfVVsSnknw1SuLVH3htVMCe/w7awUUtJghucK7jGQF3FD4lUaoZWlHUByLCizKdKCpBAvU1Z43X1TCD2zV8iaDi9UA+NuKW2fJWEbabd7uOI6nxJNpl6IXNykKA6+xY1RYqBDW3qgiJZjRj67GANzEYswkn//GiZNmWwV+PLNlYylqrCySMcELWSRw9w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.117.160) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=iRhGZ+TpW8TbFhzXW9D7dGp4Oa5VbaQ222Pi+lI62xs=;
 b=WhDg88kzvdgg9+eHuQnaMkP1tAkhmAwtiZUm3LvNNhbminy0UC/4ZbZKJOJWHdQJeFXA7bLRhS7d2Ph1bc8gsmeHPm9VNNXFSMQe44AGBnR6sMk1JwgYhCsEUv9veZQhZS1EbJMtRhH/67Ms9bxaXj8fODlvCrT8GUj1+Le0VPcJpsWXCAdiYbNq2gqveJao/tJo0qTy1AHkcs7HLN0j0cnvdKOUCD5vUOZOXsodIvhoZh44ZN7h0VpwuXjQCQqtGcgLGk22LM6uRSQLbfp8CiS9AdVgQAZIyF/rya/7XWFRQTaKjdlqOJwsLYnhZO0ziziVsVUlBe4MDxwIJTbRcg==
Received: from CH0PR03CA0066.namprd03.prod.outlook.com (2603:10b6:610:cc::11)
 by CY8PR12MB7706.namprd12.prod.outlook.com (2603:10b6:930:85::18) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.14; Fri, 9 Aug
 2024 09:10:50 +0000
Received: from CH1PEPF0000AD7B.namprd04.prod.outlook.com
 (2603:10b6:610:cc:cafe::65) by CH0PR03CA0066.outlook.office365.com
 (2603:10b6:610:cc::11) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7828.31 via Frontend
 Transport; Fri, 9 Aug 2024 09:10:50 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.117.160)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.117.160 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.117.160; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.117.160) by
 CH1PEPF0000AD7B.mail.protection.outlook.com (10.167.244.58) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7849.8 via Frontend Transport; Fri, 9 Aug 2024 09:10:50 +0000
Received: from rnnvmail204.nvidia.com (10.129.68.6) by mail.nvidia.com
 (10.129.200.66) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 02:10:40 -0700
Received: from rnnvmail205.nvidia.com (10.129.68.10) by rnnvmail204.nvidia.com
 (10.129.68.6) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 02:10:39 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.129.68.10) with
 Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Fri, 9 Aug 2024
 02:10:36 -0700
Date: Fri, 9 Aug 2024 12:10:36 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Message-ID: <20240809121036.000057f0.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-5-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CH1PEPF0000AD7B:EE_|CY8PR12MB7706:EE_
X-MS-Office365-Filtering-Correlation-Id: f8a37edc-ac02-4a99-20b9-08dcb8532a26
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|36860700013|376014|82310400026|7416014|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?AqWLmVc+Wjh2beMOxtRT1Dvm+GeTUJdgIup8sKVaDEFQazvwlcu9MrZhdKb1?=
 =?us-ascii?Q?vrFs7lvZpLEXjBHxGMj82sUFV8VHp+7LmR4sQ3SrrQsrpC6B5GvhrSr5N+J3?=
 =?us-ascii?Q?z3KFJlEZjws0quTh5z8dgICqz57bQldkWlZogrcnKJ2n2BXqTNYy923oZn6j?=
 =?us-ascii?Q?Z6VK8+ViLbICQfM4yC5Xl2ivQ+jSnvrkZ0GfVdPaLnkA9qg0rHlKCRioUGCJ?=
 =?us-ascii?Q?C82k/ydXEnx/znJ5EMIqw6irfhFvmaXDh6779ke5TdHAoYwhPg8LWe8bzojR?=
 =?us-ascii?Q?1VgajlvmEwNUv8YKc0KcpVVecaETMMCT0g18j2a/jKK/DNVTBlkSqA2f47qa?=
 =?us-ascii?Q?3/3I4p9MA05oeoE9VWDJPmjebn2GdTwXHhaFxpA631z2DSt25LKq5Ax8IlII?=
 =?us-ascii?Q?V3WpFBsdY1gTjArbLiXxeSevdo3SIqkqNG0oUFl5llHFqpaw/ijYp6BG8hdF?=
 =?us-ascii?Q?n2FX5TWG8vx5UApsPxs61kl73+FezvmFBZFvU2ab2NvjdDIgeGMLePxCPQzm?=
 =?us-ascii?Q?ULSmpZdIKV3gO1pF5PkFClH/XV308mLP3DOb+dfgwkHsj9FG+koQeRQ8TRF3?=
 =?us-ascii?Q?1ZRBDJ9zv9PYBl+SvXQanVNNit36I+D+syMzXRxH3jOk+Kper+ngWs3J8JCN?=
 =?us-ascii?Q?XoBbquSIBE4R4b0IQoFNrOQl/HBLZogB7VCdWN1aF//0+WCLdNXLJA927PQx?=
 =?us-ascii?Q?AW20TYLsHX9uj6PQddSptlxijvQmfXpQ9sVKVowFwkqlAR8vFI++Kejnw6tA?=
 =?us-ascii?Q?O9hdPr2ameNuWDkoJjc6LTRF31aGs9GzDCo9Gqvv+QU9chXIIxLq6B0MZNZa?=
 =?us-ascii?Q?eoNQEQNhVpr1jnipw5jEDZ15Xx7t2CetSdFF5tz5QUKtjEjuaBqGXFKqAitv?=
 =?us-ascii?Q?7xV1wMfTSIG0G8Gl5wcDulA5QGaYoh8JEP5UfJDzoyd3jnNoXTNhVfk5TN9g?=
 =?us-ascii?Q?Fp1eG52F4oCNiZEiNCOdU8BdZVrnKKK/aBZfkzw1dODmaLv9q4fiJHOcujhV?=
 =?us-ascii?Q?014jDYBNweRRsQxO3LpZOUvlGtCN9+77tPkgckD6mJP11ueFr/0ruNrS2PbC?=
 =?us-ascii?Q?4qcRt5uq02C7iHyv3UAD/90tZImJjXsK10/CTuXb4LpxjRFAdkI42Au5tgMe?=
 =?us-ascii?Q?SLxCb3ZtXRouqEj5rmFFfdrcSVf0PZ4wfkO5fLIFi8XsQDRCevsdwPx99AHw?=
 =?us-ascii?Q?upDJzVvWtcnBhABnnrjxLh3VUJUbJuA8E++YyPCneXhfm666jW9mwAzWP7fS?=
 =?us-ascii?Q?BYELq1oISJ6n5VIIHSxiEvx4HqHxlyrmpSlx151WX7GtXgBQsi1ts7z3rb51?=
 =?us-ascii?Q?k5+muzUXE8WtKusEC9+tBhqyzxZZzbGYu0iyfOMGXYrydnNPnMaFPCov3nPW?=
 =?us-ascii?Q?qhV3KD030znYy/I/Lyem9fYss0U6vL2qIBerBB2+BBGoMVp1aQPNK5GAlIqv?=
 =?us-ascii?Q?s9hHlKOgnsnh56Oo7bQe2vWGNHZJoKQT?=
X-Forefront-Antispam-Report: 
	CIP:216.228.117.160;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc6edge1.nvidia.com;CAT:NONE;SFS:(13230040)(36860700013)(376014)(82310400026)(7416014)(1800799024);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Aug 2024 09:10:50.7143
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: f8a37edc-ac02-4a99-20b9-08dcb8532a26
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.117.160];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CH1PEPF0000AD7B.namprd04.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY8PR12MB7706

On Mon, 15 Jul 2024 18:28:24 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Type2 devices have some Type3 functionalities as optional like an mbox
> or an hdm decoder, and CXL core needs a way to know what a CXL
> accelerator implements.
> 
> Add a new field for keeping device capabilities to be initialised by
> Type2 drivers. Advertise all those capabilities for Type3.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/mbox.c            |  1 +
>  drivers/cxl/core/memdev.c          |  4 +++-
>  drivers/cxl/core/port.c            |  2 +-
>  drivers/cxl/core/regs.c            | 11 ++++++-----
>  drivers/cxl/cxl.h                  |  2 +-
>  drivers/cxl/cxlmem.h               |  4 ++++
>  drivers/cxl/pci.c                  | 15 +++++++++------
>  drivers/net/ethernet/sfc/efx_cxl.c |  3 ++-
>  include/linux/cxl_accel_mem.h      |  5 ++++-
>  9 files changed, 31 insertions(+), 16 deletions(-)
> 
> diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
> index 2626f3fff201..2ba7d36e3f38 100644
> --- a/drivers/cxl/core/mbox.c
> +++ b/drivers/cxl/core/mbox.c
> @@ -1424,6 +1424,7 @@ struct cxl_memdev_state
> *cxl_memdev_state_create(struct device *dev) mds->cxlds.reg_map.host
> = dev; mds->cxlds.reg_map.resource = CXL_RESOURCE_NONE;
>  	mds->cxlds.type = CXL_DEVTYPE_CLASSMEM;
> +	mds->cxlds.capabilities = CXL_DRIVER_CAP_HDM |
> CXL_DRIVER_CAP_MBOX; mds->ram_perf.qos_class = CXL_QOS_CLASS_INVALID;
>  	mds->pmem_perf.qos_class = CXL_QOS_CLASS_INVALID;
>  
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 04c3a0f8bc2e..b4205ecca365 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -616,7 +616,7 @@ static void detach_memdev(struct work_struct
> *work) 
>  static struct lock_class_key cxl_memdev_key;
>  
> -struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
> +struct cxl_dev_state *cxl_accel_state_create(struct device *dev,
> uint8_t caps) {
>  	struct cxl_dev_state *cxlds;
>  
> @@ -631,6 +631,8 @@ struct cxl_dev_state
> *cxl_accel_state_create(struct device *dev) cxlds->ram_res =
> DEFINE_RES_MEM_NAMED(0, 0, "ram"); cxlds->pmem_res =
> DEFINE_RES_MEM_NAMED(0, 0, "pmem"); 
> +	cxlds->capabilities = caps;
> +
>  	return cxlds;
>  }
>  EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
> index 887ed6e358fb..d66c6349ed2d 100644
> --- a/drivers/cxl/core/port.c
> +++ b/drivers/cxl/core/port.c
> @@ -763,7 +763,7 @@ static int cxl_setup_comp_regs(struct device
> *host, struct cxl_register_map *map map->reg_type =
> CXL_REGLOC_RBI_COMPONENT; map->max_size =
> CXL_COMPONENT_REG_BLOCK_SIZE; 
> -	return cxl_setup_regs(map);
> +	return cxl_setup_regs(map, 0);
>  }
>  
>  static int cxl_port_setup_regs(struct cxl_port *port,
> diff --git a/drivers/cxl/core/regs.c b/drivers/cxl/core/regs.c
> index e1082e749c69..9d218ebe180d 100644
> --- a/drivers/cxl/core/regs.c
> +++ b/drivers/cxl/core/regs.c
> @@ -421,7 +421,7 @@ static void cxl_unmap_regblock(struct
> cxl_register_map *map) map->base = NULL;
>  }
>  
> -static int cxl_probe_regs(struct cxl_register_map *map)
> +static int cxl_probe_regs(struct cxl_register_map *map, uint8_t caps)
>  {

Can we not use uintxx_t? Just like any other one in the
cxl-core. Generally, u{8,16...} are mostly used for kernel
programming, and your previous patches use them nicely.

Let's use u8 for caps. 

>  	struct cxl_component_reg_map *comp_map;
>  	struct cxl_device_reg_map *dev_map;
> @@ -437,11 +437,12 @@ static int cxl_probe_regs(struct
> cxl_register_map *map) case CXL_REGLOC_RBI_MEMDEV:
>  		dev_map = &map->device_map;
>  		cxl_probe_device_regs(host, base, dev_map);
> -		if (!dev_map->status.valid || !dev_map->mbox.valid ||
> +		if (!dev_map->status.valid ||
> +		    ((caps & CXL_DRIVER_CAP_MBOX) &&
> !dev_map->mbox.valid) || !dev_map->memdev.valid) {
>  			dev_err(host, "registers not found:
> %s%s%s\n", !dev_map->status.valid ? "status " : "",
> -				!dev_map->mbox.valid ? "mbox " : "",
> +				((caps & CXL_DRIVER_CAP_MBOX) &&
> !dev_map->mbox.valid) ? "mbox " : "", !dev_map->memdev.valid ?
> "memdev " : ""); return -ENXIO;
>  		}
> @@ -455,7 +456,7 @@ static int cxl_probe_regs(struct cxl_register_map
> *map) return 0;
>  }
>  
> -int cxl_setup_regs(struct cxl_register_map *map)
> +int cxl_setup_regs(struct cxl_register_map *map, uint8_t caps)
>  {
>  	int rc;
>  
> @@ -463,7 +464,7 @@ int cxl_setup_regs(struct cxl_register_map *map)
>  	if (rc)
>  		return rc;
>  
> -	rc = cxl_probe_regs(map);
> +	rc = cxl_probe_regs(map, caps);
>  	cxl_unmap_regblock(map);
>  
>  	return rc;
> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
> index a6613a6f8923..9973430d975f 100644
> --- a/drivers/cxl/cxl.h
> +++ b/drivers/cxl/cxl.h
> @@ -300,7 +300,7 @@ int cxl_find_regblock_instance(struct pci_dev
> *pdev, enum cxl_regloc_type type, struct cxl_register_map *map, int
> index); int cxl_find_regblock(struct pci_dev *pdev, enum
> cxl_regloc_type type, struct cxl_register_map *map);
> -int cxl_setup_regs(struct cxl_register_map *map);
> +int cxl_setup_regs(struct cxl_register_map *map, uint8_t caps);
>  struct cxl_dport;
>  resource_size_t cxl_rcd_component_reg_phys(struct device *dev,
>  					   struct cxl_dport *dport);
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index af8169ccdbc0..8f2a820bd92d 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -405,6 +405,9 @@ struct cxl_dpa_perf {
>  	int qos_class;
>  };
>  
> +#define CXL_DRIVER_CAP_HDM	0x1
> +#define CXL_DRIVER_CAP_MBOX	0x2
> +
>  /**
>   * struct cxl_dev_state - The driver device state
>   *
> @@ -438,6 +441,7 @@ struct cxl_dev_state {
>  	struct resource ram_res;
>  	u64 serial;
>  	enum cxl_devtype type;
> +	uint8_t capabilities;
>  };
>  
>  /**
> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> index b34d6259faf4..e2a978312281 100644
> --- a/drivers/cxl/pci.c
> +++ b/drivers/cxl/pci.c
> @@ -502,7 +502,8 @@ static int cxl_rcrb_get_comp_regs(struct pci_dev
> *pdev, }
>  
>  static int cxl_pci_setup_regs(struct pci_dev *pdev, enum
> cxl_regloc_type type,
> -			      struct cxl_register_map *map)
> +			      struct cxl_register_map *map,
> +			      uint8_t cxl_dev_caps)
>  {
>  	int rc;
>  
> @@ -519,7 +520,7 @@ static int cxl_pci_setup_regs(struct pci_dev
> *pdev, enum cxl_regloc_type type, if (rc)
>  		return rc;
>  
> -	return cxl_setup_regs(map);
> +	return cxl_setup_regs(map, cxl_dev_caps);
>  }
>  
>  int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct
> cxl_dev_state *cxlds) @@ -527,7 +528,8 @@ int
> cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state
> *cxlds) struct cxl_register_map map; int rc;
>  
> -	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
> +				cxlds->capabilities);
>  	if (rc)
>  		return rc;
>  
> @@ -536,7 +538,7 @@ int cxl_pci_accel_setup_regs(struct pci_dev
> *pdev, struct cxl_dev_state *cxlds) return rc;
>  
>  	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> -				&cxlds->reg_map);
> +				&cxlds->reg_map,
> cxlds->capabilities); if (rc)
>  		dev_warn(&pdev->dev, "No component registers
> (%d)\n", rc); 
> @@ -850,7 +852,8 @@ static int cxl_pci_probe(struct pci_dev *pdev,
> const struct pci_device_id *id) dev_warn(&pdev->dev,
>  			 "Device DVSEC not present, skip CXL.mem
> init\n"); 
> -	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
> +				cxlds->capabilities);
>  	if (rc)
>  		return rc;
>  
> @@ -863,7 +866,7 @@ static int cxl_pci_probe(struct pci_dev *pdev,
> const struct pci_device_id *id)
>  	 * still be useful for management functions so don't return
> an error. */
>  	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> -				&cxlds->reg_map);
> +				&cxlds->reg_map,
> cxlds->capabilities); if (rc)
>  		dev_warn(&pdev->dev, "No component registers
> (%d)\n", rc); else if (!cxlds->reg_map.component_map.ras.valid)
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c
> b/drivers/net/ethernet/sfc/efx_cxl.c index 9cefcaf3caca..37d8bfdef517
> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -33,7 +33,8 @@ void efx_cxl_init(struct efx_nic *efx)
>  
>  	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability
> found"); 
> -	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
> +	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev,
> +
> CXL_ACCEL_DRIVER_CAP_HDM); if (IS_ERR(cxl->cxlds)) {
>  		pci_info(pci_dev, "CXL accel device state failed");
>  		return;
> diff --git a/include/linux/cxl_accel_mem.h
> b/include/linux/cxl_accel_mem.h index c7b254edc096..0ba2195b919b
> 100644 --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -12,8 +12,11 @@ enum accel_resource{
>  	CXL_ACCEL_RES_PMEM,
>  };
>  
> +#define CXL_ACCEL_DRIVER_CAP_HDM	0x1
> +#define CXL_ACCEL_DRIVER_CAP_MBOX	0x2
> +
>  typedef struct cxl_dev_state cxl_accel_state;
> -cxl_accel_state *cxl_accel_state_create(struct device *dev);
> +cxl_accel_state *cxl_accel_state_create(struct device *dev, uint8_t
> caps); 
>  void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>  void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2064.outbound.protection.outlook.com [40.107.223.64])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id B192F18FDC9;
	Fri,  9 Aug 2024 09:14:32 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.64
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723194874; cv=fail; b=KyCEW+hIZG2xG6m5teTnq5v9XzGd+kEKykdFFr3xSOttr5KcUTc+2We4nV8PI4laemiT1Tmn6rUHeSYjXu4ot9HukTygg/Jr4QYAtXZQJKY0EUzU9DgEjQOnuQlDVBENIhZ5/jRdObjVwKYj/DbmkJT7/qS80oef4CX20eZJyoc=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723194874; c=relaxed/simple;
	bh=wBII8xr/tnVqryK8us/5wDDidC7mIYCp7g2pc0WfVao=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=aUy6eubiOgObQGVgHDnfa7gFpO9IwvYc5kUoZ+r8vk8KAm6rWuguCzUzAaNVbRVu0DqgecGPlezJ2gsKcVLdlyZ/A6G1fD47sq/hQ5J0t4E5ukKs9Vaz1VEA/JCLrUa/PpmD66iGZsRy6Bp1M+UKjkxtOZaWOJZ7zp0yaQYmsCE=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=fytRWf7q; arc=fail smtp.client-ip=40.107.223.64
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="fytRWf7q"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=NwVh6IooCMSQtMNi3bbao9SL+6oS9/D7m1nUMUB6pRC8PQi1GMB+7q6Kblji0AF9GNvnuVlTtee/p7cJ+DYWYZaWSUl0Ii/GPS5H+eayokBT5d/j3Ie0UAl6WuSxVZxg3Aa0KDQviPJfBdfbjqAh3Nod606ol5Xc8Pu4k+u+TgBv/naq4RXZnZ/WJhZkj3o6KTsNb2vdb6ytV+6vN872Z7DpIYInf6SoNC9m50ovV9QO9LhjdWX/VrM22T7OUWr13t4xp0q88ZjVxiRkEo1fUIUaLa2+qm19J/lPcvUMV2uEz5IJEpHnYYdj7XJP/Lc1t+eggB82T7uiSuZozUlG+Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=gxhqqaltTpFG/fkOvgYSHkdFXV1wHTMFyWZwxKzqYB8=;
 b=VfF/oAZJEs5sdZ8wqn2UYdAxlTvzld26waF0kUTekZJaT5pvC/7PXiHDYMemX3gqoGSt3xhQNwLKIX5hElX6sHMbyr3RsFWV2GbdK1NfgpL4/4sAtPRBYN4JaoRvwW7VMgICO0N/qcdoIwD9Uk0eprsGPqUbR1bTq50PRQ+EJSmUyZoKzmCyFLd1p1TaKjbz4nMXL/LhkTGwN53vU/JqVrA3H8xafbsWiSUSLwstS69eUnZXiNVnINc8RLwJLMefI10OJf5oq1qC+r2n0AEgmy0HnaE9crCvYqn945IDqmyrWIUUQBWPt8XJGQhVCG7JF8NcghNyIj5ldx1AiMlh9Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.117.160) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=gxhqqaltTpFG/fkOvgYSHkdFXV1wHTMFyWZwxKzqYB8=;
 b=fytRWf7q/wW3v/V3oEGgPFJnPI9ozMRFFdDDCl/LRzJQF0aPU68qvUd/0zE74eYIBPq+KFu6/xfxsFfgNJCnld9XT4Sh3ezFi/WUltSnSicRDMWxx8E6kl2vxHBN0OMx/cJ2qJzaBrkfldM0ttG50yet3ta/ymMxvYHiTH3FJWSkeEc8z+fGRIXM2CAHN9ywlwLOxNkVzc7VJFkkUguRIMevzWwLObA7N3vtPy9mK8bimV0zJ+ANiJsH6h4KfinU21isTLaqnO9QR8VnCIIS20fuoP+q+T7C1UtGgEn45xdLDF7lS1BMSoy5GQyY086wWRpumTvltY4MWEfq0JeQ+Q==
Received: from BN0PR02CA0023.namprd02.prod.outlook.com (2603:10b6:408:e4::28)
 by PH7PR12MB8779.namprd12.prod.outlook.com (2603:10b6:510:26b::8) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7828.22; Fri, 9 Aug
 2024 09:14:29 +0000
Received: from BN1PEPF0000467F.namprd03.prod.outlook.com
 (2603:10b6:408:e4:cafe::46) by BN0PR02CA0023.outlook.office365.com
 (2603:10b6:408:e4::28) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.15 via Frontend
 Transport; Fri, 9 Aug 2024 09:14:29 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.117.160)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.117.160 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.117.160; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.117.160) by
 BN1PEPF0000467F.mail.protection.outlook.com (10.167.243.84) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7828.19 via Frontend Transport; Fri, 9 Aug 2024 09:14:29 +0000
Received: from rnnvmail201.nvidia.com (10.129.68.8) by mail.nvidia.com
 (10.129.200.66) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 02:14:14 -0700
Received: from rnnvmail203.nvidia.com (10.129.68.9) by rnnvmail201.nvidia.com
 (10.129.68.8) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 02:14:13 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.129.68.9) with
 Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Fri, 9 Aug 2024
 02:14:10 -0700
Date: Fri, 9 Aug 2024 12:14:10 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>
Subject: Re: [PATCH v2 05/15] cxl: fix use of resource_contains
Message-ID: <20240809121410.0000061d.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-6-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-6-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: BN1PEPF0000467F:EE_|PH7PR12MB8779:EE_
X-MS-Office365-Filtering-Correlation-Id: 55e21fce-1401-4194-3237-08dcb853ac64
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|36860700013|82310400026|7416014|376014|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?xLMYv30KsiBWjC1NN+lJ2WWZCFu/a22VUKkCGQ2JPcZWgcdwSTLxIIxUPY0W?=
 =?us-ascii?Q?8Sa8lPZ4fhh/6wT3Od9sVthkBOPLPiq2ju8LlaWBA6hgteEB/xx96kQo0BwT?=
 =?us-ascii?Q?BJl3qukhyMUD0gexrd9SV2nXNLBEQ66HLgEqigvw13lZu9Vp8zOkka4bZfuF?=
 =?us-ascii?Q?Q7TQLdjwI/HhEVseiKDg+AKZ4RAF+Y0xZF0eC3pgVtN6VH5Nnx/FMgQ22tsL?=
 =?us-ascii?Q?J254tAYAjgIcYvDnP++Khc/SLqCESNHjubty/2qGJ0mFbQM4CSYwA8p+/IXX?=
 =?us-ascii?Q?eLP/0o4hSY3jpdc3uyLFeltDyHRznzsFk43qUfj566UBo3GvpwU3g24zwfn5?=
 =?us-ascii?Q?ekKXpdYTwWV62RTLqYTHHEOap4R7olLg0EpW3J8f0E9eyIzIW1pYMOc++aJM?=
 =?us-ascii?Q?yctldnOglBUNG0PJKs60MEZ7M/ocXWBaE8EwlVNCBxTDfFOTK/m3kzo0ZiLi?=
 =?us-ascii?Q?/x7kczliNp/z1J52BFnkz1dvELZyXi3Vjxpt+WpDp1JXwnhr/zSVO+g1HjRT?=
 =?us-ascii?Q?duRy7hXse7EXZ4eb/jFalQzSlnMwW1laqbySG/U35LM0AtYJVv92GSBpDqUb?=
 =?us-ascii?Q?a8aro85rTO0sg+nzGITQ9ylDkW7dyVsPhHo8fDloTFEWBYnxrRd+y4I5lB0f?=
 =?us-ascii?Q?YK7ulCRthxb7ULJPYhj+R6vxID/Jr7QB9t1qJrObRISejTvyH9Nzrnhqvy+N?=
 =?us-ascii?Q?F6MhFaobZw0mfGAYLXBc1i/PSptBRGLugJcT0ZAYM2vRcjEBrb/tLYH2vrWN?=
 =?us-ascii?Q?yI9ul8sSxzQQjQx7a7dmLIa/3fuEqtIHJK+4L99VvmtxOXqE9ojP+o4/HxnG?=
 =?us-ascii?Q?sDe/kHKwY/C4FeFGpq1gYCHLAIjf4tIZQ96xGWNlainNW8ecjNu20V7Onr32?=
 =?us-ascii?Q?nNwZ7uPDkamwxwAy4vegt1SCGg1E4gD/ljA134SLVwB96fBn3nMzPJ5cPRV2?=
 =?us-ascii?Q?XRZtird9WgryJiWBtIzVm8qEDOrnFBLXF1GaKy6+SShEHIhhyRdCDzcu6wxe?=
 =?us-ascii?Q?KQg4LRBPXVQhQ703j4qL+VUrIg+gFnkyZjbrALu+HekvrIltJTTkhWnNMB12?=
 =?us-ascii?Q?+Ey/2C1Hy9COozQ1M6uKmIcGAWhgjgAp8WQD8J0dT2LLIXvu4E99gDwOu+AZ?=
 =?us-ascii?Q?MkCb6YKfcuI7jf9StSy68AWejtOrsZ6bYpbyDyKyFfSo4cy6BQSDXnaBOerj?=
 =?us-ascii?Q?w1V9l10FR1ANyYz8Jlc+EmapXiL81W3U3I9e14ZROeFg95R8C50GvxMVpMaL?=
 =?us-ascii?Q?M2vA3CnPc2dg3ZNoWxYOiJqAp15f6+5Kgt96T0IJSTl3FlFNdj2xz+brWY0T?=
 =?us-ascii?Q?6WxdiEK/LsC0D9IRcllO/rCcBKLj7rSKekoYEWfzArzIhPzkrTx1CgXz0Duo?=
 =?us-ascii?Q?VJpnDl+VxU1X0C7GLvbhhTnYFTlT7OvuEotVfZ5WAW2JJN/KBfJFYQroBCa3?=
 =?us-ascii?Q?cHdk3YZUeNzPsl4rvUuoFZMgbm3Z9lUI?=
X-Forefront-Antispam-Report: 
	CIP:216.228.117.160;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc6edge1.nvidia.com;CAT:NONE;SFS:(13230040)(36860700013)(82310400026)(7416014)(376014)(1800799024);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Aug 2024 09:14:29.1780
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 55e21fce-1401-4194-3237-08dcb853ac64
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.117.160];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	BN1PEPF0000467F.namprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB8779

On Mon, 15 Jul 2024 18:28:25 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> For a resource defined with size zero, resource contains will also
> return true.
> 
> Add resource size check before using it.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/hdm.c | 7 +++++--
>  1 file changed, 5 insertions(+), 2 deletions(-)
> 
> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
> index 3df10517a327..4af9225d4b59 100644
> --- a/drivers/cxl/core/hdm.c
> +++ b/drivers/cxl/core/hdm.c
> @@ -327,10 +327,13 @@ static int __cxl_dpa_reserve(struct
> cxl_endpoint_decoder *cxled, cxled->dpa_res = res;
>  	cxled->skip = skipped;
>  
> -	if (resource_contains(&cxlds->pmem_res, res))
> +	if ((resource_size(&cxlds->pmem_res)) &&
> (resource_contains(&cxlds->pmem_res, res))) {
> +		printk("%s: resource_contains CXL_DECODER_PMEM\n",
> __func__); cxled->mode = CXL_DECODER_PMEM;
> -	else if (resource_contains(&cxlds->ram_res, res))
> +	} else if ((resource_size(&cxlds->ram_res)) &&
> (resource_contains(&cxlds->ram_res, res))) {
> +		printk("%s: resource_contains CXL_DECODER_RAM\n",
> __func__); cxled->mode = CXL_DECODER_RAM;
> +	}
>  	else {
>  		dev_warn(dev, "decoder%d.%d: %pr mixed mode not
> supported\n", port->id, cxled->cxld.id, cxled->dpa_res);

Also, please clean up your printks before sending them to stable.

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-MW2-obe.outbound.protection.outlook.com (mail-mw2nam12on2055.outbound.protection.outlook.com [40.107.244.55])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 6366B1922E9;
	Fri,  9 Aug 2024 10:25:30 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.244.55
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723199137; cv=fail; b=Gk/O3Ii4g7nyC7v//tIS3vFS7Tyclt2/p2HdOWlGJHWa7PF/9W/M1RIGvGpqwTkJcWWxecjjsa/PtoBR8CFNc4ow686VlYtbORtdKrt0Ydyz23Ns6zAxM1S2dEzvE/vhPSsa/TfdfK6GZyH3W2M8C/DieObtqFNRAOm9FZ9I6zQ=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723199137; c=relaxed/simple;
	bh=98s369Q5tcfFULNj2wykdKHrehq5bBhslAiq0dOGKrU=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=iv8UN/x+VK20YLPdR5t9CqHgm9W/4NATuI+xpiARHJzViDkEjsd4+fymyjGF7egqN++9YLF1WP9GmCAfFeDPU/dqm0DuTXjbuz8WPkGoz0jsSYnQfJ4wBUHZOeDLyGCvHXg5fXuK9lNcUyq1z1OhZtWqn/Hug3UEaAFqa7GTk8w=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=fAQ4yKGm; arc=fail smtp.client-ip=40.107.244.55
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="fAQ4yKGm"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Qt/TVzCnqF5UVdRBBruEq6v6Ibb74yXlUeDYh9KVa3ql6lwk1pYndfg5EZmSGwaq/BKk+UH+gSDjmKMvcRvLMDM7sQHy3dBfwP4ASdOUIxJNoMU9uIuRAtwOsBNbvXZ0Ef2yKwJMs/laUmbeBuKYRpSxa5UEaRH+2Um3vx36x/x6PQ+p5tGCVO425vObRtTI9JKC5PMcL03Wb2y0Lip8I/xHE533g9ierGOJ/wBJMiyu2uIyHk2AEvFfsC+HwxiJ2bh1IzVZ/vIGtpIgiRa0K8p8Tca9OBgBAkdO7BzDVNIz2LDId9AEPPJhH8eNXqYjDjTDCtVbjEnmmykIprhEFg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=75wzFhM6Ab2ZmF9wjEmXH6NOMRLQbueHqLR2ASJSlAg=;
 b=emoMvrgywyAGUeS2N116UMpHXh3LbynB1PEs2dQZD3uZ+hmSsP6hVjJsD0mUrzSyAAasHrNAmNUCCybuaQED+uJJzJEJOIYUs+zMY+90UD0ryC/+q13VrJqeAejPHj/gGgQjM8TTaDT2bWwsPlx2d0BNm/92CVYUkw+Xpv3SysiKtm6YTzyGQlTbebhbE8h34W/9HmIBDe34qNKPgtk8SErtFyGxlbmBofKeFJx7347YV8wr5GEekz1gGUepeRNW1Xl8g3e8RfUujCdkPVB0EeJn+YLHnL85i6N9gJ90IlcFe5Gj4ZVIDsgXf4zznhDpGVqOfk6Wb04h2gC+wnxe7A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.118.232) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=75wzFhM6Ab2ZmF9wjEmXH6NOMRLQbueHqLR2ASJSlAg=;
 b=fAQ4yKGm1KhHnNfxRrpacj83ccAEc+ZO6qA0O5X8Xjq/8GE7CJPb7ThCuzJ2RQZ4OghfIMwLoyWi3B0yq3o1FiJx1B821VYlZMfn+b8mkHNhlN+LI1vCRws4/FcLOEO2oYGCTvRHUbJ7u1AoacZCCwnfrpfPECAGp91ULodBx3BpY47UnZ8GXR0yJuXsVc2LfuRk/9Dghdkd0zYfACrksLdwPUK66F717DJIiUUsS33lpYgTcyOO3iLevqly28IsA9OH8BegnHLscfiwZWsNNkLMHOD5HvkTz5n0AlHIaCWMyby7hh1KoYe46bzo27KPon2DxA1BygdtGfn+Ej7CHg==
Received: from CH2PR10CA0024.namprd10.prod.outlook.com (2603:10b6:610:4c::34)
 by DS0PR12MB7897.namprd12.prod.outlook.com (2603:10b6:8:146::13) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7828.24; Fri, 9 Aug
 2024 10:25:22 +0000
Received: from CH3PEPF00000013.namprd21.prod.outlook.com
 (2603:10b6:610:4c:cafe::6c) by CH2PR10CA0024.outlook.office365.com
 (2603:10b6:610:4c::34) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.15 via Frontend
 Transport; Fri, 9 Aug 2024 10:25:22 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.118.232)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.118.232 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.118.232; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.118.232) by
 CH3PEPF00000013.mail.protection.outlook.com (10.167.244.118) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7875.2 via Frontend Transport; Fri, 9 Aug 2024 10:25:22 +0000
Received: from drhqmail203.nvidia.com (10.126.190.182) by mail.nvidia.com
 (10.127.129.5) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 03:25:18 -0700
Received: from drhqmail203.nvidia.com (10.126.190.182) by
 drhqmail203.nvidia.com (10.126.190.182) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1544.4; Fri, 9 Aug 2024 03:25:17 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.126.190.182)
 with Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Fri, 9 Aug
 2024 03:25:14 -0700
Date: Fri, 9 Aug 2024 13:25:14 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: Dave Jiang <dave.jiang@intel.com>, <alejandro.lucero-palau@amd.com>,
	<linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	<targupta@nvidia.com>
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Message-ID: <20240809132514.00003229.zhiw@nvidia.com>
In-Reply-To: <7dbcdb5d-3734-8e32-afdc-72d898126a0c@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-5-alejandro.lucero-palau@amd.com>
	<e3ea1b1a-8439-40c6-99bf-4151ecf4d04f@intel.com>
	<7dbcdb5d-3734-8e32-afdc-72d898126a0c@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CH3PEPF00000013:EE_|DS0PR12MB7897:EE_
X-MS-Office365-Filtering-Correlation-Id: 4ffa2959-8e98-4798-881a-08dcb85d936c
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|376014|36860700013|1800799024|82310400026|7416014;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?HztcADhob1uGiAyJrlx82+hZodWE+SbUB6fmmP5qpHuYvrfNVJLJ8PgUAwYc?=
 =?us-ascii?Q?Y2VxkkcwUkPWS710aifnlAFGNFtANH/HN/kw5zSI2bzqHxEfa3fott9Q0tkf?=
 =?us-ascii?Q?PTcH5pnWn63ozkeBJEGcRN8vcQTYu1N7LEzvmJnLZ5EZPms+gIMtNw+AhVaI?=
 =?us-ascii?Q?Y9mq5DXC2b8SZaHDpX6l5JKvkftRvkSw9g9czT9GQ8+PFORcajB/tFxDcK9Z?=
 =?us-ascii?Q?610cFVynteXzYFj/imZ7AHWOBzRrEkkF4saBs80kjL9mYPsnzaOTvcJyRYeb?=
 =?us-ascii?Q?SX0wpxnkRMmlnIoxh6DNwALMHMG5fWYH9rGjSNJyzOr3JGyxJg+I6wOXpES1?=
 =?us-ascii?Q?o2kjkVGmKXHT91YSWa6t+RXK85GarLW9OvzMwyBL8qV/TBQcCErzH3NCl0WL?=
 =?us-ascii?Q?E6ds7KcjKVuUYkeUBRCOjmfVMtuhjh1BhVIeG7Tj0WDtyTq11YpMNrrKWniH?=
 =?us-ascii?Q?He9MIQ0Yaev0hq5JaI9ZRxdO+66iEw7hgQAGwocdKkYQzcwQlYA2/6IlDCYF?=
 =?us-ascii?Q?6D0V2Sa69Z4VxBFRpQe6PwgjuE77fkQ+6ac2ruiraBqjkFcT/FWC7FgyHzAk?=
 =?us-ascii?Q?4+bwMwC3fe+1DctucR8Zw16qCl7Bl2HXSpJ6FdbWsIgb1z1oAPTwGyqSpJMJ?=
 =?us-ascii?Q?a9/Ahe+S0YQ9z3htLPRVhcLgmhQbW8XDprvKHkekAVcGblV0aRWKgqY/A151?=
 =?us-ascii?Q?lC/hG2L6ha9swz6HQskYBXAuylT0wIxs1dPEIoZBItnV813zFV47U7NoIZqZ?=
 =?us-ascii?Q?OjUsBEPYZoPiM1a4sMOzPUAPuqUiv6jguJfYFlGZvTyPcXn//QJdBcd/kftA?=
 =?us-ascii?Q?xtGDQpzA9CP/QAmZwdEySCS7kGPJN9fXIPVDWqhPhh9tGnFlJOdyd555RcXy?=
 =?us-ascii?Q?1gQ5IvaV5elBLsk849hw4aigdc/PUhrgyisA6bocyY+uOdxo9Qu29K41I1sp?=
 =?us-ascii?Q?bHNmdpe8hcgMcHk8Qq57jxki66MXYSAGO8isBCCiEetmIFzDPtCUYek1x+wx?=
 =?us-ascii?Q?xBtYU1aiuqbL0SaR/MMvzhel1Kid/XQwadhoQVXFTEk5oGyPu8MGDGxVRF0j?=
 =?us-ascii?Q?MaDGFO3QW6xTbemWtZ09eHVFbch7O9binhFzASlQyaShVBfOlbsQBcysAr16?=
 =?us-ascii?Q?T1VIhYpBEaar30BsVwSi/DwzueEvSwNU3nTwfbVJzP4ktISkrT9hF8rioeVA?=
 =?us-ascii?Q?oQcGiG5IM/ENljR2TN8aBtip+AFms2eqNBau6B/zrzv1+tOM2geMUO/wxSdc?=
 =?us-ascii?Q?1egaOQq6Tv4Uh4bJSyD08jZXkuIwrT9h7+Q/JZKTulsG2L6P/NRNzGpWoobL?=
 =?us-ascii?Q?cm9FqNVWrHZ+hk2zijAlvjk/60cEhLEk2s7snYrhU6AS79ARWTLpMYaPPGMa?=
 =?us-ascii?Q?/VR6MddYM5gIGX1mhMOnD1LmbViI08VMltQ8s/lTSGuzGQlz6K7iBXfn9OT6?=
 =?us-ascii?Q?WJy/iujVqtkknyfS4EmJMVm2pWXcgSXz?=
X-Forefront-Antispam-Report: 
	CIP:216.228.118.232;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc7edge1.nvidia.com;CAT:NONE;SFS:(13230040)(376014)(36860700013)(1800799024)(82310400026)(7416014);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Aug 2024 10:25:22.3194
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 4ffa2959-8e98-4798-881a-08dcb85d936c
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.118.232];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CH3PEPF00000013.namprd21.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS0PR12MB7897

On Tue, 23 Jul 2024 14:43:24 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> 
> On 7/19/24 20:01, Dave Jiang wrote:
> >
> >>   
> >> -static int cxl_probe_regs(struct cxl_register_map *map)
> >> +static int cxl_probe_regs(struct cxl_register_map *map, uint8_t
> >> caps) {
> >>   	struct cxl_component_reg_map *comp_map;
> >>   	struct cxl_device_reg_map *dev_map;
> >> @@ -437,11 +437,12 @@ static int cxl_probe_regs(struct
> >> cxl_register_map *map) case CXL_REGLOC_RBI_MEMDEV:
> >>   		dev_map = &map->device_map;
> >>   		cxl_probe_device_regs(host, base, dev_map);
> >> -		if (!dev_map->status.valid ||
> >> !dev_map->mbox.valid ||
> >> +		if (!dev_map->status.valid ||
> >> +		    ((caps & CXL_DRIVER_CAP_MBOX) &&
> >> !dev_map->mbox.valid) || !dev_map->memdev.valid) {
> >>   			dev_err(host, "registers not found:
> >> %s%s%s\n", !dev_map->status.valid ? "status " : "",
> >> -				!dev_map->mbox.valid ? "mbox " :
> >> "",
> >> +				((caps & CXL_DRIVER_CAP_MBOX) &&
> >> !dev_map->mbox.valid) ? "mbox " : "",
> > According to the r3.1 8.2.8.2.1, the device status registers and
> > the primary mailbox registers are both mandatory if regloc id=3
> > block is found. So if the type2 device does not implement a mailbox
> > then it shouldn't be calling cxl_pci_setup_regs(pdev,
> > CXL_REGLOC_RBI_MEMDEV, &map) to begin with from the driver init
> > right? If the type2 device defines a regblock with id=3 but without
> > a mailbox, then isn't that a spec violation?
> >
> > DJ
> 
> 
> Right. The code needs to support the possibility of a Type2 having a 
> mailbox, and if it is not supported, the rest of the dvsec regs 
> initialization needs to be performed. This is not what the code does 
> now, so I'll fix this.
> 
> 
> A wider explanation is, for the RFC I used a test driver based on
> QEMU emulating a Type2 which had a CXL Device Register Interface
> defined (03h) but not a CXL Device Capability with id 2 for the
> primary mailbox register, breaking the spec as you spotted.
> 
> 

Because SFC driver uses (the 8.2.8.5.1.1 Memory Device Status
Register) to determine if the memory media is ready or not (in PATCH 6).
That register should be in a regloc id=3 block.

According to the spec paste above, the device that has regloc block
id=3 needs to have device status and mailbox.

Curious, does the SFC device have to implement the mailbox in this case
for spec compliance?

Previously, I always think that "CXL Memory Device" == "CXL Type-3
device" in the CXL spec.

Now I am little bit confused if a type-2 device that supports cxl.mem
== "CXL Memory Device" mentioned in the spec.

If the answer == Y, then having regloc id ==3 and mailbox turn
mandatory for a type-2 device that support cxl.mem for the spec
compliance.

If the answer == N, then a type-2 device can use approaches other than
Memory Device Status Register to determine the readiness of the memory?

ZW

> Thanks.
> 
> 


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2086.outbound.protection.outlook.com [40.107.236.86])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 1FA5312B82;
	Fri,  9 Aug 2024 14:41:05 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.86
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723214467; cv=fail; b=YHdPz8vM52yrzDrDsxeAFbbnUUGEf+B6kQ8UOpmhObbP1T5wb07Jy+WDLBtkvSOJFU2ZYM00ZCRebY+wNe9i9BVK1nIf4IZNCw7l7XxFfrD8pRNccrNioK6uqnkHGunznX4/OtRnnl6jVzQuIl7fqaR4CsUkMyHvHRQuOhMRXxI=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723214467; c=relaxed/simple;
	bh=Ryko8OfuQ1Esxoz9Z7XAYI9AugH0C0AvYgO4ppKKgao=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=o+VgWj0qOsDz9Y/a8917tTINsC8ZqwugoIddI6abY8SlLGBb7eAMlRw/1eT6o3FJ0nHxauI8coMLDS2BhzMR5HK8L351fsjfv/vIb2jTv7TSM8lMGGqR8Phxjhfnd8TgP9vh7FDSdaiUB7XZLiWkylWgNlfe+5JYmtSH1VzK69w=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=FKYvWYte; arc=fail smtp.client-ip=40.107.236.86
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="FKYvWYte"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=E/Qgqawg9G3VnVImYwaFLa3zMVyF6JJhHRFuuYx5zxi1R/AkUuWb4mccemmgkXsx6L5JNC4tqdBJF/ouVhuqLck28hb15S9Spj81Cxs6YW88C8dEDBD1szm8+GIxWDT0Al5BFVmyjEU6YmUSxhtEFU6fnKWdUyhnawFFDDjFnd82S/JkcLolu12LAyzUMvIqXE6lpvng24GTHA7p6znTHH+MYlFNLTc0pFuB0k4x5itzppsm/a4vUZVxY2FUBqLtqttm3bXV29a1LDQVhCD7ZB0xmhB90QatPgAGCpCocFHLe3d2M8U9sSUXF6Ene46NhtarEdzXP81vWOW8jpK+VA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=uE5vYfP2AB5fUzRKoqhLp6VQQeF7DWspqdtT+gSJJBM=;
 b=zMZgKN6oD4XkxeEIFpqg4mIEMqwtr+ZpaoIgbZ+hRuZJXog92yWZLe0uODF7iVPAztVxH0/DMomTPT4iG491HrfIqbqF5aqpx8QVOPuAKpTVVKIOgl8yCRqIsXJaRafjenQKEAFozyLk4/gpTR2FG0esSUz/Culy4MOrNzEGmh0lel4ta9HZbs1a+OJh6B2iU376oiZPf4LqLXERZjzyKzI9sJp3TLJY2O0Z7CRsC4bIqWS2tRb1tRV6OznoByByP3Tg7XCasvdDZ6WU5k0jPkzBX5qfV/iCC8Oi0s9kTF1iY59sp68AhycXH/IJZ3Q+61lL4yk8aox5CXTB6XfiGg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.117.160) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=uE5vYfP2AB5fUzRKoqhLp6VQQeF7DWspqdtT+gSJJBM=;
 b=FKYvWYtexXOWQGHH2m3AM6sbEIRvLU9kfoyhFyKdkIh9M5o+7nt6yhZA22afMIUPuY7oKtHwN+xoi2XuSp+JGKFAYhgctXUztdWekbOCTQ0JsYiDtDL3fCbuIfjku4TPbBtz/h/+UeIIKWtjWdNVYULPm0UMUdmdnVB4yGZ1edfTV1m+O7DWQp+a8Q0K7UyeeTfJ34pARHtobAZ+kxNOY/FjeL55qQsr8sUljpcPkNcwIi8pepdzjlK7ubchwIypH5bwrhoyxQNHTM52qdPAXClqPtozoNaigM+OsztFVqQVc1jnOySAlqa0nDtMshREaIp5HSCxwN5iyJ5qMUr+dg==
Received: from CH5P223CA0006.NAMP223.PROD.OUTLOOK.COM (2603:10b6:610:1f3::23)
 by PH7PR12MB8779.namprd12.prod.outlook.com (2603:10b6:510:26b::8) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7828.22; Fri, 9 Aug
 2024 14:41:02 +0000
Received: from CH2PEPF00000144.namprd02.prod.outlook.com
 (2603:10b6:610:1f3:cafe::f5) by CH5P223CA0006.outlook.office365.com
 (2603:10b6:610:1f3::23) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.17 via Frontend
 Transport; Fri, 9 Aug 2024 14:41:01 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.117.160)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.117.160 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.117.160; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.117.160) by
 CH2PEPF00000144.mail.protection.outlook.com (10.167.244.101) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7849.8 via Frontend Transport; Fri, 9 Aug 2024 14:41:01 +0000
Received: from rnnvmail205.nvidia.com (10.129.68.10) by mail.nvidia.com
 (10.129.200.66) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 07:40:46 -0700
Received: from rnnvmail202.nvidia.com (10.129.68.7) by rnnvmail205.nvidia.com
 (10.129.68.10) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 07:40:46 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.129.68.7) with
 Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Fri, 9 Aug 2024
 07:40:43 -0700
Date: Fri, 9 Aug 2024 17:40:43 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>
Subject: Re: [PATCH v2 08/15] cxl: indicate probe deferral
Message-ID: <20240809174043.0000011a.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-9-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CH2PEPF00000144:EE_|PH7PR12MB8779:EE_
X-MS-Office365-Filtering-Correlation-Id: db972046-062c-4194-127c-08dcb8814a3c
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|376014|7416014|82310400026|36860700013;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?EvpIbr9LUsMGdqtaozoqpLGA8gpHPy5Z79n4gRS3gqrosKAOhJMKWLDEOjqQ?=
 =?us-ascii?Q?pVQA5i1TF8JcXFXen8ulasz7F4KbuHcVLS1QJBWe/lc1Tldum2OegDKYeNCe?=
 =?us-ascii?Q?CIUgHGf1GgsY+izQWRJjSUQjt+00FcgpPQb7lyh/pEQ+zMnFiPr+7SfETZ6d?=
 =?us-ascii?Q?gdExf39EQkN/KBKDJtEe4W0tLOWMIbSOOdEtGAv6b9xafhH1lZ7R1kPO1yhZ?=
 =?us-ascii?Q?c/oIENYi7DptS7fGDDObi6wazIF/apjOojxbAe3qx26zLeBFELu2eaXX/Rl0?=
 =?us-ascii?Q?2pwzWPYcK2QbAZOLQF9HvC/Yi6hmnfM2NDUw9yD7U1ejsrS6Z4UyE9aHvcCd?=
 =?us-ascii?Q?ffwkY8unqDIwN4lwQ2Zg6r0j6gX/VQeGyjrQTwX6YErBIQ/pZ4hMrQPr3BAL?=
 =?us-ascii?Q?wqCyoXHuSzW8B7kXQdEVdCdW1f13PLDkZxlpRpeF06OcdKVeRLBALms6ipVW?=
 =?us-ascii?Q?JetISxk/F1ILezd9UGJYT1+pQUqkPCbfuDY7X4d4CClEwDzhjz+c/K6a7L6x?=
 =?us-ascii?Q?6u1lezZ0V0bM8/FiLUF9aqS97ih2NzodV5JVjdAVwPmYjb0OE0xXZqEBik8e?=
 =?us-ascii?Q?BqsEEfYwjjZAwzamygftR6j4mPnKezPmmJW6rVbV6RA6WN0OCc2OyohFEBzm?=
 =?us-ascii?Q?tTA+XltCUEQkOPJC7AY3ZK9nI1zGGOJ6YoJIoPbAF0Kassmoy1d2SF3DycY4?=
 =?us-ascii?Q?aX4ZE6GEQ+BUCdcyzU2v5tMRVb1MKXZyHMkFQ1kPJAgxW6FptG94kP1mF0fj?=
 =?us-ascii?Q?JuGy+StVhjU9CQfmmTSNni/uY1N+OR4fN0U6JFr9yI4qVRthwMqKsgmN8crK?=
 =?us-ascii?Q?tGlvHi5YLLALOrMCJZokGnufwjperkOSt83BZlDm+FQWtB9TkFEK30CY1bXZ?=
 =?us-ascii?Q?JjHK+2BfpyrB7WecEt4ZJjyNE2CkKGQD185kMI+DEsIzv07rpGpQRbiScp9p?=
 =?us-ascii?Q?KmVz1AF3yiO90cjEWBB9HpzDx/1+uvz0vPApDPemBppblcpXZPvhAquzCpnY?=
 =?us-ascii?Q?dN+xJ4+LQVEykP+GLcY6KrWVDUoGc8HIhc8+Qpu19cDHxqVUumCd0FjOw8Uo?=
 =?us-ascii?Q?3kiwUEoHEoSGo0AZcMN+kQ+EWfU97SP7/SC5aDYzUCTT3hdBszlOSvHpmo1F?=
 =?us-ascii?Q?B0sFrVyx5f0fDn+iegNjjmgwvLdPZuRhgRvfItlb/3CDC86//dw3NFeA+FKg?=
 =?us-ascii?Q?TAJ1DXRqdDQqb+3UOl6lbfB3iBEHGGYBD5t+sfbrOIsbLsPfU7+AhGIkW2HX?=
 =?us-ascii?Q?8/hiZCuBcVWGkOfmnhniq+pGmOHZ/asB8L/kqaBuyp5DKMtIgw2Wn7qxmVrv?=
 =?us-ascii?Q?dyJW73kfgEL2h/YEKCHSt+XDEDVKl8w432ItmfL2/pWjfWa/qAdwudlnkPKI?=
 =?us-ascii?Q?NzIxF/wufogAiaV1rjt23yAX1UM2bn6xiqjTKSRqd2iZafT1FzCWdhYlMJQF?=
 =?us-ascii?Q?lj+8wH92PcmCH3exTnl2yKntIodBiibh?=
X-Forefront-Antispam-Report: 
	CIP:216.228.117.160;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc6edge1.nvidia.com;CAT:NONE;SFS:(13230040)(1800799024)(376014)(7416014)(82310400026)(36860700013);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Aug 2024 14:41:01.3791
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: db972046-062c-4194-127c-08dcb8814a3c
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.117.160];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CH2PEPF00000144.namprd02.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB8779

On Mon, 15 Jul 2024 18:28:28 +0100
<alejandro.lucero-palau@amd.com> wrote:

Another spell check is spotted besides others review threads. Will
circle back with more comments once checking the users of the APIs.

> From: Alejandro Lucero <alucerop@amd.com>
> 
> The first stop for a CXL accelerator driver that wants to establish
> new CXL.mem regions is to register a 'struct cxl_memdev. That kicks
> off cxl_mem_probe() to enumerate all 'struct cxl_port' instances in
> the topology up to the root.
> 
> If the root driver has not attached yet the expectation is that the
> driver waits until that link is established. The common cxl_pci_driver
> has reason to keep the 'struct cxl_memdev' device attached to the bus
> until the root driver attaches. An accelerator may want to instead
> defer probing until CXL resources can be acquired.
> 
> Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
> accelerator driver probing should be defferred vs failed. Provide that
                                         ^deferred
> indication via a new cxl_acquire_endpoint() API that can retrieve the
> probe status of the memdev.
> 
> The first consumer of this API is a test driver that excercises the
> CXL Type-2 flow.
> 
> Based on
> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/memdev.c          | 41
> ++++++++++++++++++++++++++++++ drivers/cxl/core/port.c            |
> 2 +- drivers/cxl/mem.c                  |  7 +++--
>  drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
>  include/linux/cxl_accel_mem.h      |  3 +++
>  5 files changed, 59 insertions(+), 4 deletions(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index b902948b121f..d51c8bfb32e3 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct
> device *host, }
>  EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
>  
> +/*
> + * Try to get a locked reference on a memdev's CXL port topology
> + * connection. Be careful to observe when cxl_mem_probe() has
> deposited
> + * a probe deferral awaiting the arrival of the CXL root driver
> +*/
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
> +{
> +	struct cxl_port *endpoint;
> +	int rc = -ENXIO;
> +
> +	device_lock(&cxlmd->dev);
> +	endpoint = cxlmd->endpoint;
> +	if (!endpoint)
> +		goto err;
> +
> +	if (IS_ERR(endpoint)) {
> +		rc = PTR_ERR(endpoint);
> +		goto err;
> +	}
> +
> +	device_lock(&endpoint->dev);
> +	if (!endpoint->dev.driver)
> +		goto err_endpoint;
> +
> +	return endpoint;
> +
> +err_endpoint:
> +	device_unlock(&endpoint->dev);
> +err:
> +	device_unlock(&cxlmd->dev);
> +	return ERR_PTR(rc);
> +}
> +EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
> +
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port
> *endpoint) +{
> +	device_unlock(&endpoint->dev);
> +	device_unlock(&cxlmd->dev);
> +}
> +EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
> +
>  static void sanitize_teardown_notifier(void *data)
>  {
>  	struct cxl_memdev_state *mds = data;
> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
> index d66c6349ed2d..3c6b896c5f65 100644
> --- a/drivers/cxl/core/port.c
> +++ b/drivers/cxl/core/port.c
> @@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev
> *cxlmd, */
>  		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
>  			dev_name(dport_dev));
> -		return -ENXIO;
> +		return -EPROBE_DEFER;
>  	}
>  
>  	parent_port = find_cxl_port(dparent, &parent_dport);
> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
> index f76af75a87b7..383a6f4829d3 100644
> --- a/drivers/cxl/mem.c
> +++ b/drivers/cxl/mem.c
> @@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
>  		return rc;
>  
>  	rc = devm_cxl_enumerate_ports(cxlmd);
> -	if (rc)
> +	if (rc) {
> +		cxlmd->endpoint = ERR_PTR(rc);
>  		return rc;
> +	}
>  
>  	parent_port = cxl_mem_find_port(cxlmd, &dport);
>  	if (!parent_port) {
>  		dev_err(dev, "CXL port topology not found\n");
> -		return -ENXIO;
> +		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
> +		return -EPROBE_DEFER;
>  	}
>  
>  	if (resource_size(&cxlds->pmem_res) &&
> IS_ENABLED(CONFIG_CXL_PMEM)) { diff --git
> a/drivers/net/ethernet/sfc/efx_cxl.c
> b/drivers/net/ethernet/sfc/efx_cxl.c index 0abe66490ef5..2cf4837ddfc1
> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c +++
> b/drivers/net/ethernet/sfc/efx_cxl.c @@ -65,8 +65,16 @@ void
> efx_cxl_init(struct efx_nic *efx) }
>  
>  	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
> -	if (IS_ERR(cxl->cxlmd))
> +	if (IS_ERR(cxl->cxlmd)) {
>  		pci_info(pci_dev, "CXL accel memdev creation
> failed");
> +		return;
> +	}
> +
> +	cxl->endpoint = cxl_acquire_endpoint(cxl->cxlmd);
> +	if (IS_ERR(cxl->endpoint))
> +		pci_info(pci_dev, "CXL accel acquire endpoint
> failed"); +
> +	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h
> b/include/linux/cxl_accel_mem.h index 442ed9862292..701910021df8
> 100644 --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -29,4 +29,7 @@ int cxl_await_media_ready(struct cxl_dev_state
> *cxlds); 
>  struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>  				       struct cxl_dev_state *cxlds);
> +
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port
> *endpoint); #endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2045.outbound.protection.outlook.com [40.107.236.45])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 8E582198A1B;
	Fri,  9 Aug 2024 15:24:44 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.45
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723217086; cv=fail; b=d1gfYFYfxG/RuhaAGu1uHeW/GDUPvc2KOZJOc/82gbqb0m8idQEW4VxVFIio/KunV/mqostiLzqAdSZQud1PxCAvj5E3cGuLxAY+IuojaJ3tKRqcOIHQCIaEdN8P5x3y7fO+LTkMNWYmhQUloaY3aNT3MQnhbb+FQLprJzbTAJA=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723217086; c=relaxed/simple;
	bh=EUdVDqX+8xysLABg5kmZSY5OeYKmfs2k7vDXrM5cxKc=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=T/P9pXnh6gO8aK+o8eiXtvcSehbfaD1BcNYGVgSSccb9T2MYm42fpsNOYHm7Q0gl0ZHwTOdn0CUFjYoTwc1Oaxo2NAMM8ICebdGL2ETcHJjw7cDLFdiaPZElLZxUhsBJP4R38jE/SUDYbmXYjlzceEe4ZTdKn7tYRnCoRV1rqo0=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=BGx/urpG; arc=fail smtp.client-ip=40.107.236.45
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="BGx/urpG"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=p82MDGpMFfh+TzMlIadr4L3KNY8Bnu3gM2nytJ6D05AMuNy/e2PS5sHjxF6YsTlrR5UffVwZ+OiTmJGCm0V32jjHD5lov7Y66/wPN3jCIAQTUqcjVyX89lxxmURBcKcG9B4FHjarZZHT5/3rJrauSbfUYBPB6nBLwosRyaYaKGPzWvknAtTSBEdESvI3H7rVuhb9Qss4qPBzbOP/Z1TGErB4k1EpRYzB3la1bL2d8SSxz4i/bTHs94pSY18DRnbuz7DDPleriFt9ruo+C2pHYMmFeaDdw+exsXYZK+1QPc5LCPFKuwnl8zd5/UieVGunwExO/6IRG/nUYehtIHkWaA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Kc5Gq47jhQoculGJ0UN4WLv0fAYd9/C+F6rQY3voTiA=;
 b=vvR2ltFCwaySjGJzfAO6UGdqhb5eI5oIzrvmYuW7LNQDRvOxmp8D22tX3edqqCKBi5u605EJgnSljS0f7QAZYycQrOCcnmSOraiu1rgy44cZ7WMh+/1WI6Jjhp6c5CO+z7vJr6Z3TBeXjJKQXHbfvJ8c97zCWKLLDHQCf9aSJr30yDdjdnsVw7D/7z3/pq1x41h2N8+O6g5Ti1gnafoDCXI5jKB6ytqBkRLPCf3dc2qpdTpCeY9cY2aFY6Ak5mU96V8tg0ZnED0lE6bTZ6ICYyG04T67rkSC00YC2CDy892HdNNzKodqEzaV3+qyUpeqe2/s2LNQ85z+677kw6+oKg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.117.160) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Kc5Gq47jhQoculGJ0UN4WLv0fAYd9/C+F6rQY3voTiA=;
 b=BGx/urpGdylAzEMuFsWAyfsA7uu7egbacaO4yPL3wV09JwM8wBrXwZiw9K2B6c1f4lEYWRwibO5jCcvvBZCgRySYNdEf7efOSOsQXKqT/imEwqk+PA6tQOVx5CxQbQK601g24+B+OeNuTVkSuduTGhDOZgqj6bYQbImYN+1t3cR0d3B4saLJSPF2iqLLscdtWuzMPArLwaaDcXhImwMOBvwTk7Mc9UxWwBgBj8R/ib7EWGKHt3ykaX9QhLnf+rtE62jBUXLsvHuR9fCShF+MVcruRc2aEOKde+c2BnMlmAFq/YBUtK1Z9SKR6thbU7Mnp5oilweUNbX3Oius7DL4BQ==
Received: from BN9PR03CA0054.namprd03.prod.outlook.com (2603:10b6:408:fb::29)
 by MN6PR12MB8567.namprd12.prod.outlook.com (2603:10b6:208:478::12) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.15; Fri, 9 Aug
 2024 15:24:41 +0000
Received: from BN3PEPF0000B36D.namprd21.prod.outlook.com
 (2603:10b6:408:fb:cafe::c4) by BN9PR03CA0054.outlook.office365.com
 (2603:10b6:408:fb::29) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7828.32 via Frontend
 Transport; Fri, 9 Aug 2024 15:24:41 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.117.160)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.117.160 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.117.160; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.117.160) by
 BN3PEPF0000B36D.mail.protection.outlook.com (10.167.243.164) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7875.2 via Frontend Transport; Fri, 9 Aug 2024 15:24:41 +0000
Received: from rnnvmail204.nvidia.com (10.129.68.6) by mail.nvidia.com
 (10.129.200.66) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 08:24:23 -0700
Received: from rnnvmail203.nvidia.com (10.129.68.9) by rnnvmail204.nvidia.com
 (10.129.68.6) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Fri, 9 Aug 2024
 08:24:23 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.129.68.9) with
 Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Fri, 9 Aug 2024
 08:24:20 -0700
Date: Fri, 9 Aug 2024 18:24:20 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>
Subject: Re: [PATCH v2 14/15] cxl: add function for obtaining params from a
 region
Message-ID: <20240809182420.00002f9e.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-15-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-15-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: BN3PEPF0000B36D:EE_|MN6PR12MB8567:EE_
X-MS-Office365-Filtering-Correlation-Id: d924aafc-749d-4cea-38dc-08dcb88763f4
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|376014|1800799024|36860700013|82310400026|7416014;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?66D6qcwAInLrHZ6st4pvrIsmT1Dc3k4TkC0M+vMoe2KHSf1fZxf0FbF75K8V?=
 =?us-ascii?Q?vrqjVil++28pWRnOO6b/zhLc3DWfnjcqxGs0cYlnhJBnvOVm1jiGbFDPUom4?=
 =?us-ascii?Q?p7TMKfOien1mtDq0VWPEtgSVheqWMB15AvQx8Lg4udYlCZmsG+x62D5nWryX?=
 =?us-ascii?Q?SqkCje3hlDmoBefPf4NHRfTEWELgV5E5tMLljn1gsA9xz/La2+UdAtRRzU11?=
 =?us-ascii?Q?NfOqylaD/eBkL7E+ZkxoQtXtLXmsHI3HcxwWxdb8rZZxlvXHvoR7S/c1AR1P?=
 =?us-ascii?Q?7RVa9NJgEUXZ9DKmvEE9d8FN4tWScYLiM2+CGSxQyUG0n8hndFnVjqelBGl2?=
 =?us-ascii?Q?Sb5+CljBgxPu+Kd1g1nnM+5RzJggQ7Z/sOR20bSZR9BnKiioXQZ2ADlrpAu8?=
 =?us-ascii?Q?brqb1uwPSvcmdWg0QVFqSow1xJnK/wJRiH3+0PiMjjzRsJKSJ7DJohkE9r2V?=
 =?us-ascii?Q?C0eSB8Rfk88c07TB9UtVbGtgVNDfEiCNvjdGaHhpnwEtGypN07SJn75elBbt?=
 =?us-ascii?Q?JLFONZI6nilrAXsllrpPS/ceYQsCjSgmBQzGcilsbpLahpkf8z3IKWcNRRIu?=
 =?us-ascii?Q?ZoswcWiDLCFnXnXEKZD8j6mv5qPDIh087gE3mGwrLnOzKeiqTj+W2RZUuA5x?=
 =?us-ascii?Q?TB9t02SyrE4fRKdclc9+B0fBBYlu7BBnNLLnJ+YbDLiE3ZOAsqUKpr7r4U+W?=
 =?us-ascii?Q?wyWpLIUPxpmLOhKTiR9SpPSayid0IHg1Rc2v4EJ9YcCelo5V6koSmKqlZWLS?=
 =?us-ascii?Q?Ymu9jkVJ3CMsJCV/UpF/lsNlSUHhr/3XHWmm5QLQVYY3gABmRZfqse2gwuJr?=
 =?us-ascii?Q?1MblcCJk87r/ik4Fslkmb/Tn/2w13j5kbt3j1YaJGxji6Jnaszn7U+4bVldl?=
 =?us-ascii?Q?Lm+yBZ4+WyU0yWpEi4OsUeGhI//2wT6y2WW4NIo7svO7EMcfG05INFotxJ/S?=
 =?us-ascii?Q?lm4HXVpKwwPW6QAGKCVolAVxWDizPqRRtATeG5H11J4zTw7lvRmIbZdH8V09?=
 =?us-ascii?Q?dPj6S8WQfAqttY7t0gbbZ8nKwFDgbRHS5ME8yb3jq9GsS+RBTjg6CKQ12Hjb?=
 =?us-ascii?Q?KgGAeFrsDjgnUYjfeMvdq7AbgXf1B/d3fwfNn7/VnOykE6t4/DjDYRJ+J8v8?=
 =?us-ascii?Q?3uJJHtGDvjO9mjJHsBa5Nodb1srOmBJmOP14FiRPizaccXIbGfiBGg4Ez+XS?=
 =?us-ascii?Q?VWkfZJECOqAu7EUSMxgHjmSXE2zPgesXIkA5gQz0G9+w2aN+UFbp7e/bAUCX?=
 =?us-ascii?Q?aa4rhOMpKI/8zmcVnyu77JBE9q+3CV+3THBtmHYERG5QX6ranW2RPdaYbc66?=
 =?us-ascii?Q?KVtEggOXkUv/lu4bz+bxY1HmGizq2ro8e1IbqsaiIMVQNanV1qsWM27yEga8?=
 =?us-ascii?Q?ImgPyIhcCd3PfVBT/BhAYbUkvIAZLAU8aLEAn7Fhvbkzv5s71Fw4sbmCjZb6?=
 =?us-ascii?Q?oGq8WsZIGzqOyOaRpwM281wf0CkjmFM9?=
X-Forefront-Antispam-Report: 
	CIP:216.228.117.160;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc6edge1.nvidia.com;CAT:NONE;SFS:(13230040)(376014)(1800799024)(36860700013)(82310400026)(7416014);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 09 Aug 2024 15:24:41.4782
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: d924aafc-749d-4cea-38dc-08dcb88763f4
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.117.160];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	BN3PEPF0000B36D.namprd21.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MN6PR12MB8567

On Mon, 15 Jul 2024 18:28:34 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> A CXL region struct contains the physical address to work with.
> 
> Add a function for given a opaque cxl region struct returns the params
> to be used for mapping such memory range.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/region.c     | 16 ++++++++++++++++
>  drivers/cxl/cxl.h             |  3 +++
>  include/linux/cxl_accel_mem.h |  2 ++
>  3 files changed, 21 insertions(+)
> 
> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
> index c8fc14ac437e..9ff10923e9fc 100644
> --- a/drivers/cxl/core/region.c
> +++ b/drivers/cxl/core/region.c
> @@ -3345,6 +3345,22 @@ static int devm_cxl_add_dax_region(struct
> cxl_region *cxlr) return rc;
>  }
>  
> +int cxl_accel_get_region_params(struct cxl_region *region,
> +				resource_size_t *start,
> resource_size_t *end) +{
> +	if (!region)
> +		return -ENODEV;
> +
> +	if (!region->params.res) {
> +		return -ENODEV;
> +	}

Remove the extra {}

> +	*start = region->params.res->start;
> +	*end = region->params.res->end;
> +
> +	return 0;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_get_region_params, CXL);
> +
>  static int match_root_decoder_by_range(struct device *dev, void
> *data) {
>  	struct range *r1, *r2 = data;
> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
> index 1bf3b74ff959..b4c4c4455ef1 100644
> --- a/drivers/cxl/cxl.h
> +++ b/drivers/cxl/cxl.h
> @@ -906,6 +906,9 @@ void cxl_coordinates_combine(struct
> access_coordinate *out, bool
> cxl_endpoint_decoder_reset_detected(struct cxl_port *port); 
>  int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
> +
> +int cxl_accel_get_region_params(struct cxl_region *region,
> +				resource_size_t *start,
> resource_size_t *end); /*
>   * Unit test builds overrides this to __weak, find the 'strong'
> version
>   * of these symbols in tools/testing/cxl/.
> diff --git a/include/linux/cxl_accel_mem.h
> b/include/linux/cxl_accel_mem.h index a5f9ffc24509..5d715eea6e91
> 100644 --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -53,4 +53,6 @@ struct cxl_region *cxl_create_region(struct
> cxl_root_decoder *cxlrd, int ways);
>  
>  int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
> +int cxl_accel_get_region_params(struct cxl_region *region,
> +				resource_size_t *start,
> resource_size_t *end); #endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM02-DM3-obe.outbound.protection.outlook.com (mail-dm3nam02on2088.outbound.protection.outlook.com [40.107.95.88])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id AE64C43AA1;
	Mon, 12 Aug 2024 11:16:30 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.95.88
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723461394; cv=fail; b=AAYRd8VXwYCTwSs1Xo5lHR9DfhnyuNb1pm0LCa5ifkKSdkJyKwUQ2B2JlVZHJv8P9SH1dKh9Z40eXuOx04RKM9tWQPYG1b/r5G0sKANbqzM/M4UK/MBqfEGkyPDw5FR3ep0g9IF/O/8ahrvmDPokhEQmgGJOMgLmVPMqT3L+fy8=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723461394; c=relaxed/simple;
	bh=2f0Ik++UW/waBAR6etK4ES8bsi1AlnnIwM0AOkWzXjw=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=pmQcx/Xnp+dFAMjCJ4aUYFgn2tmpiPqHkOj9ZBoolbf4KB6Oz4YM9BmehOAlUhnvO/ypz/3tqwy4V1x5rNXsaS9HTHayzMWtUyiIDIdCgg1KtTt81o8m6OOT4s8ouSsgqPfSaqUmBj78T/CA63zAmu6yhQuQoGp0lWdaaDsYy7Y=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=2V3vR1Dh; arc=fail smtp.client-ip=40.107.95.88
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="2V3vR1Dh"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=YraSKzuK1hhR8+Wl6eH+sjxtK9kIXU6+ZjeDnFcNpaR2Fx2YncXbJicp5OxbrDwdgThvOIPd+vZBoHEXwC8JguU1YHflpHRgHwLhzXXYuv2hKZmReFZtCLZ+s87Nzr/O7eyJatRDA3G/SMEn6Q2OmGGK36xWrzw2a3OKxh0KFYGC6XJQKjzNSggoVfl5lAHxYoCwrBsPRYPHfEfn7YM4pdJgFa/BpGsLu/a6ArGNmJWCMkftDJiyXTLOIC2IefyqN7mwXY1RPq+0X+xV1lZsTnZN7my4G5VHpQ71GDEZZhxbreDfwE3SE07xgg0Jwhpcoh6ioQ3jagLzPBAAoM28HQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Csn3no3mtwSJKcqKvnufQIkSiOsPtUzRbjdkkni7zQw=;
 b=j4gri6I+tghD6aPb6YxfZUNUjnRi2s8P2e7liOl79bRrYHqHq7zSf+A1+1ymCs7ncuXCd4d2gCUhY3rRUOQ91pAh0JzRZd2hu5SpVqpB3DxXVwwMx9ExhNm8H9O0pJRENug/RfP4G2aglKvEFWHjfOvCzV5NKX3FYQ+Z7FofJmKL+RaaKm26qUohkEGqF9Fj9gsI3kNHEJzoz3Az7q3kBZ0idjVDrkIOIrQNJrxShzULqJQYt/F1neYFNlQrwU1fIAFuNotrIm1xZ0bVW4Q1BGihF6GMRRmobhBE7oGqce+f4hZgOr91VgBf8lcadLwqzttyGJ+ypU9UOVvlePMBeQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Csn3no3mtwSJKcqKvnufQIkSiOsPtUzRbjdkkni7zQw=;
 b=2V3vR1DhzSDA8WCKOCcFEJ+yuqGhITzi88EUVA7q6/+MX44Bay7i6J0fUAwKcFNsmsICaq+8lF+slUQfvDUCtbRCe5jJM9uOSvqUKcTZmnCjWk+MeWMS0SJ8LlW2hBy0xcb4HCBT0zkuOrVBcXthgLgJ+ri1zLHAag/rOHpRjxk=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by CH3PR12MB7739.namprd12.prod.outlook.com (2603:10b6:610:151::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.22; Mon, 12 Aug
 2024 11:16:23 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.019; Mon, 12 Aug 2024
 11:16:23 +0000
Message-ID: <508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
Date: Mon, 12 Aug 2024 12:16:02 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <20240804181045.000009dc@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804181045.000009dc@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: DUZPR01CA0165.eurprd01.prod.exchangelabs.com
 (2603:10a6:10:4b3::6) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|CH3PR12MB7739:EE_
X-MS-Office365-Filtering-Correlation-Id: f5bf934d-dd70-407f-e7be-08dcbac03300
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?alQ1cUNVenJZU3UvdGs3OGRCdkFqZFBFSFpsdWNlSkJvZVNLb3lWTFgvWkdO?=
 =?utf-8?B?Q2M4R2pJamRtNk9nVm5MMGxKT2Z3ZTQrN2hwazZmMmZiZmJwMFovQ0p4dUt5?=
 =?utf-8?B?YmZpUE45ZUhlcUJ3MW9Lem1sdmM5T2M3OVYzbGVDRFJxMVVjMFVWaDRHazc5?=
 =?utf-8?B?SXZHZ2dQdEJnK05nV0hUTkFSTWdLSnpEUlI0eHpCMEpNSUV6V2VxR0NhUHgy?=
 =?utf-8?B?UEZkWnVjeld0UlhKWWxwdzFNVmJNWmEwS0crTmh0em5Mdk42R0VZbU5oMnVm?=
 =?utf-8?B?akVzTDVIR0s5MkVOWk8wc25mWVVwYVVCQjlDVHJwdzVBTjN2d2RjemsvbmpG?=
 =?utf-8?B?ZWhuTDUxS1g0OHJpV2lwTExTUXR2Y1V6U3RWWHpaSUFHaGJZbnVSRFlIK1RF?=
 =?utf-8?B?VjArSjA3bTRmSGZwa1grcnlwL3hLZm9KOWRkMDFXcjZCdno4ZzBZUDMyRnhE?=
 =?utf-8?B?dE8vLzJBRWhXQjlUemMvajJjc0NBQnlyem5rY2M0S0VtYm9NcmRFSEx0cWdt?=
 =?utf-8?B?dGRZNGs3S204Ym4xak5XZDRjb3dUOEp4WmkzdXdTZ213S1JXalBxZEZwdkdH?=
 =?utf-8?B?Q2Q5Rk15QnI2cHFmdlFZWjE3Qll2WnJKOTlERkpaa0ZtVXRYZUZBNDNFZnNJ?=
 =?utf-8?B?WjJnME1IckVwbG5wOWdPUVMyajJPbk5NSHRoMzhmbGp3UERGZ1BEVGNaZW5H?=
 =?utf-8?B?a0dRaUVJcmg4VlI3UnQxQ3Z5VFJTL2hSUUoraXR3WmxTTzk3c2pBRHo3QlEz?=
 =?utf-8?B?d1djY25GWlYxc0R4N3phYnZkcDVNcEtPcmN5TFozYlRBMStncFI4cFpNWkwx?=
 =?utf-8?B?OWFDR0pHTCtPbE9LQ2MrK3ByNHArUG1SODVkSWJWeFczU2hWWWh0dEtueGdQ?=
 =?utf-8?B?QW44MERPZzVvdkx2a0RzMktZT3p3U2NVRnFzTkdLK2lpa3pXL2FCL0RaSVdl?=
 =?utf-8?B?RTUwYkcrS1RqeUVQdmw5WUdBT0hCd3A1R3QwZ3V3STQrckx1aUhkcUp0RXp1?=
 =?utf-8?B?NTlSclZ3L1BabnY3WHdUZnZoNk9jclY3c3pwREJxdW1BMm02bEsya3NQMXVs?=
 =?utf-8?B?QzBtZ3lCa2EvTkpJTFFTaEUwNklOMGllSjlPa2JIL3JWelFPb0FUSGt3Z092?=
 =?utf-8?B?ckF1Wk5hTVd5R296Q3JKdG1VbFdhdUo1WmhMdjRHT1BlaEhMc2VHM0l6SUhS?=
 =?utf-8?B?S1ZQa0JISmd5NWNvV3A1NE8rUEt2V0lnWlNNUVhBcGxDUEUzRXBYL0Rua0Qr?=
 =?utf-8?B?TVgrQWIwTWJJMWNVYnZZVytKU2JIVkFjWDBITW5kVVpib3FnTFQ2dCtncjhs?=
 =?utf-8?B?VW5hY1V2RFdkYm5ZM01OK0w5cTA4bEFobkk0c25TUUhCajhUYXN6dHVZQ0M2?=
 =?utf-8?B?dDRZcmZUaVZGVHJwOVNsZ0RKRWlidjQ1cGZQQUdTU0VWeG1uWThOakhXa21k?=
 =?utf-8?B?bDIrU0srR05aZnF5UWtDUlg3Z3czMmVaQU5HdFVNdi9vMWVWZC96MTJNYzNu?=
 =?utf-8?B?WVROWUN6TzVpMGZNcWFmZVd5ZER3UTk4Z1MzZitXeHpsKzF6ald6NStpQkw2?=
 =?utf-8?B?c082bG1FS1ZWYTlaWFMrd1RaVHRESTVGV3prVTBMbXliOHQxL3R0Qm1DVUI0?=
 =?utf-8?B?Tit2dlhDOHFzVnM0SWY3QlUzbENvTTg1ckRTQ3lncm9CMXdraCs3RlR6THZ5?=
 =?utf-8?B?clgyOU5aZ1pnU0xqajloWWtSaVZqQ3ZBck5SOW4zRmVNOWVyQzBGZVVlRTdX?=
 =?utf-8?Q?kmwF+aZpjdU9j0zXxs=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?WEw5WHArWGdWeFJkeXNTWTI2V3dnRTVTbG1Pa09oajBzYUplVVAranFKdy84?=
 =?utf-8?B?UlNrSUFyRytqYWlMVU05Q1l4NmRDL0NCZUtiUVRhcEJLUWFCZDRLeVVjemxp?=
 =?utf-8?B?SHU1SndrYjVjZHE4NEJDUE1mWktSejZHUDFXVVhNVHFJaTl1ZWJ4bGFrcmdh?=
 =?utf-8?B?V3BTeXBxSnRJVTRGOWN4cFZZMmZUMk93V0FydmRMTjVuMnZRSXRVdnp1TnVT?=
 =?utf-8?B?U1pneGhaUnlVZ0RGc01wTWdXbDJlZDREeVc5Tmc2c0F6SEdkZUJYWFlIT3Bn?=
 =?utf-8?B?OU1uK1p3Y3dVY3JxRVMwWXcyWkR0bXZ2YWxUSUwzMW5SZnpFbXZSb1VmR3k1?=
 =?utf-8?B?b2ZSVUQ5bmdXa0w5M2pyL01SdEhIVm94cDI2T25LMDlqSSt1aG1sTjRsMkpR?=
 =?utf-8?B?M2NFMWliNWpGVkoxL0N5L1AxdUNEZkp5c2pkdU9aYmtVOGJ5RUNTM3VoVENX?=
 =?utf-8?B?Ui9EeHIvSlRjTTY5K20yQWdjZGgvV29RdDlUWk8zWUpHaENJTU00eDJ4N0Fh?=
 =?utf-8?B?MWdESWwzcmNUZjJDM24xbi9PVEQ0Mmg4dGNrazNFNmh3a3M3WEhaWUlZNGRi?=
 =?utf-8?B?NmZ4RnRGbkhoM1R4c0JHUHhrRk9oeVFqTTJFcmwxVDlPNVFPR01KQm1YbkZ6?=
 =?utf-8?B?M0pzdWx5WDFPMTlGVjUxVHd1aUlvdTB1RmxaSWRtdElFd2dFQ2VYcmhkbTl5?=
 =?utf-8?B?V2w1SU9XS1F0cFhWYTBwVy9ySHdJTWxVckxtNDcvQUZvTFlBTXMrNFFNSTV0?=
 =?utf-8?B?VS9EMmV4SG8wY2d2aEp2OWs4Sk5jYkRoanhobFpySHpuK0x1N3FwV3dhVTRU?=
 =?utf-8?B?SS9Kb0Q4WnVnZWNWb280YTFYZUVzVjZQYnZGaUswelBFZG9OWkV5bUZmbThy?=
 =?utf-8?B?R2JaZTRWOHRZb2JaTDVoMVo3ZTIvdW44Q1VKZWJYRllKNW05dWJrTG5UNEZX?=
 =?utf-8?B?eE51VzZOOGl5QkNqT21xWURValdQbWh0eEdEUzhYOW1vVWtIbHhERzdWUmd0?=
 =?utf-8?B?bHJCZkdLeDRTNVl0UEllUGIwQ2VMRkxxUnlrd09OZFgyQ3hBOUVBNVdHRFVr?=
 =?utf-8?B?ZjFFcHJ6WEh3bXQ0eVUzUUJJRjYwY3pBbkpNelluMXRuK3lJeC9heDJJQlhl?=
 =?utf-8?B?OXpIWVE5T2YvYWdjR0kxd3o5YWdncUtHWjRqWm54elpRVTRrOGpBc3lURjVW?=
 =?utf-8?B?LzBDN1MrT1FqY3Q1QU1qaFB3VWM4UUUwbkd6eTZuMzhDYWd5UFJoZDNnS0hY?=
 =?utf-8?B?Z3dNek41K0tBNWIzemorczFOTW16UlZXOGZuVytqeEtkU3IyRmVXMFdaNDI0?=
 =?utf-8?B?MEFXSGVCS1UrZWdTK25KOE93ZXB3Q29Xa1RKN1pXdDNqUUE1ZFJQYmlyWk9R?=
 =?utf-8?B?THJRN1ZsaFg5SjlqSDlmd2orSzVUeUN0bE8wUmR2eElGcEIrN3ZTeEEyQUIx?=
 =?utf-8?B?RlVLM082MHdDS1BxSlpzRnRhc3E5TEFqbnhTLzdycUpTcTFxcm9zNDFLeGtu?=
 =?utf-8?B?WEIreEI0VldnbXhXbGFKZHpJcUllN3ozM2lveHBRcThDeXN3TW1ObDhEYS84?=
 =?utf-8?B?bDZCZnViUUJWNzNNdlZZekFxYkJheWlsR0tYSUErbzB5MTg4WU03cEhOL2NU?=
 =?utf-8?B?dTU1MFg4S3U2WDJMN291elRYejBxblVFazZVdk93SFRTbmY3Y0NMMVBPaWpR?=
 =?utf-8?B?bGc4eVJmS1lTVWo0RytJNEpmVnlTWjN1Vmg2YjQzZUpHQUJsck0wRTVzNWhG?=
 =?utf-8?B?NEdEenZOS1hScncxSWtZOTBYaVFtdis3VnRGak9rcm03ZkpLUVhIVlhmU0ts?=
 =?utf-8?B?U3MxOEpwSnpiVjhmOVVuZEFFdEZLWmlpWkp1L2MwbG1YQUtoTU9hQTFwWUdY?=
 =?utf-8?B?SkVIOTU4OGc0ZVF3QUU3QXU1cDZUWlB2VUl5blJ2VzAyMjY4cGo4aTRRUzFy?=
 =?utf-8?B?eVlXdTZEYjFQcFliSHRpTi9qdjRhNGZTQ0s4RTVRSzc4clJsdkQ2aGY4WEdZ?=
 =?utf-8?B?Tmt6SUlqY3QrTTVvWE9zTDBvbDR5TGNMaER0c1Q0Tm9WREFiSndvY0R3cC9J?=
 =?utf-8?B?ZjdsZWdvb212b0JOanhMenhodW5zd3RRbUZGdlV1aG8wYXV3MDRveWt2aUJS?=
 =?utf-8?Q?m4zRLwasFTcv+HfKrC37pMnLI?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: f5bf934d-dd70-407f-e7be-08dcbac03300
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 12 Aug 2024 11:16:23.5797
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 153HTUIc7N6qLfklQIL/Hz21z3iH7di7m77pqF1WyEnIMFu/MSNs0lBk/rSd5MaANd5ZXvsQQtvI69nBMaZCow==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH3PR12MB7739


On 8/4/24 18:10, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:21 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Differientiate Type3, aka memory expanders, from Type2, aka device
>> accelerators, with a new function for initializing cxl_dev_state.
>>
>> Create opaque struct to be used by accelerators relying on new access
>> functions in following patches.
>>
>> Add SFC ethernet network driver as the client.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>

>> +
>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>> +{
>> +	cxlds->cxl_dvsec = dvsec;
> Nothing to do with accel. If these make sense promote to cxl
> core and a linux/cxl/ header.  Also we may want the type3 driver to
> switch to them long term. If nothing else, making that handle the
> cxl_dev_state as more opaque will show up what is still directly
> accessed and may need to be wrapped up for a future accelerator driver
> to use.
>

I will change the function name then, but not sure I follow the comment 
about more opaque ...


>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_dvsec, CXL);
>> +
>> +void cxl_accel_set_serial(struct cxl_dev_state *cxlds, u64 serial)
>> +{
>> +	cxlds->serial= serial;
> Run checkpatch over this series before v3 with --strict and fix the
> warnings. Probably would have spotted missing space before =
>
> Sure it's a series that is kind of RFC ish at the moment but clean
> code means you don't get nitpickers like me pointing this stuff out!
>

Sure. Thanks.

>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_serial, CXL);
>> +
>> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>> +			    enum accel_resource type)
>> +{
>> +	switch (type) {
>> +	case CXL_ACCEL_RES_DPA:
>> +		cxlds->dpa_res = res;
>> +		return;
>> +	case CXL_ACCEL_RES_RAM:
>> +		cxlds->ram_res = res;
>> +		return;
>> +	case CXL_ACCEL_RES_PMEM:
>> +		cxlds->pmem_res = res;
>> +		return;
>> +	default:
>> +		dev_err(cxlds->dev, "unkown resource type (%u)\n", type);
> typo. Plus I'd let this return an error as we may well have more types
> in future and not handle them all.
>

OK.


>>   	pci_dbg(efx->pci_dev, "shutdown successful\n");
>>   
>>   	efx_fini_devlink_and_unlock(efx);
>> @@ -1109,6 +1111,8 @@ static int efx_pci_probe(struct pci_dev *pci_dev,
>>   	if (rc)
>>   		goto fail2;
>>   
>> +	efx_cxl_init(efx);
>> +
> As below, have an error code. This is not something we want to fail
> and have the driver carry on.


As you have seen in another patch when CXL initialization is taken into 
account, the driver can keep going if this fails.

Those pci_warn/err inside CXL core should be enough.


>>   	rc = efx_pci_probe_post_io(efx);
>>   	if (rc) {
>>   		/* On failure, retry once immediately.
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> new file mode 100644
>> index 000000000000..4554dd7cca76
>> --- /dev/null
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -0,0 +1,53 @@
>> +// SPDX-License-Identifier: GPL-2.0-only
>> +/****************************************************************************
>> + * Driver for AMD network controllers and boards
>> + * Copyright (C) 2024, Advanced Micro Devices, Inc.
>> + *
>> + * This program is free software; you can redistribute it and/or modify it
>> + * under the terms of the GNU General Public License version 2 as published
>> + * by the Free Software Foundation, incorporated herein by reference.
>> + */
>> +
>> +
>> +#include <linux/pci.h>
>> +#include <linux/cxl_accel_mem.h>
>> +#include <linux/cxl_accel_pci.h>
>> +
>> +#include "net_driver.h"
>> +#include "efx_cxl.h"
>> +
>> +#define EFX_CTPIO_BUFFER_SIZE	(1024*1024*256)
>> +
>> +void efx_cxl_init(struct efx_nic *efx)
>> +{
>> +	struct pci_dev *pci_dev = efx->pci_dev;
>> +	struct efx_cxl *cxl = efx->cxl;
>> +	struct resource res;
>> +	u16 dvsec;
>> +
>> +	dvsec = pci_find_dvsec_capability(pci_dev, PCI_VENDOR_ID_CXL,
>> +					  CXL_DVSEC_PCIE_DEVICE);
>> +
>> +	if (!dvsec)
>> +		return;
>> +
>> +	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability found");
> pci_dbg();


Right.


>
>> diff --git a/include/linux/cxl_accel_pci.h b/include/linux/cxl_accel_pci.h
>> new file mode 100644
>> index 000000000000..c337ae8797e6
>> --- /dev/null
>> +++ b/include/linux/cxl_accel_pci.h
>> @@ -0,0 +1,23 @@
>> +/* SPDX-License-Identifier: GPL-2.0 */
>> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
>> +
>> +#ifndef __CXL_ACCEL_PCI_H
>> +#define __CXL_ACCEL_PCI_H
>> +
>> +/* CXL 2.0 8.1.3: PCIe DVSEC for CXL Device */
>> +#define CXL_DVSEC_PCIE_DEVICE					0
>> +#define   CXL_DVSEC_CAP_OFFSET		0xA
>> +#define     CXL_DVSEC_MEM_CAPABLE	BIT(2)
>> +#define     CXL_DVSEC_HDM_COUNT_MASK	GENMASK(5, 4)
>> +#define   CXL_DVSEC_CTRL_OFFSET		0xC
>> +#define     CXL_DVSEC_MEM_ENABLE	BIT(2)
>> +#define   CXL_DVSEC_RANGE_SIZE_HIGH(i)	(0x18 + (i * 0x10))
>> +#define   CXL_DVSEC_RANGE_SIZE_LOW(i)	(0x1C + (i * 0x10))
>> +#define     CXL_DVSEC_MEM_INFO_VALID	BIT(0)
>> +#define     CXL_DVSEC_MEM_ACTIVE	BIT(1)
>> +#define     CXL_DVSEC_MEM_SIZE_LOW_MASK	GENMASK(31, 28)
>> +#define   CXL_DVSEC_RANGE_BASE_HIGH(i)	(0x20 + (i * 0x10))
>> +#define   CXL_DVSEC_RANGE_BASE_LOW(i)	(0x24 + (i * 0x10))
>> +#define     CXL_DVSEC_MEM_BASE_LOW_MASK	GENMASK(31, 28)
> As I think Dave suggested, pull any defs you need to linux/cxl/pci.h or whatever
> makes sense and make the exiting code look for them there.
>
> Ideally do that in a patch that does nothing else as simple
> moves are easier to review quickly than ones mixed with real changes.


I'll do.


Thanks


>
>
>> +
>> +#endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2070.outbound.protection.outlook.com [40.107.92.70])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id DA60616FF45;
	Mon, 12 Aug 2024 11:35:20 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.70
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723462522; cv=fail; b=l8CnJuGeuDO7/CpqmImEvYw+nHapILd/GEPwA4yOhtqJ8TH1048/uX6L3Gr/aUydz9HZrMOXzGFlLDSnlNOB5qwZycYzfcU8F7Q+pR94JZt+D7ToLNHhm8+kUXM3svZAytJ2b+fMRatYv2Yiw8ZhCZ5wdfxMv7uGw5YZUmHhtXQ=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723462522; c=relaxed/simple;
	bh=HVDhb4cVB8eJOFVSheUM65H/GXnCSGJ0NHx2KudNfpc=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=lZ1+bV7mwvKecQ0V3O7dNrOSszZZdOp7H1rJL4fbpYiRZglu3u2wCifwd4+wlxZBlLtPo8XR1iTXYZ3e+rbUVF3brx7U/HS3U283a+5h9XdTi4gFqZE8sO/HRDbxpM3P59VDSzqr+b0+moQnDnHzXEdnHfykLyMQAX5WRdU3Qcg=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=FqiTfTG2; arc=fail smtp.client-ip=40.107.92.70
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="FqiTfTG2"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=QFbCYGUhjw7PP4ArCz1K8eEhoo8zcWvtWdoCJ1vu+UdWa4HK5KB61WJoG1qPP+BB0vEEr3uoyYPx4XbDfcakHllY+socX/uyrsXZBeUhZaxOPrwhznsDUwpCohW9MY9WG7ZQl5BLs/Y3pdmt5TskLaPQWIL2WcUd6el1lVao9+Fsky6xiKnvFUQ1dt2XNlmv1RkU7b9JNzJwSMJKXzUYz8v7PZeKCbSBksnkdGd0aSYkjhH2QEHSRs4UMF0Fg/u/mW0qg8HYGaq/Pmfl2snHcPG9cjwvOG6tstajUPizqe7cuaYRq6l4GdNpg2VEM3vfGGXG1pj2MiaZ/ZDQaax1dA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Ai6aHEh3basw1YzmGMWEt/UHrrKdmhbzoLied5U5q3A=;
 b=Fna01iGxj2dVNCClZ98ks79jICGs1Dfy1bUKbd2TzYcrwGpN8x6S5FnEi3elAz4SJS5D69LY/CE9yhzR+slq+R3OF9D4Jn4FLcrNF23etZXETQ1+pZoA4VOXeK7XymOvgYmpc6xf3ijeL4xo5CZws4Lkxicoi1gWDCpDgEcsYM1lIdTbzf9uTvxG+VzkChIKXOrB/IRESA/yMpW44vDB04ty4FjRvIhdTyh87Tp++D5YiqswSfA/eZuSuCBx5GuFzl2KRbz92Vu4pl0Do8IL6VQN/+wNKZmBFcTCBLmsDNgS8fHANMPd2tAsx4F+UAjNtp9qd3lgWMUwmrrAg1An8g==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Ai6aHEh3basw1YzmGMWEt/UHrrKdmhbzoLied5U5q3A=;
 b=FqiTfTG2kV0Uv1fhtq+bNFWWKKGFwV08E0wjVq4YML++06MxSEnzdVDqGg4hhzfJiDXd893G4QHYEwuv1EUX5xXhrdxdTlZeESiY2J5ElGgQ9ULt6Vu6xoHto8nzWoct8NDasO3vGtueBxuOwpljiG3VoTq+85+xd9zVMP7GZ9A=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by MW5PR12MB5652.namprd12.prod.outlook.com (2603:10b6:303:1a0::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.22; Mon, 12 Aug
 2024 11:35:17 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.019; Mon, 12 Aug 2024
 11:35:17 +0000
Message-ID: <8498f6bd-7ad0-5f24-826c-50956f4d9769@amd.com>
Date: Mon, 12 Aug 2024 12:34:55 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com, targupta@nvidia.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <20240809113428.00003f58.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240809113428.00003f58.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0245.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:350::17) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|MW5PR12MB5652:EE_
X-MS-Office365-Filtering-Correlation-Id: 98de69d1-413d-48d0-0ae6-08dcbac2d6ed
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|7416014|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?NitDMENYYittU2hib1hpWTlkZHBuQ0tHOEsxbElCay83dDlTMjRwRjI3TWsx?=
 =?utf-8?B?L0pPR3hVV21DQkxSeFZhTWFsSkdyNmJGSE8yakV4YXBPTG9McXNZd1U0TUdO?=
 =?utf-8?B?V3hGTlNMeWo0amZva1RQSDV3TURvQkFVcmdaalhOV01rWXRWQTJvMU9kdHBS?=
 =?utf-8?B?SUxiWW9YV21FSkZwMlJxMXdvT3hMeUtITGpvSXlaWjdtcEZjS2xHdzA2Vll2?=
 =?utf-8?B?UGdPZ0xqN2Zpc3NpYXl1ZXdISGFvRUlCRWc3bEcvNERObGc3YjFqcFpzU1c3?=
 =?utf-8?B?MEp4RDgzRVA4RVlPOW9NRFY3YURnSmtzd0cxa3lFc2JIMnpNQ204NCttYm1M?=
 =?utf-8?B?MmFKa3ZpT0N3NWdjSHEwZGtROHkvWFBMamp0M3lQdEE2M1oyQldQUFNTdnlp?=
 =?utf-8?B?ZGprYTllTy8wSHl6ODEySFdUWXVqdjVjR013cUsxQTMxRHVYMWxEUUJ5M0xS?=
 =?utf-8?B?ZGNrMSt6N25HRWlwM2c2YVo4RkhCaU96cWd3bkRsTmYra0xyakpSU0NGWnUz?=
 =?utf-8?B?di9sUXdzdzhDNUdUSGppZSt4bnZiZEhuUThWay96WmtlVWdGUFp1TG8reFpz?=
 =?utf-8?B?ZXBTNHRWbnR0OWdHM1dmd1d2Ukl2akp0TzBxaW03aW9BdmVsUVBUWDNYNlNW?=
 =?utf-8?B?SjJSdmpsS1VxWjR1Q01SY3JrcGZ0RDFFajMwb1ZwOGJDdndPRzNEbXkvalB4?=
 =?utf-8?B?dEI4RDdHZFdhcnZjbm9sYVY0ejVFd1lvaUZMWTJ6VlduWXNyRjg2SGx2ZWF3?=
 =?utf-8?B?MFFYZ0ozOVBCMGRKS04zUU9vTFZRMStYV1pseHdEMFBCVS9PMEM3Vm8rTHAw?=
 =?utf-8?B?N1ltY1lueTNrbmFxOXpkVzVtd25qZ3p1U1J1UUd1TkgxZHNuSW13a211SHhO?=
 =?utf-8?B?elpJMVp1eWtRb2FpQXA4WTJ0L1l4UFVkVFJ6dW1oRUdxSVJKTmh1SFh4MUo4?=
 =?utf-8?B?UEFseHZTUFp4bjhsTHlvbS91R2J5cnU2WldTeGUrU3FzSEM2YjNzMDhPLzV2?=
 =?utf-8?B?QzJBTzl5cHpPeFpDUC9ZR1lLZWsyQnBjWi95cSt3dXVxWnJjSElqREF4alAx?=
 =?utf-8?B?UzJQbUhZa1VRNVk4VEtwa2NIOHdpQS9ycW56SVQzZURCWVBOR0F2bzY3LzZo?=
 =?utf-8?B?bTJuSUxxN0hncVVWMVV1Y2ZLdkJtdkpDaW9FZnUyOXVyaEI3K3dOZ2hzRWZR?=
 =?utf-8?B?dFBPMDNjMkowSTBnR0hUd2ZqelNHVjRpVmtjaTZrcmdPM1dFMjJHMlU4V1RQ?=
 =?utf-8?B?encvajd4SDY1OUNsUFIxU2FRSVNmQkUvYkdLSEJJaXlQdXlJQ3FRV3E0cUZn?=
 =?utf-8?B?SFRUY3ZhbGVGQWt3V1Q2SlNnc0pqVGtCa3g1VURpOHYyOGw0ZlYxTG9yWWR6?=
 =?utf-8?B?bzVvVE95QjZCVEM1Tk1scFdKWmVUcTBnR3JudzlDOTlVWDlJYSt4NTg1OTM1?=
 =?utf-8?B?aldPTENLZHF0akhpdVZvb24yVUxYZ201dWFaZnpEM2VMU2h6TThGWnp6bXRL?=
 =?utf-8?B?UkpaTEU0NU9kUmdKMFNId2xiNlljRXVTNkJWbWFKRzZlamFFbHZUODVGWk1m?=
 =?utf-8?B?MHJiNFZ3NFZqVTFLSVRnRFNPbzk1R0tOZlpqaDZMMXgzb3B0MEs5WHo0NElV?=
 =?utf-8?B?SXF0MXZsbFdrUFhuNEtsaExiYTRlWCsvZGxWTXFpdG5zeFBIQUllaFJ5a3h3?=
 =?utf-8?B?b2p1THAwWVQ0MTFETUxUVGJmOW5PRXBmSUxDb0QzVGkzWHNHbUlQRnptejhK?=
 =?utf-8?Q?thPlw7ldYEP65lAnyuHu2QAgtRNV5NQ0A4BxdWu?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(7416014)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?L3k4QzkrcUVOaXNIdU5PWk4rYW5TdnZrdDcvaWR4T2F1NkkwT3NZRnUxdmhJ?=
 =?utf-8?B?MUtzaFFZZTBpb1dtMVViWVM1M2xpQ1ZNK040dTVkbHdhb3VZUXhBNE1RbWNr?=
 =?utf-8?B?TDJjWWRXVjFNdjlVanpYNTgwTEVDYUE5SWI0M1BhVGxmMnRrQjdKa2k0Lzhq?=
 =?utf-8?B?Qjd6c1VyZXM3Y2cxOEdiY2I5UXdkNVZPaDFKOTFQUitWZ0pxQU85ajlpYWoy?=
 =?utf-8?B?QnRkd2ZPZkpHKzhMbU0wMnF1MGpqanE0Q0pjSFBFU2o0a0pPQm1QcXRZVmJV?=
 =?utf-8?B?dkNlRE1ONkxqY3JPYTJVelNIWUVKVFRxSk5UdVlaR1dZWTNIaDR4Y3h4dUs5?=
 =?utf-8?B?dHZOc1A4K3Bkc0Q4dlRwSmFQS2o2MklTU0ZLRmZMYk54MUlLa1RjbUVZb0Qv?=
 =?utf-8?B?M0diOEFSSkF6UUJad05PK1dBRzlkeG5sUmc3M2VTSDVqdmpGcXNiSjQ1Z0dB?=
 =?utf-8?B?YXkvSnJRbjFKNis5TTBTU0s3TFYxUWY4b3RFZnJ2MnFoUWhGVmtBN0NCMU81?=
 =?utf-8?B?UFBnVE52ZitSM1hmSjZVUVptbEp3eGJyOG0ydVJsanpqZ0RrY0thMytMRkYz?=
 =?utf-8?B?cW1XUUFJUEZ5YzUzbWdvWGkvTU5pUnBVZGdKYUxibDZaYkYvNitaemoya1hN?=
 =?utf-8?B?SmpPN1Jqa1g4bXlXcjZwRk0wU3pwSFZvR1MxS1pWMVZ2b3ZQdzlHY2ZhcjVZ?=
 =?utf-8?B?d1RPOW1mS3dJNTVaWlBQNFdQaW1QYTEySVVRejMxWWlJL0ZCbVY2eDBjRmFB?=
 =?utf-8?B?UXJMbk5JbUlKK28zNHNyblNTdmUyQkVnY3dBaStTSnZDWCtJT1lDY1V6VTM2?=
 =?utf-8?B?aWplRWZ1a0lhUk5kd3o2Ymc1L0VBcHJ5dEJ3WGxISzVMR0lFTUcrUlZOR1FD?=
 =?utf-8?B?NlRkMkNlS3dGMUc5akNNcjgxMGozamlOLzVUSm5CNnhUV0pyalRBMXVYU01Z?=
 =?utf-8?B?NnM0S3FGY1BpS2VNaEFPQXk1N1V5djB3RW5SOWJhWS9Pck9NdnVYMGM2ZVN6?=
 =?utf-8?B?eG5ieUEwMTJydzMyMGJQc2tSMklsTkM0aFM0N2dHVXd3TWlTalVoNE1rdlJM?=
 =?utf-8?B?QXB4YlljbjBaSzZvTXRwc2djbWMyR1F4RjMxRW9QY1MwS0xBZ2ovTjU4b2F2?=
 =?utf-8?B?RytNQW05aEMvdmJCa3g2bytCNnJDVGwyU3lhR2YxVGFBTy9zanNZUnh5RG15?=
 =?utf-8?B?dEtJRU0xWTFPM1VGUTd5NUF0ay82c2M1QWhLOFE2c0xiR3VKb294VDlMSmkr?=
 =?utf-8?B?eEZuWmVaOVNiY1hGNWZjUmFOWWk1dzhkUGRGZ2J1RlZCVnZsSnArRlZDY3Iw?=
 =?utf-8?B?cDRSVzZEeXJlQk5BNjd3SVMvU2JNUSs3YU9IbGY2YUlZSUF5Z01Bby9ZZ2RM?=
 =?utf-8?B?RU95QlhiRzlzSjhoMTA4amJqY3VZemplclNidzExRmpjRGxQUkI5d2RjNzBX?=
 =?utf-8?B?NkxVZlhpM3BuSDFZekZyMmNyUkZQVWpsWVMwWFY3dkxKRkJxTlpPNElsOXg0?=
 =?utf-8?B?MHg4UGhOS1ptUUZTb3NiUDlGL1FZSkhlTFJTaDJ5YVFwU3N1Q0w3Kzg4bFZm?=
 =?utf-8?B?V0oxN3d0TE9lLzcxTVRWVXhFb2hnRUhsUjVpd1Y3WVVTQmsxMnJiU1dVcFh4?=
 =?utf-8?B?N2tWT1FldnQzNlZ0RkNiWi9kSVBqekpvTjJ3ZXhKalhsMnZiR05Sd2pQWkUy?=
 =?utf-8?B?ZDNEQTNjdVREbEFmdDdqQjFxRVlYMWZTOHZ2MmNiYUQ2YWpTeE1GSWxySVNy?=
 =?utf-8?B?b2ozWDRIWGE2M2o0ck5IRm1SajhQcVlwbld2ZWlBQkFtN2k4MzRxVUlUSExQ?=
 =?utf-8?B?ZndVeVBGK3FFZGxYQ1J5MG9UL1hHY3FLcnZXQmVUbHgzY3dSMTJjbFVPMGRn?=
 =?utf-8?B?dFZqaS9HY3hGRTUycHNhRmJoRGd3NGJhR3Zqa2ZGWmgrTGUydW1TeW9Vcy9N?=
 =?utf-8?B?djB6VlllNVkyZ1pEc0UyRTFGRk9VSjZ3S2dIall4WjZQejIvdTJVYlErUTNE?=
 =?utf-8?B?bnpsQXV3UWN0NkthNWtxcFMwN1k3Vng3Q1hhT0o1K3hEVDJRNVVsWXUwWVc5?=
 =?utf-8?B?OXRIZ2hVRWU0OUpyUzVnd2lSWENzVktwei9Dd3Y5Z0cvb2lKOStaazFVaTR4?=
 =?utf-8?Q?1g8leHxw9AHVKbpOutsifcMWn?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 98de69d1-413d-48d0-0ae6-08dcbac2d6ed
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 12 Aug 2024 11:35:17.4032
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: XbOJctqn2FJ88UabnMMGo98rvf7j7vBobKFaC5umbQrSvBE6/eMafoolChP+7bdslAyq7TY2ukpEsbfrCAe2yA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MW5PR12MB5652


On 8/9/24 09:34, Zhi Wang wrote:
> On Mon, 15 Jul 2024 18:28:21 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Differientiate Type3, aka memory expanders, from Type2, aka device
>> accelerators, with a new function for initializing cxl_dev_state.
>>
>> Create opaque struct to be used by accelerators relying on new access
>> functions in following patches.
>>
>> Add SFC ethernet network driver as the client.
>>
>> Based on
>> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>> ---
>>   drivers/cxl/core/memdev.c             | 52 ++++++++++++++++++++++++++
>>   drivers/net/ethernet/sfc/Makefile     |  2 +-
>>   drivers/net/ethernet/sfc/efx.c        |  4 ++
>>   drivers/net/ethernet/sfc/efx_cxl.c    | 53
>> +++++++++++++++++++++++++++ drivers/net/ethernet/sfc/efx_cxl.h    |
>> 29 +++++++++++++++ drivers/net/ethernet/sfc/net_driver.h |  4 ++
>>   include/linux/cxl_accel_mem.h         | 22 +++++++++++
>>   include/linux/cxl_accel_pci.h         | 23 ++++++++++++
>>   8 files changed, 188 insertions(+), 1 deletion(-)
>>   create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
>>   create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
>>   create mode 100644 include/linux/cxl_accel_mem.h
>>   create mode 100644 include/linux/cxl_accel_pci.h
>>
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index 0277726afd04..61b5d35b49e7 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -8,6 +8,7 @@
>>   #include <linux/idr.h>
>>   #include <linux/pci.h>
>>   #include <cxlmem.h>
>> +#include <linux/cxl_accel_mem.h>
> Let's keep the header inclusion in an alphabetical order. The same in
> efx_cxl.c


The headers seem to follow a reverse Christmas tree order here rather 
than an alphabetical one.

Should I rearrange them all?


>>   #include "trace.h"
>>   #include "core.h"
>>   
>> @@ -615,6 +616,25 @@ static void detach_memdev(struct work_struct
>> *work)
>>   static struct lock_class_key cxl_memdev_key;
>>   
>> +struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
>> +{
>> +	struct cxl_dev_state *cxlds;
>> +
>> +	cxlds = devm_kzalloc(dev, sizeof(*cxlds), GFP_KERNEL);
>> +	if (!cxlds)
>> +		return ERR_PTR(-ENOMEM);
>> +
>> +	cxlds->dev = dev;
>> +	cxlds->type = CXL_DEVTYPE_DEVMEM;
>> +
>> +	cxlds->dpa_res = DEFINE_RES_MEM_NAMED(0, 0, "dpa");
>> +	cxlds->ram_res = DEFINE_RES_MEM_NAMED(0, 0, "ram");
>> +	cxlds->pmem_res = DEFINE_RES_MEM_NAMED(0, 0, "pmem");
>> +
>> +	return cxlds;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
>> +
>>   static struct cxl_memdev *cxl_memdev_alloc(struct cxl_dev_state
>> *cxlds, const struct file_operations *fops)
>>   {
>> @@ -692,6 +712,38 @@ static int cxl_memdev_open(struct inode *inode,
>> struct file *file) return 0;
>>   }
>>
>> +
>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>> +{
>> +	cxlds->cxl_dvsec = dvsec;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_dvsec, CXL);
>> +
>> +void cxl_accel_set_serial(struct cxl_dev_state *cxlds, u64 serial)
>> +{
>> +	cxlds->serial= serial;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_serial, CXL);
>> +
> It would be nice to explain about how the cxl core is using these in
> the patch comments, as we just saw the stuff got promoted into the core.


As far as I can see, it is for info/debugging purposes. I will add such 
explanation in next version.


>
>> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct
>> resource res,
>> +			    enum accel_resource type)
>> +{
>> +	switch (type) {
>> +	case CXL_ACCEL_RES_DPA:
>> +		cxlds->dpa_res = res;
>> +		return;
>> +	case CXL_ACCEL_RES_RAM:
>> +		cxlds->ram_res = res;
>> +		return;
>> +	case CXL_ACCEL_RES_PMEM:
>> +		cxlds->pmem_res = res;
>> +		return;
>> +	default:
>> +		dev_err(cxlds->dev, "unkown resource type (%u)\n",
>> type);
>> +	}
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
>> +
> I wonder in which situation this error can be triggered.
> One can be a newer out-of-tree type-2 driver tries to work on an older
> kernel. Other situations should be the coding problem of an in-tree
> driver.


I guess that would point to an extension not updating this function.


> I prefer to WARN_ONCE() here.


I agree after your previous concern.


>
>>   
>> diff --git a/include/linux/cxl_accel_mem.h
>> b/include/linux/cxl_accel_mem.h new file mode 100644
>> index 000000000000..daf46d41f59c
>> --- /dev/null
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -0,0 +1,22 @@
>> +/* SPDX-License-Identifier: GPL-2.0 */
>> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
>> +
>> +#include <linux/cdev.h>
>> +
>> +#ifndef __CXL_ACCEL_MEM_H
>> +#define __CXL_ACCEL_MEM_H
>> +
>> +enum accel_resource{
>> +	CXL_ACCEL_RES_DPA,
>> +	CXL_ACCEL_RES_RAM,
>> +	CXL_ACCEL_RES_PMEM,
>> +};
>> +
>> +typedef struct cxl_dev_state cxl_accel_state;
> The case of using typedef in kernel coding is very rare (quite many
> of them are still there due to history reason, you can also spot that
> there is only one typedef in driver/cxl). Be sure to double check the
> coding style bible [1] when deciding to use one. :)
>
> [1] https://www.kernel.org/doc/html/v4.14/process/coding-style.html


Right.

I think there is an agreement now in not using typedef but struct 
cxl_dev_state so problem solved.


Thanks!



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2079.outbound.protection.outlook.com [40.107.237.79])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 9A1E858ABF;
	Tue, 13 Aug 2024 08:30:36 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.79
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723537838; cv=fail; b=jMaNLX25SV0KhKzQlhpiPJD9RP++WbXGIAyH7WATA496Y9KUkTmui+BpLHxO9i2nr5SXTQQdatbz7CM2uHZRy1pzr8p1kNJVF6uSprwgD3IZynkbYzn5WCy51NyN5GezVXW22fRkCaU3scCZz/uh7J9DldnZSYYV3QJwui0CMLQ=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723537838; c=relaxed/simple;
	bh=tYAyfG2YzxOXjq13G0mqcf8VvkYAKs9iMAIm4fB/egI=;
	h=Message-ID:Date:Subject:From:To:Cc:References:In-Reply-To:
	 Content-Type:MIME-Version; b=qZOjGnz+nDFrLin863apc63ySVKd/TetmSRPuNjlLMriBUke9y/lJKEjp6FS3XCj/Ahl8Qtc4ktmRe6OKJ4Nl6prH4NRywKSwjttclRlEJQkZq/dgyzjvew/IkAB2kR3yZygFpbj6imEo06uuNE7c3abt/0wz7vSgWBIWyTDzb0=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=pqsoA7jC; arc=fail smtp.client-ip=40.107.237.79
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="pqsoA7jC"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=wKM3FPVQwssm6c1bzQGw54VU/jx/QIXIbGOCP1k6FgKqdabIyXfOjGMcBzYM0cmPkSWVjoBmmBU5DdCDRtnb0cCwmfBRgqHeKs0Lrdu4SX33zAwxNsK9j2RR4LIeUAOXCGtKHjcqFomzuGA1PqsXgfFtjdnc/q+pAdW3w/eeXPb2VuEZ2FzxPxna+phZ3ZmpNI9RrR6XVBctYyq0M/NugDK04FNBEluXBHj1a5a7SNpcI42J/OZgsH9BJ9yXMsVfAK8g9FReTEnKqKCksVbj9jBeGGWFZfq26N/krWxRm7W+2IfLKwCIzWBd5l1DMQGvXr3qXYSergcc7fB+2OQeLw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=zu5bJ5SyJliqs+NVcAjf7ZNvxvXoMYKGo1uxvtTp0ac=;
 b=TFz4OdKZJLImj/2zdONXivz2dls3FPZ6X4U9ZpXERy1HuG7b8aOvmLv5x/ew4BOcz4KY/9pG6IKD5mDbizOYvEyqubR92OaHR41ucGNSuTnzSF/nM2bRwUv/dYvisitLxmgPCaRubvRUjyRq1ZyzNL08rjeW1bs7Uoj3AOHF8IukPyhfyIG7fTDEtGccc7zAF0eeydaTAjTID8UVbZmVYfdZBaZuYfIgyb01lA84wfgBaJoGIXExPrso1DMISYrCtRRIUelx8YfohZcSyyEzzWGEQucH3yq/Rf8XUJ30NPNRDDtnOWUsmJC9RBZqMv2tvZ0RQWZxy5B13g9YG/Lp6Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=zu5bJ5SyJliqs+NVcAjf7ZNvxvXoMYKGo1uxvtTp0ac=;
 b=pqsoA7jCaUZwWuk8FQ/7DBt+glyan/rOliL/2dcmc6ZZurx9NUtSqMRjfhkd/rDuHl9WH+bdw1SbtMvUOCIfF8Z9uihfSF17mRV+ED+w+LjyO5ubUR++jilTz3OYw5g0u59TwjP9MNG115UNXo/oOfid1Suq4L58lNVKV98BQBw=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by SJ0PR12MB5634.namprd12.prod.outlook.com (2603:10b6:a03:429::7) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.22; Tue, 13 Aug
 2024 08:30:33 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.021; Tue, 13 Aug 2024
 08:30:32 +0000
Message-ID: <c9391139-edc4-73a0-3ede-d67c40130354@amd.com>
Date: Tue, 13 Aug 2024 09:30:08 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
From: Alejandro Lucero Palau <alucerop@amd.com>
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <20240804181045.000009dc@Huawei.com>
 <508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
In-Reply-To: <508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LO4P302CA0005.GBRP302.PROD.OUTLOOK.COM
 (2603:10a6:600:2c2::13) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|SJ0PR12MB5634:EE_
X-MS-Office365-Filtering-Correlation-Id: f35a154a-52de-4438-c2a6-08dcbb723252
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?bFhzbWxWOFdxcVRVeFladm0weHVLNkpBNGRZemNINzVydC9FamdpRExSWjBS?=
 =?utf-8?B?YUdudHFrL2c3ai9Jc0dtN2xKZnB2c3VPZzFxUlByOWdCQllFd3hHZXE0eFly?=
 =?utf-8?B?RHVJTW4rQ2FDRFhjVU5uZGtJTHIxWGl5M2htNlgyUnJDODQvQStpbnVrR0I5?=
 =?utf-8?B?cU9kTTRZTXVhK1A1M2ViZ2xFaEs3aFlzbS9XQjF2M1Zad25QQko3Rm9RcVF4?=
 =?utf-8?B?UzFCYjRRTXNvNmZ3SnR2aDdWeDY1MDBOem96NHdkaTFXS3gvY2RtTzZyeWhh?=
 =?utf-8?B?Q3hzdTYrY0lvWXYzNDZqZXBVZlQvYTd4VmJqM1ZkTFVJSWwwTGIyengvOFpI?=
 =?utf-8?B?Z2RsM0hpcENYd0xXRHE2MnhKdXJoTmJFWkRNTkgwbldHY3FoQnE5R3UrR2Fa?=
 =?utf-8?B?MU5BL3Fyam1ZWWZwSUhpa2hrVXBNTFptOEJzWlVKZWVBemNrb056SlE3K2V1?=
 =?utf-8?B?bytXTnNkZ1Q4d2hKUXFRRjh2OUpjWkx6Nm9tTkdHblFCNjNiQ0l3OHRtUWNF?=
 =?utf-8?B?Zzl1c2JYVjBlTEFrRzlZMTlSL29JRmNxWDlwTGQ2d0Z6MVZzMTBENDdmdnd4?=
 =?utf-8?B?cnpDQlBCRTk3UTZST0ZZaVNGNnVtdks5VlN3clcwV29QYnJUS3FwZnlmeWdp?=
 =?utf-8?B?b1pYVUhRVzgzUENMVjVSZUVzL2xFRlBieXA5bjFRN2F0OUU4WlJvQ1ZiaDVV?=
 =?utf-8?B?alNzdGpHRFo3aWlFTFNYQ2dlNGFmc08xc1lQRFJGWDZXYVk3eHI0UHB6OGJz?=
 =?utf-8?B?dU16M0V6TVlwN1gxUjFSRUJ0SnlwMllmVk4vSU5LTFpMWDZGU2cyWCtLcmpL?=
 =?utf-8?B?cHpkenhtb2dtUjdnUE1DdkNPTE96dUZXQWJoa04rb1Q5SU5YMGxacXdsUnZV?=
 =?utf-8?B?RGh1dHBidnFPM0J4YThGVVd3UVpWYndxZDhxYUZHRFArclNpdVlQTjJIUlVR?=
 =?utf-8?B?OUZCN0c4eTNQWk1WdmN6VGt6c0RUOUdpZUF6NnhIUnlGYzE4eXVNdHlBa1FI?=
 =?utf-8?B?dXNKSGV1M2hnVk9kSFZCd3NKcEdkM1FFaHdsdy9GTGJIaWEvQ0FLWE9id25Q?=
 =?utf-8?B?MmtDblVIR01GUVJlUkl2WG43TkNKV0NPMVVRR1FIdDZQeFMzZ1V1ODJSVnNY?=
 =?utf-8?B?WHZGZythZGxBQWxHYXZUc2FoWU5YVWY0aVlWS0V2UjR3RmVLZ2tnem0vaEdi?=
 =?utf-8?B?STVyUVBWNG5sNldteXZ3RXVTeUhpOTI4NnlFTVN6aXFpQmlpbjY2R3k3dVYx?=
 =?utf-8?B?YjgzbHJlc1pTQnJ5UE1YbjZONmlSdVJ3L0VOS3pMZnZjOHNHUFlhM1FYOTA5?=
 =?utf-8?B?MG1wZGQ5S3NERzM2N1gyelFoUEhjb2cvNVhzamVkSFRQQmxhMVB1NExRRWNI?=
 =?utf-8?B?aEFrTDRTMis0UU9Td1p1NXEwNE5uVnRJUFRnMHkzU1lUWG9udFlKemZtNkI2?=
 =?utf-8?B?eERUOU0rdDB1enJPZG5KQWM4ZTc3SlFnNTlORW00b0Q1alhOT1F1VjlBNFhZ?=
 =?utf-8?B?SjRISGpsZitsSmhJdHFPdnZTd3Y3U1ByaGZoZUdJa2xkdmxxYjBiTi9ENVln?=
 =?utf-8?B?YWtxRXpKMjc5aW9lVDlDN1ZibjJWb1l4UlNXam9NQ2FOaU1wZUZlWWVSS1Jz?=
 =?utf-8?B?TzRyTnJOK1NiSFN4TDZhbXlMQ0MzTkhEejhGczl2Z2hiYXVEUDc1dG4rOTdn?=
 =?utf-8?B?MkFqUUhmZGVoQSthZHhzOHRPVU96ZUFGdnZxc3VmS0pTVzdCVHQ1amY0U2Uy?=
 =?utf-8?Q?rwrD8vr1WaBd5lPVUw=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(366016)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?WXpGTnVCNS93UmVlL1AyeUZnUy9qOVZaV3dUbHFuaVE5cEdBbFkvbzFkL1Ja?=
 =?utf-8?B?anFqbUV6MnNNMGRJOTJPam5pL0w4VzFOYmxmT2hxZ2ZsSVUwd1RPaHArRVpM?=
 =?utf-8?B?akJDUzFtcDBoSkNaVmpPdW80OEJXOHczMlA3dmtSdFR5SkZXdFk3ZmxTYzNk?=
 =?utf-8?B?UHh5cjJ4UWZVMVNtT3JIUHFsVnJUdUxOWHRxYkx5QW5jRlNSOUh0TVZ0M2ps?=
 =?utf-8?B?OVFWVCtrUHRYNXcvbEMreXFNUVlzZnNqYlBMeVpaVmhCUFZqQXhCNzQwSlBQ?=
 =?utf-8?B?OXZoSUFsTmQ4d1NGNGU0VnJ2bDlaSHFLSjdhU3RNOUJoNnh1TGpjVVJBYmNl?=
 =?utf-8?B?SGsyWGlTcDRxSVZWa3RHaFRTSE43NlhVV2xLK1RkaEk4N0MyMG81ajExMDhM?=
 =?utf-8?B?dWI5RzdIVFNhVHJNSkZmdEtNVThpM2ltb09LQkFWR29POW4yZFBoaVF3M2pj?=
 =?utf-8?B?OGs0Wk9UOTlSK1V1eVRVbnRzWXRBZ0Q2VkY4VHBUUGwxbFB3cEpWTVFzQmRG?=
 =?utf-8?B?UE9KYkJRc2IyZHdLTzB4MUtUdEhzU294Zm01ZTg3am93SS9RSFRJV3BkcmVv?=
 =?utf-8?B?b2p1Q0JCdHgxbDA0NW9NTGs2SFNpYjlHaWdVU3dBYUNyWDBCUG92cjhtTzBM?=
 =?utf-8?B?VWtIdnJCcmptTzY5TXNyUnNSRFRhNWZZU2E1Mk5lQ1JJK3FaR0xWVUF4bFow?=
 =?utf-8?B?MXRZSVJSVVJVdTlsL0JkMlArVzYzQnhFbCtycUNjUHQzQkRRWWdmdlRCbGx0?=
 =?utf-8?B?THJ3bDNkUzNTWE5zOS9sMXpwdWJFNXJSa1NZdlhpYXlDc2owR1hHMXFaaUJ3?=
 =?utf-8?B?MnNvM1pQTnhpeHk2NDZoaWF2QWRKS1l1R2UwSER2NEY4V013c0M0NXJpSEw0?=
 =?utf-8?B?VjNmZGU4bTRKS2x4V3JNQXpFSStJOXdEcHZyUlJYZU14WFNXYUs2NXlSK3dW?=
 =?utf-8?B?N0k1VWR1OG54RUtGWGVCNXo2LytmbzRlTzhIQXF4Sm1mVm9XMmpUWVdtYkE5?=
 =?utf-8?B?emZuUzFKTnFJZFg1K3dVMmlzSVZ0Uy93TGd5NHJ1MzBzL3J3ZnVpQ3JHYXI2?=
 =?utf-8?B?cElMQWloT2JTcHU1OElORHNyQTlKU0RWblBSaHV4bC9HV2wyTklTNTVjU01y?=
 =?utf-8?B?WENCSGFHRzJ3Q3d2L05PYS9WMzNJWUJDSzBCNHlUa3ZEcGlwVDBZMWZkdExq?=
 =?utf-8?B?L1FyNVBKbzhhTHhHNm4zc3g2cHorMDMwbDIrQ1U4R0xTelRqaUtwNFQ4Tkp0?=
 =?utf-8?B?ekJLclB6c0FtWGNSam5qRngwS3dsTDFwSHBqUzAvLzdseWdrclZGYk9vc0gz?=
 =?utf-8?B?WXMyWW53bFlBR1hvK3YydUV3eW9CeVlkSnE4cG9PSGNQRFp6V3lXWjZJMVZv?=
 =?utf-8?B?dE96MUVPS3RxMkNTYlVZRjF2T0dUejJHRlJYdXY4WGRHWmZjYmg1WFcyUURO?=
 =?utf-8?B?K3EvcEJLWXR2Sy9pajlZOEYxdzFOT0h3MVNOQjdFeUVwYjc1ZFlMWjQwTFlU?=
 =?utf-8?B?eDJmUzBCak9xQkIyUHZkeWczV2dtL3VhamdjdnVZdVFwb1RwMjNLL1pXUGM3?=
 =?utf-8?B?U3FTV3huWWhFZnVqTXBmUXZ1WC80YitlMkY4SnlaRHQzcm1pMmcrV1ZSR1RP?=
 =?utf-8?B?c0p6c3liOVFaMndaZlJvV3BBY00rTkR2dDNpdmlISng3Z2JFTEtFMmRaN014?=
 =?utf-8?B?cE9hSmg3K0xSOU9LMk5TelBGNXBwekpITTVpMlBsUm1ldG91S0Jyc0ZEK2V3?=
 =?utf-8?B?VG9iaXM3M244UlV5N2E0M1RaQURzRDBTUEFwZ01KOWw4QzdmVmdySGx3OXFv?=
 =?utf-8?B?ZG8yQ3UzeG5sMHZsS3hiSG12TjY3cjFXZUVBa1lzTmJ6UVgySTQyYVpBRUN2?=
 =?utf-8?B?dmtvbnNzaEFCa09VR0hMRWY5MkFxeXQ2YmpOVzNNV1NuRE42aGhuQ29kaTdp?=
 =?utf-8?B?QlR3V3pBOGhtUEdKbVRuOHJSdFhJaXlxaklkZWUzeWM1WDdGaVJ2eWVzdDJD?=
 =?utf-8?B?V2x3NHVWQ1duWUxjQk1VeTJTckdXc1VRdjNnKzZRQitIalY3VmxJN2xUb2Fx?=
 =?utf-8?B?VnNybWlUdXIzU1U1VThhL2JQYU9Qd0RRME1Vdy9XdmxvbENiM1Q2dXA2VW9U?=
 =?utf-8?Q?9QngC8ltUgT1gg2iqFSkltqn/?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: f35a154a-52de-4438-c2a6-08dcbb723252
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 13 Aug 2024 08:30:32.7095
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: nwQO2nwxPhAc+u3db7LS2sDi7I1fP+v2z+B8jnW7zs/ZIn3mqFdWv/6E3NbvGJ0kqdkuxWtLAdIvpHx8a+/MAw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SJ0PR12MB5634


On 8/12/24 12:16, Alejandro Lucero Palau wrote:
>
> On 8/4/24 18:10, Jonathan Cameron wrote:
>> On Mon, 15 Jul 2024 18:28:21 +0100
>> <alejandro.lucero-palau@amd.com> wrote:
>>
>>> From: Alejandro Lucero <alucerop@amd.com>
>>>
>>> Differientiate Type3, aka memory expanders, from Type2, aka device
>>> accelerators, with a new function for initializing cxl_dev_state.
>>>
>>> Create opaque struct to be used by accelerators relying on new access
>>> functions in following patches.
>>>
>>> Add SFC ethernet network driver as the client.
>>>
>>> Based on 
>>> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
>>>
>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>>
>
>>> +
>>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>>> +{
>>> +    cxlds->cxl_dvsec = dvsec;
>> Nothing to do with accel. If these make sense promote to cxl
>> core and a linux/cxl/ header.  Also we may want the type3 driver to
>> switch to them long term. If nothing else, making that handle the
>> cxl_dev_state as more opaque will show up what is still directly
>> accessed and may need to be wrapped up for a future accelerator driver
>> to use.
>>
>
> I will change the function name then, but not sure I follow the 
> comment about more opaque ...
>
>
>

I have second thoughts about this.


I consider this as an accessor  for, as you said in a previous exchange, 
facilitating changes to the core structs without touching those accel 
drivers using it.

Type3 driver is part of the CXL core and easy to change for these kind 
of updates since it will only be one driver supporting all Type3, and an 
accessor is not required then.

Let me know what you think.



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2051.outbound.protection.outlook.com [40.107.223.51])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 08E5274BE1;
	Wed, 14 Aug 2024 07:47:09 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.51
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723621632; cv=fail; b=tGe+YRPkLaYi0G8bE1NNriWVbiVxMnNWn5L+jzodppKwRNfnI7T+7SeEPAo0WWo8UtqfPTOMkAsl2JLVI/A6HFaeRET99oLErXfP5U+0aJ4XCwC1dnRMhfT4cIpuqHQYTINJf65xkRVIB4qrFpzWnBCiSwivBps+XGGtfBHU9To=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723621632; c=relaxed/simple;
	bh=WsmAnKR4HpqP206OR/v87gsWaTlpe6UgUC8N5rO4hvo=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=DCTmPm4TRC3Yb0/KRcyEtd51R5D+zXXljx55d/KTD9T3cPnALcrnI+U3J+0o033l6uxTFTrf/zvsQAiRNx3Yh5Bphbz/+jM+5WAS4NCKZpDqVkNKM+x5VrwoeM/97mp2Wzihsa66W9ILdJ6YqyWVEM+gzmxaALpPNNpNcMuP3M0=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=yVIBaPoC; arc=fail smtp.client-ip=40.107.223.51
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="yVIBaPoC"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=M4mhWwkGA01sMXmFdtdaco/CYmQBYKKg8BKAyVTL3iaMDZZQo2ww424Nwcww8QNy49nwThi73w80MyNpSxwajYdo6p0T2QBWv4VZtsZ8nyulHHoJQ07VUfKkWS1jgMeTdYKQSUBlu2TXWbN2Eg546KmC+fn0S4RfKnYVMv2y8pF5FgcASokYWhWEcRNhuq+12VgyqMWHXlHzyUgZiYiPrHDUvsPcceJGfl4Ow8dj7qEl1SbfqGQ6p6vsDRGw1Tfyx552fIVW2I9l16VrdmV4/CTDWbw1q3dNWkaHq/WRDOQltNdq9iTVhqj1eRAYSbeLmWj5Dr5pqP/xKIjn+N3b8Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=mQ2K5UmV7kV+3ZH/CDG4gqzwzgvJrI7NM6tS3Uoas5E=;
 b=Z173TVABkNOvtm1eVQU5w/cZvR5VTyxsQTAh8wxzKHnqbaj1oJbafekz5+9/FTjjGkEiBL7EpFk8V1nQ3Ll0pZhouV0c/LLMLFAyavqDbmvoxnu3USoXQvgnXsFSRNLorPh9zllF22Kkl4nA3bn5ZHG7ux9tQlCh9Bk9F22bukf6aZopbYmI6O4R/Bi3/jUPVQiSUyBcSqIsr0BM+OFWU+1XZ5XmAwbulH/Ln+kJm3+uoivIsFeU8oVrQfd6GHklbbJYTK3+G6rOuU5b940mLeWbn0xEE+cg9FNHubindun1bWt1OGYXaeaFIozHtf1/61kZmybLxa+3BMvBZZm+hA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=mQ2K5UmV7kV+3ZH/CDG4gqzwzgvJrI7NM6tS3Uoas5E=;
 b=yVIBaPoCQIOmgBBbjz4lbKxWEDJYwsFGAggjrjrGkpMoP8s25YXyWmi49BK72yrhzxsh1ZuYngmJ7Vq8DOFsbaEMDSMSTHCgvdG7iG+AuQ1Nwxw0HmEE54/mC4fjpuEblLT3OoRORwoSWFKiapQWo9x5PahGlXuS2aB+NVyAWYs=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by SJ2PR12MB9190.namprd12.prod.outlook.com (2603:10b6:a03:554::7) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.17; Wed, 14 Aug
 2024 07:47:07 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.021; Wed, 14 Aug 2024
 07:47:07 +0000
Message-ID: <b7af48b1-3d51-739b-1421-b1a029e5086a@amd.com>
Date: Wed, 14 Aug 2024 08:46:40 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
Content-Language: en-US
To: "Li, Ming4" <ming4.li@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
 <da346636-a458-4ec3-a065-6ce56a985573@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <da346636-a458-4ec3-a065-6ce56a985573@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0602.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:295::16) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|SJ2PR12MB9190:EE_
X-MS-Office365-Filtering-Correlation-Id: 39b3d32a-7968-4eab-922b-08dcbc354bbe
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|366016|1800799024|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?UTVRMmJVVVBnUjRrN2V0RGtmenpqS2RzOFo2eVI0c2h0WUgrRVRKYjRjMnV0?=
 =?utf-8?B?Q3NRNTd4R0FhTGpVeWIwQzk3RjdKSmlhL0QxbjNNZHlSdzFGQUVmVE05czhD?=
 =?utf-8?B?MFVvU0NIQ2lJdGZvdXloOWdwUy9LUVZvbVV0b0c4dkNRVTFYUWF5a0pIY0tV?=
 =?utf-8?B?aWdlUU1tc212dnFIeW9TVjZtd09QdTJiM2k2RWVrU0RSR3lvSmc3aWZpYkVY?=
 =?utf-8?B?SnA1NDRnTkx5Q2x6MjVkbnBmWTZkQWtIeXdRb2FQUDBDWGlJS3JRTFZzWVlv?=
 =?utf-8?B?TGJMbXdSR2dPbmY3RE4ranFReHl5aEFXMXdCSU92WWljdStrdFd0MFBDdkQ5?=
 =?utf-8?B?S1lqZjJiT0JLZmh0S1puUU1HUHNCZHpiMkIyYy9vUmNsZGRHMXZtcnhaZnhp?=
 =?utf-8?B?WFArU0FBWEhVWjZRWldZOHJ1eHNYSUlxdUtqbURZMFdCV1pCSTFXVldSV3Rr?=
 =?utf-8?B?dkhac2VkNjFvOWo2SEk5Rk5TSGQ1V1pKMjdzaUJSc3ZqY1ZzaDRWRitUekhE?=
 =?utf-8?B?bytrZlM1YXkza3NkMzFwc3krblRESjhaYmRHbkhXQ2dRbERNcUVabXk4T2Q3?=
 =?utf-8?B?SnBsbXZSRFdnOFhkbUd3WjhidVlCbUpud3VFQkhhY1RDUEJsSnl3aHk5ei9J?=
 =?utf-8?B?b01CSG5JR3lseVVKUTNoV2dKZ2Z2dGQ2cldjczI1R1pNbmtGRHVCZkxPR3c2?=
 =?utf-8?B?UERkSUZaRWpXT1o1TG51dUh4NnAwT3lUWEZKdlVFNldOMXZnN0dTZTB5c1ZE?=
 =?utf-8?B?N0s5bjF5NDlpdXVNaWtuU0xkdmdMVU1sRERieEJqZ0EyREtwYVJ1RHcxOUMw?=
 =?utf-8?B?eHQ1V0FFY0dqOEVXcGpveEhRNVdOL0x0Z2pHZTkxb1hyVDN2YSt1bTIzWFc4?=
 =?utf-8?B?SHk5YzJlQ1pDWUJsczBIUmtwai9QSzE5OWJMNnhYODhQS3pjSUowWGY5NEhz?=
 =?utf-8?B?Tnl0MkJFbHdzeGs0YVgzVFFzMWxFQmFMMDJERkZ1ZDNpUFJiSGIrYkJhZHJJ?=
 =?utf-8?B?cHZIWG9NTGh4NWUwUGpERVliZml6dCt2SE4wVCtKY1JSWUlCYjBaRmRaaWlB?=
 =?utf-8?B?aWRmdE1jVkcwQXUydzdtakorc3Q2alJoZTI5Y2x3ZENyeDlIVENtVHBTeFZK?=
 =?utf-8?B?ejJhc0pIRC9iVjl4T3RDa3FoU0d0QUN3dmlTVTBKY0QrOVVVTEJQSTQvcHY5?=
 =?utf-8?B?bHZlWG1CK1hlaGU3NkhHQ0N4dEdUQ1dFUVRyZmR4SG56U1QrUUljSHdNc0tD?=
 =?utf-8?B?MzhVU2ovcUo1cUZ0dWJIWEd4ZndRb3ZnZlhKTVdwNWxJdUI1Qi9zamRQWG1u?=
 =?utf-8?B?UElSUTVvcTFUZG4wYXVZcTlFVldDZWxyQ3FHMmNIWmp5aUNRcGd0cjNFMGZ3?=
 =?utf-8?B?b0RaU3FPUHBZYVB1WFJ5ajBlZWpqNDNITENzOGk0RmJtdUZIUGtKNVZoOUt6?=
 =?utf-8?B?b2pORy82WEY0TTZCcVRpNUxvYzN3dS9rTnNhem5sbjJzM3NZYU1WRmdvUG5K?=
 =?utf-8?B?ZFBaWm9EemgzNU8yL3pmZWpoNERqdFAzTWtoVW4yTXJOT2YvTGNpcklocVJO?=
 =?utf-8?B?WjU3VEFkcVZMNmdRYS9YWWwzQWpzejdjWHBLVlo4Tm1STC82RDEwempGMkIr?=
 =?utf-8?B?WTd2Ti9ScUZkcDhLQUplMy9VcmZMeVRXQTRmaHB1RHlKVlA1bEFQS3huSnp1?=
 =?utf-8?B?Sjd0b25hNDRWSmV3bFFXWkwyOWxHd2hndnZoQlZlcDhOQURQTlJjTWowQ0xs?=
 =?utf-8?B?OHpJaXBYK29PRlpnS0hEWmQyVDVrYTRLWTYwYW9yVy9IYWdzTFVPQjJ2bzQx?=
 =?utf-8?B?clV3bWsxeFhVcEwrQU16dFhaSWFJT1lTakZzNlNiN3BJMjdzWlhhaUd6NWR5?=
 =?utf-8?Q?+ICpic+93v0Ov?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(366016)(1800799024)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?aFVVSUpTL2oyck5CeGVZN0hjNDFVV2Nud05MSThlWXVJNWdhMXpOdWN3aGha?=
 =?utf-8?B?ZGdOWkhwLzdoVUxCVE1sZ2JhbjU3RnhSaElaVlNqWitHVjV3M1N1bTQzWEM3?=
 =?utf-8?B?Rlk3Q215UHRucHlqOEQybVQ1ZTZyL05CRmo2MVpJbHpzVEkxbHVnZE85TXhJ?=
 =?utf-8?B?S3VENmQybVRjYmYvSE5qa25nYlNUbWJwUTIrbXZrclYrUHBKandDVW5vWVZZ?=
 =?utf-8?B?dFVGajB3MkJMZzFBMk9kbHBrc1JNbGViMjhxMlhIanU0c0R1cG5MNnF1RkJs?=
 =?utf-8?B?bXNPbStJc0k3eGE4R1hzY2l1eDJUL016TnY5ZHlqakV3TzZUYzc0V3E1Wk4w?=
 =?utf-8?B?RGRyUVU0cFFlWUxtc2U4aVBKTEZQTW9Td2NZM1Vnc2E0clNJTU1ZZHowTnZi?=
 =?utf-8?B?SGFlZnAwaUVjMUExSE5ZZWN4Zm93WkRqaDFTTFZ2SUpqdW9aT0o4cEcrelEr?=
 =?utf-8?B?a0prM0JvWlB0dzcxbTJXdmNuVEErZUp5WHNicFRWVUcxUjZYMnk1cWhLNEhw?=
 =?utf-8?B?OWg2TVNLeTNxVS9Najd0bjVwQlhwL0dRSzdSR1BWTTJacndGcU1HcEthTXpm?=
 =?utf-8?B?ZURnbENwQVI5SUk0YTNyZm5jTUg1WUk3bDNQUUlTMDFjZmUvbHlPZ0d4d0Jo?=
 =?utf-8?B?VXRxS0ordlJjdEFRU0ZnMVpGdHlvdU9weEwyMXFzY3gyWW1uWmhsVWNnYUxw?=
 =?utf-8?B?d0NVSFhhdFA1c0lmZnNLWkVUaVlqakZ6NVRHOHMvVy8xQlBabXVrMzlsWFJK?=
 =?utf-8?B?em9SbDh3NklOSFp3ZWgxSG9HSWNWQ3FEVzNQRzQwRlp4dkdXUkdGSmhhdjRU?=
 =?utf-8?B?TkN0eDNyWVBZdjdkM1dzenQ4ZWRtVTI5V1VaVmNXcTRsbGlOOFFhQ3hGbmdR?=
 =?utf-8?B?S2dyOU1qSG16dHBtOXo3NXllS1NIZjBNTlo3djFVaSt4ZVBLcUEyVEFtdVpu?=
 =?utf-8?B?bVBRQ2Q1Sk1GR0RnNHRXcERIYnNhVk0zajBsUmNjMGRSNHREbzA5NGZJWG15?=
 =?utf-8?B?bW96SFNLOFdwaVR2MWRDZ2tZU3JVNEFqZnYxdmpoSW5xelpzY2h6M2RKc0FO?=
 =?utf-8?B?YytCMWRCanpIbysyc0lwSlFOVnFDOU5JZlozbUVob1BDTjNVci9oT216TkhI?=
 =?utf-8?B?UjN1VmIyMXV4cnNGOXJLaU03b0R4SFlLaDBjYkFKOE5YNDA5WXFOc1lFMXV2?=
 =?utf-8?B?UkxyZWl3Q3lESVQ3WmVUQmhGZERHWnQvM1BNbEJqUjQ0aUZUR3hNRVlZaHdV?=
 =?utf-8?B?WE9VaXNSdGNGWm9mR3NtR1I5Y3RoS3g4RTBBc3VmNlduS2RCb2gyNHU2NmpL?=
 =?utf-8?B?dmRNWjVHclRtb1Nla1oyMWY5L3c3UE41N0h1VGR6Y2tlenczZ1B4UjZGVHJY?=
 =?utf-8?B?QlNGYjBzRTRsdDdmQ0xhME5NS29LMEZqV2VoRkN1NFYwYjJhbWJXTFNRWEpW?=
 =?utf-8?B?MWluZERuQ0JkV0lZMXNMT0ZhdThXQ3NZSUpJL0tjZGdKK2RpN0E1THNyOWxL?=
 =?utf-8?B?UEhQY2lUQnZMWHptdDBQTk1KUzluc050b1V6OGdWWmRYeTlqZXdUcWhiWEhz?=
 =?utf-8?B?OCtCWWt1QllBUFZkS2xIV1NiYnVhQUFwNTFmcU40QUFtVDJXZnhUOXkzOEZO?=
 =?utf-8?B?L3hHdXZ5MlBSUFhlLytEQ0JCS2ZqM3BxRGg4ZlJwL3VvYVJDRVdKTVJ1Rzg4?=
 =?utf-8?B?b2pzT3JLYmZuelRmbXVVRTZWZmp6RkRLU0xjblBoL0VVZ3kyU2x1WERMZnhC?=
 =?utf-8?B?QlUydWVBZ1dSS3BERndhM1BJa0diQzdxTERDZzdzakRrTkNjQ1dQdWtHSEZs?=
 =?utf-8?B?aXI2SHQwWXU0NW5oOFc1R2dXaVVWbTlqNWxQVTJRZGdhRkM2STVHOWxLMXp6?=
 =?utf-8?B?U2VwcGUrUFFDY0dYNjZSeVlmR2lBckU4WGpCQnh3UHhJVEx2TGhaWndhdEM4?=
 =?utf-8?B?RkZkaDBqcjR1VnZWa0ZjRUVJK1lmOXdyanJsVURsRW9sTi9ZR0pjNUxRbWY4?=
 =?utf-8?B?WVk4ZEtpbzZNQzY0eWN6OSs2RlBXQ1FrNnRZaHE1MHU3ZEtDbHJtZFdlaUxk?=
 =?utf-8?B?QUt3T2Rpc1c5WHNZWnFLYzhSOHBNdDlvaWZKbENMM2srdEJCL1hBbmVkRHNG?=
 =?utf-8?Q?fcPg+EGbznkV1xU9p6WNZ4Ulm?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 39b3d32a-7968-4eab-922b-08dcbc354bbe
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Aug 2024 07:47:07.2438
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: /rRGWibS7T8rEGqQdu6wM7H1pDM3oo7orrK2tzTIGulOayh0zlDsCZR7d8dog44CMTzaQIzs0FDvrHw2415SIQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SJ2PR12MB9190


On 7/16/24 07:26, Li, Ming4 wrote:
> On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Create a new function for a type2 device initialising the opaque
>> cxl_dev_state struct regarding cxl regs setup and mapping.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/pci.c                  | 28 ++++++++++++++++++++++++++++
>>   drivers/net/ethernet/sfc/efx_cxl.c |  3 +++
>>   include/linux/cxl_accel_mem.h      |  1 +
>>   3 files changed, 32 insertions(+)
>>
>> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
>> index e53646e9f2fb..b34d6259faf4 100644
>> --- a/drivers/cxl/pci.c
>> +++ b/drivers/cxl/pci.c
>> @@ -11,6 +11,7 @@
>>   #include <linux/pci.h>
>>   #include <linux/aer.h>
>>   #include <linux/io.h>
>> +#include <linux/cxl_accel_mem.h>
>>   #include "cxlmem.h"
>>   #include "cxlpci.h"
>>   #include "cxl.h"
>> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
>>   	return cxl_setup_regs(map);
>>   }
>>   
>> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
>> +{
>> +	struct cxl_register_map map;
>> +	int rc;
>> +
>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
>> +				&cxlds->reg_map);
>> +	if (rc)
>> +		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
>> +
>> +	rc = cxl_map_component_regs(&cxlds->reg_map, &cxlds->regs.component,
>> +				    BIT(CXL_CM_CAP_CAP_ID_RAS));
>> +	if (rc)
>> +		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");
>> +
>> +	return rc;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_pci_accel_setup_regs, CXL);
>> +
> My first feeling is that above function should be provided by cxl_core rather than cxl_pci.
>
> Let's see if Dan has comments on that.


This has also been suggested by another reviewer, so I take it as an 
action for v3.

Thanks


>
>>   static int cxl_pci_ras_unmask(struct pci_dev *pdev)
>>   {
>>   	struct cxl_dev_state *cxlds = pci_get_drvdata(pdev);
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index 4554dd7cca76..10c4fb915278 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -47,6 +47,9 @@ void efx_cxl_init(struct efx_nic *efx)
>>   
>>   	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>>   	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>> +
>> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
>> +		pci_info(pci_dev, "CXL accel setup regs failed");
>>   }
>>   
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index daf46d41f59c..ca7af4a9cefc 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -19,4 +19,5 @@ void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>>   void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>>   void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>>   			    enum accel_resource);
>> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>>   #endif
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2084.outbound.protection.outlook.com [40.107.223.84])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id DD9BD41746;
	Wed, 14 Aug 2024 07:49:40 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.84
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723621782; cv=fail; b=mnzFIoxy5QzKrclAOxJpFnhMF0Ap7jmiZmb0rfXXyd+iusWnVqXCEi4S+mBqzTbqk1qqa/nf0xieGEF3QvyyypGCslPngfUM3RwNl+ocVuj2+/ZiFMaSaNYnS3p2uYnssmaP5L4tkmcQJs8dMGTl9+c9s365EKkWdck4nWKjLXA=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723621782; c=relaxed/simple;
	bh=ppCnsxw1KmHPFFmJnmdmRMArBiuRkNDlugNn2HZX4oQ=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Xk3FQruANRmBpW0eYkVvQPT3Y/+vNfDX0VOMN8UddaTEcXLEnaNq4zRD+ghTjW+R9L/8DWuus29EyMS/XBiD7bt2qNIqMBhuRbr4eJweD+1EwYglsYQy1WiHfM4XTWUmEZZ6bHQhJfZO0083uI0AuU+1UPjJu86ogZiQ6GsBgm4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=kc3Ad1Dy; arc=fail smtp.client-ip=40.107.223.84
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="kc3Ad1Dy"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=typ14nSrjNL6uaya9jMfsYUDjgS+Oi5Khs7DKApuz5VTf1RVKp0GqajjHkElkZvfklW0+TTcG87Iw9ymRw7Z7UNQB+AgqrCOdfG+96j4UA7VwinA324NM37zAbnfwJNso0ehb0KWkTY3xN6QJWhJgVDi69JcBjDhYT2nhlwAm1en+oFfuF8WXZx5xlksm+iLqaLUUnSaZclZbxhryev5Wlrhg+EM1A5zmuiD0q5Bk/X8XA1p8Sn3XffN2NhQ+JKE7vlwlIdGrBpeBdViV6uY8Ht3G/p0uZZQuOiBCku3vK1D6ud1Xt9CpkQgBXoiwW1XHCg1SrqHem3yqasIyIoS4Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=yQicGjiHU31M2QkG+kBqN3G8aYmddGYNHbAuIBL/t/A=;
 b=eeGZGqvhHj+bNADZ2+4kN6V7sPLrZ/3acNaG3Ro1LqeBAvBSNtbdAAF3qKU2p4AtsL9kJsSpVQX+jI3eXNi3e9v4CnQfYLHcOvBIOic6JrYPYAzn5nrQFpJIMIhykKegxNh0Eph9gvvMUNzXScFpjU/1onZkCeaAz/SVBMiTvUIJwbgIvUo81Oua7/ln0o0Ld+XCP7ucxnFCiitiNdMQws2Nzb/fHuqoFiSJd/Fqck5nwfzBIv9KXO5bSg++WLtbt6YlOnJfZHELtT0CcbW3p0ZtF9H9lZJQQYs2OT02utGyN3scHWqbH0b2JtZLVelWBXth1vQZgswvCans80xoiw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=yQicGjiHU31M2QkG+kBqN3G8aYmddGYNHbAuIBL/t/A=;
 b=kc3Ad1DyMn81NT413w0jFKcgHbBGP/XcvKg/d503c4KKPfgSDuNCzxwpOdirDGbF2ui2pg/fK3NC8dOsxYx4sezRJBzdbdOoc/2gHnzMl/iTl9ypEU99CbZ8eokiNYH8STAy5Miywjlhuk0RnxtohtFag2I/DzmkRFjHZTsldf4=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by SJ2PR12MB9190.namprd12.prod.outlook.com (2603:10b6:a03:554::7) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.17; Wed, 14 Aug
 2024 07:49:38 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.021; Wed, 14 Aug 2024
 07:49:38 +0000
Message-ID: <3666c22e-c3fe-fcc0-e944-2992452764d3@amd.com>
Date: Wed, 14 Aug 2024 08:49:11 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
Content-Language: en-US
To: Dave Jiang <dave.jiang@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
 <33c34f2d-55cb-4b50-888d-1293ea2fa67d@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <33c34f2d-55cb-4b50-888d-1293ea2fa67d@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0255.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:194::8) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|SJ2PR12MB9190:EE_
X-MS-Office365-Filtering-Correlation-Id: cca239cc-1c91-47b8-c3f1-08dcbc35a59a
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|366016|1800799024|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?Z1VDeml5OUUzQ05zdktML3hmb0lTb2xxS2RlbnowcVM4eEJneUlNa2VyanlX?=
 =?utf-8?B?Wlc2UVpPQmtha21zZE91OW1ZclFGUDNPSG0yYmxLajBiNFRMc1hOckZSdzhP?=
 =?utf-8?B?dmlJUmZTU1p6NmhlWkZwallhUVFjc1dPVjZpUEpyRzhXZ0Uyc3d4RkRvakRH?=
 =?utf-8?B?aGIvbjZOenVRRHhnSXkvZWVRMW9PZGExSlZjOWt5TDZMWWdLdTFtdjhXZVRi?=
 =?utf-8?B?RVFOTkx6a2VDV3R3dmhXL0dDYlpPcmJOcVMrSVhTeGhGRHBZdHd1TFJpYkwv?=
 =?utf-8?B?ZFRFWWVIK2hVZ3BnOUlsTlNYZXg1TE1lZ1FjMTlJUk4zRzZ2WCtHbHFWdU9P?=
 =?utf-8?B?THQyTm54VTFDZXUwanM1Ni8xanJWQWp3c0NMTDdYbTBhSUdoNUVpUnpkaEtY?=
 =?utf-8?B?VlZzc3FITFV1c3VPNVF3TjNSaGtuZGUzeE9qNkNrUXp4NlBXWmtCZzA1YWtY?=
 =?utf-8?B?ZG9lQUR1UG9iR2hSSUxFOCtteTJkY0xhQWJjQlVQa1ZhNkJGNFVyblF5NkZW?=
 =?utf-8?B?dDBaZCtpbkJ4RlJFZzVLdnZMVmIrelduUVoxZzNIeXFZMzIvckZ1RHd2bkli?=
 =?utf-8?B?ZHVMUFdZSnQ0QTJuVmpTVS9aNngvRWw3NSt4U2ZWUUVpYWpyaStZNDdEa1lS?=
 =?utf-8?B?bGk1ZFFiVjZrODZLc0NsRUsrTHdScXQwVHhIYUJDZSttcGhVblRBSDM4dEo1?=
 =?utf-8?B?YlJ0RklBNXY5QmVtMDFJMmdyaW1FOGh2dUI1YXpXWmhCc3dOdjdUUGxFSXQx?=
 =?utf-8?B?b2dFaS90dlhKTlJzVGZ2aS9zMWhtamY3V0xhc2xTQndyczlzeFk3QTJuSFRh?=
 =?utf-8?B?WmZyQjFFTTEzdHQ3OVlUbnhyQU1VTXovdUI4aTNoZEZSQVRFMXY2d0MwTDZz?=
 =?utf-8?B?aHJYbGNTbEVJcnVjLzRVMFNoNlQ0NlNvWDNwOXVXdGZpT08wTXNXWHEyVXd5?=
 =?utf-8?B?K1ZVODJsVFhSbEtGSzN0dFlVSFRoZEFialNEbEN1NzRWR0d3Zlo2UVNWMUov?=
 =?utf-8?B?R1hUT3Q0Q2tiSFFXVzN6MURneW92cWRMdHExWWNMcW10aWFsNHFDbytJQ05l?=
 =?utf-8?B?S21jMDluaU9QczRNemQ2dEpmZjZ3MlNGQ1daM3F6T3JOZTVQVnU0MkVOdk1p?=
 =?utf-8?B?SnRNUWtBQWExNUthSHZtVEg4YVRKbkRzeE5nU0Z3b3VTUUYyNG5MdGxyK1di?=
 =?utf-8?B?VDNlT21DMy9hNVUydkFtYmU4RkFVQUFDc0xvVmU5eXhYZXRvcFZZT2NwaGJE?=
 =?utf-8?B?QXpSbGRTRXZORFdaRkk1RFlka0owSi95dzRHWTdkNXNROW5ReDhkN2VaSDBP?=
 =?utf-8?B?c0hVNGNoREYzWkdqeks3MkJoM1Y1TUR6a2xncWlpSXArR3BsU2ZkdWZYVWpJ?=
 =?utf-8?B?MmRBVGRBdjZRQjVpa2orckJmWXBFUk53L3pyQ0hCR0tSNW9PUjUvYk4yd05v?=
 =?utf-8?B?bWNyamNRR2dJUHJaN0lUOFJOUkljYkpUbFZJcnB1bHNYMUYvV2x4R2UvYVRi?=
 =?utf-8?B?YjlwaHF6SFBUZTFQb29VTlpXeHRHeUVxV2VlcXVXdkpTSzM3M1lDcFJJRDZl?=
 =?utf-8?B?UWdBMUlhamNJQXFxanpmaFlwcHR1Sk4zbkFHVFJMNjVPRUJ3QjdxTnV1b0xt?=
 =?utf-8?B?ekJFUHlvZGJ3UitTaTVnMUVOR0lyeWJzMkFZTmZhRko4ck5Xd2x5eE84QUhU?=
 =?utf-8?B?UlRJZUpWT1BUeHd1TE5VN2tLb0Y3TjQ2a0Rka2xlbEs3SmR6Y1d2S3cvamJl?=
 =?utf-8?B?UEdUYUZWL0lTSGZFV2hSaU9Fc1pQK2ZJcG1iNmtSMFRzME0xb1FiNzlhMkxM?=
 =?utf-8?B?Tk8veW9GS2ZHNG5uamRGTERSb1pSL3RDcngzdEZZUkFZT2tHNDF3SzZ2bUwr?=
 =?utf-8?Q?8J177NyE1ZBr2?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(366016)(1800799024)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?cmJ5enpJNVhKeEQ2NTcrcCtLcTlYcHZKMDJRWlNVYUkvc1dLMHFzR0srZnZ3?=
 =?utf-8?B?NXhNTkNmeGtaVkFxd0hHVXFiQ0tSWGV2S25xMmlMV0kwR3pXWDdudHJ2b0c5?=
 =?utf-8?B?UWc0TkltRERGU3VxSjdjWWJFNGFCZ0twRjlWUjVzT3dLWkZXQndKdDA0am9x?=
 =?utf-8?B?ZjMycTFrT05NTnd3VU9CMXR3MDhDcit4L2htUUxxNE9QR0h3SnNzdkg4Mzhp?=
 =?utf-8?B?NUg1dWJHdVptVnlvdVNMQXo3RFVadlhIZXkwOGliejRIUjh6SlJFODNJdFJH?=
 =?utf-8?B?bkxDMW1SQUI2VWtobzJpb3hRSm9ubUFtMytGZXZCYmJVdVIyMmdONXNKZlRX?=
 =?utf-8?B?YlBIK2VhdGxMd29xc1BkcnBkZngwZmpqZzQ2WVhSK0RFYVVlN1F3NHJwZEk4?=
 =?utf-8?B?WkdlU3Rvc0U1QXE3Nmpxb25YRitpalhQbVJsREZsYTJvNHExRU1LUmR1ckVL?=
 =?utf-8?B?dXdVZzJKWUJGTUtCRnZudUoxc2lRTmtzUmVTSDF3WEhPTkVhNURiU0RLR0FM?=
 =?utf-8?B?SS94VEowSnoyVE5UVjA1VmF0SS9nZ3YzKzFwR2t2ZS9seW1OWlMyd3ZoaUo2?=
 =?utf-8?B?WWVqdlpYRHFkWU9wQ1hJWllzTmVFekluT3dlQkFPZ3ljREZ2cytpWVZRZThi?=
 =?utf-8?B?YWloTHlkenhGSWRzY1NuTFE3ckVtcnhENVBVTmd6K0Y2NHdGdjFoWVRVR3hP?=
 =?utf-8?B?bmhvSWw1MjlXUHBBWlZoRHdGVVNlVnZvWWNKNVV1Q09ZT1V1UHpOaFVkTU1P?=
 =?utf-8?B?K2dac25IMVhOMVVJTk5QS2pHb0VBUG5COU16bGFFUlRRb1E5S0QzYXVjUEJs?=
 =?utf-8?B?bnlNSW5nQ05IUDVrTndQUXM4QXRMdERRc0tzL3c4NTFqU05GWlhEeWJ4c1hE?=
 =?utf-8?B?K0JPZy9WVkJ1ZU9wOEo1a1N0Tmg0blprODdXY09PbHA2TmozZkFpeDlFd0ZF?=
 =?utf-8?B?bE8rSG13Y2RsQ3V2NWc1OWZ2cm11NFhGWHEydnczNk1xaW43eHBVVmFHV0Iy?=
 =?utf-8?B?bFJLdzVVZXlmaGFMamZEM0tGRTlGa0FQYWl3aTZpNEdvZ25mdXBOZE1ZQkgx?=
 =?utf-8?B?MXZKZU5RY0lPakxtU1luYm81Y0tQWWI0bTBMcWFWNUdhMWgrTUZrMWlXOG5U?=
 =?utf-8?B?RnQ4Z3NjZnFDaDZjTUk0YjRtUlVOdWtieHBNbFFRY1U0Vy84NlhiSkk4ajh3?=
 =?utf-8?B?Z2NucCt2WWV2Q1FwekJ2VEpmQ1pTeHY1YzlWSmxXdVBQUmR3aXM5VzZmMnJu?=
 =?utf-8?B?WGhTTlNDVzZNL0x6V2FSQ1N6MVZXdTVlZDNBSCtkMWdmbjNMNkQ0WG8zSlR3?=
 =?utf-8?B?VFI1STlRcVdOSU5HVHYyMk8vRFJCUjVIOWFQS25jSWtrcWxONTNFNDVCOCtl?=
 =?utf-8?B?TVZTTSttQlh5Y3NjVXc4bXB1ZitOU1AzZnBhdmQ3QkpBc1NoVVY0QXRvS25j?=
 =?utf-8?B?TzVIeEs2VTlkK3dSYkxuMi9HSEZGVU8ySlIrajJVbW1aMXVQNzJrUmllU3hH?=
 =?utf-8?B?T1ZQbUJIaUg4ZHFuRVVsQXh0TkRudmVLZWtsQllIV25NMy95ell2TmRicDNO?=
 =?utf-8?B?Y2hEbElRQ3pGTDAzSDBXMWJtSjlydFNMOTVjVHk2MnRjOHRtRnRFT1k3cWhm?=
 =?utf-8?B?bVI3WU5hbkhvV1Rld3RVTkZlUTd3QSt5RVVYT1ZPdU1wOW52dmhOWWxxVkhJ?=
 =?utf-8?B?WHRTMFdMaUhhMnVqZzFPRzhEWXE5ZTdQZXNCVDNSNzVoeDQvaW1tWDM4c1dk?=
 =?utf-8?B?UjdXNGZ2K0hMbnhpdEpzVTl1SkJxRGpoRk0vOWZIMXd2cTRSVHlWNzFrUHVQ?=
 =?utf-8?B?WE5lN3owMzlaMFBBR2w0ODZNa1FlVGF3VHVGNjdiRDhmQitjbW1ydEQrZ093?=
 =?utf-8?B?a2g3eWNpUzFnOU42Nk4ycmo0YWREWm5qK1p6RGFNTDhEekpoNDNXWGhQSXls?=
 =?utf-8?B?cUpubGRZZUZrUzlsRVMrL0Y2disyYmhyZVNnNUNyL2lZc1RWbDRxK1VqSTl6?=
 =?utf-8?B?MGRUSmJnRldZc3QyaGl5SUZ4ekQxTmNNc2lIRHFqOXdYVGtyWHp1OG9rN0pL?=
 =?utf-8?B?M3l1Y0xKRU8yM2daNTJCM3h1bHg1OUw4SndMVUxlcnMvKzhabEtLTFY1VFlD?=
 =?utf-8?Q?/pEc5Dj+Kfw+KUSU4EJCd8nvs?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: cca239cc-1c91-47b8-c3f1-08dcbc35a59a
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Aug 2024 07:49:37.9436
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: LULGCrDXsFbn7ajKGzAwMhVDZvlFxfHHmnqTIvKMov7FntEVZCFRyWlnT1AjGgzxxNEFpE09X0VGXBt0eFLIJg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SJ2PR12MB9190


On 7/19/24 00:27, Dave Jiang wrote:
>
> On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Create a new function for a type2 device initialising the opaque
>> cxl_dev_state struct regarding cxl regs setup and mapping.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/pci.c                  | 28 ++++++++++++++++++++++++++++
>>   drivers/net/ethernet/sfc/efx_cxl.c |  3 +++
>>   include/linux/cxl_accel_mem.h      |  1 +
>>   3 files changed, 32 insertions(+)
>>
>> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
>> index e53646e9f2fb..b34d6259faf4 100644
>> --- a/drivers/cxl/pci.c
>> +++ b/drivers/cxl/pci.c
>> @@ -11,6 +11,7 @@
>>   #include <linux/pci.h>
>>   #include <linux/aer.h>
>>   #include <linux/io.h>
>> +#include <linux/cxl_accel_mem.h>
>>   #include "cxlmem.h"
>>   #include "cxlpci.h"
>>   #include "cxl.h"
>> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
>>   	return cxl_setup_regs(map);
>>   }
>>   
>> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
> Function should go into cxl/core/pci.c


It will be in v3.


>> +{
>> +	struct cxl_register_map map;
>> +	int rc;
>> +
>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
>> +				&cxlds->reg_map);
>> +	if (rc)
>> +		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
>> +
>> +	rc = cxl_map_component_regs(&cxlds->reg_map, &cxlds->regs.component,
>> +				    BIT(CXL_CM_CAP_CAP_ID_RAS));
>> +	if (rc)
>> +		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");
> dev_warn()? also maybe add the errno in the error emissioni.


Yes. Thanks


>
>> +
>> +	return rc;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_pci_accel_setup_regs, CXL);
>> +
>>   static int cxl_pci_ras_unmask(struct pci_dev *pdev)
>>   {
>>   	struct cxl_dev_state *cxlds = pci_get_drvdata(pdev);
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index 4554dd7cca76..10c4fb915278 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -47,6 +47,9 @@ void efx_cxl_init(struct efx_nic *efx)
>>   
>>   	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>>   	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>> +
>> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
>> +		pci_info(pci_dev, "CXL accel setup regs failed");
> pci_warn()? although seems unnecesary since error emitted in cxl_pci_accel_setup_regs().


Right. I think I'll remove it.

Thanks


>>   }
>>   
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index daf46d41f59c..ca7af4a9cefc 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -19,4 +19,5 @@ void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>>   void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>>   void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>>   			    enum accel_resource);
>> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>>   #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2042.outbound.protection.outlook.com [40.107.236.42])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id D0C638488;
	Wed, 14 Aug 2024 07:57:05 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.42
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723622227; cv=fail; b=ElcSr77UeO2U7aCN15ohq3tVo5T/n40m5lXngRIRhW1K+uY8aKu3A/WeYVEIDI74N1rWAUJHLN4JvaqVyyGsc+RLCEfVIuxmOPdSFZhsO+hru6eaZIB2vNO3uT3elCSystxhW8z9ABvfdy0y/LqDgr1VOcD2/SRRbwdFUFaUKTQ=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723622227; c=relaxed/simple;
	bh=Ucun0BPlZyM1BTFJrCYB/1gcvJxqAYlt8yCnUxqXZHw=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Xs/4vWxZTPpRqkJilRpIDIWOQ/LjfSpI/T4El0aO/rsACgSkRasju9lSdf6JBW+Udluq1HEXeivaNxmWc27Wl+5iGGnBA9DAt+xd9boNzAMNR4/s1hpNpUOg4+pY21c1b0kjCwicwo8yhPjKdilP5oeEVwzloYARX0haDHokbgU=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=j2D1XkC5; arc=fail smtp.client-ip=40.107.236.42
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="j2D1XkC5"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=bpI+ZOgEHNE8kkSvJEkZrHuF1v/ObbASosiRmyaWn/fUL/+bOACRUKfQJS3cA6PxO3ZougQRMukFXPfwYeNdDX3qisbq4wvg+1EEunZaY2Dah60PmS1i/M3pY0sKQzcqYMGe793zdQHCaBsDYGXsfGqfQG9QZpgbk+6Q5zimiwGyNVWouoCvEl5fgXdCl9kO/zHN6eJM28qdcf2T513I/QJ16r2YigvAMVQiTSml56uLHDPWXefgfN9731rMSX6hRLAfCVPeOfsCgVCbTNc0V/CnGb4gJ3m62IV8UNc4MVWGjjlqNwSXDWxbFgJ6TC+GoQa4Hrl8wH17ehjSfYUtJA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=cot9GWAOdh6X1fyBB4SeUQ1vIBEsNCRLEh+bbTPQHxU=;
 b=pWhlPaaDyc5cnr39jxA7Krcv5rPXQwwWnGe+F55YzI5kvhVxdMIyfLI3gVty0ZDKCHEhWFPYnJe2HmEkcw3uePb5lcVAwV3W+L5HT/K2nCtOskn4AXQBgkIYfincqHVDebeOFMEuU/tQOtqdnpMYGxSVjDUzW9pU2gYKkNFK16JyGnUto4h21LT741evBikvvzvWiGBCA4+fj3iM1JM6nUgN9Ya75f84ykUxdUUnWPTCh45M0fKgQ1Q8yylFixKNrHLNrnFYOUDpxpSC6un+5bAFmxcsxD4VHzVa0XWyGIHIJhhFHl4htM1lt7cborVp9dxYRVqrcZsKj/fAz9Ws/Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=cot9GWAOdh6X1fyBB4SeUQ1vIBEsNCRLEh+bbTPQHxU=;
 b=j2D1XkC5jA7GDX9zxcWPxtuw8xmYExfNMLh6Sq1xA7LYhH96ygeGHXI091cmM1trxuPkD6V8s5/+2nMh4jo/B3oGXwc847GlpKIvtxvBb+UHpUOksboaigRdY1ly83yOQvDijVZGzMtcNWZ4DQhGRlCHSskqGK5nD7wm4/AZyzQ=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by CY8PR12MB7433.namprd12.prod.outlook.com (2603:10b6:930:53::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.22; Wed, 14 Aug
 2024 07:57:02 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.021; Wed, 14 Aug 2024
 07:57:02 +0000
Message-ID: <5d8f8771-8e43-6559-c510-0b8b26171c05@amd.com>
Date: Wed, 14 Aug 2024 08:56:35 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
 <20240804181529.00004aa9@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804181529.00004aa9@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO3P265CA0028.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:387::11) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|CY8PR12MB7433:EE_
X-MS-Office365-Filtering-Correlation-Id: 9056ac50-d4f6-42c0-9074-08dcbc36aed2
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?L1drWDkrRExpcHhldUM1bk5xa1FiUTVZMTVxcmZlK2V2ZlRMVmx0dmphUUts?=
 =?utf-8?B?TTViSWdvRFhYbEErbXd1bFhJWEZUYTQ1dFRKRnNhNzgwRnlOUWdsek1CS3h2?=
 =?utf-8?B?dXlmZzhjKzd0OFhJWGNRd0lGdmcybHd1TmVYd25uckhFV08yTnRNcUxTSFVW?=
 =?utf-8?B?TUVwdVdTQ3p4UjB2eWVlS2JZNGdmMU5KK2QzdXZ1R2VlbWdYOExOZi82QVU0?=
 =?utf-8?B?T0dCVHRqb3BSOEhFbm1lT2JuWkhWeVp4TmdEYnRTbVRPSVJveFpWV2lPdWZI?=
 =?utf-8?B?M3IyOWhWeGMxdGI1SG5LWDYwZnl6dlVZQjhJNnpHRzRnQjBTT3ZOTDFteEdJ?=
 =?utf-8?B?dFQ0ODhGb2pReUpic0wybDBwZmJzRTJrWUkyRzJpY2hYeCsvKzJHTzE5eGxi?=
 =?utf-8?B?T3dLM0pzbmw1NUpITlkwaTFQU0lTQXZUOFIrQTd1bHdWTjY2N0ZSVmpMaldR?=
 =?utf-8?B?R0p3WVpBZVo1d2hRY0wrRHZZdGk1NEllTWxIQjVRd3FxKzMxcHJHdzlXNWNk?=
 =?utf-8?B?d0ViYnhWSVJ1TzZzWElLUHpzYnR5RTVtUlN1WS93ek1Makszd1lUNjNQY1lW?=
 =?utf-8?B?a1ZsdTJ1Zjgwb1VhOG0wMldKZUpueC8vZkIvNi83N1RyeksxMnM0QnI1eGYx?=
 =?utf-8?B?MnZyM2RRTHN2bCs2aDRlTC93SUZjVmhwV1VZdk9OQytHVkFrb3VjdkVIR3JY?=
 =?utf-8?B?YzJsVTRHOGVUc3NrZ1hRckZ4QjNSS2ZLYVRMT3c3dnFZdUtkRDIzaGpsWXZa?=
 =?utf-8?B?S0lnekJaby8xWHJNTytReWhzdXRpY1ZhclYyYURYWFJmamg0NlluVzZ2ZHRu?=
 =?utf-8?B?NFNHMksvR2xvYUMvaEtzV2txSStvNGdsalh4OEpwNFFJSk00TXJ3YmtXci9H?=
 =?utf-8?B?blhQblFlRXQ3QlY2RUdlSnBta3ltUlB5bkJVNDZLbWRlQU4rNjRsQ3JVYmF6?=
 =?utf-8?B?b3VocGprdlNTcjNrYVhCWDM1d0Y5UU5HWVoveEVXZUpyUEhkMWFqaW84b3Zp?=
 =?utf-8?B?TXc3YmwxTytwdDJjTVZsKzhldmlDZTFtSktmY1A3OUtvYXhua0ZNSEpjbjl0?=
 =?utf-8?B?VDFUcE0vSlRGNWxSRXZUbll2bHNkbG5iSUJpZmFOaTNzWmdQUEpmS0VQMTBm?=
 =?utf-8?B?RElFdjc1WGNhTW83KzZLaVhPbExRQmxVWlRMdzF5ZVZ2ZDZOdUtUS3A5V0JR?=
 =?utf-8?B?N3dSS2t3KzFyYW9Id0tqT0Q1RmdaUlBERTlNdzF3YXRiL0ZvbFpoSWhCSUpQ?=
 =?utf-8?B?eFB1ZU5vWm9oRldOaTF2TW9hOE9ZckdiUnljZmRvczZhVkMrdG82OVdiZ0kx?=
 =?utf-8?B?eDYybUtsbmpzQTJqSzV6dWlMemY1TGZKR2hJc1RnTnZWY3dxZVhKMWJ0dU1Z?=
 =?utf-8?B?ME44L2J2SlpCN3BZNXZtR0RoRGxKMHM2V0hKbEFXV3dwZ1FPdEJxLzI1SlF4?=
 =?utf-8?B?T3pDNzJJbFBwRGtzc2xGS3o4aVpOc2JIM2k1SGlkSndtL0M5MmhoZmRDaURP?=
 =?utf-8?B?NXF6VDdIM2x4VzY1U2pCUEc1L2RnTlJJNmFuSlFzcWVsNlpGM09vbi95S3oy?=
 =?utf-8?B?b3lXbk1kLzNtazV4K3FxeFlsM3lWeUtHS1hLcVRmdkRFNnNSaGxCTWdJdDE1?=
 =?utf-8?B?bS9vVkFKaU5oV0hSK1U2Y0QwK0EzODdUMU41MzgrSkdYY3AzVGZMdytIL29H?=
 =?utf-8?B?MGtxQ3gzaDUvUW1xcDcvVjZSY3E2aFZCUVZRWEJiTC9mcFAweHh4eXBVYXoy?=
 =?utf-8?B?bmFRaGE0TnJQSjlEd2lRVWVZY0hqRTJUR2lZNGFLWkhROUZOL1V0UFRITlJG?=
 =?utf-8?B?L2RYT0d6U0NQdHhRa0FzUT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?Um5mK3NFYmZYdGVoRW81M29lRWRFVDB3ODAyQW9OL0pQeGE5VkI1T2ZHOXY1?=
 =?utf-8?B?cXBjOXFyLytPNkVNREl0L0Y5cXh6WTl3d3RHUklCQXBIVnI2UmFORWRlaDBB?=
 =?utf-8?B?NktMaEl0OE9MajdJT0kvbEI3a3F4OUVKY1ZZT1prTzQ5dkVYZzFmOExBTVJv?=
 =?utf-8?B?bXJjUWt2TjNkZ3oyczlmYnhVcXNKZEk4M0V6MkxRVVJUaDZMYXJZZmNoblk3?=
 =?utf-8?B?Wk85c0JKTXM4OU5BWkM0TGdFRktCeHVnK3pCVFZ4TEhWYW5QbWowTlBmNnFx?=
 =?utf-8?B?UUl5WGFVSmIzUjdPRHdjQnk2bU1UaGs3YlJ1Z1hMSkZ0SEV1WDFhNHZRaUJ4?=
 =?utf-8?B?cHhIR3F3cGx6OVIyb0NOcUdlQ2pYY2lLK0s4OHVaL2FIR2k5THF6REJqM2Ja?=
 =?utf-8?B?K0dHQkpyWEpXNEdrTlovLy9Td0xGQjl2dk9XeGpBSmo0NHZIUkdhWVkybStl?=
 =?utf-8?B?OHhsUXRwV3lmb1ZSN000bFV6TzErMUtlcFpEYTFJUWVlU2dyQmtMS1IvRjgz?=
 =?utf-8?B?bXk2Yy9zWmlHMFpFVXMvTVFKc1E0SVM2WllCOXAzakFPSmZYVjJiZGRYVHBi?=
 =?utf-8?B?SzVlR3RDS3RZT1BDS2VqZVI4QXA0aXRocUh2aFVqa0VCdXR0RmgzckRUeUJL?=
 =?utf-8?B?RmVJbWE1QWg3VTFRUWdZMnQ4UUd2OXVQS2pKdWhsT0ZWKzZpelp5bGV5bWsx?=
 =?utf-8?B?UXVzVFRiMVhTS3NhK2Z0WVFXL3dIMFY5dGpuOElncWwyMGNRWmI3dHJzM0dt?=
 =?utf-8?B?ZXg5MlFzbm9QbjFKaW9MazMvaWZ1dlM3NklMZlNYV2NZelZlK2pXSE4wZzdj?=
 =?utf-8?B?V3NOTzh4Zk5nYXdCcHl1MFhhdHlhT2RpTFZOWFFHbTRuZ0FwTVlJaTMxNHRi?=
 =?utf-8?B?d2t5K0g1c2pSQ0ExS1FKeGRSemd2SkpET2lvWlBuVnFPVFdRVjBDRllsRTI4?=
 =?utf-8?B?aDd4VEloUEF0STlxV3FNVHdwY0NPbXdVeU43eTlNOWc3YWFyTHluNUQ1akZS?=
 =?utf-8?B?Zi9DWnRDWS9UZkFpRFl6OTk4VzVFVm9HWjVHWlMxMFI4Lzk4dU9rMWRCb1Rm?=
 =?utf-8?B?R25XeTNFSTN1eUhhMTVZMmVLRDNqYTJmUTBQd0JaMWtKL0RqYXpSY1JlMEIy?=
 =?utf-8?B?OU0wVjhEQW1HSldSRFZsRVp2SUZ2OUZkSmp2SkZvS0YxQkpMUEVwYWRXb0Fh?=
 =?utf-8?B?VE8xb3BHNVVOSk1YOHNjMkV4N3dRRi9DQmo1NXEyOGZWOXJmRTFYYmdrbEVE?=
 =?utf-8?B?dVlRNUszNE5hamxEbDN2cFQ3V3RhVHJIZlpmN2F4V3ZnQWF3L0xOdzFPK2lP?=
 =?utf-8?B?MXJpQWdUZHUzYTErQnlwdENLNjVDZFlpZGpTWmxwUUV1Y3pTRm1ZNnM5V2Z1?=
 =?utf-8?B?aFBuWlRueUlzQkpQc1dhWWcreWREWFhsdk9HaER0TDJJOWN2dVNybTBxRkVz?=
 =?utf-8?B?MXdMb1h2V2ltNXl6Z1g1VFpaczVQQm04eXBRTExBTU9IVEFzcEpiMVlYZThP?=
 =?utf-8?B?ZWVQQTNDV01uVjErMUFqdXg1UXRtZFZvczd2NGdrMEdDMjVvZ0Q0c1hZUU9B?=
 =?utf-8?B?ZGtzbHNmUDN1RVp5RFVkeDR3QTRLUjU5MTZ2NVVhYVhTNkhmT3NRaVVjTmh1?=
 =?utf-8?B?WnJvUHpYT2VxV3o0UmVKMjVtWlNhSldrdytkRVovN21WWGJqU0dzQUY0Nm5s?=
 =?utf-8?B?TVI3Q0hSMXFCVytzbjI5Ym5QMHNOMlk0bnZ3OHFIbHJFTWVnaFllUHBDSGhK?=
 =?utf-8?B?dElWQW9nbGdHQUhyaWtrM3lMNmliSkpJVndPZ0UxMXZXTllVeGpiazBhRDVU?=
 =?utf-8?B?cXR2anh6UWhMRFgwQUhiLzhvRmdqZ0hydGZNbFlrM053Q3Fqb0syaGFLeXF0?=
 =?utf-8?B?N3h0SXg3RXZhQnRQM09TVlczTm5ReEQvTENyVlY0dC8xWk1INFJFdC9SRmZ6?=
 =?utf-8?B?a1pDYTVjOFBFWGtHRktET3IzbkptdkpsckdIZFZld05qTjYzOVB1MkNXKzUv?=
 =?utf-8?B?a3V6V3FrOFhFdzJvaHdudHJ0WmxieG9lRFk2VndyK0ltdmttQVlUZnR4bklQ?=
 =?utf-8?B?Qi9CUjVyekFDeTdmcjRXUHJSbUl4cW1rbXQ4RVJHMGlOM1JKZVM5cEh0cDY3?=
 =?utf-8?Q?BczAf1i8ciDo+o1MoQ1i2c4c6?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 9056ac50-d4f6-42c0-9074-08dcbc36aed2
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Aug 2024 07:57:02.9086
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 5bYM0t5uBizdrB09cw8xakt7P1RiW4lG8+WZSvA50BOHNvMvGY8mLKZ0IjkhiGXluwQdJLnFSia9ydf+fkuo5Q==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY8PR12MB7433


On 8/4/24 18:15, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:22 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Create a new function for a type2 device initialising the opaque
>> cxl_dev_state struct regarding cxl regs setup and mapping.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/pci.c                  | 28 ++++++++++++++++++++++++++++
>>   drivers/net/ethernet/sfc/efx_cxl.c |  3 +++
>>   include/linux/cxl_accel_mem.h      |  1 +
>>   3 files changed, 32 insertions(+)
>>
>> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
>> index e53646e9f2fb..b34d6259faf4 100644
>> --- a/drivers/cxl/pci.c
>> +++ b/drivers/cxl/pci.c
>> @@ -11,6 +11,7 @@
>>   #include <linux/pci.h>
>>   #include <linux/aer.h>
>>   #include <linux/io.h>
>> +#include <linux/cxl_accel_mem.h>
>>   #include "cxlmem.h"
>>   #include "cxlpci.h"
>>   #include "cxl.h"
>> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
>>   	return cxl_setup_regs(map);
>>   }
>>   
>> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
>> +{
>> +	struct cxl_register_map map;
>> +	int rc;
>> +
>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
>> +				&cxlds->reg_map);
>> +	if (rc)
>> +		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);
> Not fatal?  If we think it will happen on real devices, then dev_warn
> is too strong.


This is more complex than what it seems, and it is not properly handled 
with the current code.

I will cover it in another patch in more detail, but the fact is those 
calls to cxl_pci_setup_regs need to be handled better, because Type2 has 
some of these registers as optional.


>> +
>> +	rc = cxl_map_component_regs(&cxlds->reg_map, &cxlds->regs.component,
>> +				    BIT(CXL_CM_CAP_CAP_ID_RAS));
>> +	if (rc)
>> +		dev_dbg(&pdev->dev, "Failed to map RAS capability.\n");
> pci_err() or similar would make sense here as we have asked for something
> that isn't happening. Specification says this is mandatory so
> definitely smells like a fatal error to me.
>
>
>> +
>> +	return rc;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_pci_accel_setup_regs, CXL);
>> +
>>   static int cxl_pci_ras_unmask(struct pci_dev *pdev)
>>   {
>>   	struct cxl_dev_state *cxlds = pci_get_drvdata(pdev);
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index 4554dd7cca76..10c4fb915278 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -47,6 +47,9 @@ void efx_cxl_init(struct efx_nic *efx)
>>   
>>   	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>>   	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>> +
>> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
>> +		pci_info(pci_dev, "CXL accel setup regs failed");
> Handle errors fully. That is report them  up to the caller.
>
>>   }
>>   
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index daf46d41f59c..ca7af4a9cefc 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -19,4 +19,5 @@ void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>>   void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>>   void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>>   			    enum accel_resource);
>> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>>   #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2048.outbound.protection.outlook.com [40.107.223.48])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 933E520DF4;
	Wed, 14 Aug 2024 08:00:43 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.48
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723622445; cv=fail; b=jrxXVnKrxjID8rFLFIYBqCl4Rrrx1Q02Nn0Kg5FDR8TlVej8k/jc2QBMom2i4nm5vW2h1Vozxc+wpK1zBDU7wFIGO4EEHZHGYA/ZPqxQry8owQTgdQVqVl73dGsOAHeFOgpbXm0YcnhuyArK74wQklrIm/VwkeSUVFM3yEIsxzo=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723622445; c=relaxed/simple;
	bh=V4JPL96Px+U5JDkVDquJRhkyj7OFwIU0MyES27/G8Vw=;
	h=Message-ID:Date:Subject:To:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=kDHMbzmihQpHh91868JQbKCztixsg0Y6Zm+FglFSM38ys6NoMORRDnteCaYIkQySMraaNZkD9P+LHZrQN1nRNLo3gsRyu1cwUJL6pJupilCBQZoMGx0PR+ad+WUaweaFA8tpAjHIVuvbjvlHPau05xMFKwlkzc5sLJcOiSeZBHE=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=lyxbsx6H; arc=fail smtp.client-ip=40.107.223.48
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="lyxbsx6H"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=EAqDjp8j8CMKN9h1k2iv3oSWLX6M20zxjjJYHnvbBwO+zKWXAszRY8d82dV/hOIr7zJlIuVemaiKQKeS8quUXQMEznojdwUyIYsjDR+7yaMAhfQiYTq5ogSIGS2PpL7UBetuCA8gYrBIJijdZM7MWP1A+LGsOePUh3S+w5O3l8k0VDXe8uBrGiEEoX/eVPB2GofHUcHYJXYzQnSxznGhkAozBwzcqhjmfZHfcCH8qnlHH00hIN7USMptjKc9y0mqb+If0FCk1FFyml4+azB+/AjC8TT4qNyE5C+QsSACNywCmwGAI/gStIpn4Oyu9ev/JRtIw+VzAA3DicyqfuSvxg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=PIX2yohfsbihLvDEBU5kR76G+wSRANhO9/LVUkRwMrQ=;
 b=SFsrXVZOV1YZuRp6q5KxQkFH7cKhjJgq5nJybesl+YE7WBG5sed9pOOdYLiCyP7Ry7foDkT19qZHarMpam3xXeZ9mVaSdN5FPEG3zkWQ8QI/4J/k0W986yKyQOsERxl+6e/IhWiqYdAjfQJALkaSDSFUKam2ndoTi07IKWUg+6D0eh+/HgvG2fTmMnqIvU53l8heH6UhKKiWrXrkSebMCDi5FRAYDjlKOS+EiQZU8WMv1Fs63hYW+WsNFXfWFKO//XE7LWEdI70+ZL5DGe1FWESLbRlIrkJeUNSDJibWHN9/qdcOtahB3FDxUidLleN6a+1nd7/mcGBuXWNcRTLnkA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=PIX2yohfsbihLvDEBU5kR76G+wSRANhO9/LVUkRwMrQ=;
 b=lyxbsx6HUBSkgTBL7JNZ187n25Lvjb4wh5jSrB88lFs1X/Itzl/xLP0bdZ3ulTJQDnqw6KoyUXHdAlOu8sn4jt9UebKNUXX6FF4WH7QVUMWiOIFGJzznvHvj2W3n1sNtpklnA5nOvymsnXNekIECs4U4oWeTv43SbLdR2+OKpPU=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by CY8PR12MB7433.namprd12.prod.outlook.com (2603:10b6:930:53::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.22; Wed, 14 Aug
 2024 08:00:40 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.021; Wed, 14 Aug 2024
 08:00:40 +0000
Message-ID: <6f9dc18e-6f47-e276-2388-68e1d4dc581b@amd.com>
Date: Wed, 14 Aug 2024 09:00:13 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 03/15] cxl: add function for type2 resource request
Content-Language: en-US
To: Dave Jiang <dave.jiang@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-4-alejandro.lucero-palau@amd.com>
 <abff9def-a878-47e9-b9c8-27cf3c008c29@intel.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <abff9def-a878-47e9-b9c8-27cf3c008c29@intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0145.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:188::6) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|CY8PR12MB7433:EE_
X-MS-Office365-Filtering-Correlation-Id: 18336921-f4fb-47a4-c8ac-08dcbc373099
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?V3RuOGZQdWZseEliVi9KRWdPM1dYWlBwc3MveXZNUmFZWGlhazB5NFJld2lM?=
 =?utf-8?B?bGJzZVdWVzFTeWNFa0NOeGF2ZklldzFPMFkzNWwwVU84UHo0RXJTODU0TzFP?=
 =?utf-8?B?REd3S1FMN2IyVjFZVlJYNSthNzUxamNDcUFOcEpkRVlJWXhXY2FsOWZQVmtK?=
 =?utf-8?B?WVB3aTlodkVIUGJnT1JyQTlkN0N2eExjR0Y3a1ZKbGY0ZDNieTIwdFNMMjQx?=
 =?utf-8?B?OU5GZm8xMGtCZHppbzZPSm1wS1MycERnVzNGN29RMEx3dDlYWjE3UW1ncit1?=
 =?utf-8?B?Y3VNcUxPWHhCcHUxRW9OVUZHU2kvOUFGUGhOVmQ2SGxvZW5ZbjRpdmFvdjVE?=
 =?utf-8?B?cndoYmNWNTMxTFNYMFB0ZnMyRjhuUjVTZFA1QjNOd0IyUnFKYm5QS0x5Z2JZ?=
 =?utf-8?B?bW95anArWk9rZzBXd3p5N1lkY2xsQmFCUHlsR0pyektMTWdDZGdHRTBHbzNW?=
 =?utf-8?B?ZG1tWnBZcWZLMjJxU1RYZFBYN1pFV1hvK1NMNk5IRUVhRng1UndYTEtJUmZu?=
 =?utf-8?B?aTNYM0ljRFkyTWpkZk91dHJiMkdLU01acThGSkZ5L3JSS3pGZVJrMnNLOHpv?=
 =?utf-8?B?UDVBeGlXcVB1NkFUWGtDNnA0UUdhdTFZT3Radk5pZmVyTEFiMk5tb0JPLzR0?=
 =?utf-8?B?eUZFZE9IUXRsbWFxNDhVTVJjcGt2VnBiVzFPR1cybVFkcVo5VUNxY3lCekdV?=
 =?utf-8?B?UjdHRmdWVjk0aHJ2VFc1V1JCS3dnRXJUaXQyTGsvcWp4aWNxczRFYkQzY2Fa?=
 =?utf-8?B?bXF5LzlDRnJuTFhNcm01Z0JRK3UwenVhTDVPbDR5RHpoNTdNN1Zob1BGNWIw?=
 =?utf-8?B?UjVCSGZZeTR2QlU5cnlwT0VubktlaE16SDNLUE83TlVIVjY1aGgyeXJkNnJh?=
 =?utf-8?B?TDV0bFZBeGRVNHBjWlNnU1Y5ZGFvdHp1VlZMdVZuOUd6UW9JZEhVQ0FibEE1?=
 =?utf-8?B?bmtwVWxtLzE4ZFZ2Zm14dDh1WFBYK0M5U2VoRjA3bjEyS255L0pNdmRFWTdw?=
 =?utf-8?B?VUdsM1JqR0Q5ZmNhWUdvMlpiM1lobkRVS2ZTMVBoQXYrWS96UkI0ZFE4MmZ2?=
 =?utf-8?B?OUg4c1lYd2wxWWtMS2hiZnlrQUoyTDNRQS9BYWR2eUJualNzQUVUdEJVTG4w?=
 =?utf-8?B?dEN5RGxBTmRqQ0hnamN5bitlNVB1MVB3VjRJdCtQZlNQTTZnTnY2TUJZRDRS?=
 =?utf-8?B?SHBWazNTdHZwMVR5WFBUd1E2czdQSEJhdTZJeDRrN1NnUlAyRzVZV2dMb1Iz?=
 =?utf-8?B?b3V0Y09nZzFjOWxJcjFaR09zRFJNY0QreUk1UHV0NUkwaEU4RjVUTnVVQnFH?=
 =?utf-8?B?dFBnNVRsR0t3T05ZQU92U3p6QlVzOEdDdzYxM1phSmpsTFNVSGxnZUJZdnMz?=
 =?utf-8?B?MGY0bzNHdkpaTVVTUE9Qbm5aN2x3VW5jQURBaC9MQncydHV2NG9lazY1UVlK?=
 =?utf-8?B?UmZROU4vOGFQbkZsak41aExPQ09tK1I0N3N2d3hQNnlCK0x6ejN0TEJjMldR?=
 =?utf-8?B?RFFSaWZEVGZUUUlDb0F5SnFZblpRVC9XS1ErTHU2dlRLcVZ1UlZDZmxvR1Y3?=
 =?utf-8?B?bElHYTVBRml3VVdmOWdqWXlGazNpcHJWRG15NkhtcTBnT0FpNGdaSE1LS1ZV?=
 =?utf-8?B?ejJYdFl5WVIwYjFGVk54MWg5VmtWQktKbjRoTlBTTUU2VHNMeFZ4WWJnWW5I?=
 =?utf-8?B?Nm9MV2hhbFFHVjFyZmQ5VHFLVHhFWHZwZXFiVHBVdHBqSjV1Rk1jOU9EZDJT?=
 =?utf-8?B?eEV0dXhFVUV5RUJwb1JhZzdkajBWZ1E3YW9ENUNGdEUrREFrMWhJL3Y4RHo0?=
 =?utf-8?B?ZGZESXdZdEJNNi9JQWlYQnRzWi90RmZVVC9QYUlnSDNXQ0RWcTZpM1FKT2hI?=
 =?utf-8?Q?fThPGBp2FRnlY?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?dm0zUU90bDQzdVFYc2h2RDNvcVd3UmNXUExPc3hVZlRPeXJvL1pUa3NyNjlo?=
 =?utf-8?B?WjloNW9OT2FCRGV6dVJpZGFFQmV3eGMreXZ1emJvMnM4c1B3SUdFQTN6UzFL?=
 =?utf-8?B?K0hTdTc0M2J0Ry93REd1QkIrZmpQVnN3dHI5QnowZmhuK3hCY2g1bHhvOVhs?=
 =?utf-8?B?TFRNYVc1OFkzVlZXaTVYSit4eFFYd2pSRFpKaGRpMFF3VWJRVUdlY2FPL1V6?=
 =?utf-8?B?RnpVWXJpUXVRZXhKVXFyL3E0YnVzNHVRaUczaVkvUERndzR1N241V3FCNURU?=
 =?utf-8?B?SDdWNW9ncVRtRW5WVHhta1JPN3F6STZqVHZnd001Yit2aE5QcHBLNUsxWTlC?=
 =?utf-8?B?Q29sOFVLckFJVWdUVDNDaFZyc0NzNExJRlIwT3JHMFk5cWVZMGcrSGR1UHZT?=
 =?utf-8?B?M3gyaVQ0K1o1UjJGMnJpVERNV29ObUVPWEkyWlRCSEhmaFgwZlljTld4bEpY?=
 =?utf-8?B?RE80WUtDbjE3L2FBRGNDaVFyZEg0b2MrSkY3ZDY3L21QYWVHS254aFFUZTFY?=
 =?utf-8?B?azk5SkF2Smg5NmY4aXdMb3REL2NpSTJYb1hMY2NvOTJDcU5reE9kcW5IcWJn?=
 =?utf-8?B?YkJ3Uk5Xc01MYjlGd0t6K0xQaHowNWY2V0FQL1hpVUNkUGVIVk5OQmNLNWlI?=
 =?utf-8?B?ZWdlOFV4WTRBS202bEc3QnVLZXpXekI1dzZqbkhoS3FkSnM3V2hpQlB6aHRy?=
 =?utf-8?B?RGZSNG8xckVTMDZNQkZQNUE2N21sZzVmUThIZDVnVGJEK21YRU1zZ2J5cUdq?=
 =?utf-8?B?QnJCL3lFcDlDaklJaTI1Qzc3eklXQjNDVStReGIxR2FuVlJYeThWR2RobkFx?=
 =?utf-8?B?aDRNcXZMOVJTOW0rcS9rQzV0cnF3MGFwM3h1Z1BMd2Q2S01HcTBtZ3FwUExO?=
 =?utf-8?B?S05QSEpidENwVEhqNVBiTnFGTnMrY3NBYlJPMHRtbmtWRDB3VkJXd0wrUkU1?=
 =?utf-8?B?NjFTc1lxdWN3bWF6UEVxOFpPZmQzZVFWMGJKUGJNY3E1OC8rSkhDQkZRYUJl?=
 =?utf-8?B?S2ZCc1U1ZjM5OUpKS0FXSWxiVVRwclJoTHFORFhVNzhueUFyeFZETXdicG5Q?=
 =?utf-8?B?QklYRS9FMFFoZW9kODZRdTJ0MXlwZjc2ZFVVSnQ0TGxGLytLUS81OEIzYnUx?=
 =?utf-8?B?RW5saENwVTZqUzMzWDlmVnBlNDBJRkMrck9ZVFZiOE9zRHJCMnNLN3JYUnNt?=
 =?utf-8?B?emR6TWF4RWNteFY3OFZZZzc5Q3hITHFDYXUwaDdTajVBNEZISlZLdHBYTXgr?=
 =?utf-8?B?MDE3N2psVmdrRDBzR0VEVjFmTlYyVjhBblVVcWpEeDVvOTlFQjc5azEzZlBR?=
 =?utf-8?B?MXZZWDhIME9aSlo3SWRrUjJyaDJGQjM3V0pyRkdZKzl0ODcydkM5b21LMzJ5?=
 =?utf-8?B?ZytYd1BURk1RK1FQd2ZZZTJobDdNN0tvOThhT0ozNk1YclZpc2NWa1Q0WFBm?=
 =?utf-8?B?UmVwSDMrOVl2M2JaMU94TmFrWlBoVmM4MlkybVpxL254bXNSc2dXT3pTK1RJ?=
 =?utf-8?B?TVBoSGpRYWczQlpGckJtUUJoM1JkV05CYWszaFRsTmgvVks1SGhsVjJaZzhY?=
 =?utf-8?B?N3dIL01CY1BZc2lucTEvV2ZUbmRCZytrelpyK0xmUUNRY0xpM2xERWJDTUhs?=
 =?utf-8?B?WnQ4cDhCcHMxNGNnQ1VEV0FkZjM2Ny9sdCtZcHRjSmxhWUdsNmFVNDA4Qy9R?=
 =?utf-8?B?RktRS2U4MitmWlh3TXdXQnlNamVjZXNFNGRUbk43MFpsaEI2VHVrTmtaWHg0?=
 =?utf-8?B?b1I5eG9XWkZ1cDI5alA3VlFOa3I3WnFIWkUydktyWityVHNieFh1YStHYWoy?=
 =?utf-8?B?VGNFcU95MlUzRDJvNlU0aTJyNXBXK1YzT2dwUHVhR1EvUDltVkVtb3g4Yk9G?=
 =?utf-8?B?QUszZW5aTHo5ZTdYekJXU0k4bGg0QmZyS0hXOXo1YmMyOER4elRiYytWaWND?=
 =?utf-8?B?MXFBTi9PUVFiSlczWUtaNm1jNnZHd21GZXoxOEVURDhqcFF4eWhJR3JVVGNN?=
 =?utf-8?B?dWI4Q29BRGV4UGV3WkZWaVNjcGdtQkRDcHBGK1l4SERGb3Y5OTluRC9PeXFu?=
 =?utf-8?B?SmhlMFY5UG5sZHJ0dFROR1pkMXNiNytlVzFvbWFwb25KMVNRY3hDN29yRC9Y?=
 =?utf-8?Q?P5UQ+IYPeuJ6ue74nB+0FnAy1?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 18336921-f4fb-47a4-c8ac-08dcbc373099
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Aug 2024 08:00:40.6433
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 7PBS2DLH9gPQnUYllJMeepZfB1bfPHTemWWuUD2nuh1edNX1ALzBcu5c0OkdcHq6s9OFjxb1nkUwhzxA7/vYPA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY8PR12MB7433


On 7/19/24 00:36, Dave Jiang wrote:
>
> On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Create a new function for a type2 device requesting a resource
>> passing the opaque struct to work with.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/memdev.c          | 13 +++++++++++++
>>   drivers/net/ethernet/sfc/efx_cxl.c |  7 ++++++-
>>   include/linux/cxl_accel_mem.h      |  1 +
>>   3 files changed, 20 insertions(+), 1 deletion(-)
>>
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index 61b5d35b49e7..04c3a0f8bc2e 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -744,6 +744,19 @@ void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>>   }
>>   EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
>>   
>> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram)
> Maybe declare a common enum like cxl_resource_type instead of 'enum accel_resource' and use here instead of bool?


Yes. Thanks

>> +{
>> +	int rc;
>> +
>> +	if (is_ram)
>> +		rc = request_resource(&cxlds->dpa_res, &cxlds->ram_res);
>> +	else
>> +		rc = request_resource(&cxlds->dpa_res, &cxlds->pmem_res);
>> +
>> +	return rc;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
>> +
>>   static int cxl_memdev_release_file(struct inode *inode, struct file *file)
>>   {
>>   	struct cxl_memdev *cxlmd =
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index 10c4fb915278..9cefcaf3caca 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -48,8 +48,13 @@ void efx_cxl_init(struct efx_nic *efx)
>>   	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>>   	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>>   
>> -	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
>> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds)) {
>>   		pci_info(pci_dev, "CXL accel setup regs failed");
>> +		return;
>> +	}
>> +
>> +	if (cxl_accel_request_resource(cxl->cxlds, true))
>> +		pci_info(pci_dev, "CXL accel resource request failed");
> pci_warn()? also emitting the errno would be nice.
>
>>   }
>>   
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index ca7af4a9cefc..c7b254edc096 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -20,4 +20,5 @@ void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>>   void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>>   			    enum accel_resource);
>>   int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
>>   #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2070.outbound.protection.outlook.com [40.107.92.70])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id E5BD213D531;
	Wed, 14 Aug 2024 08:08:57 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.70
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723622939; cv=fail; b=c5ksRkxz5b1aaJG8oQcCdtmpDvis50J+hwD5Fl8m0+ERByQb17tETzM+rKzD4QBzeo389RHbNiNy707Wjy+eBgXQaotdx0q4FaPkmorlZRJvVYLwHq/2bDyrThJYYjvS40fwz4YsJH6V2kUS5na2tX7h194sG8xolsH0dpJWuZk=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723622939; c=relaxed/simple;
	bh=nqsEEsExIWMu1aNe06R6JGvWD8b55Jc40rXyGMF7WN0=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=FWQ2Nx9wVjIaymoXlQoG+7zBtYrvi3+RsJmGP7kGpzN8M92rCH0TGQU/pFeYuNnrNg6FFL97DDxVH/DDiMsj/YxBrA2uHvbzd7dznLBFAYTuEF7apQjzdILDi9IR4iDPHDuP84WEB1DEcNUefuAvaxEto3k2NXD9JUCAK0QW/Bk=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=sp956Qxu; arc=fail smtp.client-ip=40.107.92.70
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="sp956Qxu"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=lK/XfORQcIqGkR56RbTvrWtCXwPNX5wJgTX9KkG9YI9NhX6K/q8Ja7bE/aKubA6waaRDQj/W6znCgKGuq0EAIm3I7nISMjmxnLzCCk0xJo+9b7d9+tMJSESf3t6J4RgQqCaw8sqn844ywL7/UxYt+LhZyxe5hWRnDD1U4C/NJr9+uDpdVtmZH/KPZcG6UDczAUzxcQsQ5ZzlS/6jHPokUdkr4pGyIcA04hqzpqBSacssJ89gXHGWg0RXVolwjgZsg6TcvFOTV4LUpqYleVQdXMZU8K90OshtwwP7wfb/A5pydf9CvpU8qMW9DeQKWCJ5aEeXGlgih1UXc1SdVUYs4Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=vYsrma2Cjz7TlZxKXsoibXF2PH9kvNDk3S+Yzh9JxGY=;
 b=KlUULTTzvPmSkjBYb78I01wpR3Oisva6DTS8LG8MdRwq28hgSNYnVf9Y3kwGW4sMqm5It87oIuxyvnMsdKGzjLn7IwmhF8fZN/gzX500WzAnJbjRkmHADNmBInfmq/3wjiJET6FB6/YnDgMW3fQ4qEGkbv/iFvkiXzqaIo9BKiswJiCBli0ruCm2cyb/R87ymjqvsaIVnvWQ0Q9saNI1NedV5++Ssrd/oaUGjaXhz2DPGK9gIwYeRh1/UgIciCXhM57ofV/Lb90Q0pYoYTgtUlkXRatdoBfHfJCeqYQ3AOQdBCw26cmhgtLKjtWAS04Nkte+kaWzC2BiO5dWbK4WHQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=vYsrma2Cjz7TlZxKXsoibXF2PH9kvNDk3S+Yzh9JxGY=;
 b=sp956Qxu3Q/tg9LevszeE02JSgBtJ9u9w31v5fVnbQVAku+cCLusPXZNBvhD9KAl+cYmnDHIhQbg+ozX7sAO1cqqMTM3+C1SaP2gdkCqrKHtm04M3AkIkjLm0BzIv5SD/NHsjGgEBG+L7iVBJKa71W5qgtPdM9nY57tPlWf4ULM=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by MW4PR12MB8612.namprd12.prod.outlook.com (2603:10b6:303:1ec::13) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.22; Wed, 14 Aug
 2024 08:08:54 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7849.021; Wed, 14 Aug 2024
 08:08:54 +0000
Message-ID: <f561c01f-501a-dc00-55e8-eaae0a4305be@amd.com>
Date: Wed, 14 Aug 2024 09:08:27 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 03/15] cxl: add function for type2 resource request
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 Dave Jiang <dave.jiang@intel.com>
Cc: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-4-alejandro.lucero-palau@amd.com>
 <abff9def-a878-47e9-b9c8-27cf3c008c29@intel.com>
 <20240804181654.00007279@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804181654.00007279@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0440.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:1a9::13) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|MW4PR12MB8612:EE_
X-MS-Office365-Filtering-Correlation-Id: ce93b9f3-afad-45d5-d06f-08dcbc3856ef
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|1800799024|7416014|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?VmZHd0ZBd0t5dEljcG9zL2N6VWQxcDk0K1hUeEg3UGhheThJOXMva0NBbkpa?=
 =?utf-8?B?ZE9COUlYVXVvME9rdEp0T3NCbG1lUmpUbzVhZHMzYU51OUUyU1dRaGIrMzJC?=
 =?utf-8?B?c3pQTTlEcVVyMVJ6Zm82Skx3M2sydjNCTGJicHE1ZHRJZGxBalBNcGZiMlJU?=
 =?utf-8?B?YkNqQjl2Wmpxc05jNGNXdDZDMDh3M3JKbG95VmZhSHhOUlN1UkEwNXZ5Vkpq?=
 =?utf-8?B?T3VMTU9DSkQ5am8zdWdNaEdYNzlSeit0K2lRMkFSbFJndW9UOEhmbGU4NFhh?=
 =?utf-8?B?SFViOHhFbDNnTHNXUDJmdE5lYUNTc01WTmRyQmNxWTNyelIrMzZCVnZKVXNp?=
 =?utf-8?B?WTRFRGZFdWYwZmgwcGk2WExsQzN1cU0rZkYxbEZVVE5xdWpmNjVVOWdWWVJ1?=
 =?utf-8?B?N2c4U1R6ZTZJaHo3dXNoZUVORDFlOEo3d2xrSUtEa2dpZ3V6Y0EwalZ0RkV1?=
 =?utf-8?B?czlNV0R1bnJRMStDck1aWEFxeS9ybzFZeHRFalNBYjlsYmdtcDZCZmpIbExI?=
 =?utf-8?B?LzJaTElyKzdJcUkzY1hUMzlqNXhxWnFYWmlNTzJVaHVtQStiNjE2ZHNwSU1Q?=
 =?utf-8?B?K1dMYWFDTmkvazFPYTFVSjdzS0M0M1RkMUN1RURTWEw5TUpSc05MbFAraHgw?=
 =?utf-8?B?ZThPRGJVL1NhdHJtSkQ4SERRMTYxZ3owQXNBeHZBSnpDUHhRNTBmYTFGeERj?=
 =?utf-8?B?QzRCZ0tQQTVqS0cyNitRaTNwRXhKOGErRHcyM3N1dDljYllVMFROTWtKRUF6?=
 =?utf-8?B?Y1JDN0dLYnZ2QktMNEVoSU4xaVRCYmUzd0xzL2VnZXhDb2lVVXpQSEJDbkNC?=
 =?utf-8?B?cTdLeDBCSUtaVm5XNitpcDVIRlJWYURPclI5VEdJR3oyVUVwOUVyN1NGdDdj?=
 =?utf-8?B?ek1qdVdJL1ozRUEza01ZUm5NaGl2QTQ4djFpRlA2T0o5M0RELzhSVHVVSzVO?=
 =?utf-8?B?emVkRVBlVis1ZVlMSWE3Zkk2TEFHUVlkR2t1T2hMaXN5WEJlbFB4VUg1RmU4?=
 =?utf-8?B?MEFLeVFFWVJFbThOQVZYLzI5SVJETFBkSVg2NnI2d3o2RXJyWTNEaEM3MGpp?=
 =?utf-8?B?akFMVWNZUHl3UnZSMzVyaGZ5dmIwbW4rOFBzSUFVdm03d042ZW5QbGEzVmMy?=
 =?utf-8?B?TmJzK3JwWGhMWlMyZFpyclF1dkFBR1VwRFdyMEJ4dVZsUFVTZ05YK3dQcFNn?=
 =?utf-8?B?cE45WkduQkVxSWkvbWZTUmlRemZFdUFhekJBNGJjT3BXaTRUNFRTVWw4MjRO?=
 =?utf-8?B?SWcyL2hOTXpxRWZramY4OXNuK0J0MGR5dVBhMmM3VEphdEp0M2pDUUpXOG93?=
 =?utf-8?B?a0dwZEVzT0VSc3dWVWp6cjkvZG1MWWZwaTNiMDVxcC85T3NRSXRmbGlwM2gr?=
 =?utf-8?B?Rm9RU1RIWmxHUkFTMzZ5UDJWN0tRZFdKZFdMc2trU0ZEcFRLTHRJaFNseUZC?=
 =?utf-8?B?dFZhdXQ1RVBVcmVpblUySUtvaGpnd2xsZ2RzUkhwN0xyc0l1N3hqZjd1UDZT?=
 =?utf-8?B?SnA4OTlEQW1wWE5jbHdqT0xqU1N4a0hRSDB5ZXFVTDI5OE05eDJSZVdwcGc1?=
 =?utf-8?B?TlJNTHM4Rkd5OTVQbEh4WUd4aWFZcCtneDV5QlZ1di9GNnc4OTFSYit4aXhi?=
 =?utf-8?B?QTBZYmtjMjFPcW5XWURmU2JFMVZkejhHbTN5bHE1L0o3QkxyVC85YjVrdEp5?=
 =?utf-8?B?WC85QXh4ZUhwdy9ndUVQTGdvVUsrcnFwcEtlcmN1cnJUVUxWcTVnRm90OUtF?=
 =?utf-8?B?dVdQV09DOVBYVHppSFNlYmx6c0h2eHc5S1h2RmlQWnJFRThmeVoxQnovcXJ3?=
 =?utf-8?B?UUhXdGVkc3E5bUd3ZjhMdz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(1800799024)(7416014)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?RTlPQ3Zvd3dEeHcyanA4ckw5WngzM2VtdW9tTnV2VW12aTJSVU5KS1Jjd2Fi?=
 =?utf-8?B?ZGF5RTFZQjVqd3c4cHlzVXROOTAzcHQrbWlYaTFwVDFWdkdic0l5VWpNRDVp?=
 =?utf-8?B?a1c2YUsvcTBldXRjMStpeXNpQ00xWldacG1yc3hoWmttbWIwbmlwMkQvZ1lE?=
 =?utf-8?B?STJreGNjRGxoV3FxMXRMbDVIbmtqV2xsQ0xrbHEyOVVOVjMvREZuQ1hiRnhq?=
 =?utf-8?B?Y1Z6bEgxcmdZZ3oyUElwdGpUVnBIL3FKTXBaVzAwYkd3NmRYWFIwV3JJdmNJ?=
 =?utf-8?B?UkhGVG10L043TXpmTG1UUVF4R0lFeHl1aEplRXpUbWI1MEdFMFdDNTFVMkU3?=
 =?utf-8?B?eTlnNWY0RWFrY0JDNjZlWlQ1b3l1Q0FMQlVkdnAvOVhoSEEyOUpnS0Z5ZTZG?=
 =?utf-8?B?Y1lKbzlMWkhOaXFCclJCOFNQZythS3hQR2J5SkpZVG1oWURtK2UvYXBsUjVP?=
 =?utf-8?B?eUhyeTk5dzBwTk8xaExObDlDbjNabVJXVjlHeFZlUTk1bGczc0VQRTlaTzBC?=
 =?utf-8?B?Ym9KbENHUW9EVThWSG1PcmhQTWZFanJpZDJ1VHdJeG82ek1pd2FscThlMjQr?=
 =?utf-8?B?UGMwRVpoVVhhYWJjWE5HR3JVcWVaUHArampQR3JpeUVQMm9KcmJINGNUaWJH?=
 =?utf-8?B?cTdNMW9jYjFscktRNWVsaDlaenNGNlFkWGJLdkh0djhFV05TcW10U2tBQWU0?=
 =?utf-8?B?UUhUQUdLWDY2eDVHKy93a3FvOTI4Q1hMUStHcmNJdHdGQ1JKUUh5V3JZbVZ4?=
 =?utf-8?B?OFAxbjVXK0tZYThRVlVNZjJoRlRSSmJEVklpcVdOWlF5ZmtwT2Q2MXorUCtQ?=
 =?utf-8?B?bGZzd0JRbWhPck9paVREWFllRzVHdU9tZlBwMGc4a3FZSDMxUFdVMngzS1I0?=
 =?utf-8?B?MWd2VjZFbVdCM2x4N3F6dk5hemh4OUxFd200MHpxZnBMaUt2Nk5Za1NsY1Uw?=
 =?utf-8?B?LyttSm1LaFJPaG5DYURoV0hrSjdCeG44Z3hCbUxlb2VhVjVDZWlqc1lZVHhk?=
 =?utf-8?B?TTVhOExUWVZQZkpQemZTdTUxSjdOSURtR3lmcFo1Q084b3NFeUV6c2R0ejVn?=
 =?utf-8?B?cTlnL0Zkd0wrZmZZdVVsNC83empwQ3cvVjdXZ0IrVUo4UDVJNjNpYVl1VVRz?=
 =?utf-8?B?d3EyV1JCUEFXU2VHWnRGRWhBVUpLWVM4S0JNKzNjYzVmWksvazNsWXMycXJz?=
 =?utf-8?B?Znc2QnlvZmtqOS9KeGhiTWRnbzRlbTh4MnU4WE5TMnZLWTlKenkvQkMyaUZR?=
 =?utf-8?B?Ym5McU9hcjFNM0xQeTN5cHdFeEVCZGRvVlVnNC9FRFR0V2Y2NEdlTzhqR1p1?=
 =?utf-8?B?emVEUS9pQUlxOGQwWEZlN0ZvM1RyemZCdU0wbElseGlFeHh0MmJTejI4dE9V?=
 =?utf-8?B?aGVSZ3B6cW5JL0ZjZldTSjBpUi9rc2FCNitSMWJaRW1ZbE45WmcyWXBSYWxh?=
 =?utf-8?B?Nm5ZNFJONHlsVjBDNlhzUzQxYXlPQWhsbDRTcE9FeDFWU29qZWJEQ1NkeVk2?=
 =?utf-8?B?YjNjYndmWWZsYXV4S2tGZDFSbnppTFVSYmdXVE1IOG9oaE9NZXZQS3lITUND?=
 =?utf-8?B?NFMzT3BnUmtwU0dRa1JIWGZGQmpEcXV3R0crcDl5QzcvVlNnUVVkMW5aR0Ux?=
 =?utf-8?B?NkFRd3ZhcnRLSFYzS3o0enppWGU2dk5ZVjRpb3NQN3FhR29TYW8vVlpSbmdC?=
 =?utf-8?B?bzdERTZFMDlMTVE3aUZvcm1YZ0N0dUpjWmRsdjZZMk5vNEJvRmczeXBKN2E4?=
 =?utf-8?B?Njk0Q09HbjJPWDlhTDA0bXUzeUlGWC9mdmgvV3o5RHRVMTNUSms3WkZ4OXBo?=
 =?utf-8?B?djMzUUFsYmwvQVl5Zit5MEVaT0lKdzJ4SW5GK0tUUTNMalhFUitkVmNvR0lD?=
 =?utf-8?B?RXlUemZwK0VWaGpYS3VMSUVmeHhuWjdXbWhyRWwyeWpQdm0zWU8wZGVDeUx0?=
 =?utf-8?B?YW5Ba1FUNytNSVVUOFRkZlNYK3dCTVlpU2tIMFFzR2ZST3JJRU81QnBoSUpz?=
 =?utf-8?B?eG43VXVURUNvMU1XOHJDZ0VEeDhGWnh0SFNHc2FLRnRQZm1uWm1tWUpkdXUx?=
 =?utf-8?B?TmpCQ1Z2b25sYTU0KzNBRjMvckttQXEwVDg2blVZZWd3emljVEJFVmdtKzN2?=
 =?utf-8?Q?Bi8w/7ChUomQTHIHfJk+KhL2s?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: ce93b9f3-afad-45d5-d06f-08dcbc3856ef
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Aug 2024 08:08:54.4751
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: dCSZ/4jVJqE+wC0MF51/K5eUSOdLcGSdk9jtMcqXBla9D0bcttfUvGomAsc67IhAEbmtdZwdOGzcUF8HK6pEag==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MW4PR12MB8612


On 8/4/24 18:16, Jonathan Cameron wrote:
> On Thu, 18 Jul 2024 16:36:00 -0700
> Dave Jiang <dave.jiang@intel.com> wrote:
>
>> On 7/15/24 10:28 AM, alejandro.lucero-palau@amd.com wrote:
>>> From: Alejandro Lucero <alucerop@amd.com>
>>>
>>> Create a new function for a type2 device requesting a resource
>>> passing the opaque struct to work with.
>>>
>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>> ---
>>>   drivers/cxl/core/memdev.c          | 13 +++++++++++++
>>>   drivers/net/ethernet/sfc/efx_cxl.c |  7 ++++++-
>>>   include/linux/cxl_accel_mem.h      |  1 +
>>>   3 files changed, 20 insertions(+), 1 deletion(-)
>>>
>>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>>> index 61b5d35b49e7..04c3a0f8bc2e 100644
>>> --- a/drivers/cxl/core/memdev.c
>>> +++ b/drivers/cxl/core/memdev.c
>>> @@ -744,6 +744,19 @@ void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>>>   }
>>>   EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
>>>   
>>> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram)
>> Maybe declare a common enum like cxl_resource_type instead of 'enum accel_resource' and use here instead of bool?
>>
>>> +{
>>> +	int rc;
>>> +
>>> +	if (is_ram)
>>> +		rc = request_resource(&cxlds->dpa_res, &cxlds->ram_res);
>>> +	else
>>> +		rc = request_resource(&cxlds->dpa_res, &cxlds->pmem_res);
>>> +
>>> +	return rc;
>>> +}
>>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
>>> +
>>>   static int cxl_memdev_release_file(struct inode *inode, struct file *file)
>>>   {
>>>   	struct cxl_memdev *cxlmd =
>>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>>> index 10c4fb915278..9cefcaf3caca 100644
>>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>>> @@ -48,8 +48,13 @@ void efx_cxl_init(struct efx_nic *efx)
>>>   	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>>>   	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>>>   
>>> -	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
>>> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds)) {
>>>   		pci_info(pci_dev, "CXL accel setup regs failed");
>>> +		return;
>>> +	}
>>> +
>>> +	if (cxl_accel_request_resource(cxl->cxlds, true))
>>> +		pci_info(pci_dev, "CXL accel resource request failed");
>> pci_warn()? also emitting the errno would be nice.
> Don't hide it at all.  Fail if this doesn't succeed and let the caller
> know. Not to mention, tear down any other state already set up.
>   


It is obvious I have problems with the way errors are reported, 
specifically about what should be considered a serious problem not 
expected at all.

I think we can expect some unexpected situations with the novelty behind 
CXL and, indeed, Type2 support. I guess a good approach could be to be 
chatty at this point and refine the way these errors are reported later 
when the maturity of the support and our experience give us the knowledge.


>>>   }
>>>   
>>>   
>>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>>> index ca7af4a9cefc..c7b254edc096 100644
>>> --- a/include/linux/cxl_accel_mem.h
>>> +++ b/include/linux/cxl_accel_mem.h
>>> @@ -20,4 +20,5 @@ void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);
>>>   void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>>>   			    enum accel_resource);
>>>   int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>>> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
>>>   #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2058.outbound.protection.outlook.com [40.107.237.58])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id F111E1ABEBD;
	Thu, 15 Aug 2024 15:20:48 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.58
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723735252; cv=fail; b=GCnSnvkuWF+TbGRr3601jnWVjZl5Y75ZfsWVCSRUJn2LXVjrhqyKQd4OrJcJ0XEh5Z6BhePcuVxKABTQDa5AABq0ycZ6rwkFLplAKKdkcPthYRNn8l5/zhthA5CPIvpvY44fqYimtVr6P/Flz++LvMqscfdmQXI9ImWOEPTcIpY=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723735252; c=relaxed/simple;
	bh=MES9dJmouUrjjOkMeJfNfM5tKbUvljHAc2hVbvDhlPU=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=mcL4Ofk/HVdNFxAKHp7FRv68PNmLWwYtShm6HcQsKfc2fZR/yphIHsr5eE80BHm6JPfhACmKPYmnkpJmhvbh3wAwdSOx0r0d18xeNfM5q38jmgs1ljCr1AGWS6ZfvAFbfmwB1TUbdQkKlRc5iETqA8gxo5LNi7YmXh8BbWtvs0I=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=KQQYqCEq; arc=fail smtp.client-ip=40.107.237.58
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="KQQYqCEq"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=qXHcmBdt30hV4t2QuvHFF68SAtKBHjtjcf4xdcIvEXm8vupYRrkR9YiZycb1UGVjBWEcHvNE6HA4S/1VNrS4mJrkinJqFGgiS/9kmvVZq813k3/U2DT/6sZpBCp+fJFSKH6xfnY9yI0uTqTg0osFzGnHZR1NgSP4mNrelvRHqSAw3Ab92gaU1/jiCngabKIorUZbBlkmC0QK3Ns5+n/eUcLI3JyifxDCFYN1LAWG+eWoQYS8C90H6Dm+ws3BF9kNE2A4Qxh7HDi4bZmnfJdUs9V4BtjR0Cv7CzFkE/cxWJNZLS51emQ2VwDUHoGrise3I1vp+Rb5NsWmDMTGBcRILg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=9qKlGT1UqgjfrjCSkHaf1lWVe0y/IhpsRBWzmIsxo1c=;
 b=NqHa0jCTD6cdWyv+SbM61KK8o6yIW3N0OuHIRolZLtc4cWQQyHC1H4eFo+NgkC8aioVYB1uvMFW0na4CoFWkycicakRCxkhYfpyxZcgNMV27s4GtoA97b5791G3J8PrcTa6ZDV86+MvP8gTKnC1SY4/sDkwzvgt1LhdjP1PkNrzAS2AvWr8+m3iJEfeN2NhMg8bjeCNOFzRQqWWx6emuj4tsVbv604OcRZHOaBYQvwuUY6e1fST2BqImcOF2+OkMiOwkPZX7Dk9EZ3+IqM7ZyjE8dAJQT/78ri+w4S7pLTAoeZZitcl+9PJn3KdKkkY9nAdBMmHKvs82AZSZ5uFCqA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=9qKlGT1UqgjfrjCSkHaf1lWVe0y/IhpsRBWzmIsxo1c=;
 b=KQQYqCEqW1NwfkEZcdO2/1a5GETq+ZVWmLijLa5x41bwiqkFxHRwIOnfLUa5dWKSsZayFdOJYzR9IxxBz8YlaL26goi+5TsLPSxC9t9WiVHF9t8ReDQ3iiDmdfv+ZMzriaXPvKQYY41E3/DVM4SJNkRGWeX1+X1bBGXs3IzDPHI=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DS7PR12MB8346.namprd12.prod.outlook.com (2603:10b6:8:e5::13) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7849.22; Thu, 15 Aug
 2024 15:20:37 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.016; Thu, 15 Aug 2024
 15:20:37 +0000
Message-ID: <e4ab55fa-d406-4ef8-1ce6-706c2577b960@amd.com>
Date: Thu, 15 Aug 2024 16:20:06 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com, targupta@nvidia.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
 <20240809121036.000057f0.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240809121036.000057f0.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: DUZPR01CA0141.eurprd01.prod.exchangelabs.com
 (2603:10a6:10:4bd::28) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DS7PR12MB8346:EE_
X-MS-Office365-Filtering-Correlation-Id: 2a3b866b-f768-4cd8-50ac-08dcbd3dd0a7
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|7416014|376014|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?ZlpXcDgvS3lUR0djWk5RblhQeFFHa092UWk5UWxsVlhuNmJGTjA5OTkzZFMy?=
 =?utf-8?B?OWFkT1lmK01vS3pKMDFsTlVOODl4Sk83ZHZzQ1lJZmYwMUYzZUxYVGNJQWdV?=
 =?utf-8?B?QWZ2K05OQXBpblJqSGFPR2xuYjFmQk1zTFErdHlLTXJLcW9MM09xZmZGZVAx?=
 =?utf-8?B?S2VNTXBZUHZDdUtpUENJTHVNT3NTRzlKaVRnT240WU1YWEYyWmwzc2VKVTJx?=
 =?utf-8?B?RkpQUndXQkk2OHY2MGR3Z2lKQ3BPMDVTTjY2cEtXL1VHRzVWRTdoalpSTXg0?=
 =?utf-8?B?ZlRaRXhOdTdIRGV6TEFEU0kreVZGU2Q3eHVPMFp5bGdpOW5vaXZsdU8walRk?=
 =?utf-8?B?NmVtVUNtNVV4eGs4ajNsTC9BQWNDWSt2aGRFV0ptdS9INzJTcEhIbVFTQWkw?=
 =?utf-8?B?ZHBuRTNQUW8vdHZER20wek5CWlRVRElCZ2dmL016eHBzMWNLcy9UMlVYc0xM?=
 =?utf-8?B?ZlVTZUIwZ3FGZTJ1N3o2K2h2UDErNmFFWWc4S1hURk9hWEE0bTV1eE1kMzRs?=
 =?utf-8?B?Qy95ckw5c1ZnSFhrYWVLaDlrNWxUaW1tUW12ZDA5OXhVb0h5ZEE5aHNabHJM?=
 =?utf-8?B?Ymd5ZHZzT3RHNEtrREMrUjdXVXJvbnN0eFRYSnpXcW91MGgxYlpiYUVjK25N?=
 =?utf-8?B?QnZJUFpnelJwYU9YSTdsOHBDRm9UL0M3Q1NhTHlmbVBaWlJ3SE9HbUtIWEZi?=
 =?utf-8?B?OFArakVsWkdwVlpTTUtnQU84b093UTJuWE1lUVZkQWUyRGh2L21TUzFrMWtO?=
 =?utf-8?B?NFJqMG5pdlcxblcvL3Y3cmQwaEN2aXJhSkF3L3F3ZTBMWWFjbUs1RmRXSzdr?=
 =?utf-8?B?L2prZFpZcEhLd0V0bzM0RmxiYUNyZkh3UGZZYWoyWitJa214WUVtWW1zSDkv?=
 =?utf-8?B?VVhWY0puL0luV1BGZVJSb1NLMHVzMzJxaHp6VzM0QXF0WDVuLzFlMHVNaUt1?=
 =?utf-8?B?eWhOL0hoS056Qk1ialpCcWZxZEJwUjdiazBWVXBqVzNFTlNaaUxnQ08zOVlI?=
 =?utf-8?B?cEtoNHNsck1SYmxvNStRT0RwQnpueXVBMXBmaFhLeHZQcjFnc2l1Yys2ZVUr?=
 =?utf-8?B?ekpQcGJZNlpFRWx4ZEhTQkg4SFRyWFc4TzQ5M2N5ZTExY3Y5MHpBMjdtVFMv?=
 =?utf-8?B?YWhqOHJmTzF2QWFnWmFXSS9pbFZFSytoRmhVaHlkbFBRbWdJMUwvU3BPUStF?=
 =?utf-8?B?QTBzL1BSSU54cXlON0N0REJuL1p1Y0tjdE0zQVZtQ0NIc3JmckdteGdIZXJF?=
 =?utf-8?B?cEtLTU9FeHZYQnFMeHdjL3JsSnZiTURGWHdkOU9WV1lVcWltY0VNM3U5eTZV?=
 =?utf-8?B?c1d0U3l5M01KTGlqS1hoekNmMGFlQkdVd1QzNWdySHdpaFlQaWxHLzFEWExE?=
 =?utf-8?B?TGp5VTh6VXJvVEJFeTAwY0hxKzZBT0FnSXhmVDFDR0JleUE2UXAyYW4wbUlp?=
 =?utf-8?B?eWVuTkFZVllaMitpTUxzQU5uUFc4RHcrSEthZndLc0NqRzNDR2k3RnVJYkx5?=
 =?utf-8?B?WStVNHZud2xGcE11ekF3L0R6MXhPTHZsajJMOEJWc0d4dy85QnpMQkk5Sjdt?=
 =?utf-8?B?aTg2ektpeVpBTlh2SUNPYTZPUW5QeFpJOU5KWjM2b2VPcjNoSnRnOXV4d0Nq?=
 =?utf-8?B?YWNDQ3l0VytLRkZWYzdSaXNleE5QczRDS3ZCTjh3NWxmY2VIZVpuelZrQ2Jn?=
 =?utf-8?B?bjdnak0zL1c1QmVWZDZXUG5hTW1IWExNazJNZnJvc0JVaExHRzBTTUd1RU9Z?=
 =?utf-8?B?RC84a2dxLys3ZjZUTUJaRE0zMWR1ZVNQRFJBVnI0YVpkK1pRMGFOZGxnc05Y?=
 =?utf-8?B?bWZsbFZ5bEwwb0VFWVlRQT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(7416014)(376014)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?SHhMR2hSMkF2OFZoUzdkVG5MSFF1VVNRcW5NMm1lRnF5Q0xVT3dHODIrUkls?=
 =?utf-8?B?QmhKRUJlN25PdFplN3QvOHVLTWQvbnNkdHV4SFBHZVFWNDB5eFhKYm1vTzJI?=
 =?utf-8?B?anhBUCtNalMyMWtodlQ2Mjd4RlFHdGZuUWJMWU9FUDF1RlBvMHNKNXJzWjQz?=
 =?utf-8?B?V0RXNVhPb1pLSDU5NWIwMnoyZ2sxRWJWaVMvOVNGZmNNVjlxYjJFQy9UeTlD?=
 =?utf-8?B?NkRVaEt0UllPVVJEeHhQVUxaOENwVXlCdXg0cDNTdmxXR3grNEZQYXM0bTlB?=
 =?utf-8?B?K21sUmoyN0dQdkZ5Z0ZzVVFHMXhBMWp0aTNTVW1SclNzS1ZJM1hqTCtCSTBI?=
 =?utf-8?B?bWJ1M0wzMjZqWExVSXQ5M1VhUm1JSndoK0hGeE42UnM2ckwzeUhLamJSb3Bx?=
 =?utf-8?B?NmVSQ0lxTStubU5EZmNCa0J3aGVXeG9JanNCU3VYY3pSRWUrOGZoaEltc081?=
 =?utf-8?B?NDRGYldYS0ZVSGRra0ZDZ2hudkZxdk16RStUcDBXSi9KcWt3ZW9iWlB5cHVu?=
 =?utf-8?B?d3c4MzdLKzR6TUZmQ3F2R1F0RmNZQUFFRHh5em9PbzcwOWF1QVg3aHlTMDY3?=
 =?utf-8?B?UERwR0pzZmc1dFZoYnRJZDNKcWlZbHBIdjRHNEJ2MTJlZmdvUmZmUE5xRE1t?=
 =?utf-8?B?QWZiL01rNFVmMWg5MGZjckxiSFFGWTF3Rkh6bWZzOHd6dy9TRytva2s3R1I0?=
 =?utf-8?B?SU1xQThCL05KTHlqeklOcm1mTzJQL0lvVHFjNHU0bnRId1hFenRNSFlEM1Uw?=
 =?utf-8?B?WFJEMXdFeFlrUmxPN0QzWnM5bVlwSTlpL1plVXJGczFIcTF4SDVyZVFtdWE1?=
 =?utf-8?B?eWRhS0dVVHRlcGM1T002UTd1Nk95OFFBMXk0RTJwYmxBTDdXTWR5OVBVZlNM?=
 =?utf-8?B?NGU3WXBHTFVsUXllMXpwamhqbVVKQ0hXbFlCNnEvV3JkU29nazhuMkl3Qit6?=
 =?utf-8?B?SXU1UDdzbjJzSUdNdWI0UjcyNTdFMGxqb3ZobVdXY2JqWEgzaXN4UHhJNEpH?=
 =?utf-8?B?L2F0L1dpc2t5RjVuc2g3SlRUOUJXdmpTMTdCc3NnOXRrQjB2dHhCTFJSblFt?=
 =?utf-8?B?M2JSaFBjQ3V2cHBTNVg4UW4yZ2JqVWh1MVc0RDdhYTRVSnhkM0FleUtGeXFS?=
 =?utf-8?B?N29xRU92V0VNUXBrUWxiQjBVQ1cvWVF5UmQxOEovWlQ5UWpPekVkb2t0RkdF?=
 =?utf-8?B?QzlzNmRwTUV2N20rMW1WNTVEekovMndFTERLTVJwWUZTTnZVRFU2Y0ZIUVFs?=
 =?utf-8?B?OTd6MDM4M09ZaVVXRHl6Z1l3MUlzYW4vbHZhN1ZpK0hiU0p4RDBxdU5IT0xD?=
 =?utf-8?B?RmRSbDY0OGRlUnN0RG5nVHVBVFkvSllLVXN4U0V2VjNIN2dPb0poVUZaYW1P?=
 =?utf-8?B?bmpFMkFmSm80SnJLWU1OUk16eTkralU2VVIvWnorWFNpU2NTYnpHc21RUmJD?=
 =?utf-8?B?c0xvdE1SczdPenp0Z09Wa0dxaDRlTC8ycW1uS3VyMTE2MnFEV0F1azJwdmZJ?=
 =?utf-8?B?WnJtVDFYM0V4dE4vTTJPZlRsdUxZV29DZURyVExBcUk4UnRhSEw2YmlDK3hK?=
 =?utf-8?B?cnVxZGdnSmhnSzF5S3A5SjUrVkVHTmRiMzlvR2hTcFZqcUQ1eGFQbllaRWNn?=
 =?utf-8?B?aWJRMDNXMXVRZ3Y1V3hkOHlEaFo5NnFwM2F3VU4zdklUUWJhQ3JzSC81RGN6?=
 =?utf-8?B?KzNuWmFLSEFMWjQ0R2taTUNvYmFBcXV3bENtY2hialdpUDJSQzZ0cXBYYUpJ?=
 =?utf-8?B?Q3VzdEFqSTNvbWJ0UkM5RVhFY0ViZ1dlRUgyamlpeWZaN21QeFkxNEh2V3RS?=
 =?utf-8?B?ZFRXZTk4SVYwZDMrblVrd3R6Tnh4OXBQakJ3Mk8rTC9ZKzRXQ0luLzZJdlQv?=
 =?utf-8?B?a29FeEZOcWZjSlBOcUhJS2p1dG1MRVBOOU1kQXQyUytjTkJhNVRTT2YwTWc4?=
 =?utf-8?B?eVBpMmd1TlJxd2lib2lOeGV0eW5EcGVhNW15cHZwQmlIbk1FNkI5cWtJUGJ6?=
 =?utf-8?B?azVhU0ZOZW05VTdNL2o0ZkJWUk5vOUhmRXI4SnVIN1pyaGR6b2NraUNGNFBF?=
 =?utf-8?B?MzhUc05SUlEwbEc4bnIyNFV2VUNMbVVXUnRya2JxdU1VQjZnNTNNSXpOV2x1?=
 =?utf-8?Q?InhhR20Qm/Cw/0imtHoT61yzK?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 2a3b866b-f768-4cd8-50ac-08dcbd3dd0a7
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Aug 2024 15:20:37.4151
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 5BB9cm8uXNqrThBhroCiw/QsVrwJ+UHpd2d57O84ge7c2dmgpPhXzMHVVR1IVXU9L/WNM4ftgKeYZNdaeT4bCw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS7PR12MB8346


On 8/9/24 10:10, Zhi Wang wrote:
> On Mon, 15 Jul 2024 18:28:24 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Type2 devices have some Type3 functionalities as optional like an mbox
>> or an hdm decoder, and CXL core needs a way to know what a CXL
>> accelerator implements.
>>
>> Add a new field for keeping device capabilities to be initialised by
>> Type2 drivers. Advertise all those capabilities for Type3.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/mbox.c            |  1 +
>>   drivers/cxl/core/memdev.c          |  4 +++-
>>   drivers/cxl/core/port.c            |  2 +-
>>   drivers/cxl/core/regs.c            | 11 ++++++-----
>>   drivers/cxl/cxl.h                  |  2 +-
>>   drivers/cxl/cxlmem.h               |  4 ++++
>>   drivers/cxl/pci.c                  | 15 +++++++++------
>>   drivers/net/ethernet/sfc/efx_cxl.c |  3 ++-
>>   include/linux/cxl_accel_mem.h      |  5 ++++-
>>   9 files changed, 31 insertions(+), 16 deletions(-)
>>
>> diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
>> index 2626f3fff201..2ba7d36e3f38 100644
>> --- a/drivers/cxl/core/mbox.c
>> +++ b/drivers/cxl/core/mbox.c
>> @@ -1424,6 +1424,7 @@ struct cxl_memdev_state
>> *cxl_memdev_state_create(struct device *dev) mds->cxlds.reg_map.host
>> = dev; mds->cxlds.reg_map.resource = CXL_RESOURCE_NONE;
>>   	mds->cxlds.type = CXL_DEVTYPE_CLASSMEM;
>> +	mds->cxlds.capabilities = CXL_DRIVER_CAP_HDM |
>> CXL_DRIVER_CAP_MBOX; mds->ram_perf.qos_class = CXL_QOS_CLASS_INVALID;
>>   	mds->pmem_perf.qos_class = CXL_QOS_CLASS_INVALID;
>>   
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index 04c3a0f8bc2e..b4205ecca365 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -616,7 +616,7 @@ static void detach_memdev(struct work_struct
>> *work)
>>   static struct lock_class_key cxl_memdev_key;
>>   
>> -struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
>> +struct cxl_dev_state *cxl_accel_state_create(struct device *dev,
>> uint8_t caps) {
>>   	struct cxl_dev_state *cxlds;
>>   
>> @@ -631,6 +631,8 @@ struct cxl_dev_state
>> *cxl_accel_state_create(struct device *dev) cxlds->ram_res =
>> DEFINE_RES_MEM_NAMED(0, 0, "ram"); cxlds->pmem_res =
>> DEFINE_RES_MEM_NAMED(0, 0, "pmem");
>> +	cxlds->capabilities = caps;
>> +
>>   	return cxlds;
>>   }
>>   EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
>> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
>> index 887ed6e358fb..d66c6349ed2d 100644
>> --- a/drivers/cxl/core/port.c
>> +++ b/drivers/cxl/core/port.c
>> @@ -763,7 +763,7 @@ static int cxl_setup_comp_regs(struct device
>> *host, struct cxl_register_map *map map->reg_type =
>> CXL_REGLOC_RBI_COMPONENT; map->max_size =
>> CXL_COMPONENT_REG_BLOCK_SIZE;
>> -	return cxl_setup_regs(map);
>> +	return cxl_setup_regs(map, 0);
>>   }
>>   
>>   static int cxl_port_setup_regs(struct cxl_port *port,
>> diff --git a/drivers/cxl/core/regs.c b/drivers/cxl/core/regs.c
>> index e1082e749c69..9d218ebe180d 100644
>> --- a/drivers/cxl/core/regs.c
>> +++ b/drivers/cxl/core/regs.c
>> @@ -421,7 +421,7 @@ static void cxl_unmap_regblock(struct
>> cxl_register_map *map) map->base = NULL;
>>   }
>>   
>> -static int cxl_probe_regs(struct cxl_register_map *map)
>> +static int cxl_probe_regs(struct cxl_register_map *map, uint8_t caps)
>>   {
> Can we not use uintxx_t? Just like any other one in the
> cxl-core. Generally, u{8,16...} are mostly used for kernel
> programming, and your previous patches use them nicely.
>
> Let's use u8 for caps.
>

Sure.

Thanks


>>   	struct cxl_component_reg_map *comp_map;
>>   	struct cxl_device_reg_map *dev_map;
>> @@ -437,11 +437,12 @@ static int cxl_probe_regs(struct
>> cxl_register_map *map) case CXL_REGLOC_RBI_MEMDEV:
>>   		dev_map = &map->device_map;
>>   		cxl_probe_device_regs(host, base, dev_map);
>> -		if (!dev_map->status.valid || !dev_map->mbox.valid ||
>> +		if (!dev_map->status.valid ||
>> +		    ((caps & CXL_DRIVER_CAP_MBOX) &&
>> !dev_map->mbox.valid) || !dev_map->memdev.valid) {
>>   			dev_err(host, "registers not found:
>> %s%s%s\n", !dev_map->status.valid ? "status " : "",
>> -				!dev_map->mbox.valid ? "mbox " : "",
>> +				((caps & CXL_DRIVER_CAP_MBOX) &&
>> !dev_map->mbox.valid) ? "mbox " : "", !dev_map->memdev.valid ?
>> "memdev " : ""); return -ENXIO;
>>   		}
>> @@ -455,7 +456,7 @@ static int cxl_probe_regs(struct cxl_register_map
>> *map) return 0;
>>   }
>>   
>> -int cxl_setup_regs(struct cxl_register_map *map)
>> +int cxl_setup_regs(struct cxl_register_map *map, uint8_t caps)
>>   {
>>   	int rc;
>>   
>> @@ -463,7 +464,7 @@ int cxl_setup_regs(struct cxl_register_map *map)
>>   	if (rc)
>>   		return rc;
>>   
>> -	rc = cxl_probe_regs(map);
>> +	rc = cxl_probe_regs(map, caps);
>>   	cxl_unmap_regblock(map);
>>   
>>   	return rc;
>> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
>> index a6613a6f8923..9973430d975f 100644
>> --- a/drivers/cxl/cxl.h
>> +++ b/drivers/cxl/cxl.h
>> @@ -300,7 +300,7 @@ int cxl_find_regblock_instance(struct pci_dev
>> *pdev, enum cxl_regloc_type type, struct cxl_register_map *map, int
>> index); int cxl_find_regblock(struct pci_dev *pdev, enum
>> cxl_regloc_type type, struct cxl_register_map *map);
>> -int cxl_setup_regs(struct cxl_register_map *map);
>> +int cxl_setup_regs(struct cxl_register_map *map, uint8_t caps);
>>   struct cxl_dport;
>>   resource_size_t cxl_rcd_component_reg_phys(struct device *dev,
>>   					   struct cxl_dport *dport);
>> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
>> index af8169ccdbc0..8f2a820bd92d 100644
>> --- a/drivers/cxl/cxlmem.h
>> +++ b/drivers/cxl/cxlmem.h
>> @@ -405,6 +405,9 @@ struct cxl_dpa_perf {
>>   	int qos_class;
>>   };
>>   
>> +#define CXL_DRIVER_CAP_HDM	0x1
>> +#define CXL_DRIVER_CAP_MBOX	0x2
>> +
>>   /**
>>    * struct cxl_dev_state - The driver device state
>>    *
>> @@ -438,6 +441,7 @@ struct cxl_dev_state {
>>   	struct resource ram_res;
>>   	u64 serial;
>>   	enum cxl_devtype type;
>> +	uint8_t capabilities;
>>   };
>>   
>>   /**
>> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
>> index b34d6259faf4..e2a978312281 100644
>> --- a/drivers/cxl/pci.c
>> +++ b/drivers/cxl/pci.c
>> @@ -502,7 +502,8 @@ static int cxl_rcrb_get_comp_regs(struct pci_dev
>> *pdev, }
>>   
>>   static int cxl_pci_setup_regs(struct pci_dev *pdev, enum
>> cxl_regloc_type type,
>> -			      struct cxl_register_map *map)
>> +			      struct cxl_register_map *map,
>> +			      uint8_t cxl_dev_caps)
>>   {
>>   	int rc;
>>   
>> @@ -519,7 +520,7 @@ static int cxl_pci_setup_regs(struct pci_dev
>> *pdev, enum cxl_regloc_type type, if (rc)
>>   		return rc;
>>   
>> -	return cxl_setup_regs(map);
>> +	return cxl_setup_regs(map, cxl_dev_caps);
>>   }
>>   
>>   int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct
>> cxl_dev_state *cxlds) @@ -527,7 +528,8 @@ int
>> cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state
>> *cxlds) struct cxl_register_map map; int rc;
>>   
>> -	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
>> +				cxlds->capabilities);
>>   	if (rc)
>>   		return rc;
>>   
>> @@ -536,7 +538,7 @@ int cxl_pci_accel_setup_regs(struct pci_dev
>> *pdev, struct cxl_dev_state *cxlds) return rc;
>>   
>>   	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
>> -				&cxlds->reg_map);
>> +				&cxlds->reg_map,
>> cxlds->capabilities); if (rc)
>>   		dev_warn(&pdev->dev, "No component registers
>> (%d)\n", rc);
>> @@ -850,7 +852,8 @@ static int cxl_pci_probe(struct pci_dev *pdev,
>> const struct pci_device_id *id) dev_warn(&pdev->dev,
>>   			 "Device DVSEC not present, skip CXL.mem
>> init\n");
>> -	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
>> +				cxlds->capabilities);
>>   	if (rc)
>>   		return rc;
>>   
>> @@ -863,7 +866,7 @@ static int cxl_pci_probe(struct pci_dev *pdev,
>> const struct pci_device_id *id)
>>   	 * still be useful for management functions so don't return
>> an error. */
>>   	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
>> -				&cxlds->reg_map);
>> +				&cxlds->reg_map,
>> cxlds->capabilities); if (rc)
>>   		dev_warn(&pdev->dev, "No component registers
>> (%d)\n", rc); else if (!cxlds->reg_map.component_map.ras.valid)
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c
>> b/drivers/net/ethernet/sfc/efx_cxl.c index 9cefcaf3caca..37d8bfdef517
>> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -33,7 +33,8 @@ void efx_cxl_init(struct efx_nic *efx)
>>   
>>   	pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability
>> found");
>> -	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev);
>> +	cxl->cxlds = cxl_accel_state_create(&pci_dev->dev,
>> +
>> CXL_ACCEL_DRIVER_CAP_HDM); if (IS_ERR(cxl->cxlds)) {
>>   		pci_info(pci_dev, "CXL accel device state failed");
>>   		return;
>> diff --git a/include/linux/cxl_accel_mem.h
>> b/include/linux/cxl_accel_mem.h index c7b254edc096..0ba2195b919b
>> 100644 --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -12,8 +12,11 @@ enum accel_resource{
>>   	CXL_ACCEL_RES_PMEM,
>>   };
>>   
>> +#define CXL_ACCEL_DRIVER_CAP_HDM	0x1
>> +#define CXL_ACCEL_DRIVER_CAP_MBOX	0x2
>> +
>>   typedef struct cxl_dev_state cxl_accel_state;
>> -cxl_accel_state *cxl_accel_state_create(struct device *dev);
>> +cxl_accel_state *cxl_accel_state_create(struct device *dev, uint8_t
>> caps);
>>   void cxl_accel_set_dvsec(cxl_accel_state *cxlds, u16 dvsec);
>>   void cxl_accel_set_serial(cxl_accel_state *cxlds, u64 serial);

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2082.outbound.protection.outlook.com [40.107.223.82])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id E0C661AD400;
	Thu, 15 Aug 2024 15:37:55 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.82
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723736277; cv=fail; b=PfP4R8uX/CeQglj9C35mBoEBUmiWDlijyZfcHia77/8Do1c76BzsaJ8MRfwW4+8QMD8hoLz4Zn7sqv0R5Xp95ViYtxWsA9EqcLEW5mPS2L6pUoaFGSVhJ6MRGWXcNb2ID4V4Q923o97puI6Q03M5bx0PATI47cWVkVc+FyJag0s=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723736277; c=relaxed/simple;
	bh=dXKp09qcC9fylLcB7PC3ZbO/k9rZXP9AOHG2jpe8+mg=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Z8YyStPwYWE7JvPhOFNYqClsXXJm2vaHI0WXaoAzHO/EwtMP9UksnPsgnVTTvGT9PyuxoFXlpfrGLgQvSTOURXKW5aCnZFeqHIHvNhVv6QA663zQIdSvbcXHUN6IbazMPC23J0kciJgTYvawaDqHicdVg87dec/OXXhAomLYXvY=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=HIFqMOWl; arc=fail smtp.client-ip=40.107.223.82
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="HIFqMOWl"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=I177P4N5bBp8NpyM8JKPF2lKQ3+KMur9CQSjc7YYtdlTsxX+KlTeGW4ldBqtlYOY6RTXsYulPMFj7YaLnXFPN6yc0mbUVWL0Up8XtAWo5IEB1asqwRgdrF0Za6T/agWKHSghn2bl0ZRoco95qwdIdHpIgL2qWQp4AzQQclxnw13HzJGB0z5RkswWIcdtq8s9LknQC5RgNbO+dN4WaZyX7N1urKga2Y07uVtYxqGn0C3dmly2Qjbet0yZDYeS9xKGh3znrzMFnOMyvKYiyuHgu+76lpizkvuRPGzlLSemE8MOaTMRpzktr+VdNpiLvn3CfwTjxRC4MoH6au/G+/i42Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=P6pLYK9MHS7X5qmSIY+SZJk29Xs8/RKEGDwWg9ZqYr0=;
 b=NqUp3tuTLroB6zAOH1cerSaRxTEx9P9WcWsGSKiZ6aMwejSLSWcIz9DWFQJ3rW0pz5jcic6z95H2jDOJCoFoF+Oma8J2L7mgGRzJj9UX9W600IUNFVz0zxIIyXTMeOzyzusmvBk2Z1OfjjP8npgU6rRlSar7E1RtnTueW3ce66J45wYugz1uyEHps8bJkdKc9dgcp6IlQM4XVm3hnUU20i3DWmOYKtJYj8O0LSVHxCyQE7V55G5VgHlxhB0qKgcpqg6c8iHgHDcbrug6cklXhadV1QyDdMvrstB6r7egQghd/OebNpMfU5wEb/5rX0sxZTJQhr13T72RQlmlmNm2+w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=P6pLYK9MHS7X5qmSIY+SZJk29Xs8/RKEGDwWg9ZqYr0=;
 b=HIFqMOWlSShvdqRoL7qOfN40+ZCT8tH51HVM4BjwxEO3EmdKzJz1ZjgciMXk0BC/ampHEwowbn0WMf+WO0EhehwNXmrLnxEUhkk9SdL4Gz7BpJ7hPgiUOBvi8tHBlGiBcbptxTwHiVe53GQedoCRze312cngRzQknC9fgK2Jf14=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by CH3PR12MB8534.namprd12.prod.outlook.com (2603:10b6:610:15a::18) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.18; Thu, 15 Aug
 2024 15:37:52 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.016; Thu, 15 Aug 2024
 15:37:52 +0000
Message-ID: <2482b931-010f-30fe-14cb-2a483b0d8c38@amd.com>
Date: Thu, 15 Aug 2024 16:37:21 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>
Cc: Dave Jiang <dave.jiang@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com, targupta@nvidia.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
 <e3ea1b1a-8439-40c6-99bf-4151ecf4d04f@intel.com>
 <7dbcdb5d-3734-8e32-afdc-72d898126a0c@amd.com>
 <20240809132514.00003229.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240809132514.00003229.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: DB9PR01CA0015.eurprd01.prod.exchangelabs.com
 (2603:10a6:10:1d8::20) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|CH3PR12MB8534:EE_
X-MS-Office365-Filtering-Correlation-Id: df65d5af-7a9c-4074-7908-08dcbd4039a5
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|7416014|376014|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?RWhqMGVTdXJ3MU1meTBXRlp5VFBrU29OTUd2ZWJRMnlvZ21yYVdlU3ZGSFRJ?=
 =?utf-8?B?cVFjRmFJSWpBQURUYWx5azVwQWxLa3NsaFR6Tnl3Qm0wQlRBaEp4dGp5ZTBo?=
 =?utf-8?B?SytiZ2lKQUViSGh4QlAxZUhrd3ZhNHNvd2EyQ1RGbnhaVlVEUTdWUEowSlFB?=
 =?utf-8?B?a05kTWp1dWZscEp4aU5veVQxVzJBWW1oZFBCSWZQZkMrTlR2YXB2cG1VV25n?=
 =?utf-8?B?WjNOaG1VN1hTd00xYWtLZ3NWZ1RodGM5OCtadENqVEx1bUQrWHFiekpMWktI?=
 =?utf-8?B?RUVvS2c3azJZTk1PeS9uZzBTMVZMdHhUNDF1d0pJNERqVzdkNWVkV1Roa3k0?=
 =?utf-8?B?TWhXelN1cFdWYm1iNWdjUENuRVFXWXdqNVdVc0dTYWhIZENaMzJJQXJqcmVP?=
 =?utf-8?B?Z2piR2oxS1dnTXVwZ3dZYlV2MEwvS3p4QzFPNmI5N3F6b2pEOVQycmh6MzNG?=
 =?utf-8?B?eGJjVkc1bEZXNlZJZWV0b0w0Sk9SYVhnZjRLZ01ZdmVaR1V5RUkzM0Z2c25l?=
 =?utf-8?B?QTh2endsUk00UVA1MmJzclFDRHpGRzQ0ZnJYR0FwMC84aTBPS1hEeVJpdHVH?=
 =?utf-8?B?UW5QbkZvTnRlWDlNV0ZOeGRlaGFyYk9TQVBoQVRQYzdYNmVDODdTZ21VVWNv?=
 =?utf-8?B?d1JyVVdkbmJUUjZWT3h5SEFaSHYwaGJTVmZTM3ZMZGNUbnI3dDRwMVFFcWdQ?=
 =?utf-8?B?RW9CeWRyakI5U2pPUWVlOC81WVhxUGhDamFPOUo3KzAxbW9kWXBjSkppeksw?=
 =?utf-8?B?bU5aTTNJN294bVI5ZFJKdXBrNmtRSXJQN0lQUytWS09JQWlObXZJNkw3MjFu?=
 =?utf-8?B?TjdhbzdOSUErYVozYlQ4TVdtOFdyWmJSN2ZVWWEzR0tmSE82SHhxcG9FRkRC?=
 =?utf-8?B?dnYrN3lhV3BtRFByZ05xUlZnUlhGM09vSTZFVVBLR1dsQWx0eHo3QlNEWlAz?=
 =?utf-8?B?RkV3MHpucG1MZXJLd1NIUGNiTVVXOEJhUUt2blgrS1R2ZmNJZ241ZHNINkYz?=
 =?utf-8?B?azIyTkpoMFR2cFY2Y1h2c2pRVHd1eUZMZnZKbE9YMU1TRFhINHlrOHQ5UHN4?=
 =?utf-8?B?SnBHSEVGWHhIS24rcWZ6dG5VR1RuOVA0T0NBLzRuc3VGY2ZMazcrNStVeThR?=
 =?utf-8?B?aTIwUkxRRng0UmFCZWhMM1d2WWlQR0VrWEJ4OCtZS0lZcXdNci9XOVpUQXdL?=
 =?utf-8?B?bEQ3M3VFcWVmMUorV044dEk5TGFnelZxUHVYL0lhS0xleTVsN1AvZ0lEWXBT?=
 =?utf-8?B?RlZwVjBpTS9RSDFSVW9rcko3R0ppelN2T2NFYnh6OW9Dd2doTEJHeU5Iczda?=
 =?utf-8?B?MWNKa1F0VWF6dmV3TVhCczNWaE1jTHB3YUl5MDNjYmhGTjFMMTY3OWwrN0g3?=
 =?utf-8?B?V1BWTVBoeURjdE9SelNmdDJ3ZWdBSm8wRW5IQWpYTjVUTHowRE9LQnhUaFFE?=
 =?utf-8?B?aytqeEgyeXh5bUNqZHdmRHJTS1hqYWtlbVEwYm9JbGtzVElaak1Fa2YxR1Jj?=
 =?utf-8?B?eFcwTCt0clRCYVlaVkhDMndRZkxLamNOZVRUUDNCTXZzejJsNnlBME9aRWhX?=
 =?utf-8?B?YUJpNE9hbFFQbmNaM00zTTFqaEtLd1pQVkR1ZUVWMStMdG8wcVNGVmlFRE5M?=
 =?utf-8?B?RHdZYmxxV1Iyd0M0d0V1ZExTZFRESTRlUis2YWV3cDVucmRaYWlJZFEyQkZR?=
 =?utf-8?B?MlFHUkwrV2xFUTA3Vnppazd6M1QxWFE2MHhuZUU2N1hxWWtQWnB4b21wTGRS?=
 =?utf-8?B?SXpkNE03bGkxUjhrbnJqRjJRbmRzTmFBZm9teFB5UmJ1L0RuYXdINkJZSkRZ?=
 =?utf-8?B?YmRSNkdqMzZvUDdUT3dCUT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(7416014)(376014)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?RVhob21YR29ERW16bk9vRmx4R3ZBeWxSNnpJK3lIRVNyTXFGa3R2dm1HVjV3?=
 =?utf-8?B?aUxzelpjczR0dDR3ZmFld1I5aXFYNVJvQkRQS25NZGVYb2Q3L2k2OHEvUW5i?=
 =?utf-8?B?RktjVXRHM3NzQlFOTzMzcTdOUkt5TG5kMTJhbEJFYnFLczVWSWhObHdURFJE?=
 =?utf-8?B?RGxCUEhQMUxaaUkzdG1JUjc2cTJ3V1kxN2xQQTZMSWU1S201dEFadmtJa0g2?=
 =?utf-8?B?Yjk4UkMvelhCUnk5L3dxWjVpSXE1aEpTZVFSSEZpWDVCeUxnUkdHV1hCMUZz?=
 =?utf-8?B?eDVPMXpHSE9ZanRDZ3MrNjZ2eEljUGRMZFgvWGhKVDBtZEovdGE0SldQOThD?=
 =?utf-8?B?aVVIMUloa0ZVY3o3d3FUSi9PQU1vaSthOWQyNmcxbEh2Vzg3dU1hekEyc0FP?=
 =?utf-8?B?WGtXbHV1MTFTaDlzOVhaTFV5TkN6VTA2dHBWdFJ3T0E3K1FDRmtXd2tPbmZ4?=
 =?utf-8?B?Mkc4S04yMm5YSVZsYkw3RERsUjJKK0t6MkJETFROQjRKT1FjNEZtcW91OS9J?=
 =?utf-8?B?OUNVWTFYUmhic3JZQ1lMbmsvOVczam1BaDJLdWdyZWlPdXZkTDBnMG9uclFa?=
 =?utf-8?B?elhtbWlhbFJtZ0RmSG5kRDQ4T0U5SXpOOUlkd3VWWFl0M2RzdnB0aHo5N0xZ?=
 =?utf-8?B?L244VElLUVZxV3JHL1ZsL3Bka2VGd1VtWGF1ZDllSVJHVVh2UjFnTElxQ3FQ?=
 =?utf-8?B?VTFFM2JGbzZRWjJkdWlWcXZjcmNTdkthYWxOM2JqUnc0YitzWGJQL29EbHI1?=
 =?utf-8?B?aXpzSUVmMk5ROWpSbXdZeGFURElNN2lvOCswaWxGRmZZZ3NRbGFBc3g0NHBG?=
 =?utf-8?B?cHkwSnFqYXdrbFBqRlZCUmQ1N1RaVHhwYzNaRHFNTUk0UUcrWkQzaFMyUzYw?=
 =?utf-8?B?R0JadE1zWUIxOUtZdXlOQU42RWV1UmZyempLaWhBaERvSGdrdkN6SXFiY3lu?=
 =?utf-8?B?Nk5nQVgyUmJoaTZpbjl2VkI1amQ3cTVNTFlXbGtqKzlIRUFXMFhBTW16VHpi?=
 =?utf-8?B?TDJ4RXhmNU1haVd6akVBWDVPb0JLZEIzRkU1VUZXcGh4Q1ZvZ1g5TktuMGps?=
 =?utf-8?B?ekNHbU1nYU8rbmE0MCtBTUtOVXpkZWl3dHZ5Tys0cm1QdmhWb3plSTVWQUtp?=
 =?utf-8?B?eXhsZ1pkVzkzYUxYNy9oNUw2YnZRMFoyL3U3Q1RMdGdWR3ZYK1I0WnlWd1Fs?=
 =?utf-8?B?Tmg2a2RJQkNURzAwbTdEOWpLM0V6OXBlUkpHeUN1TXV1c2JLTnNGSVBURnk4?=
 =?utf-8?B?UWpCcW1tTCtuUGcxT1pmaDJrZlIva0J1azR5RlBjTUtCa3RBVUFKQi93UFpi?=
 =?utf-8?B?ckpFTEYxaUZuVUlIMHpFelo4bm9Zb3F6T1c5VmpTTmpmTm1QSGg3dTJSYlJV?=
 =?utf-8?B?QzNtTDQyajl5WGlucFFxdTBnZnpYWGR2R3VRZk40aGk1c3VmRENEd09yRENs?=
 =?utf-8?B?MWFyYjBKNW9tQzBaajdtSi9mdGkxd1M2T2VwaWYzOEZYODR4UWxEaFNrL2Rt?=
 =?utf-8?B?SjZiVXphL0pYRmtKNGYyZElDQVc4Sm4yK1gvRDZhVGFELzBGN0h6b0dGUGZj?=
 =?utf-8?B?ZnhwRzJoTStoeDYvSVMwY2ZDbnVFV1ErZGtWT29temxEUmRobElWbXhQanh1?=
 =?utf-8?B?bFIrZW5tdnpZQ3lyZmVOUWhxY25xazBNRlpIUm96RU11a3h4VkxwL1NCWVBJ?=
 =?utf-8?B?Z01WaitTbXkxTlJjMkp0Z01XYkhubUR3QlkxbDJUV1hvTEd3MXFXWUN4K20w?=
 =?utf-8?B?emFnRUdjTUQyQ2l2OWJsZGk2NWxVdy9jT3JaamZ5VS9neXZ3dFQ3WUNiMTRO?=
 =?utf-8?B?bWUzelEwQ0JSREw5MTZkZUNkZUdaNHpFQWtYaVlWczR6cFUzNTMwdXZDWWtx?=
 =?utf-8?B?ays1T2NJZGJqLzRRcGpqR0FWdGRJMDVxWWtIR2lGcEpXNTh2akdwSlJQY0NE?=
 =?utf-8?B?UGhFVUtQZ2l3bmwyenlqdWsyRXZ0QWowSG80NnVHd2xkeVRRL0lkWW5QaUts?=
 =?utf-8?B?RHhuS2FzVlZFenFIT0cyeUFiRHp1UHlNcWdESUxGMC8wOFhwVXI4cWhOd0ZC?=
 =?utf-8?B?MEFNUGt6eC80a1ZUajArcmdxSWlNZTBpS2lyYVczZy9yQWE4UzVaUVh5bGww?=
 =?utf-8?Q?alkWcv1jgxF0SbD6vBZuvH7Dw?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: df65d5af-7a9c-4074-7908-08dcbd4039a5
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Aug 2024 15:37:52.4359
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: ljxHkqECFw+trjHTk3mdstxhA7YZYPra8OlcKiO7OqvvJ/vh8+GvgRbu/ZnburRTahHSF9adKm8kvONeFArAcg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH3PR12MB8534


On 8/9/24 11:25, Zhi Wang wrote:
> On Tue, 23 Jul 2024 14:43:24 +0100
> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>
>> On 7/19/24 20:01, Dave Jiang wrote:
>>>>    
>>>> -static int cxl_probe_regs(struct cxl_register_map *map)
>>>> +static int cxl_probe_regs(struct cxl_register_map *map, uint8_t
>>>> caps) {
>>>>    	struct cxl_component_reg_map *comp_map;
>>>>    	struct cxl_device_reg_map *dev_map;
>>>> @@ -437,11 +437,12 @@ static int cxl_probe_regs(struct
>>>> cxl_register_map *map) case CXL_REGLOC_RBI_MEMDEV:
>>>>    		dev_map = &map->device_map;
>>>>    		cxl_probe_device_regs(host, base, dev_map);
>>>> -		if (!dev_map->status.valid ||
>>>> !dev_map->mbox.valid ||
>>>> +		if (!dev_map->status.valid ||
>>>> +		    ((caps & CXL_DRIVER_CAP_MBOX) &&
>>>> !dev_map->mbox.valid) || !dev_map->memdev.valid) {
>>>>    			dev_err(host, "registers not found:
>>>> %s%s%s\n", !dev_map->status.valid ? "status " : "",
>>>> -				!dev_map->mbox.valid ? "mbox " :
>>>> "",
>>>> +				((caps & CXL_DRIVER_CAP_MBOX) &&
>>>> !dev_map->mbox.valid) ? "mbox " : "",
>>> According to the r3.1 8.2.8.2.1, the device status registers and
>>> the primary mailbox registers are both mandatory if regloc id=3
>>> block is found. So if the type2 device does not implement a mailbox
>>> then it shouldn't be calling cxl_pci_setup_regs(pdev,
>>> CXL_REGLOC_RBI_MEMDEV, &map) to begin with from the driver init
>>> right? If the type2 device defines a regblock with id=3 but without
>>> a mailbox, then isn't that a spec violation?
>>>
>>> DJ
>>
>> Right. The code needs to support the possibility of a Type2 having a
>> mailbox, and if it is not supported, the rest of the dvsec regs
>> initialization needs to be performed. This is not what the code does
>> now, so I'll fix this.
>>
>>
>> A wider explanation is, for the RFC I used a test driver based on
>> QEMU emulating a Type2 which had a CXL Device Register Interface
>> defined (03h) but not a CXL Device Capability with id 2 for the
>> primary mailbox register, breaking the spec as you spotted.
>>
>>
> Because SFC driver uses (the 8.2.8.5.1.1 Memory Device Status
> Register) to determine if the memory media is ready or not (in PATCH 6).
> That register should be in a regloc id=3 block.


Right. Note patch 6 calls first cxl_await_media_ready and if it returns 
error, what happens if the register is not found, it sets the media 
ready field since it is required later on.

Damn it! I realize the code is wrong because the manual setting is based 
on no error. The testing has been a pain until recently with a partial 
emulation, so I had to follow undesired development steps. This is 
better now so v3 will fix some minor bugs like this one.

I also realize in our case this first call is useless, so I plan to 
remove it in next version.

Thanks!


> According to the spec paste above, the device that has regloc block
> id=3 needs to have device status and mailbox.
>
> Curious, does the SFC device have to implement the mailbox in this case
> for spec compliance?


I think It should, but no status register either in our case.


> Previously, I always think that "CXL Memory Device" == "CXL Type-3
> device" in the CXL spec.
>
> Now I am little bit confused if a type-2 device that supports cxl.mem
> == "CXL Memory Device" mentioned in the spec.
>
> If the answer == Y, then having regloc id ==3 and mailbox turn
> mandatory for a type-2 device that support cxl.mem for the spec
> compliance.
>
> If the answer == N, then a type-2 device can use approaches other than
> Memory Device Status Register to determine the readiness of the memory?


Right again. Our device is not advertised as a Memory Device but as a 
ethernet one, so we are not implementing those mandatory ones for a 
memory device.

Regarding the readiness of the CXL memory, I have been told this is so 
once some initial negotiation is performed (I do not know the details). 
That is the reason for setting this manually by our driver and the 
accessor added.


> ZW
>
>> Thanks.
>>
>>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-DM6-obe.outbound.protection.outlook.com (mail-dm6nam12on2040.outbound.protection.outlook.com [40.107.243.40])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id E44991ABEBC;
	Thu, 15 Aug 2024 15:44:21 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.243.40
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723736663; cv=fail; b=M795Ri9GN+Mk5m1QcGBNnBF68/PLUrdb4h3Nsw0Fosn+BKStjb9YJUtdvSt4iOuZ/BeYa3pf1qkxTtI/JZ1anvM1Kx0IZRwUk2pqZl4k2x2qzKHIfjEOvbVtc32zJs0WvMgO3xFVjlHGUAkmr3O1VOWvQGzB/DBhJ7TzjwBaYbw=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723736663; c=relaxed/simple;
	bh=b5eUjJkatjoLSvmFobMLzFnsmU2gegYkUDJoVsGHVE0=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=eEC47hiIjlvNlbSPAX5QOHZR6v75laAWP0D/oumK9RbVyuBv72zCpYF2Jguxc+IOswIk7RR6s2nWIxPVGlqgI+At4WGve3l96JBtj79YefRuUzYZgWGWIbsalt6P0/llNaLodRs+8W7lJdCQSQ7bSz52FofeNMN8ObrobICdIXY=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=i2cMEqIv; arc=fail smtp.client-ip=40.107.243.40
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="i2cMEqIv"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=YVuE7ypk/vmD7Vt7f8KZ3aFtC91ZOV7fjd3NYirN81vFG1fWafgvH3LW3ljGiH9NhVHiIReuwlpNr/vOsDFaq4nkOmTMnOwaQ0aa4EpHmawO3EJ5ImWxpFUOJNZVLm59SS1/DYdI+ZGkz9ivRIPuJrYOuG0MsxqdPzHW6TfARbSLLIaAX16W2IxY5AbeOsuFuOsplS03bYWZk0/XUtFKW84loM2MaqiFZy2xJG318n81dt1HmiNikdT/xbtu0/SrqSJ7HUPb0VGiA/AU0NVZywTumH0Y8DzJab+FAjQD6Eg3NbbUVhRjhIRoDOQ/Iy7X/KUuGFwzX+njJEjIKLgV4w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=CST+NsZQe74tHOjpkHi4Je4fI5rZNfelpgF1uDWLR5Q=;
 b=BhRzsXT4tIUNmSHOivO7vEBJTVv/IuHGFY2qWX2drrkN7SRouuyHGmqjD3aLh/vXMS27skxsi1vu+reQKJZsCYJgjKWCN8pRnOBAzr43Z+x94TkXiPqcJwtuTnTGBGB/0G29e3JOftbTZ+U54HqlrahrQ4PxR+F0fgMs/AoTcGEYCo0QjmVMHfsA1i6AqeKWUfSMwBuod4u0KwufYmAyoo3VDMst2FGlLxt0m4LKdJgc2tmm80TB4BJPmkPIoDBMF5GszJK2zC3YKTDlT+vTMCIiTNtwd+q8DEg9mPWxveJX0EpyRIL5rzTQAvl+XWYGWDkSr+zFiWPdf3b3seiuvw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=CST+NsZQe74tHOjpkHi4Je4fI5rZNfelpgF1uDWLR5Q=;
 b=i2cMEqIvLXfVn/o81DCr21FRkaaNM4mc19ISL02qguUFdWGZUpKm2oH/aJRuocotZAUl6+xKATTH8EYzccAozJkYpTLU1hJn1jOJWoxKxJ95V/2YETuJVB0Pcd4ycSFNNCDis4uLxKpw58dTZzJvVdafDNylJ0n/klPs9MLTt0A=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by MN2PR12MB4470.namprd12.prod.outlook.com (2603:10b6:208:260::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.17; Thu, 15 Aug
 2024 15:44:19 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.016; Thu, 15 Aug 2024
 15:44:19 +0000
Message-ID: <087e4326-4473-9dda-d19b-6a3118f321c4@amd.com>
Date: Thu, 15 Aug 2024 16:43:48 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
 <20240804182232.000014b8@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804182232.000014b8@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO2P123CA0051.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:1::15) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|MN2PR12MB4470:EE_
X-MS-Office365-Filtering-Correlation-Id: 2bb89313-f258-4034-4d68-08dcbd412030
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|366016|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?YWNPcXE2blNxUGtCa24wNE45OXh1d0NRYlpNSEt1b0E3bXQ1YjY3bXNndVVP?=
 =?utf-8?B?WVlnQkV5ckFidklUVUxXRFFBSGtqOVpUUTNNKzhMbllsTXlIbGNMaGhnbS9E?=
 =?utf-8?B?MlRTWlJLSDNoWW4vcks1eUM2b0tOWDJXUEs1TXErQjFSdytxUDFETjlyN0ZK?=
 =?utf-8?B?djU5cnNFanpCMG1lMURKanZ5Vko4NkU5c0MzWHFhOXlqS1NpK0MzbW92ck5k?=
 =?utf-8?B?ODMvUnI3UkpYRDdma3AzZG1TZ2p4Qk1DU3d5Y1BzVnJPdmRSblBwNW9kUlds?=
 =?utf-8?B?KzZsRzArcXYwcjdGSkprTGNEK0JZeGcyaElkeUJQS1VtZXVVMGNkMVJNdDln?=
 =?utf-8?B?Ni82VGE2SXlEbEZhNHFmSCtSZko2bnQ3ODJPOWtxcHJ6OFI0Qk9ZOGxZTjY0?=
 =?utf-8?B?dDdtcTRSMDFJbmRQdDFtYWtTVDRHMmF1WmtoWlcrMDR6bFI3aFhIM1RPVVVs?=
 =?utf-8?B?Q1hZSFV4VG52Z2ZYYTlsbjJyM2Y3Nnd1bEFvVk9wczNkbVpEMGFjSXBFdzFE?=
 =?utf-8?B?N2JlWVVWSVNFQ2RyQ2s0U3hKNnE5ZUdpZEcxOGFzZGNPWll3YmtWdjVqQllm?=
 =?utf-8?B?Zk93VU41WmRKUDFzb3VENUFqRFh6QkVYZmVuTFk0dnNjU2h5QnVKVzdBQ0ZG?=
 =?utf-8?B?Z2dNYWZ6V2tEaFdnRkhINlhUOFpnV3VyZmE1MWovYzBIWHFCSzNlcVVGN3pI?=
 =?utf-8?B?RElBRXBWKzRxREVZNFJrMU5SQmJWRFRaZEZaSUE2WnM1WFFKa0dmN1dxanhj?=
 =?utf-8?B?UlpQSFJJOWU3eHJnYUhvU0NpbG8yUkpSM1J2NThaUmhRR1RMZjB1allFZ0tD?=
 =?utf-8?B?MWJ3bDhCanVVNk5QVGJwN3dxVVVGWnlseVZnem1xWFdwNGd3Nk1QMk1FeDNx?=
 =?utf-8?B?cU1YcnQwTS9WbFVDK3U0NndlbHVzZU9KMS9KMHdWenJEcGVLMHRQMUxQV2VF?=
 =?utf-8?B?aGduVnZRenFrMDY1bHNHZlpzSUcxRFRLOTJxQkNWdG5CaG0ycVhoNDBUek96?=
 =?utf-8?B?cEFtazNEQm1WWVpHTWc3aVB3T1FqVHEvZ2pCaUVoaHZTRmpaUExrZ2NHdlBU?=
 =?utf-8?B?WFU3Wi9SZVI5alNJei9Mck10UVZGVVJFamxoUkVMQU1uM1FNTFJJa3dkTUQz?=
 =?utf-8?B?OFpwNjdwRW4rM09rclBkRUU5TXhLeDllK2x3bjFhWUNwRlowTHh3b2EzTmpP?=
 =?utf-8?B?Qks5b3J0M3d3Q2owQ3M5eERzN015RDV3dHZYSWVDdEhZSjlZZXdLb2RWYWJT?=
 =?utf-8?B?d3JHNlg2QWNLZU1ibmdxM0FPdWpCZExCQmJsQTQwUDFnQnVaelYvRVB4UFFx?=
 =?utf-8?B?eXlpUk8rUHBpV1VNUUxlUUdOSE8xT1pLckZhcldkWmxaa0ptQjlQelFZU3dw?=
 =?utf-8?B?MjJyNVl1UVFzMDBwbnBBRGVSVWRmYzRsdEgwcEs4NzZOS284ZFByZitWN0oz?=
 =?utf-8?B?alZVUi9JbWNHS2dTTWdwNlZUN0hzVE1NWW15R0lWc2EyQ3gxWk4wOEJmUTlC?=
 =?utf-8?B?elpUbVZOT2c3YzFuSElLVExUQWp1YzJNcUxsTFIzWWJXVFJiSzB5eEdOZmJm?=
 =?utf-8?B?RnFlWTFSZ0NtZk45Rk1hU3lnMGtqeUJmbEUyZ0U3SUxwZFEraVkwTFZtMW1I?=
 =?utf-8?B?UVVzTnM1d0ZSdTg3S2svYmVyRGxxSGJsYzg4QkNRY0M5Z3dId2R0QWVZQmZm?=
 =?utf-8?B?SmZIc3E2cFdWRUc0QmJWeUhudzJMZnNWNC9udUthc1pWeEYwTFlWUWNNTit3?=
 =?utf-8?B?T3crTU9mWmpiV2dGOXZRaVBHaUZOMGVteTRVRllCVURJTWtrRE96QWtYSWZp?=
 =?utf-8?B?eS94dERVRVVFMm8vaHVPZz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(366016)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?aTR5NVhsMmhBVjVvYXlhTHB6TVFCNXZaMjVpVUZIS3Q5UkRDYmFBK3VpTWRD?=
 =?utf-8?B?TC9ocndvcXVUWEswYWZNaktKOHVJaGNzZ1FkN05DUG9NdFpqOWV5UVQ5c1JT?=
 =?utf-8?B?MG9sOHVQL0J0LzB3YmhUSnJNR0RDWTVWTHlKZkhBM3FwSUswSjFXQ2w3N3Bu?=
 =?utf-8?B?TGRSZkVSUXhNdW14aXNmRVJtYnZGZVgxWUdhZkJEUnlmbGNkZldrUFJiL2g3?=
 =?utf-8?B?OC9JcWozVTN1akhsVVRMdUtORmJCbVpDdDNBU3NZSmxjVHdXUVNPcEM1SVQ1?=
 =?utf-8?B?VTVTTDdSNHN0Y0xCOC94WEsxMkdtMm9pT3E4UjNqdFhzb0N4TjZ6ZGU1bEdo?=
 =?utf-8?B?bXZhOTJJRTNSY09xOWNKZGloM0Z2eDdxNmFCT3BhdmtrK2xSQm1Jd0FiN0ha?=
 =?utf-8?B?ZldZQjJmc0J2UGEzS2hpK21GMEk2dll6VXZaSHRaV2VkMzE4K2FVY05WcDI3?=
 =?utf-8?B?VFBJTUZ4MTZ2b1REaENYM3R3NTRDb1lVVDNuc0FXajBlUExUSHd6YjVaeFgr?=
 =?utf-8?B?WEE2TjdINzI0VlZhU0d1a29sVGFtNXVKQ0x2L0Y1SEpYUXdIQUNKcGZSRXNZ?=
 =?utf-8?B?NjRxTkUvYU8rZ2ZmRm12ejVnd09SeWRMNTFhM1lPQnBIdEI3MUlLZWpPUms5?=
 =?utf-8?B?OTRYdzlMeEhUSGJ0ODcyY2NBYUdYeGF5WGowbUlJaXNZS0oxcXd2ZUxYWmlB?=
 =?utf-8?B?bFlSc2d6b3JSWWtRc3pyWnBZNFBZblo5Vi9Vcy9BenRpQmVROVVLVmFWUGRU?=
 =?utf-8?B?emN2eTZacjB5dDAzRHZqT0hoZUNHY2l4UXRGYmFpckNGdTZnNEVPNGhlUGl2?=
 =?utf-8?B?dmtTQVplaXRNTVZ2bWQ3cE1oRU12dEZoNjIyakFvZ2tpV1ZzRnhKY3ZMUjVr?=
 =?utf-8?B?S0dTL2trWGQwUmw5VFYzRzhOL0xLYnRidVEvbjh4M09rRG1SZTI3SzkyUy9D?=
 =?utf-8?B?NU91S0V1OERCUkVQMlZ2eXRmN1hVWUZnVUV5N29NWlI2TjhJNEVhUXNmYlEx?=
 =?utf-8?B?UjlrY0MzSCtVbzNPL0tzdENsV1JRTE16T3lZYXdqVUhpWlJyb2NpZXhuanBm?=
 =?utf-8?B?V2JhVGdYaWpweGE3akdTcVNLNHdIb200K081b0YxRzBqUy9HMDRDdVhzbWJs?=
 =?utf-8?B?ZGI2NG1LNS83SWxTSFFjdEt6SDgzaG1GWEJtcncraXpma1padkdRZFhkWU5I?=
 =?utf-8?B?VEZ5NlVPQTJqc0tJVkJ5SHU4dlNJeksyaGpUNlBsSU4vZXpLTGE3b1Vhc1Vt?=
 =?utf-8?B?a3paQVRBUU53eTlVdy9PeUZDdlBEY1g3VnBESnF6YUJFcS9CcHQ0K0dFQ0Ro?=
 =?utf-8?B?UjFzaW1RTW9pOEhaYzFuYTlyNFAxZHZ4VFhOVHVFa2g3OE0xTlduZHBLZ0Vt?=
 =?utf-8?B?OHRTbmt3MVFBQnI4Nm9QRnRIYWc2Vm9VK1FTUFVMR24yZXlkYzJxNDNmKy9W?=
 =?utf-8?B?K0QybkE4aTA4a3dyeUc4a0ZZZndZOXZhaGxXeUp2MkE1MnhMclVWWFpmZWlp?=
 =?utf-8?B?Wm1pNU81RGtxRUpROWJEVi9DUlE5ZW9INGl4UmJLaWNQdnY4a2NQWXB1STRj?=
 =?utf-8?B?TXJoK1FKMlhxdmhZcDc4L1VHZWtxc0phdzRubXBZMkU2bnBXVlorelpwemNj?=
 =?utf-8?B?TUx4R1BkSkV2Y0FFYVN2R0Fkd2Z5VjJTVy9ZWkcwN1VLdmw5eEQ0WjlaRnd5?=
 =?utf-8?B?bGtMdnhndElxTXVsMElRc3JieDVZMVRHTXAwd2ZKeGVjcUNpbk1RTk45RlFF?=
 =?utf-8?B?dFQ0V0x6c094QVlxcU16YkVPb0tKTDAxaHRJSHlVZWErc1FxYVgvNDZYaUtD?=
 =?utf-8?B?M1JwcmJTT2pkL2QvUmJUQVlIQzJlWDREb05sams3am52a2dsb2hqWWs4bFVF?=
 =?utf-8?B?ekU1VEczS2FucDZDWks2ekVuUCtUSi8wMU9NR3RscVpKMjNwb1pIM3FQM1ZY?=
 =?utf-8?B?dW00TGh3eXZ0RmpMd1dUWi9LS3ZaczRNNzNxVnJkODZ6cnEzYldualJXeUlF?=
 =?utf-8?B?M1lpQ3lNS2psUmpGL1c4UG5PcStHT0NPelk0aVpOazFCRVZBTmRZY2l1VTlu?=
 =?utf-8?B?bWNGMld1Y0l5V3BlbEU1a3BmcWpxVnFUT2xTQzFXempUa2dCdXJYbUdtMkNw?=
 =?utf-8?Q?pt+g8Q1vgIFPEUr3aTW0ATMX6?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 2bb89313-f258-4034-4d68-08dcbd412030
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 15 Aug 2024 15:44:19.2878
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: lTyqovjaWaIkUbXl6gF9pIhNzzhK3ik2w2QDbFPq+A1+CRXp7dC54s1qf81UtCFCxnoFggFcypf7X0sw3Rpb/w==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MN2PR12MB4470


On 8/4/24 18:22, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:24 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Type2 devices have some Type3 functionalities as optional like an mbox
>> or an hdm decoder, and CXL core needs a way to know what a CXL accelerator
>> implements.
>>
>> Add a new field for keeping device capabilities to be initialised by
>> Type2 drivers. Advertise all those capabilities for Type3.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> In general seems a reasonable approach, so just minor comments.
>
>> ---
>>   drivers/cxl/core/mbox.c            |  1 +
>>   drivers/cxl/core/memdev.c          |  4 +++-
>>   drivers/cxl/core/port.c            |  2 +-
>>   drivers/cxl/core/regs.c            | 11 ++++++-----
>>   drivers/cxl/cxl.h                  |  2 +-
>>   drivers/cxl/cxlmem.h               |  4 ++++
>>   drivers/cxl/pci.c                  | 15 +++++++++------
>>   drivers/net/ethernet/sfc/efx_cxl.c |  3 ++-
>>   include/linux/cxl_accel_mem.h      |  5 ++++-
>>   9 files changed, 31 insertions(+), 16 deletions(-)
>>
>> diff --git a/drivers/cxl/core/mbox.c b/drivers/cxl/core/mbox.c
>> index 2626f3fff201..2ba7d36e3f38 100644
>> --- a/drivers/cxl/core/mbox.c
>> +++ b/drivers/cxl/core/mbox.c
>> @@ -1424,6 +1424,7 @@ struct cxl_memdev_state *cxl_memdev_state_create(struct device *dev)
>>   	mds->cxlds.reg_map.host = dev;
>>   	mds->cxlds.reg_map.resource = CXL_RESOURCE_NONE;
>>   	mds->cxlds.type = CXL_DEVTYPE_CLASSMEM;
>> +	mds->cxlds.capabilities = CXL_DRIVER_CAP_HDM | CXL_DRIVER_CAP_MBOX;
> Add a reference for this perhaps.  Make it clear that a type3 device must
> support mailbox and hdm by pointing at requirement for the various structures
> in a spec reference.
>

I think it would be worth to have documentation, distilling out 
dis-ambiguities from the specs about mandatory/optional registers.


>> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
>> index af8169ccdbc0..8f2a820bd92d 100644
>> --- a/drivers/cxl/cxlmem.h
>> +++ b/drivers/cxl/cxlmem.h
>> @@ -405,6 +405,9 @@ struct cxl_dpa_perf {
>>   	int qos_class;
>>   };
>>   
>> +#define CXL_DRIVER_CAP_HDM	0x1
>> +#define CXL_DRIVER_CAP_MBOX	0x2
>> +
> Enum and BIT() for the defines.  Avoids someone in future
> thinking they can define 0x3 to be something.
>
> Definitely only one definition as well. Seems reasonable for
> this to be CXL wide.
>

OK.

Thanks!


>>   /**
>>    * struct cxl_dev_state - The driver device state
>>    *
>> @@ -438,6 +441,7 @@ struct cxl_dev_state {
>>   	struct resource ram_res;
>>   	u64 serial;
>>   	enum cxl_devtype type;
>> +	uint8_t capabilities;
>>   };

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 930211B4C4B;
	Thu, 15 Aug 2024 16:36:00 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723739763; cv=none; b=WzXR+7q9ECC6P9iQv2F0VRADsH29MLYkELqeJZ6Duc/yI4G0B97wm/joVSTsPv50lF8ASp9IFqHEFH/5z/ECsaTg/TUxeFrm1vMslgl7uC4pedh1kWqMhUcnbD7Od7tK4+XKwUNlRGlcFigzOoh/0OjICIaaPPgxEaDJ+BeRTG8=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723739763; c=relaxed/simple;
	bh=Ibe/Qa8GDqLxfc3hbXDm0mq8thb9jLpEPTGbvQrPnFI=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=WcFXpAPQwguaecFk0ZPj5P2/1aI66HVxMoBy9XYKGUIjMF22o3zrAZAlnPbak58YwFQETz25VCXn6w1LZzkqjo2N7jlaUVSAEzlnwz5Hpoi8Q37bYebZzJR0Y4X5uau8614RJd6n+2lPKy+JILWo5Renq923Dfz3yHJp0u6xlOM=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.216])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4Wl9df0SCWz6K6Hm;
	Fri, 16 Aug 2024 00:32:38 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id C01D7140119;
	Fri, 16 Aug 2024 00:35:57 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Thu, 15 Aug
 2024 17:35:57 +0100
Date: Thu, 15 Aug 2024 17:35:55 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <20240815173555.0000691a@Huawei.com>
In-Reply-To: <508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-2-alejandro.lucero-palau@amd.com>
	<20240804181045.000009dc@Huawei.com>
	<508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml500005.china.huawei.com (7.191.163.240) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 12 Aug 2024 12:16:02 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/4/24 18:10, Jonathan Cameron wrote:
> > On Mon, 15 Jul 2024 18:28:21 +0100
> > <alejandro.lucero-palau@amd.com> wrote:
> >  
> >> From: Alejandro Lucero <alucerop@amd.com>
> >>
> >> Differientiate Type3, aka memory expanders, from Type2, aka device
> >> accelerators, with a new function for initializing cxl_dev_state.
> >>
> >> Create opaque struct to be used by accelerators relying on new access
> >> functions in following patches.
> >>
> >> Add SFC ethernet network driver as the client.
> >>
> >> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
> >>
> >> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> >> Co-developed-by: Dan Williams <dan.j.williams@intel.com>  
> >  
> 
> >> +
> >> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
> >> +{
> >> +	cxlds->cxl_dvsec = dvsec;  
> > Nothing to do with accel. If these make sense promote to cxl
> > core and a linux/cxl/ header.  Also we may want the type3 driver to
> > switch to them long term. If nothing else, making that handle the
> > cxl_dev_state as more opaque will show up what is still directly
> > accessed and may need to be wrapped up for a future accelerator driver
> > to use.
> >  
> 
> I will change the function name then, but not sure I follow the comment 
> about more opaque ...
If most code can't see the internals of cxl_dev_state because it
doesn't include the header that defines it, then we will generally
spot data that may not belong in that state structure in the first place
or where it is appropriate to have an accessor function mediating that
access.

Jonathan



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 2E7A91BA868;
	Thu, 15 Aug 2024 16:38:16 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723739899; cv=none; b=WQUV+4zDmqeb4at4HAYU7ZLphx8HMMSaYP0MAeVgOz8vGpWNrgUpbPFFsGDCWKTpq7NU+GEQiHcbVZpmjrncFxjzinOu2so0UO6IKPWIUrgY56w00F8Ml3bSTpAaTdnprrnoXb8v4mekyu51oMVdjgCJxfFN+u6vtifKe/fLDA4=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723739899; c=relaxed/simple;
	bh=/4iy8XpxkqlTVj92cqLlKAhtWDIqNKSZhRN0p2fHKUA=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=UaEjic8zFC1RAVX4oxVbvUKrGaVbXuVFKpaGI1QqPnF8cj9D0VGVgm5kSA9UhtouXRzzwpBY8sD9ajQ8uUb7sBNTHI8MNpDRoPVk/Jb5rP2oCZEV0dnsZmrkZcDpYwcRJgChIZpkueS8p44UfTCNDRhxWmSQxQ8rzg9ZoJ8mf+c=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.231])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4Wl9hG6xFgz6K6Jj;
	Fri, 16 Aug 2024 00:34:54 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id BBCDF1400DB;
	Fri, 16 Aug 2024 00:38:14 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Thu, 15 Aug
 2024 17:38:14 +0100
Date: Thu, 15 Aug 2024 17:38:12 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <20240815173812.0000447c@Huawei.com>
In-Reply-To: <c9391139-edc4-73a0-3ede-d67c40130354@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-2-alejandro.lucero-palau@amd.com>
	<20240804181045.000009dc@Huawei.com>
	<508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
	<c9391139-edc4-73a0-3ede-d67c40130354@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="ISO-8859-1"
Content-Transfer-Encoding: quoted-printable
X-ClientProxiedBy: lhrpeml500005.china.huawei.com (7.191.163.240) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Tue, 13 Aug 2024 09:30:08 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/12/24 12:16, Alejandro Lucero Palau wrote:
> >
> > On 8/4/24 18:10, Jonathan Cameron wrote: =20
> >> On Mon, 15 Jul 2024 18:28:21 +0100
> >> <alejandro.lucero-palau@amd.com> wrote:
> >> =20
> >>> From: Alejandro Lucero <alucerop@amd.com>
> >>>
> >>> Differientiate Type3, aka memory expanders, from Type2, aka device
> >>> accelerators, with a new function for initializing cxl_dev_state.
> >>>
> >>> Create opaque struct to be used by accelerators relying on new access
> >>> functions in following patches.
> >>>
> >>> Add SFC ethernet network driver as the client.
> >>>
> >>> Based on=20
> >>> https://lore.kernel.org/linux-cxl/168592149709.1948938.86634259871103=
96027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845=
b446d0e
> >>>
> >>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> >>> Co-developed-by: Dan Williams <dan.j.williams@intel.com> =20
> >> =20
> > =20
> >>> +
> >>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
> >>> +{
> >>> +=A0=A0=A0 cxlds->cxl_dvsec =3D dvsec; =20
> >> Nothing to do with accel. If these make sense promote to cxl
> >> core and a linux/cxl/ header.=A0 Also we may want the type3 driver to
> >> switch to them long term. If nothing else, making that handle the
> >> cxl_dev_state as more opaque will show up what is still directly
> >> accessed and may need to be wrapped up for a future accelerator driver
> >> to use.
> >> =20
> >
> > I will change the function name then, but not sure I follow the=20
> > comment about more opaque ...
> >
> >
> > =20
>=20
> I have second thoughts about this.
>=20
>=20
> I consider this as an accessor=A0 for, as you said in a previous exchange=
,=20
> facilitating changes to the core structs without touching those accel=20
> drivers using it.
>=20
> Type3 driver is part of the CXL core and easy to change for these kind=20
> of updates since it will only be one driver supporting all Type3, and an=
=20
> accessor is not required then.
>=20
> Let me know what you think.

It's less critical, but longer term I'd expect any stuff that makes
sense for accelerators and the type 3 driver to use the same
approaches and code paths.  Makes it easier to see where they
are related than opencoding the accesses in the type 3 driver will
do.  In the very long term, I'd expect the type 3 driver to just be
another CXL driver alongside many others.

Jonathan

>=20
>=20


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id B30061B4C2D;
	Thu, 15 Aug 2024 16:40:44 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723740047; cv=none; b=gOp/udYqYGi6UoTjkwTkUP85GGzBtrXPkDmDJJ3NCecU6wrDxkPy4CYgzK/+gzuuaoiQ5FZonZcytMOWeliQR8xsKHrRTJFWu3bSx1czWWI8GQ1KUFytGRdcjr3gDQtocrAb9nXTRARJ2uvg91zHhFuvpEGbTRp6rxesOFGpO2o=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723740047; c=relaxed/simple;
	bh=sv6PdVVlm7tbr0UuPHCEZZey6A1hPyaBMpr3lsc1k/o=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=tcljUjGT8BNvRU62jGdMEBorE+Vq70seRIId4ESa51lVgaASuTJuCxJosdHEHe4HQRkxJqgg9EhTCpTb35K5wOqjbX+SlV0Bt+snI75akMWEE5hWxL8wPMbbksGgdvgmVd+BzT1rR3qJoQaGGKWQSdfDx+cNW2CmqUV3TAX9y64=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.231])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4Wl9ll428Cz6K9B4;
	Fri, 16 Aug 2024 00:37:55 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 0CC221400DB;
	Fri, 16 Aug 2024 00:40:37 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Thu, 15 Aug
 2024 17:40:36 +0100
Date: Thu, 15 Aug 2024 17:40:35 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
Message-ID: <20240815174035.00005bb0@Huawei.com>
In-Reply-To: <5d8f8771-8e43-6559-c510-0b8b26171c05@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-3-alejandro.lucero-palau@amd.com>
	<20240804181529.00004aa9@Huawei.com>
	<5d8f8771-8e43-6559-c510-0b8b26171c05@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml500005.china.huawei.com (7.191.163.240) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Wed, 14 Aug 2024 08:56:35 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/4/24 18:15, Jonathan Cameron wrote:
> > On Mon, 15 Jul 2024 18:28:22 +0100
> > alejandro.lucero-palau@amd.com wrote:
> >  
> >> From: Alejandro Lucero <alucerop@amd.com>
> >>
> >> Create a new function for a type2 device initialising the opaque
> >> cxl_dev_state struct regarding cxl regs setup and mapping.
> >>
> >> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> >> ---
> >>   drivers/cxl/pci.c                  | 28 ++++++++++++++++++++++++++++
> >>   drivers/net/ethernet/sfc/efx_cxl.c |  3 +++
> >>   include/linux/cxl_accel_mem.h      |  1 +
> >>   3 files changed, 32 insertions(+)
> >>
> >> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> >> index e53646e9f2fb..b34d6259faf4 100644
> >> --- a/drivers/cxl/pci.c
> >> +++ b/drivers/cxl/pci.c
> >> @@ -11,6 +11,7 @@
> >>   #include <linux/pci.h>
> >>   #include <linux/aer.h>
> >>   #include <linux/io.h>
> >> +#include <linux/cxl_accel_mem.h>
> >>   #include "cxlmem.h"
> >>   #include "cxlpci.h"
> >>   #include "cxl.h"
> >> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct pci_dev *pdev, enum cxl_regloc_type type,
> >>   	return cxl_setup_regs(map);
> >>   }
> >>   
> >> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds)
> >> +{
> >> +	struct cxl_register_map map;
> >> +	int rc;
> >> +
> >> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map);
> >> +	if (rc)
> >> +		return rc;
> >> +
> >> +	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
> >> +	if (rc)
> >> +		return rc;
> >> +
> >> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> >> +				&cxlds->reg_map);
> >> +	if (rc)
> >> +		dev_warn(&pdev->dev, "No component registers (%d)\n", rc);  
> > Not fatal?  If we think it will happen on real devices, then dev_warn
> > is too strong.  
> 
> 
> This is more complex than what it seems, and it is not properly handled 
> with the current code.
> 
> I will cover it in another patch in more detail, but the fact is those 
> calls to cxl_pci_setup_regs need to be handled better, because Type2 has 
> some of these registers as optional.

I'd argue you don't have to support all type 2 devices with your
first code.  Things like optionality of registers can come in when
a device shows up where they aren't present.

Jonathan

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM04-BN8-obe.outbound.protection.outlook.com (mail-bn8nam04on2055.outbound.protection.outlook.com [40.107.100.55])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 3A8B41BDAA3;
	Fri, 16 Aug 2024 14:37:52 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.100.55
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723819075; cv=fail; b=T9rJxiG/CzOrX/LKL4wv4m4pM7n9ArEquFfBFpIWCPyjquL6ovPW1iQp1szJD3ryNDDt+PvuFKfop0PEEbBClelfUOl6EoZkN9TYRbKh5127OyWGUAeJXF+k89F0KJkIA1/IKM9kyzgcrkku8KC97AQMwKhn+jGfGlYffN9uc8k=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723819075; c=relaxed/simple;
	bh=aZ1hpfbj0VqHnNkJAEtAQvyDxgy2cn89OYXlx9HjlaM=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=iWpKxqkqeqqj4fPL2hDM53vbqEuKuftHRSmQBMCWb5L0eODIsxeK+7jyzfB5i1L0vWLH/ynbKwnipLrugQYJdfOGab3T1DcHm7lbOtMvpIo4TS7V3ScVnT53UBaRnrb3xhiBz4f9oLq9HbchjEty3vJ2PUZdhc/aHkUl+44TWhI=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=1qOMDRQ3; arc=fail smtp.client-ip=40.107.100.55
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="1qOMDRQ3"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=XzZC/EY0/PJk29X/DRYAFq5utsPj3eC8n5HkrpnQnQFzNwE1qv707w9cIHbv2lpwnR8aOr5D72Fl5UwCdBsYS889ATYKz5gB1SBK+duuf+fJDp6kq8LSulpVqHieUHx3nHYVynoD0pOmmtTYgD+d2UhlWEJiD6fu+r965v9gmF9hY/tDdGz54uIOTIfk/meuBa/VtZC+HtdUySMhgeGVghfrD7KBBsg8RRPiYKWPuI/RvqkxkLvhToTB9TF/KowCMaltXZhVYqOnTz2wxz6dv6TroZjtQA2QZsX7fbp2cE9ta98nO4hw0QVdUv+dy4kYAn3BZ1XOAU443xYhkA7J3w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=bD0oqPm5OVkPAePD/TGj7tu7lrHcG2bVWHdZqtdO3hE=;
 b=th9NQaszekL+els66lw2qNwnWVaS8rB72TZukUILEbnFIW1RsqeGMKEHXrHuxiQAbuKYOXrTsyHUq/b7VXa2aeoOEzB3X4Lo5Nd17yOgbR2UOLqs9b1b+8bLC/+zs/2m7w7JPjcm7Ji5ZKfkD36xxMmh29kEtbUKKXmuFiS1/AHRfHwZHM9OV4JlfW1OO1B6ODADsf7U2bkOfIC7Mo0eBJhW5aIWQgKhHxABHauqGUf1gE+uUiz+Uck1anB7A1sd0nNmXsohOTfN2PgXo/6A6rzxnxweWbIIqlOFFQNUc03jATiH65mDIowOkze43xZ5/BQCs7VDP+bLLTlFI4dOiA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=bD0oqPm5OVkPAePD/TGj7tu7lrHcG2bVWHdZqtdO3hE=;
 b=1qOMDRQ3DFKy6tt70QgpxzTAi79cyruCpP+3LaswsmvLgRQXQoai99fg3ErVUDWDrtnRV3RU7Kecw/0W+me7DVK+FzWXyZrUyDvSKg/DGoZHwJ85IFh+TebGzAu/AlBl4q8oMWeixUQz6XHGSvic6/uHNuU6BqY4wWxcq9QhgT0=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by SA3PR12MB7922.namprd12.prod.outlook.com (2603:10b6:806:314::12) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.20; Fri, 16 Aug
 2024 14:37:49 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Fri, 16 Aug 2024
 14:37:48 +0000
Message-ID: <32f38caf-8cc3-2e4c-668f-f36552b7cffe@amd.com>
Date: Fri, 16 Aug 2024 15:37:14 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 05/15] cxl: fix use of resource_contains
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-6-alejandro.lucero-palau@amd.com>
 <20240804182519.00006ea8@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804182519.00006ea8@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0310.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:391::18) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|SA3PR12MB7922:EE_
X-MS-Office365-Filtering-Correlation-Id: 3bfadcd9-a1c6-45f3-f7bd-08dcbe00ffb2
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|366016|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?enhSczE0OXV6L0xDSHE0Qi9JemtHaVNqd1JNVHdPOFV3T0ZaY1JEMjFPVlEy?=
 =?utf-8?B?M1BBUVhLM2lqLzIrcktyZGdDUlNrdTNtZm1JaStYcXJSYzRsMVBTeVBVUnpD?=
 =?utf-8?B?ZmM1Ym03WnRPS3NqazNoOVFLNE5sN1ZPWURHaW5HUnBZOW4vVWJ6ZnluME1N?=
 =?utf-8?B?WndsaGdPN2hmdDViaEdZQW1zNDNjRWlPUmZpZ1ZFL3RtQzVqQmx4bEJPV0NK?=
 =?utf-8?B?d0FpRHMzYUF4SXZUUzFWb2xzTHJwUWJQWmYxUmdGMkNhYzd6eHV2S2VFbzFI?=
 =?utf-8?B?bkNLRjh3ZVZTcmpGSmZYR0psdjRRa1IwN0E5Q0Q4TS9rRTR2dXV6YWxnMmg0?=
 =?utf-8?B?RnlDMWxWcUlaME5PNy9tVGhFUFd0R3cwQ0I4eE9pdTM2Ums5c0Ftc3NGaEhO?=
 =?utf-8?B?dkhzMEVMWVVETGhMeHZ3TVM0anhVaFNNV2JXSFVrNStBa3A0SmRQZjlOUEo5?=
 =?utf-8?B?c1ZGTmN2U2NUNmVSM2dDSzN3Z1JOL3N0azg2aWZjRXhvemNIVVV0dzBiazBI?=
 =?utf-8?B?VUpsUW5JVnV0blRvRGpCNVNvM2FLTEwrdmMvUENiOWM3M08vL0J2WWk4RDRl?=
 =?utf-8?B?b1B1L1pZR2VJUkQxR1hLb0NBbXIwU2NWTUtuUHl3ME9lUDVyTmVNak92Z1pB?=
 =?utf-8?B?ekJ1Nm5yYTJYa2diam9LY0Q3Z1FVQWJ3NkpkSW1TMkhmck5OZ1FuYTR1TE9K?=
 =?utf-8?B?K3FKeU1xS0FZU0tMcm5ZVjd5QXg2azJ2TDVJbHROYTVpRytrc2p2MDgzL3N0?=
 =?utf-8?B?TlZTcTBMVzIxUnUvYXRzdEM2djBFdWpvTGhkc0FkdkhZVWtVSXFRVmdjSHRh?=
 =?utf-8?B?OHV6azJud3ZKWEk2OEtwM1RhTS8rdlZsemRHdnhsUkJVd0o2d093VzRxNXAr?=
 =?utf-8?B?MUJKS215Wi9kRGVQYnhuQndJNUI2QnFFeEQyR3dRdlZyYkt2dm5WWlpYZ3Qr?=
 =?utf-8?B?WW1xYXFtL3h4R2xZOE9oZGFXcWhhdTRMTTJqalpIWUtQbzhQazJSSWpzOUt1?=
 =?utf-8?B?MnE2dHpDaEhoUHNQV0ZreGNQT2xJalZCZTJGNUdJc0RNUUJ5dGo0UGxBNUxq?=
 =?utf-8?B?Y2x4ZTBRTVc1VDYrOWRiRWxSSU5uZkxCMUxVdkQrVTRpRFBYSXBjZ2trakxO?=
 =?utf-8?B?ZnQvRWQ1UlZSeUkzbWhna1gwelhhL0JNUENpM1R5UkZRdHpVNkY2ZnR3S2Yz?=
 =?utf-8?B?T3BOTGkvbkZUZWFvUGhiWElCN0lFNDd3WFl0Nm1VQ3VCYkwwUVI0WHlvdTU2?=
 =?utf-8?B?aDZVSDh0Zml4MzRpQWZ4OFFqV3ZRTXE3Ri9DYUZzdmxZd1dyczRTYmF1cWNn?=
 =?utf-8?B?Z3NxZE9kTm1qUnpKMWovWUY0eFplQmtQSmVjbEFseGVVNEl3ZENRQ3hROFBs?=
 =?utf-8?B?RnpxeEpUSzRpVHg0ckx0aXdCRTZ6M0FvRWdxMWVYSWx4L3JCcXVkUUdNU1Jk?=
 =?utf-8?B?VmtKOWdJdkgxak5ETndUK1FRdFdoVGZtTUxNK09tTCtPRWpENEdSMWdoT1Za?=
 =?utf-8?B?KzRNUitsMWpKeURoT0tSYWNQV0hFL0ZLL3N3YStYamJQRjg3QlFjai9uMFp4?=
 =?utf-8?B?cG9lRmRjSkkxN25VbHIrZEQ0cjhlazlmUDlzd29RcGg3ajlyc3Z1UzNqanNZ?=
 =?utf-8?B?NGVTcXRldDJxN2RENnYrSngzWXkzVFlTZ2wzSE02MXJYMUlEOTZ0SzFreHZq?=
 =?utf-8?B?OVBydHRGbmNodmZKRUQ1T0VaUFlUSndsZ1NWd1MwdTRNSHFUZFN6WnlvYnN2?=
 =?utf-8?B?ZWdWZHkxQ3k2cFMraGhGYXRSUUdUaTB0ZXpLdGxkV05sZVBEVkdXTVVBQXd6?=
 =?utf-8?B?Y2lTZDNSaGkxb0EwUlhTQT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(366016)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?S0dYU1FwTWpvTVRQNVBLTHgrUWdBb0JFbmp0c3R4bGZ5eVlUOW5xUmlxNjEr?=
 =?utf-8?B?VkkrTXRHQng1ZmhiMXMrZ2tGbE1jSnF3bS8wdHJIUmR6ZE01S2s1VWhVd0V1?=
 =?utf-8?B?ZFE1MkZKZFFsT1JzNFRjMGdzenlDUklPU3R2UndCVXJxQ01MZ1dPSG1waUg0?=
 =?utf-8?B?aElCNGYvY0padHdDbXRzWkVaNzYxeFhsR1o1YkxIYkdBSm5CcUxncU5KQ2Jp?=
 =?utf-8?B?dVlvQmlyQXAwclh1MitsUHVxU3hRQm9RL0ZSZ3BqN2pQOGRxMVhYUzltMU9Q?=
 =?utf-8?B?Ly82eVFTcDBvRXZzWEZZelFMaFF3aEpMYnNIcnhpK0U5UkRCcE0vc24rVUY0?=
 =?utf-8?B?cE9GS3FSWnBoN0g5S0ZCL1pxb2dYa2QrRm1rc3I2VlI2NjBPSlErcVdndWp2?=
 =?utf-8?B?TUkyRTVtWnk3VjhWbnBZbEJrRG1sUFR0T3hyeloydk45MCtCYmVKelJQMnRt?=
 =?utf-8?B?OVErOVFNQXFrc0Y2RWtleXo1aTEwWXQyRkhHb0pham4rb0x2eUZrWUlXa3Fk?=
 =?utf-8?B?cTFmQktMSURMMy9tS044SVZZUHpMc1Rjekh4aEhYVVJnRk5kMEpaKytEc296?=
 =?utf-8?B?dUp5WUR2dVpmc2QzTzBmbFAxbnBCaDZERXovd0RpZHc0V2lld3BnbzNkTkhE?=
 =?utf-8?B?Z3pKalRWejlUUllsSHRYSXprUU9iaHNCS3FjR2lyZUxYWElzM1hGQ2ZVMVdF?=
 =?utf-8?B?L1piQktzaDVZNnBTRm9TWndpK3R3ejgxSTFZenNlaU1jUHJoUVdqMTFOMzU5?=
 =?utf-8?B?QkRjeGc1T3liRGVOc3RnOTBCTDkzNjFmM0VpNUxSUmpMTzllNDlvaS85aXhw?=
 =?utf-8?B?TzZJOHdrVGErRnc2Y0ZtRFZQc1dMaW5NaFdWaGZ6QVdxcktVVFNmVE9pdCt4?=
 =?utf-8?B?UFl2T2V5NHJ3SXNzM3ozQW1hdldQNGFPQ3dWSWlpbEQxSCtxWlptVWZrT3pi?=
 =?utf-8?B?KzUxM3BKdWRhb1k3TFhMdkY2d1Q4VkpaY0xHUjNITk1HblltbWxDNmRkY3M5?=
 =?utf-8?B?RmUxcm50dFg3MzhaZGhEWkticHo1TVN6TWFnc1BBMUlRNHdlWW5XWWRieHly?=
 =?utf-8?B?eFJjS3VMTFdFM1VqdTFFa3pJdmNjSEVHN0l1TXpwcVF2aEhDOVFxZ2RkSnMx?=
 =?utf-8?B?Q1NrbjlLUWJOdm9Ea1JpTWtVV0h3VzJHc2lvb2hWSFJyK20yd09mS21odWxs?=
 =?utf-8?B?VVVGckl3U1g4NXFic01WWWhrcERidSttZUVYcmR3T0xCclNkRko2ZlA3RFBl?=
 =?utf-8?B?dklUUlp1aFBBb3BEZzJDK2g4aVJWQklLdEJyRy8vOUV4bElCT2RsWFI2emd6?=
 =?utf-8?B?K2VWZEIyNTNSMWtLT1lRdTl4RU02NDVQekZNOVFIbzhyODcwSFB1VjB1VHUx?=
 =?utf-8?B?WGIxWEFnaWNrZWtFeEZFR1liRHljWS8zL3dpNzN3UXVUSmtGemlTdTcvU1VE?=
 =?utf-8?B?bmkxbGRBaEwvM3lBU01kRk1EcGs3QWxoNk45elFTNTdXQktGMU1lV1pPOWE4?=
 =?utf-8?B?dkE5MkpNZnh3WlF6SFJNRXFtd0k2My9SMElIZGhyVmhkQTlZZE5oWkw0YmNk?=
 =?utf-8?B?TkZrU1ZBNWNhUURoVlI4cG05NFFaVmRYMlJLTEE2RmdaR1RvaG1HOUNTcFVv?=
 =?utf-8?B?NDE1VXMxVEFoekE4enUxMFYvN2djWURDSjluVVlEYlBKWmlyNWhiVWsvQ2Rs?=
 =?utf-8?B?TmxSeFpaRU56djgwejFlYjZOczdteHM5dlRYSllNWU9kdHVTR1pQaTJiWDFp?=
 =?utf-8?B?UERVM3kzMUdVTVR5Sm1yMHFRKzF4ZkpEaDRJbWkyd25sTzhWMjRhbVFkSTlV?=
 =?utf-8?B?VUx4bmY2MnJBckJBbjFwT0pMWERaeElRVm9FN0pQVnZsdm9DQnZFRjhDcDNP?=
 =?utf-8?B?bmFXNnlDVzBSdTZFais3K3lheTNXNlV5ZEJiaTFGUFBhS3J3cHdQOUI1WWhl?=
 =?utf-8?B?cktWejA1TzBya0VkQmFQc09BNk5kN2picmhVNlArWll4dHp2bGthV0d2YVUv?=
 =?utf-8?B?RmxOei9nRSs3OG90dTNsNGNERnRQVkptb09KcmlWQ2F1b0ZiN0lFempvVXkz?=
 =?utf-8?B?ZnZCUFhQZm0wdU9PMm0raTBySXVDWElNYVE1QXZTOVVoM240RGZ3NmpJK0FF?=
 =?utf-8?Q?tZtgK9yKcGbq6xjip6NMTY9dJ?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 3bfadcd9-a1c6-45f3-f7bd-08dcbe00ffb2
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Aug 2024 14:37:48.1349
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: /dmPYgg8wEqlx+B473P71gwaQbfWKzcAeOzKh1t0jdCchlnlcPpFU1SIiUhgAfmox+DQg/abV6mQnKhoAPqqAQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA3PR12MB7922


On 8/4/24 18:25, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:25 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> For a resource defined with size zero, resource contains will also
>> return true.
>>
>> Add resource size check before using it.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> If this can happen in existing type 3 case the fixes tag
> and send it separately from this series.


I have been looking at this possibility and although not with 100% 
certainty, I would say it is not for Type3.

"Type3 regions" are (usually) created from user space, and:

1) if it is RAM, dax code is invoked for creating the region

2) if it is pmem, pmem region creation code is invoked.

None of these possibilities use the affected code in this patch.

There exist two options where that code could be used by Type3, which 
are confusing:

1) regions created during device initialization, but for that the 
decoder needs to be committed and it is not expected for Type3 without 
user space intervention.

2) when emulating an hdm decoder, what I think it is not possible for 
Type3 since it is mandatory.


Finally we have code when sysfs dpa_size file is written, which I'm not 
familiar with.



> If there is no path due to some external code, then
> drop the word fix from the title and call it
>
> cxl: harden resource_contains checks to handle zero size resources


After the explanation above, I will do as you say.

Thanks!


> Avoids it getting backported into stable / distros picking it
> up if there isn't a real issue before this series.
>
> Thanks,
>
> Jonathan
>
>> ---
>>   drivers/cxl/core/hdm.c | 7 +++++--
>>   1 file changed, 5 insertions(+), 2 deletions(-)
>>
>> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
>> index 3df10517a327..4af9225d4b59 100644
>> --- a/drivers/cxl/core/hdm.c
>> +++ b/drivers/cxl/core/hdm.c
>> @@ -327,10 +327,13 @@ static int __cxl_dpa_reserve(struct cxl_endpoint_decoder *cxled,
>>   	cxled->dpa_res = res;
>>   	cxled->skip = skipped;
>>   
>> -	if (resource_contains(&cxlds->pmem_res, res))
>> +	if ((resource_size(&cxlds->pmem_res)) && (resource_contains(&cxlds->pmem_res, res))) {
>> +		printk("%s: resource_contains CXL_DECODER_PMEM\n", __func__);
>>   		cxled->mode = CXL_DECODER_PMEM;
>> -	else if (resource_contains(&cxlds->ram_res, res))
>> +	} else if ((resource_size(&cxlds->ram_res)) && (resource_contains(&cxlds->ram_res, res))) {
>> +		printk("%s: resource_contains CXL_DECODER_RAM\n", __func__);
>>   		cxled->mode = CXL_DECODER_RAM;
>> +	}
>>   	else {
>>   		dev_warn(dev, "decoder%d.%d: %pr mixed mode not supported\n",
>>   			 port->id, cxled->cxld.id, cxled->dpa_res);

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM04-BN8-obe.outbound.protection.outlook.com (mail-bn8nam04on2071.outbound.protection.outlook.com [40.107.100.71])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id C9BB714D703;
	Fri, 16 Aug 2024 14:43:10 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.100.71
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723819392; cv=fail; b=U0CK1yUhALLlnLptpqH/W1vtUs8PBXW3x8Ly1DlYANYOikKKBH5y0QbaHL94cD/l2ty7VGeICWg1B61LUCmRVRla3y+glsfRbn5IhquOWEPUhMYQ5hxWtRt7k+Nm15BKQmQ8Yg+4qz191qD/hJLhUzM5x2Y55NnVGh5MAPSeNUM=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723819392; c=relaxed/simple;
	bh=FJGnClEP0iRoIgaF1hh2GQGTMIEidPME45JrAXFDaWU=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=WYiZ1RRkOJcfmnaAIqbdcXMaYfxuZkpFI+pQBfzzHH1upvIr6LhDxyzZ8tO3ZclsPlB6ZDDgVBpjvJ24drkigs2Wbl0n9XU00B5tWJZxcyBibU+4qNaPzolzVfFQ92BBBk2PghesNlBg9WExTCR6z6KSA6Lq0bCq5PkqJl5pSxA=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=ruzkTgt4; arc=fail smtp.client-ip=40.107.100.71
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="ruzkTgt4"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=e4t9uoz6fRdfgbWrL9QN5VrQAEpOq8GQmFUY4M83fXcwUIaOluLxPlUQpmbOo02OLeQ06+zR7PCSB1TrhAoODed5s9IpyQ4sOVpqNvOTaidZPPDeBaOyeC9tASvzdeNgTbL5CUWnZixvhky2djpYWCTNlSH2Ua5omFMQIRQYkt2+MOrKBuarAb5LdinshHMoCG0IOCMcgPXT/mKCnenxulFuJoyXr2PG5ls2FzJs5jmeFDSluNbsd+LZ7/WQAeVfT6SA73+FNQIrEQOr5kmbNKQrP8kwfT8RvVKi/5K4OW1zo+bnGIuwNYHOv3S/O9vqGQiSPEXEv3up/xr71QBuAA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=cl8SlJ46Y4kxoa246lyrQfLMziDqadJpMbu3JC9GiMs=;
 b=kq9snb2PDpQ55cbuzymkrOAq01D+JLSdjcYMeiCcHJajjHejldZmW3aeYt5wDUhEul4dn+XCVkPXncptK72VfWCIrXn+LoxPgt2n8+FmCBIAzrRBl0rEJsjRcq5tXv5EEMi7crN/GmHu4NA9l47xhwzNgZeKfqIwYlgui946AwZWPCc+1tes6AuhKChJJeoIpSVde2y/DZA96lwPaePaZ4DWLedkigiSxBbBuZimnQqGLEKGygPrFA8NywYFlvx+1u7uViLCYutBn1zX9sTVXJXotoz/D9LmRmlD87lQ9XNABkLWo2NNJ4GYnTkEZZwxqK2KYUXYavRER0LaZ+fKTw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=cl8SlJ46Y4kxoa246lyrQfLMziDqadJpMbu3JC9GiMs=;
 b=ruzkTgt4MIB/7siAd3We7jSH2IBBJa2g/bDowyWfvmhKFS8v/7DTjNScBdcsjovW/YdArkwryi5yvdnBeIx/kfBjMf1c8xRgfMZcLVt7lHKjacI98Bidl+B5zLSSuQAK3bk55yPOMeDXRXlDP23WIVkEkY4cuz4UvnRsWzZ5Mnk=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DS0PR12MB8218.namprd12.prod.outlook.com (2603:10b6:8:f2::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.20; Fri, 16 Aug
 2024 14:43:08 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Fri, 16 Aug 2024
 14:43:07 +0000
Message-ID: <3a4b353b-0ead-0e76-3340-93595044fdb5@amd.com>
Date: Fri, 16 Aug 2024 15:42:33 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 05/15] cxl: fix use of resource_contains
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com, targupta@nvidia.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-6-alejandro.lucero-palau@amd.com>
 <20240809121410.0000061d.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240809121410.0000061d.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0216.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:33a::8) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DS0PR12MB8218:EE_
X-MS-Office365-Filtering-Correlation-Id: 23d002dd-7cb5-4aa7-b8bf-08dcbe01be43
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|7416014|1800799024|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?TGYvUTc1NXpVYlRUenA2TUZNRnNMZXlCZmZlV1AzYXZPVm9yUmNSOFFWcnNY?=
 =?utf-8?B?ckpzVXh4MVBTN1AzTDhSTDFGVUErYjVicW1hVTV2eENCeHh6TkRyWGNNMDd6?=
 =?utf-8?B?Z2tTUmc0SlhVOEZSYkJ1YmRhaThpOHFnQ3RhMURnczNtRjFtTk5PYndNdDNI?=
 =?utf-8?B?U3E1V0F4OWtNNmgwSHdWZHFDamViS1lCcHQvT0cwZWlvSDdhcVNVU1BsRHUv?=
 =?utf-8?B?UGd6REhoVnpaenpaOGpmcWZ6a1ROR2dVK2xrLzQrSzY4djVJUG1HT2tJK0VF?=
 =?utf-8?B?Mkt0YmM0OE5RQTBFWjhHMVVMaXU2UkNhYXdSWnpZQTRwN3daS2Npc2J0UjZS?=
 =?utf-8?B?ejYvclFybjlnK2FDQjkvOGxjSEorUkVBOThOZ01jd0VQbHRZRndBQ0xFQkwx?=
 =?utf-8?B?VGE2a1lwOVl3MEQrM2ZXekxldUFCSy9PU1F5ZEdGd0ZjM1NJS01RYVlOb2p4?=
 =?utf-8?B?TThlazRmUkFXaUY5UU0vdURFWmp2S3ZxL1h1NjJaZ1A5Um13UlBHc2ZoWU5q?=
 =?utf-8?B?eDl4WXNZWkU5MTBzeCtYRlVidUdvaE1Ram9pYWhCMHA2NEtPZHhwQjRJN0lP?=
 =?utf-8?B?bFVzR3poTE5nZEZLODZTemQ2UDdoZlhrczJsbTBySnBxZE16T0g4T1hCcUpR?=
 =?utf-8?B?Rk1RYk5Vb2taNUI2WFAxbWFKQnBRNytPMVFHT21ENTdiWG5FNU05TmJyN1Nl?=
 =?utf-8?B?WGpFTnlqVlhnR2JTNU9hKzV4cUsvdXRYdVB5T25aTS9PdndvWlN5bSt1TTdH?=
 =?utf-8?B?VUJuZ3ZWV3QyOXY2eTR5YlpqbTRWZnQ3SFpJbU82WmZpRXZkcG1GRnhoQWU1?=
 =?utf-8?B?emJrWm5BaWFiSFF1bFBVSituUDJrYmZONGwraTNaMTZjTkt2TG1OMlRRMFo4?=
 =?utf-8?B?YVc1Wk00OUNsTytxN1RUV1crVE5BSGw2S2RTY0N3QThIR3lSTkQ2cDBjYjgv?=
 =?utf-8?B?ZEFxcEJMc05qSzZMV3pBNGRNN0ttZktGS3VkVFdRTHp3ZUJFTW4vQ0JqeDBN?=
 =?utf-8?B?YWpRZjkrNEhkclBYQUlYMDdPVWVKRXBoRkdyZlcwY09HZ3ltcmRyVURDbHp1?=
 =?utf-8?B?WXBHZmFrNjhJYkFKNVZaT1JoMWs3blJQWHE1OE9wUzBGSERSdEJMZkxpRDNB?=
 =?utf-8?B?ODRlMDhOYkNtRlBvMThTMkx0OEtGSzFjSnp2L1FVTXhqR2NCUjN2NE43eFEx?=
 =?utf-8?B?TGltQ3AycHVaZjBENklNOWlTaXc0NzFKK2ZzNTJtYjZ0RlpmYmpYdlBPWjBQ?=
 =?utf-8?B?cVJuSWppdytwSXRiT2NzU0dQb0x4VFQ4WkhEcE1JZnBtV1dmQVhTd2xSb2FJ?=
 =?utf-8?B?dmhrdFpzaHZXKzRDSUhLZndURGlpenhGbFRQV2p1UWMrcEUxRlE4anVHNWVk?=
 =?utf-8?B?WDFtRkdQb3gvRHBvOHFsOUU1dThvOUxGYXpiaHZrZXh2Zi92b2N6QzJDMTJW?=
 =?utf-8?B?RXkrVFo3YkZuMGhDamQ2NEEwd1NxUzVlbUtTTW0wREhCZGxCTDZjSllmMXRx?=
 =?utf-8?B?MTRVbEdWN0tvU1F3T3JySzcwZkkvNC9LT2NVakFLWHgyeEM1S3V4Myt2b29D?=
 =?utf-8?B?TFI4WlBObGdZZ3Z6QkJHSmNTbmdZa0dxd0RtOXNFY0xlOG95dkhiNXhCTGZ2?=
 =?utf-8?B?c3ZTcnppWnFvZU5Pcnl0T3VEZTB6K0d0cXdmTjNoMFBpOGNtTHFBakhGU3BF?=
 =?utf-8?B?MG05SlJQRzhUVlBId2tUdHd1UzR2ZGJlNTBndzh2b2lUYlp2d0tkMHZSWi8w?=
 =?utf-8?B?WWRTeFFJUGRpeUEzdURMWGNJUzN4ZVcxYWttT2JmSGdkZWJkd3l1MFduSTZ3?=
 =?utf-8?B?bndxVkh4cFI3YUY3bWVFQT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(7416014)(1800799024)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?TXQyK0JoR2pKYmNyVW9tYTdFZUZFMjhFbXNRYmpncjFRemFEWWp5SlVzWlB1?=
 =?utf-8?B?MGkrSVlSMnZod0JhL1hYRStKUU1JWm1mN3dnaFNZL1FHbUwvbzhrbnNGalYy?=
 =?utf-8?B?UnNxcWk1WCszMVZ5SEN1SnhoTnhLOHpIdE5ycTBtRElLUVFUMzZhTjFRYkY2?=
 =?utf-8?B?ZDNuZGVjZFFBQ0ZOUUtlc2F6Y09oMVJKbXpZdFY4M0hUVnBVVEhIcHgyMmlv?=
 =?utf-8?B?WVlHL1lmQ2xIRHY4WmRKTU5XZlRiaGlLeVNrVVk2ZGYxM1hqTDdHSFBiMmNW?=
 =?utf-8?B?SFhBdGhQa3FtbWJMRXNqcmpVQngzNW5hc21CZlM3dDVQY0FXZlppNzRXMzR3?=
 =?utf-8?B?NkFiRVU3Wks2MkJoekx0VDFWbEJOK3I0YnB5M2lnZ2xKSmNNVG9xQlZRb2pT?=
 =?utf-8?B?Vm9TUW5Ea1NYUWcyb0NUOXhSN2kxUnJDTEl0cVVPMGRVam12NkUzeGVxRTVT?=
 =?utf-8?B?Zkl2UVVWMVdVOU1xZGR6c244T0lFQlpnNHlIK1pvSTkvWG5GR2l4eVI1Q3g5?=
 =?utf-8?B?cVFrYXdIMWNsc3VKWFJWcURuMDUxUWNkd1hHdUtwT3hoRVkzMDBlZmJaTjEx?=
 =?utf-8?B?U0JzVnp6U3pjZGVmYnBYQ0RzcCs2cFBlakJPekxXZ1cwVGNpSGVkckF0WUl0?=
 =?utf-8?B?dHFlbDVXQW5XWXFyQ2xQaFpJdEJaZ1ZGZ0ZWTHhNS2dXRmQ3VkI2ZDV1eU1Y?=
 =?utf-8?B?UXVEbEhzS08wZVQzUFJiemxTQjhYb0FLbmdmM0JhNU1vR3djS2dNaVlTUWNV?=
 =?utf-8?B?d1F6RDBYempxYmIrUEF4bjhpQy9ZOEFwRGJtNm95Qnl5V3lNQ0Nvc3BEdE5h?=
 =?utf-8?B?SHlWTWVsNkd2dmt2cFpwTFpadEJFTVd0NkI1WlJ6Y3Z2K2lsbzRLQ1AvUTc0?=
 =?utf-8?B?Y0o3OWZXQUEranQzdUZ4MkpGMGpJekZMN01BTzN2aklrclNwdno3aVRrcVRj?=
 =?utf-8?B?VUplTUt3S0UyclhQQXN5d0lJNFowRE0zT1NBTEE1dUFsUUdidXVhbnlqL1BZ?=
 =?utf-8?B?NlBWb2o4bFlvYTJ0a2hUYmZXM1Avb3V3QjhCYnpUZW8valo5OVV4cmVqeTZE?=
 =?utf-8?B?TXNHcFJHUUtnd3NXMDcwakV0eUx4NXk3c0dBUVJOYm81UVRJLzhkNCtaM2RX?=
 =?utf-8?B?VDFOc1FLUVdwWEFhOFlTNjNMUkpQQlFXeldHbW9VMHoySXVldXdhSjgzRXlN?=
 =?utf-8?B?SGdDQWxoL2htWm1pdE9CWXlTK2ZTN1NDVGJtbXRITWNIQ2x1dm9EclcwMnVv?=
 =?utf-8?B?WkxUamtLRkpBcFM2SjIzTVFwM2hnTjQ0UFVKQUJuNmdXMHN3SjlHUlV5L3FE?=
 =?utf-8?B?ZkF4REZwM1BPb21hTzVnaHFHcHl1RFJ2OUpSM0JGeEZTWnBPeFlHYUh4dmdo?=
 =?utf-8?B?dnpTQWdxVnVWMG9Bc1VuNzY0WElHRDN6Z3JHNE5hTi9DajhqNEN6UFlLZC90?=
 =?utf-8?B?RE1hanBxdlRCWXBZK3pTWEZpcjBzWTNJTDNKMW42Ynl1cHZ0RnlyQkRLUjBi?=
 =?utf-8?B?TFpqOUdYV1d6cFhsb3pBaEVDMVZXTERoR3JMTjRtUUgvcmFpYlRBUEhwRUhP?=
 =?utf-8?B?SDRwMzZKZFltQUhvaFJyaTNjY0EyWkV0SlpUVStNK3pBL3BDcVdpQVg2c0x0?=
 =?utf-8?B?R0I5Wm9RZ24vY3kyR0g3TG9XcmpmRDRnc2l3YkF0d2tjR29wejI4K0VCSjla?=
 =?utf-8?B?N3lkYlpJcisvNm9mMHpNTVJOdVhPbU1kODRBcE9rYVBpejUyL29rMUh3QjRB?=
 =?utf-8?B?UjlUbXRRamk3R25BNGFUZk8xKzNJWGNyT0o3bkpBWmYyTzMrSkwvdGVQbit6?=
 =?utf-8?B?MlhmcC9WL3FGdzM3cEVaMS84T010dTAvTWNaSmpvYjdRRHdzdENRVDM0UTIw?=
 =?utf-8?B?QUlkNjRma091SjV1ZVNEbWRjRlUrVnJpQ1pKbWprdjlsM1kwekZRcDVUWXZL?=
 =?utf-8?B?b0RxbjNJMFZUbjE5dkQ4UVA3VlNVYStMbFZWQkxBU1l4Zm1BNkF4cUE1enAy?=
 =?utf-8?B?M0s5aE1zdXc5Q3g2aFFyNFUwcmQvU25sclU3QlhUNXdvTlVCYi9TVWluSUwv?=
 =?utf-8?B?RldCTSt6cTc1c3VndEFPWGxMRHpPSDdRL2RnNzdSRVR6ckIwN2hTeENtYS95?=
 =?utf-8?Q?km9RTXyLS0rGFY6RCBvw6k0V8?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 23d002dd-7cb5-4aa7-b8bf-08dcbe01be43
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Aug 2024 14:43:07.8771
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: vcqhw5/DG5954KVacL9FPPPVHRTEAbwNr1Igkw1nM/u92bRtxYf+F0XGH04HfDCMw8ApQqD+VvY+C/fe9pzqVQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS0PR12MB8218


On 8/9/24 10:14, Zhi Wang wrote:
> On Mon, 15 Jul 2024 18:28:25 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> For a resource defined with size zero, resource contains will also
>> return true.
>>
>> Add resource size check before using it.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/hdm.c | 7 +++++--
>>   1 file changed, 5 insertions(+), 2 deletions(-)
>>
>> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
>> index 3df10517a327..4af9225d4b59 100644
>> --- a/drivers/cxl/core/hdm.c
>> +++ b/drivers/cxl/core/hdm.c
>> @@ -327,10 +327,13 @@ static int __cxl_dpa_reserve(struct
>> cxl_endpoint_decoder *cxled, cxled->dpa_res = res;
>>   	cxled->skip = skipped;
>>   
>> -	if (resource_contains(&cxlds->pmem_res, res))
>> +	if ((resource_size(&cxlds->pmem_res)) &&
>> (resource_contains(&cxlds->pmem_res, res))) {
>> +		printk("%s: resource_contains CXL_DECODER_PMEM\n",
>> __func__); cxled->mode = CXL_DECODER_PMEM;
>> -	else if (resource_contains(&cxlds->ram_res, res))
>> +	} else if ((resource_size(&cxlds->ram_res)) &&
>> (resource_contains(&cxlds->ram_res, res))) {
>> +		printk("%s: resource_contains CXL_DECODER_RAM\n",
>> __func__); cxled->mode = CXL_DECODER_RAM;
>> +	}
>>   	else {
>>   		dev_warn(dev, "decoder%d.%d: %pr mixed mode not
>> supported\n", port->id, cxled->cxld.id, cxled->dpa_res);
> Also, please clean up your printks before sending them to stable.


Sure.

Thanks!


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2041.outbound.protection.outlook.com [40.107.92.41])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 54F1A1BF33A;
	Fri, 16 Aug 2024 14:44:29 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.41
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723819472; cv=fail; b=s42tkJiZEToY2F8Xda/RiIqQWwXTmOpYwtczsl6cd9KNEVlxsDAabxNEhwRK5VlWx/WvEp+0y4wKiQmPfK40fnji+Bl5qN4DQ31ULN1P0qvpg0RubefdHuTYRDEu9MSjJPnOSjz6WaqWdnDn5ZrzLKskLDM4z9cq3Fs7/rGwQ7M=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723819472; c=relaxed/simple;
	bh=pSQhBf27yz7Ro/gAPd+Su7IscV8R9YP23dgAe+JsWN0=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=gga+XbEHnUikh1VdvPMW3k09xCYeUI1PzzyAf+PZNmQQR0IG5JwCHW3tCkcyzDPu4proUbiw9vqGDwQbab1WuhJQTtZldRfIFgd/heqKSfxXqSiV2g/jguzVeD9orok2cHpoYIUt8LN8zCDl7vHz4pYoAcTJHoDOnW69pPEltI4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=Pk8FFERW; arc=fail smtp.client-ip=40.107.92.41
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="Pk8FFERW"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=j9HQWHUdL89D/+sgCc+4S5BE3VSnmo7Qz62yh2f2/iV+MsH0EmvE8fyg4PNXiMXslTXcUVGa5dYHOJmMzGcIJmx2oyJaH8C/7gstyyQq+DY95cLUvEk+I+iazrF1P8xiamUuFVh6ahqa/D+k1TdPBJZ8PWYxel12NpDFifuCfP+tnAlHGscsFq5WShVBZf0y2hDgdtAFSnPbkDmCe9zIqW5CiU0wZ4/QK6A3K5gc9ELU1qWbLiqd4J1v3D0ZlhqrKGOfXz9aQiLgxt5YF+3WIjdt3AJ6jkaMm/2Xj26D77w8O+7L4hltnjoo9CN/E48tEPwPvMahxSWpoazjlFFXHQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=wVlqy1I8cdvKaFfd+yEMDoPqsdobUOf3ftSw7Tn6/FY=;
 b=HgxisQqA+A+oSqtdOuMLwDfmowpWDf1ZTkNnHE1Z5wDRdpHLmDoVveb1T8/LmYznRagtbRagRMoINxx++QqCexLQRnVGq0VMSsza0/e1WO7ZD9/ZQGeWV2InGNEsjjMYhu4plVi32aco1pL4xXB/uBiFJTSQDEUcCih1rWsdi79vOtJO6U4saJuZFv+wmSPNI7aOp4zXw8bNjwUoqEewT1AhsDlrdx7AtEl/87ajPgLeB6RHSajweMyl7z7o8iGVdtrV9L48BXlZletgh6NO8f2Z6KmFaE+sLtx/aNgkMIMJV7qk4GHMttJLy8Tnypxq5q+z5p46KQFVjOW5S6FQ0g==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=wVlqy1I8cdvKaFfd+yEMDoPqsdobUOf3ftSw7Tn6/FY=;
 b=Pk8FFERW0R/v6vxvxRzImScJd9eqeYk2Nb5x0y65pHPSIyOHSdkwtR4gojjz2HDDvGz+svb+nP2vyPcFS/vXnaaz3A2T9I9MVB1pbq4vjH2UXzvHMS3jbl4foVRg4KuPO0F1gttsxkoVabF0AGm8njS29FsOnReZ7TPnVI+nCHY=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by SJ2PR12MB7800.namprd12.prod.outlook.com (2603:10b6:a03:4c1::18) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.18; Fri, 16 Aug
 2024 14:44:26 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Fri, 16 Aug 2024
 14:44:26 +0000
Message-ID: <be6dd8bb-d7a2-c19b-f7df-3a8da33fe020@amd.com>
Date: Fri, 16 Aug 2024 15:43:53 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 05/15] cxl: fix use of resource_contains
Content-Language: en-US
To: fan <nifan.cxl@gmail.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-6-alejandro.lucero-palau@amd.com>
 <ZqFxOge1S654X4Uf@debian>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <ZqFxOge1S654X4Uf@debian>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0211.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:33a::7) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|SJ2PR12MB7800:EE_
X-MS-Office365-Filtering-Correlation-Id: 26d870d8-f0f4-4a42-5346-08dcbe01ed4f
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?UStBQ3diUkNVWVNZaDE4djRManBkOUwyZjNOSVJFOEV3SGtNYzRuZS8rVzZC?=
 =?utf-8?B?VTI0ZjJrcWlwN1N6Q1dTaFhxT21BNGhxem4rMEhxaTFNMk5aRU82RUVMTGdW?=
 =?utf-8?B?TFcwUVVuTG5WY2JuNktmZVpHSmU2MlJVb2g3KzYvcFFMeS9Cd1N3Yzc4b3gv?=
 =?utf-8?B?c2dieDMvREQzMlYzc3BrcjQ1TGR0M2RBK25sQmI1aXphcGZRYVBhQVVvNmtG?=
 =?utf-8?B?MGF6c05FY3h4dDEzSU9JMmdZUHZiSjZ5bXlRc1Q0allnT0R0UnF0L2NLK0xX?=
 =?utf-8?B?Znp2eUd1UTdybnZOK2txdElmbmlzUmMwUysweHRJUmJNdlVmT1VZNjBLM2E2?=
 =?utf-8?B?bExSODI2VTdDRDRJRitJd213aVQwVFRKL1lpTkhNaU1uamFpSHNsMjM0UjRO?=
 =?utf-8?B?YUg3aGhSU0VkbWNOcHRkemJqNW00VzVkcTRiMWhTR2VlRXJST1JXb3hWUXlE?=
 =?utf-8?B?bmwrcEVmdnpWWjZiVmpIekVsbWcwSkVENnRkV0NYamFGZUZWcXI4NmV2U2ov?=
 =?utf-8?B?RGlUeVBvejh1MDZiaGgvNU05M0YzSTYzYXZKQmFWRG01NGtPV2tSYkk0bHV4?=
 =?utf-8?B?T2dYNGViV0h0RFFoVTRIbVE5NUw5bVM0eW1tS3JYSGUvc2dJWmYrMVBhL2ha?=
 =?utf-8?B?dE43N01NTS8vQ1ZzR3RZQzF1azBwakF3T2FOTjE1U040VHY3V05WT0puMXJQ?=
 =?utf-8?B?SS8xTGRjM2J1STV0VUJraWRPRS9uVk8xNHpJU3BpZ2E3aTVianhFK3B0dDVm?=
 =?utf-8?B?U3FwRkJxOEI2MVdSTHNBM1lMNEZLMTJQK2t1VHo0anlnQ0hoSjNBVUxnbHFG?=
 =?utf-8?B?T3N5Z1I1eDBYeWxyK25Eak4wKzY0WU1EUTJvMjFObHZtSm9HNXFaTC83OUZI?=
 =?utf-8?B?a0s1NE5LY2E3Yml0M29HQ2tVc3lCNHp4QXV2QnNBWmFZY1FrOVRZa2dVL1lT?=
 =?utf-8?B?NktMYUZQK1JsamtwbFQzb1RySjY4MlhSQ05sV1FTR2htMFhYWWZOK250VStw?=
 =?utf-8?B?cjJQVkhDOG53bzdKYTdhN1d5MjVUQzMvdUtNdFlSQ25VRFh1eEI1bkFSbm56?=
 =?utf-8?B?VnVDbyt5b1hHVlZ6cng0N2ZKQm1QM05hN3B2RTljZXBtc2dBK1o1am1ydTNF?=
 =?utf-8?B?b1psTWRMQ0pEU0l5ZGlSK3FUT0xCbHhDcXBQeFRSdW5OUlYvZk1ZY09hUWRG?=
 =?utf-8?B?ZmM0SnBxNlB5TVQ5Yml3RXBuZzFXZjkyWERENTdzU2krTW96ajZCWjhoS2Vt?=
 =?utf-8?B?UDNQYWRNYmdibDBLRlRkZ2VqNHZkS1krYUhwa3ZzZ0hiaWhHK0JWakoybHZw?=
 =?utf-8?B?b3B6bHFGZ1ViaU02U3NiSG1vTVVCRjNnZ2Z1ZG44cUpSVVVkaDlpZDRPQ0Qz?=
 =?utf-8?B?OXZ1QzEwRUxPK3E5MzRKbjIvTS95VUM4N3g4TU9PejY3U2RqUjFVby9lSXdL?=
 =?utf-8?B?Q1RsMVVPMGg2Tnc3NEpzZlhFN2x6RUh0a29YQWRVaExjYU9taUx6dmNPZWFN?=
 =?utf-8?B?bEQ5WWFwQVBiRDhxUk5Zc3Z4c3NIZXppSXk0Y1VrMnpqdGtpWndwTHpyNWRZ?=
 =?utf-8?B?NC94bEhjOUwwbnZPMWhlTisxK0pDQnZML0hHMmUxMnBVcXNJemVyOEZBUXRp?=
 =?utf-8?B?bWdQdklqYzJVYVEyN2pmVGEvd3NRdzN1NUZ6VUNBQ1hINTQ4Vnorcll2VmJw?=
 =?utf-8?B?TEhDSy9pU3AraFdvR0hYKzVLOS91djVWMWh3OUcxUlZFYStZZUpCM0JiOVhI?=
 =?utf-8?B?ODFuK2JkTHphWkRrZHd4WFk2b0NRbituZTU5YTdYQ21JbEM0djYxdjVEZnFT?=
 =?utf-8?B?UTh6MlJFYXZRNURrOHB0QT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(376014)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?NkpNY3FqNkMrQjVxbHFjRW80YVNRWHpGM3RoUUFQbzRZY3pCN3Y2K05NRDVU?=
 =?utf-8?B?OHBrRWV6Z2h0WDNPUjhNSE9mejVseDRJQWYvaXpsM2RmWWFQTEt2eG9mZGh4?=
 =?utf-8?B?WFRmWllxYzI2UXpPTStLNDJ0VUNQM1dTMXVRcDR2cE9VYUpFYTJ2QUZ1WUl5?=
 =?utf-8?B?RVhTbkEvOHBhQ1M1OVVTZHJFcHNIa3BZYW5ybVl6UzVIVnFhRW1Ia3J4VGdV?=
 =?utf-8?B?c3VtOGZVcjU1NXBYcVBaL2g2Y0J3UHFmUUYzRzhVOGlmSDFYZ1laUEpmNkVk?=
 =?utf-8?B?L1N4bm9rWHp1QmpEWHFka1gyak10SVNBNFVYVHl5QmovOTRLOVJNTW1NbmFv?=
 =?utf-8?B?ei9rQlRPOVY1eGJ4cTlZUGtDdWJjWENIVHRJb2V4WGF4emZHSnppc1NwS2RU?=
 =?utf-8?B?Y3EwdmI5TXFlTktMT2FtZkVGeC9rNnRtUENLL1N6WGE5UFhMQk9Ua0M1QWs0?=
 =?utf-8?B?bFJkd3Q4WmZVcUY5YmJwZTBVcndWQXl2THUxcWc4TGpZa2JibWZmWUMxZ0lX?=
 =?utf-8?B?bmVYdFVEL2Fvem41YUNYTEVPakhWQ1J6ajlUS1FSUDU2OFpjanpicENtUXI2?=
 =?utf-8?B?VVFwWUdQOXdmMkdXenFuZERRNzVYazh5ZjlRN1UvVTRlYU9LQWV3dWZxN3JF?=
 =?utf-8?B?aUVlajdNYXZSemVzZmxOYkJ1TzlOaFZZelZSdDZHYjBTTUtZMXhhVG8vVDVR?=
 =?utf-8?B?TkFXcXRHMUFkUFJjcEthUmh2ZS9tOUZTYUszV21WeEdhRGRsbFVraERUSEZm?=
 =?utf-8?B?a05TakVKeVNzYnBDVW9WVExCK1B2RFJLVm02bVpQYlFELzlweWF6Y3FkWUw5?=
 =?utf-8?B?S1JwNjhwSTRRd1RNSFgrOUE0Q3lIWmtOUlJIeUswcFo3L3I2RlNIVGlkUlhq?=
 =?utf-8?B?UDhaMmFsVFpmOTZHTHBwZ3BtSkljSk91ZGNZY0RVaWtMSHBtUUJUbkw0bnEz?=
 =?utf-8?B?Y01lS2pMbGxaeEUxN2pUS1RkMXYrT3NqdVNSTVVnOWFVOVJ2NHpVZXpqVzR2?=
 =?utf-8?B?K1dCY05XbnlSZk5VeVVPV253Y25YK3dhSWZ2bUNmQ2J3cGFaZlVkY1VqZ01p?=
 =?utf-8?B?aTR4TGttaHNOdGw5RFE3Y2Y1ancvejh2QmZ4dXVWMmk1LzJKSE5NbmFWWGpq?=
 =?utf-8?B?ak5rakpkOFc5NFI4Nyt6NFIySGhWZWVqQjU3SnIvalUrNnlkTStWYURqNVJi?=
 =?utf-8?B?aCs5M2h3TFp3WUlsY0hzQnFUeUs0dlpqam9pQXRaRno0d0w5NUZOdk91NytW?=
 =?utf-8?B?RnYzSlJydi9vV29CN09wcm5GNUNGTUxwMWhzcEtXR1JkYzMvRjliZ1ExMkdM?=
 =?utf-8?B?Tjdkd1JlQU9ieGs5SVlWOWt1R2FuS0ZIYlpZc1o5dUJ5SDQxWVhzdStKRzVG?=
 =?utf-8?B?a2VZSXYwenBhNmlWOW00WVZiRmFheStpdDF5RGZJQks4cFVqcXlhdGoyblg0?=
 =?utf-8?B?QlFTN3dla3hYVHVLY3N2eGhLRWh6NEVQSUEzUVdmTHVudHF4WkFLTnNQbEpU?=
 =?utf-8?B?WUp6MHlMMSt4N3hHRUROWXNVTytOS0FzZU5kQ0E0bCtsQXN6TXNteFh3VmZN?=
 =?utf-8?B?SGVMVGE3R3hSNTRXM0VUYzdCcngzd1Zoc0hvajhXREZwK1lPQUlBUDB4c1M3?=
 =?utf-8?B?WWgvZWdRR2h1VzRsL3lzQVNJSWhhSmpraXVyVjh3dW5rRjE2Wlp4Z3pjQ29T?=
 =?utf-8?B?MldjbzJOV2RGcVZ3NEVJeUhHeXJMbnl3TXhidmp2WndRUlBhaitYR0lKeXVY?=
 =?utf-8?B?ZWlXSUFyUE96VTJYTUg3UFV6L1FRbXJIdHhic3FBYlVGQVp2NXlIRXhZTlA3?=
 =?utf-8?B?L0NFa0FBYjVxMkFaSkFkN3MzZTQrRWdHMGN5UC9YUWpUTHluR3dTU0pTSWJV?=
 =?utf-8?B?Q2ZGQ2RiYitYVlFsdTJxUDUyb1VUaDdEYThKaEFERXFvd2dBVzFITVlpbzkv?=
 =?utf-8?B?YktFcEtRakVvU2lnTUd4d2tlKzBNNk84aGZnWWtlSG0vOVdaQ1o1bUVvSm5H?=
 =?utf-8?B?aWhtZ1RvWmlsL0hjWW5GaU9QNk82YnRGYWdPUC9lR0R4TmxPMFBmVjk3Y294?=
 =?utf-8?B?THlOYXhESnBabENqN0NHZ0lpendmd2htYm5WYTBoWVRBMTlJeW55QVQxcmdp?=
 =?utf-8?Q?6MwpT3UptYKd0GkwvKCrFrR+U?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 26d870d8-f0f4-4a42-5346-08dcbe01ed4f
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Aug 2024 14:44:26.7670
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: Z/gt+0p9Ax2+gwKbNE13dbdBtgtKuTEA1EBEd6qQaGgTzeBMZDiOoa/PA0jaaNxeqEd0urttbXLQNn8lGHkM3Q==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SJ2PR12MB7800


On 7/24/24 22:25, fan wrote:
> On Mon, Jul 15, 2024 at 06:28:25PM +0100, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> For a resource defined with size zero, resource contains will also
>> return true.
> s/resource contains/resource_contains/
>
> Fan


I'll fix it.

Thanks!


>> Add resource size check before using it.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/hdm.c | 7 +++++--
>>   1 file changed, 5 insertions(+), 2 deletions(-)
>>
>> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
>> index 3df10517a327..4af9225d4b59 100644
>> --- a/drivers/cxl/core/hdm.c
>> +++ b/drivers/cxl/core/hdm.c
>> @@ -327,10 +327,13 @@ static int __cxl_dpa_reserve(struct cxl_endpoint_decoder *cxled,
>>   	cxled->dpa_res = res;
>>   	cxled->skip = skipped;
>>   
>> -	if (resource_contains(&cxlds->pmem_res, res))
>> +	if ((resource_size(&cxlds->pmem_res)) && (resource_contains(&cxlds->pmem_res, res))) {
>> +		printk("%s: resource_contains CXL_DECODER_PMEM\n", __func__);
>>   		cxled->mode = CXL_DECODER_PMEM;
>> -	else if (resource_contains(&cxlds->ram_res, res))
>> +	} else if ((resource_size(&cxlds->ram_res)) && (resource_contains(&cxlds->ram_res, res))) {
>> +		printk("%s: resource_contains CXL_DECODER_RAM\n", __func__);
>>   		cxled->mode = CXL_DECODER_RAM;
>> +	}
>>   	else {
>>   		dev_warn(dev, "decoder%d.%d: %pr mixed mode not supported\n",
>>   			 port->id, cxled->cxld.id, cxled->dpa_res);
>> -- 
>> 2.17.1
>>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2063.outbound.protection.outlook.com [40.107.236.63])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id BC5091BD4E4;
	Fri, 16 Aug 2024 14:55:19 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.63
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723820121; cv=fail; b=rb98O54hXC7wCVIl4gIXfBWxbzvJU8iQT3Vlc8Gb+qwCZvH773tiHdHiSztEo9MxLhdw18D7V9GZvxir2xHDUISyjbkSE/DQMb+asW1H/a7bhaFetRT5cODmnvc7QUb6jy1Kyp5Iyffi4GhUr3ic2xaPaYjB7fdtPa6y3Dr8jQg=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723820121; c=relaxed/simple;
	bh=vR1LA9ra5NpK6L2tTOCzio2buWS+cTiwwXyGZarpSCk=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=CofXrqwrooToQBNf8CBWdNh8/uxiFlY8skznWG32frZrO/YelH+ieCYKDDbjSMgPa1gq6MFlzTwnlrITKPN0mRpTXV1euPi4flQmtwXgULr7pd0WT7+7bbYTWjmrs52j07ZiYg5rVWdjlp0II7bebcHr6xaIM3tMounwG9iRn6U=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=sxo3QjgD; arc=fail smtp.client-ip=40.107.236.63
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="sxo3QjgD"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Ao8kjwnWes1LeEeNjWvBRgZk6gKVmLzwgI1Qn0XJYSt1DmJAFdFgppK+f30HxpFgXf1MDRRzvTlrf5iY/Jvb9JrJv8DzgPUezinv0mAlzcT2xeAptWdknxQmBMCefTjb9oynHTtEj5tYsl0I2zdTnpvfC7kimVghACmuLREB6TgUi0PDkDrhf/VEEv+1vpW8L6Bveilcr2DgmU5jFMiPMtPzWJc0G2TwmMVCuYcl8Wvu6CQTgj76jQulrGSTFcz0zdidoeADVe47P9Okw3KTJziZCnZsw3k3Sj0PxWO39+7fNRSXStH8yU4DQz8sDWc5MCg3g4kQRXbH/Jvu9eXVLA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=XeWrstF0Aho4JF0+d63pm4Y+wy8Be+IlnvPjJ7x08xg=;
 b=Y3ZxdzhrNs1/cxCL22eOF/VuD00a8STSV4+wFatbzl1gWLojnuSSMP3orhKVGI5hygMjoGOLwf2JRQvfhO2A+3suhhqjkQi7HkUm2Gq+myYU5qoJmZ87U0uBSGjvmNsVWUwVR4YxCDYk+aTUJVDQfyjLsedbPGHGReE6hnLnXzouGs4upjsRrLQem3xOGhV2z5CW5InFGjytVPHzQ8GvKtwJg2v0hjW2/lx90vJNPj1TR45MiIMmQJUFq2EPv2THzzec0d0dXJ25mx16xAwcVPcLPkfk1pdDTqB/cQdIvNF1tlBq1O6m9NX7YkjHL6BuSnGzp5x4n0PkNDVe+mF0ww==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=XeWrstF0Aho4JF0+d63pm4Y+wy8Be+IlnvPjJ7x08xg=;
 b=sxo3QjgDn1ceA4KC0P6P2J92Viasr+9rOj5wyd6YHc1+rBIp/HVvp5AiN15UevkiSCVnM7et3xwP6TOdLR45fHBlYK/bH3TiR0WZTJVIWeAiDkmp1V8BW7WacD+BT2XgZ6lhmb7Y6hRWMdEXePnJHg0kP8z5Jtajqjk3o4PuBq4=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DM6PR12MB4266.namprd12.prod.outlook.com (2603:10b6:5:21a::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.19; Fri, 16 Aug
 2024 14:55:17 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Fri, 16 Aug 2024
 14:55:17 +0000
Message-ID: <032d42a4-a02c-c928-8bc2-1f20145a52de@amd.com>
Date: Fri, 16 Aug 2024 15:54:43 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 06/15] cxl: add function for setting media ready by an
 accelerator
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-7-alejandro.lucero-palau@amd.com>
 <20240804182646.00004a56@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804182646.00004a56@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: DBBPR09CA0015.eurprd09.prod.outlook.com
 (2603:10a6:10:c0::27) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DM6PR12MB4266:EE_
X-MS-Office365-Filtering-Correlation-Id: 7c279516-12d8-4478-aa74-08dcbe0370b0
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?REM3YTN6UFhFR3VkUXN6V245VytlUHhpZnM0NklKZXhVZXZFUUpBa3lPRGFM?=
 =?utf-8?B?UnRsMVhMdlBYQUdoZ0huUmFSS3dObEwrcHFLdVpETFJIVE1Wb1c3SmYxRXVU?=
 =?utf-8?B?dmVJMzdWVnA3eGJzQk1uSWo2MEhLcFBJVTB4aFhhUWtrQS8xdGhTRms3NlN6?=
 =?utf-8?B?UjZCWk4zV2hXUkJYdjFMWlp1M0RwbThkUXloakFwMm9ZYVFWQmZIZUFLL1hk?=
 =?utf-8?B?VmJuQXdxNXdpcTdjcmdMWjd2OWJYWCtCektFVzNFZlRhbWs3QzNSa2FlTk12?=
 =?utf-8?B?OTNrV2pvV2NFbURUS3Zvc0x1RWd1TFZhTU5BZ3hYSjZxVjdGWDV0TkJ2YVRu?=
 =?utf-8?B?OUN1ZlFqQWdIVDhzS0V1Q3VhcmNxV0w5QnVEc2JtZmYrNXQ1eFZTc3JHdW5E?=
 =?utf-8?B?QTVMSis0UjFxNXpHUGNlYTJmQnQvUnhjMnh0OHlEaHRDRzd4bStEK3JMam50?=
 =?utf-8?B?dWtWNi93VWFkbkJJSXd4cnVvd3pyM2MrMW1yVDFGVCtMY0hQT0lRN3BWbFYr?=
 =?utf-8?B?bXJJZWdIanl6VHlvWWxiR2ZwS3cxTUt3bTBSRklxbFNIdTRHbDh3bFprV0ZJ?=
 =?utf-8?B?NUIyWlJ4K2ZQS2lRQnZtMUQrQ3RIRU9FYlN2NTlLUnJwRDNOb0QyY3FPVWNN?=
 =?utf-8?B?SlQzVDhESUtXNk14WW5VTHFGa2JSamNFc09FNzhLYmNrejFKbmVhSE5VYmJN?=
 =?utf-8?B?dDVtYzd5a1J4L2c3VEV1ZW5oT3ViRE1aQkU2cjlJQ1JGT0dzSmNQVGFCZTVq?=
 =?utf-8?B?UHRvK2p5eFhTNVJGUUVHVkJNMlBDa0lWU0ZYV2hvc0MyRktFVGpteHdXTktU?=
 =?utf-8?B?SmlnNzEwbTRkamhtRnRnaDkweGU1YkFkRnJRMENLbyszdHVlaXd2TnFJK29Q?=
 =?utf-8?B?N3BVZlhEUUY1eGdGU2JFM3JlSGFQK0p0NmYwNjI4SWtJY1NkOXZRNVQ0azFD?=
 =?utf-8?B?aHo0Y2VpTmJEVTZWcFR5R3hId3RZeTlUQzFGTGNJQnJ3aU11L0pjSFhaV2lT?=
 =?utf-8?B?TWFmUGhmY1hlL2lGbDBPZnBJZFJmdjRRa2JRVjZJaEdrQ3c3VmRpaTRiUzE1?=
 =?utf-8?B?OE5Ma3ljQWYzYUdycUpJWitESk11bjVQOGdJWUVJazVlbkI3Q1RNcVRScWxs?=
 =?utf-8?B?WUV4eUhpWVlSSWRmaHVldzQ2MUZJekVTTjBpNjV2SEN3aThHOTNwdVI1cHlx?=
 =?utf-8?B?ejhPQ0t2U1hpbWlhbHZ5ZCtmT2JSWGpFdHMzcEN2aktNL01pYXo1OEl2a3o2?=
 =?utf-8?B?Vm5FUUVWSVZsdFd6SW5hY0JGaVlXZVkxd1Rsb0sxNHNrWDUrd0kxZGhMd21V?=
 =?utf-8?B?LzJmTGF2eW5maEI2ZlhzNHFDeEc4YXJWQkJ3ZXFjL0FYbTBQa2NZK0Ivdlox?=
 =?utf-8?B?V0pGMG1HRDBWYWdZcHpYUXczSTZueU1ERVVlN0FiVUhSQXBDNG9vOFpyQ1cy?=
 =?utf-8?B?UWRiVXNmM1g0SkRLRklkSzAvL3gyaXZhZnVxK2FBdjF0dytPUWdoRjROUER2?=
 =?utf-8?B?VXd5Z1dLdlBEa0xSVitvNzhRVUtoOHpzL1d6Y3JsTHYxTXdzY0xnNlVRTDRm?=
 =?utf-8?B?OUJFdEhKMWU0ZDZNVmJlbGxLQWF1TVBTeU03alY3UEJscWNyYzJoSjAvWFhp?=
 =?utf-8?B?b3prOTRTS2RXNUhXRG9tcDBRS0tkY00wdUZibDhXam5BVFBFMmpHUHdMdW5x?=
 =?utf-8?B?SVlDWjBDeXoyRE5hQlloM3crOE5YaG5Temp6N3kzVXFEUktyWlpKUTFBbnpl?=
 =?utf-8?B?NE4zRnl5bTNlNFMvWHNQam9Oc2w0UElCelJrUDBWZDNBTWdjRlgrMVFQWWRh?=
 =?utf-8?B?SlhlTHRYeS9uaDFGKzR0QT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?cFhzYlIyOTBrdE1WM0xtZU5yWGNoMGtmZU84TFZQOTRoeTl4MjFjdE9DVzZw?=
 =?utf-8?B?YWVyR0xwNktvNkZxV3ROUlNITUpIR29tU3YxallRYWZybURPQnFoTHFLY0c5?=
 =?utf-8?B?OXJGM0gyOUd5R1MrcDFUV05MV3ZyckJmaDNUVUs0bENkSmZIdVhEWGFQTE9v?=
 =?utf-8?B?R25iWkpQRTFEQjJoa1hyUXN1UGx2dkFyL0hySkV6ZElZaWEzRGJ0ZTBQYkps?=
 =?utf-8?B?dStSMzR5Sy81K1ZlMjRNQmh6Z2c1RStER2FCbG5IRVdUbS9rOGxjREExL21j?=
 =?utf-8?B?d3lIK1hyTjVpcG5tRFpOQUNPWUo0QlBpUGdiR2xnY0RTZ3grQ3JEQm1MblRj?=
 =?utf-8?B?R0QwUk5PM1B1NytIczhObDg3RFdhWmQramcvZlhLN21ZWUJ4TlBPT3dQZjlp?=
 =?utf-8?B?MDR1SGJGQjhSZmRJa084enl0QjFlUE10Vk5UMWtOY3U4SlhLQmdDb2ZMUWZs?=
 =?utf-8?B?QlEvWWpIRklqTUo5SDZDQWJFZ2t3ZFZMVkZSdDV0bGtteldIU1Q0UHFjUjli?=
 =?utf-8?B?NUpMZzVXYW1oNkIwaEFKZzdscTBMc2dzeEFDWWJWNGlVNndubGNvWWFEVlg1?=
 =?utf-8?B?WkdIWDlUUy9vVGluRUJka3ZmZUl1Y2tNc2RmMW4yZ3RCUGhRd1I5bVpJZzI4?=
 =?utf-8?B?UGp0cit5aklsb0h6NEhoSjMzWEJQSEt6QlA0Ym1xemNvMC8rWDFhRjBIcTNz?=
 =?utf-8?B?cWlwK0hKVTNIbGxFK2FSbTJTZ3hqUG15SnhMazdBYkJQdmFVdmhhTDVJL0xl?=
 =?utf-8?B?SnBxYVZkV0hCbjRnaWcrVVRnWnBydGx6OHRSM0phWTFzQkVHVFRyd09nQUxL?=
 =?utf-8?B?UmJyTk1KVGpFZEJXYmRwakFBVlFpMEtrWTVncEJia25xeVRmb3lodmUyZEdT?=
 =?utf-8?B?VGxpY3hkRUQzelNGREVxQnQybHZQeXAzWGFldjFpU3R2MUFheWFPcENGTUV4?=
 =?utf-8?B?MWtlWWhBcUw0TGU2dHJZeFU4bDUwaE54a1l6SHhhakdSNFNvN0ZjaDVJc25y?=
 =?utf-8?B?NWh2eEtOQXRaMGIzcXRNR1hza0Z3UWhxV2dJOEhOOFdETno4ODBCbmt4cFdV?=
 =?utf-8?B?azh2dGNMd0p3UjRld1Rlc1NhQTZvUWlkb0ZkM2VpV3J5N3lhV2VFYzFnc1hq?=
 =?utf-8?B?aVkrYkw0ZTdXbTZjZjRyZEc3ZDAzOS82ZytFT0gra0I2US9mL0RrUkhrK0F6?=
 =?utf-8?B?UGVKejJvNTVFbkx0NGg1YWJGK2tuWlllVUppaEpDdVZQVWtYc1A0dk5WK0lU?=
 =?utf-8?B?M0V0NnRUcXJzcitqZU96VXZzU1Z6Vm9QWXlPMCtLaHViMGZEVTdZejdNekxW?=
 =?utf-8?B?Rkt1Nkw0QVc3dkIwSzF6SGY3azJsaW1mUU1BcGpnV3VDQmJmZEVmYTM3bGpV?=
 =?utf-8?B?bTdHcmVRVWd1VGpwT0JFTmk0UzBQWmIyb1BnWkRkU2NveEdYYVYwd0dVVGxs?=
 =?utf-8?B?cGl6OStFYmdyNmxvY211UUxoTHcvTHhlN2VJbGZscUVuZlFGSXFwdFhjaU9k?=
 =?utf-8?B?aEd4aEVkSW5jNXJVVCtiRTh2WTNxMlhnRkdqUCtlSW5pL0xzTStEMndRU2w3?=
 =?utf-8?B?WDJHc0FuTFhqd0lkVVprMHhvbmpsWFhlRjBqeVVMTUFxWHptODhlVVhTNWwx?=
 =?utf-8?B?MmJSTFpKWW8wZDB0Vi9qYktsa0pjL1R0Z0gyK1ZNcFVvd2xzOXVRQWE0by9n?=
 =?utf-8?B?UXlBaXhsWEZlaHFTbldoejlhaXlmZWtDM21qd1VnSC84aHRaUEhrbHFEaDM1?=
 =?utf-8?B?ajJleHJqelFFdVlDQUxqSUJNMW8xU011SHpvVS82NXR4bnFSaVBzVDdWOUVJ?=
 =?utf-8?B?akZQZHIrelU3dk8rRXJEdkF4MmpaYlZYdlplcmtVdnpIdjlUS0VNTUpwbkw2?=
 =?utf-8?B?VU5aeGMxakc1Qk40aGNKdTMrT1JHeWY5WE9IUEU0MExjVmtPUWQrSUp1bXd6?=
 =?utf-8?B?cWZhUkVSVnh5c0xOSHIwQXNPdmhnR1QxeHI4YS9XdUtNR21FZWcxdFpLT3NI?=
 =?utf-8?B?a3M0UHJBUERwLzVZT0FxbzZYRGQrdzE1VHVLdVBNMXRteDBrc2NKcGQ4T3JL?=
 =?utf-8?B?SHc1SFBEZmxVVmlCNGlxUEhLNzVQNUpnWVlMckpzR04vWU5oY2I1bUxuUnZJ?=
 =?utf-8?Q?4QI1nfFnhYF7eO8Qa5W06UweF?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 7c279516-12d8-4478-aa74-08dcbe0370b0
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Aug 2024 14:55:16.7069
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: ffDge/n8NeglaRG2PZCxaAzaTdkNQEEI7y8/3eLAxoUjhVfy9PjgBHT0XNhzOU/zXgrGHbE/8Pef1SfgQw4HgA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB4266


On 8/4/24 18:26, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:26 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> A Type-2 driver can require to set the memory availability explicitly.
>>
>> Add a function to the exported CXL API for accelerator drivers.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/memdev.c          | 7 ++++++-
>>   drivers/net/ethernet/sfc/efx_cxl.c | 5 +++++
>>   include/linux/cxl_accel_mem.h      | 2 ++
>>   3 files changed, 13 insertions(+), 1 deletion(-)
>>
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index b4205ecca365..58a51e7fd37f 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -714,7 +714,6 @@ static int cxl_memdev_open(struct inode *inode, struct file *file)
>>   	return 0;
>>   }
>>   
>> -
> Grumpy maintainer time ;)
> Scrub for this stuff before posting.  Move the whitespace cleanup to the
> earlier patch so we have less noise here.
>

I will avoid this kind of things in v3.


>>   void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>>   {
>>   	cxlds->cxl_dvsec = dvsec;
>> @@ -759,6 +758,12 @@ int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram)
>>   }
>>   EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
>>   
>> +void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds)
>> +{
>> +	cxlds->media_ready = true;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_media_ready, CXL);
>> +
>>   static int cxl_memdev_release_file(struct inode *inode, struct file *file)
>>   {
>>   	struct cxl_memdev *cxlmd =
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index 37d8bfdef517..a84fe7992c53 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -56,6 +56,11 @@ void efx_cxl_init(struct efx_nic *efx)
>>   
>>   	if (cxl_accel_request_resource(cxl->cxlds, true))
>>   		pci_info(pci_dev, "CXL accel resource request failed");
>> +
>> +	if (!cxl_await_media_ready(cxl->cxlds))
>> +		cxl_accel_set_media_ready(cxl->cxlds);
>> +	else
>> +		pci_info(pci_dev, "CXL accel media not active");
> Feels fatal. pci_err() and return an error.


As I commented yesterday when this patch was pointed to in another patch 
review, this is unnecessary in our case and it will be fixed in next 
version:

cxl_await_media_ready will not be invoked only using the accessor for 
manually setting the media ready.

Thanks


>>   }
>>   
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index 0ba2195b919b..b883c438a132 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -24,4 +24,6 @@ void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct resource res,
>>   			    enum accel_resource);
>>   int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>>   int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
>> +void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds);
>> +int cxl_await_media_ready(struct cxl_dev_state *cxlds);
>>   #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2071.outbound.protection.outlook.com [40.107.236.71])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 16CC61B86C0;
	Fri, 16 Aug 2024 14:57:41 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.71
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723820263; cv=fail; b=T8Etl/TCkPKm8xcJfCcCD/PvdnDdUgI5ok1h20X2D52tVizoVt2tV77JMyj61ZDucnBf+wEXt1kS/sKyZnhV28l9l/mAP9dli77XVkTKzJfZl3q4zFqrcO0nIkW+ZHjI9SCa7gIe60aOiw0QmQFBH1YZLD1llCfQe7v5sJkj86s=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723820263; c=relaxed/simple;
	bh=rt0TgB4HnUZi7l1l6VVfMRUddgzXDweYsRwpNESAbls=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Q1EgEAjSh4QCuG17a+nBSs2PXnc58X9YeQedG11wFEfNOgKMlgf46gdUVH2zClwv3EWnfagRd3iaSE48Ozxue/0Zq9XUauaWpPpfcnRBH3XKWFA8aU9TpBvyMeltqOMXukewZcXd81jYe/S6W2jzDd2Bsktcf3uEH5kDg/DnqtY=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=2U31AfM6; arc=fail smtp.client-ip=40.107.236.71
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="2U31AfM6"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=gVo1vbP4d5eD1FbpC3hFHcHiuMfV/DPH9L2vyUcyx9H8RDKblzEC2pJ7slSBckS7ffey9riat9hm+hPyPa3GRAFBwguVKmZoFR68FuQQM938eU6jt4LOAoMyxMJqW+qigzFngzQLO7gEm9hkxIPk2QQoNKZyYZw+R2zx7RjAHTFIPgHT/fbvcoZm8eiv1w+LotEXz1VrhOdaW7zbuWhzd5/sof06XdU2RTripOgfulSPVGzTaUotrSGdHeO1JtcIJUS4+6t29/qWqvY/YhIs5+foYnBAdtEZEeiyp1SLQI8A9u/vyvqEtxA1kSSEyArGSnZsjL8+08VJBZUYHM18LA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=/REGhs0WSXrR+WKSEvyPXuNox9N7hk5m/qLykCzD+ss=;
 b=hJF9R6XC7IkoPtb0zuh78863YZSR+1eToR5OwK+bH21fVYUbAfyDsAHmlP4dnYy3v3P/hMfM4FEsBNapVTkDapVZ0x1I6T/xFlQqn+19S3geO4Ky9i/Ykg9rAwRpmCOZ9GfNiOPjCMgIEJQ/IEYo7qVbd+7gK88m9uR4BtZGvKwz95mctG7iiODzqK2+CqOB+wPiqnqwwRH31P9MXig7sRAPqWoqYO0qHw4urvb6pvW0yFS40ZzItNWsYirZXFaObME6czMAklY6Cx76jBWlBJWVJoscmgxNJGWUlDCUvyNuyo7UDfKC9LibA35PAQbTgrtfn3p5MwRLLkKDF0N6vA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=/REGhs0WSXrR+WKSEvyPXuNox9N7hk5m/qLykCzD+ss=;
 b=2U31AfM6erNwbpwGA2m4b5DW0t2BtIZCDhooaFrCzqgKbyFzmUkuLOIK0Pz8tV6KRpMid81m08dmfDIlITbFVQA8txH1PrcLEONpSMCy6h2OyYWdhTgxEQZNVEWg371uAiWdnCA6r4LbjTl8/97LFkNJ+oYLwSDuOKjZRj3TSeQ=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DM6PR12MB4266.namprd12.prod.outlook.com (2603:10b6:5:21a::22) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.19; Fri, 16 Aug
 2024 14:57:39 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Fri, 16 Aug 2024
 14:57:39 +0000
Message-ID: <41dee583-c5d5-a4f0-cde2-7e0e550ff05b@amd.com>
Date: Fri, 16 Aug 2024 15:57:05 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 07/15] cxl: support type2 memdev creation
Content-Language: en-US
To: fan <nifan.cxl@gmail.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-8-alejandro.lucero-palau@amd.com>
 <ZqFy5Qsg_uLncLRr@debian>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <ZqFy5Qsg_uLncLRr@debian>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO6P265CA0011.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:339::17) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DM6PR12MB4266:EE_
X-MS-Office365-Filtering-Correlation-Id: 34c8f523-4e50-46cc-048e-08dcbe03c583
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?RlZnRFd4LzRHZ1hsWHNJaVVRTFJuZ0I2cUkvSWsvampDWC83NWdRazkvWFlj?=
 =?utf-8?B?N21pWkdINks1cXluQ2RNbHNTbXg2OWVuVVRJbFNSdUJJQy83NHdoeXB0aXBC?=
 =?utf-8?B?OW5TaHlXeWFIdWlOb09lczhUNzMwOUZsVVRVajZTcEVmQjVsQXpYVU1GdWdN?=
 =?utf-8?B?aTRKTHR3YjFqMm1BMTltNDQvVHMzZElNblh1MUpJMUF2VkZwMjVKc1dOL3Va?=
 =?utf-8?B?NEtxTGMvNUNHVTVaTUZpUHZoa1dQRWlNRklPTEJYRFVBbW1NZlh5bTNYMGJO?=
 =?utf-8?B?U0ZYY1JORnpyKy9mOWo0SVE3ejFLWHprbXNuME1iZ2pZLzlkOTB5OElLWmps?=
 =?utf-8?B?NVhMK25pUkp4Y0tSK2hkWWU0RTNHZmJiOXY5ZVQ2L2RuQWc1UDRtS0YxNEpU?=
 =?utf-8?B?a0E4QXcydWEwdlA4QS9DSUFoeVFQYSt6VDR0RER2UHRGenl3VElZWUF5YnlL?=
 =?utf-8?B?cFRobUlIQkZuOTc3OGMvUlBsbXdESENIYXRIMHhvOEtRZFVPdWRGb2Z5WXlk?=
 =?utf-8?B?azQxcS9ZbHBSa0xzS3hKdVlJeGxlZ2wwN3p6N1lpUG9ONllJa1Jqc0VUa2w4?=
 =?utf-8?B?MWpuOXhTeVE1RHlTNHptdExheDIzTUZ6VmhoVFdWM2RjdDd2T1EzVWdsSUI1?=
 =?utf-8?B?b0tGdGlxcDBkOWhFNFFHSGh0ZWFmeFhMQ0JFNE5hQmUxMUJnL0FMeXU4aGMx?=
 =?utf-8?B?SXdpd0hVTWdYeTNoMUVSZDNWZWZlU1RoaUxMQmF1YWZrUEp2dHdmUXJ1QjFK?=
 =?utf-8?B?anczTHZhaGhBY1RxOVZSZEkyaUwxdDZkbG1xcUQ3YUNPSjJReTFad0h2TDJF?=
 =?utf-8?B?K2RJbG83b2ZNSjdFN2xZQ3lWOWFuWWZtN0xXOTV2WUlWSnFVYk1vb3BGU29z?=
 =?utf-8?B?cVNaR1FLYXdUSGV0SzlPNEhnLzdjRlFYeTJjVUJRNUltdFZmdTFzSHV2dUdP?=
 =?utf-8?B?OFNPNTVaUDcxSUwwd2llYXZNRzFBaTZERFFkU0xmMERGeWltOEhRNnZPeDhY?=
 =?utf-8?B?ODJzOEdEeGFiVmV3R1hqQzYydVVBOHFLU1lPVmV4elcxRTZGTHlVdG1JQUFL?=
 =?utf-8?B?dEVJOElVQkNJcU00MTV5TytFbFMzVVZ6dEJRMkdRZVdZQTFFVXNWczlZNDEw?=
 =?utf-8?B?elplYXQvcFAyT2JzbVpPc2Ric2FsdlFkaEJhNjVjZmdpM1hrenpGUjV6cU9r?=
 =?utf-8?B?QmxIWFBRTzFSWVo2cHhxVzg0QjVYOERGR09HcSt4bGs5bTZJaFVTWC93dmxC?=
 =?utf-8?B?dkhlWG9HOGd2bmNXRXk5dUhoMDc2Q1VoUVByQlVGWm5hRFpYN1p1MDJHT1B2?=
 =?utf-8?B?a0lMbWF6QW4weG9DU0ZBbC93MnY2VmdOa2hicDZsODFtMGc4Y25WSUFwZlgw?=
 =?utf-8?B?Z211aWE0Tm4yZEdpcjkvaFB5cFRpUW9LR1FTdVh6TGNLVGd4WElRT0IxWVN1?=
 =?utf-8?B?QXkrdnlCNXB5OFpvVzJYUEZFdmwza1BBYVo1WWZId1VFRlh4emdZeFcydXZG?=
 =?utf-8?B?WHJ3RnRwdVVJeGt4U2tIYWFHaEdmMHV3WUF5OE5YVFdxZ0l1SG9mS3dpZi9y?=
 =?utf-8?B?RExLWG95ak0xcG1JaEt2dU14M08xYTlrWUpSa3ZlQ2ZweGJOMWpBOTJUbFZj?=
 =?utf-8?B?ZjFHNHpya3VoYWkwb2JudEFZaGxqdlRhUUUwbWg4bXNTUktmNk9ObGdDeTl4?=
 =?utf-8?B?Ui9nc3A0U1hvZ3lSdDJ4eFVQM2w2NjZteXN0dzNVTEVRVGpQOW9MOUhEakdt?=
 =?utf-8?B?YW5yNHhsQ25Eak56RTlIemFnUFIzSlUxNjV4aU5uMGEzTjNkT0I1dWNTcit4?=
 =?utf-8?B?UFh3ZkRWM3RoM2twS3BpZz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?ZlRGVkZnVHhaOTVvOW5YU2ZGcFdKZlJZcGhyVGVhcEk5V3VJZS9XVGNrTWc1?=
 =?utf-8?B?dVJlMU4rcTZBN2pNdzFWMVpDenJJUjJRbS81bFZUY0JlYWV2TXVuZlFxZkEx?=
 =?utf-8?B?ZFFWbG5hZ0p4T3UyNUdaTjFpMCt0SDF1VFQ0cDVKcWN6emRQamhTNkxDNExI?=
 =?utf-8?B?aFdUVW4yZldUSVg0dlJmZnFWaUpnZ21QT1FMVGpLR0hLSGdpZTNtMkVySk1a?=
 =?utf-8?B?M1ZERXpsWC9PWm9kekE5Vm8wRnlqVmNlckdmWStwSE5LR1UwQSt3bHRJWlFj?=
 =?utf-8?B?SHVMM28zK0lKalZIcjdnVzhIdlpFL1N5dGVSSXpjSC9vVW5pSlZSalpiaW5x?=
 =?utf-8?B?cWRZSVFOUmVRc3ZYeHhOSWF2NnNFQ0NEY0V6b3ZLM1hKQTlqRGxwekovbWVn?=
 =?utf-8?B?TE1yNnE3T2RrVW84a3FVK0NEZHZJVW5Ka0c5bG55VHRXS3EvNWVycWIxdnhK?=
 =?utf-8?B?eEFydGxSdlBZeGJCZityWHJ1VlhFQjVOK1o4b0Q3ZHNDUEg2eVo2Ylp2cm9K?=
 =?utf-8?B?eGlPYVRmSGFYRVU2ZFZ1ejQyU3VYaHFqWE1POW1TVUc2NS82M0x6NDgyNTFM?=
 =?utf-8?B?YmpGN3pvSkIwcURDdHNiNk55VmVZQmhneDUxbzd2VTlzc2RaS3ozcngvV1hn?=
 =?utf-8?B?OFhFMmxjTDVUU0ZZTjEvY1l2cE02L2YrdC9aNTNUeUw4SlVXN1hnZ1JIRVdI?=
 =?utf-8?B?QjBnRHloUGdaU1ZaUDZSNXZFNXhHZ3lBeWU4SWtteU5PVlM1UE05SUcxM0RW?=
 =?utf-8?B?ZTkxek84VVV6VjcyRTZMWmQySERPbEZxc3JBMUxNSWtaamszRzlEWFZqdHhD?=
 =?utf-8?B?dzBUTWJuWHd0K3JIZFFycVlRYzI2ZVQ1TzJCMEJNQUdKVFJZcTN3K1hRNXNQ?=
 =?utf-8?B?VkJoaTZMdUQyN09HK2FhNDh1bDdJa3J5c3BSb3NTUDFhV0RCa1Z1Y25IR1d3?=
 =?utf-8?B?ZlFqMklVS3dqVXM4MXlnc0pZMGZVb3VrcVBBaC9MMTladlZvWUdIV0pOZzNs?=
 =?utf-8?B?WmVsMjh6eitsY0h3MHNyZGpnclg3UlhNYTRSQTd2Mk91eitlaUNjYk00ODBk?=
 =?utf-8?B?OXZiMWxXcFBFQncwbkZqcFhjQUFXYnNpaFFyWnFxQWtlbHQvS2NkZVl0ZW9k?=
 =?utf-8?B?ZzREWlhkY0dsckZtSWRWM0RZL2ZicEVocXF2cXczb1dsNDl1eURRUnU4dExp?=
 =?utf-8?B?bzh0ZUFLR1VSMjM2SXVUTkllT2ZiNnVlU1RQT1NqS3hOYks1TmwyREVwdTZQ?=
 =?utf-8?B?dnc5L0NsNm1CN0hCQnltK1VEUXE4K0JKSlFzYTIzdGs1S21Hd1dxejVuT0tE?=
 =?utf-8?B?enZMY1ZrSVd2aUFzSytSenAzMDVkdm5GOVp6bTJqVHpLc2lUSWlSS2xFUmlL?=
 =?utf-8?B?d2NqRXpuZUxuSklNVzV4YTNKRkxGNW5pVTU1bDdBT3lUMENIRE5wVTV3RXk4?=
 =?utf-8?B?VGpRRmtObzhaNW8vcGRvcDJkdm5BYlZ2eVRmcit4d3laWnJQSllkRCs1S3hB?=
 =?utf-8?B?MnU2SXlHYUMrNDIvanNnVVZ3cmxPeWtEYm1zZ2g4ZW11KzBLZTB1Z045Wlc1?=
 =?utf-8?B?V0x0WkRHaDZQSXBzeTdOSkY0SXdaaXE3VVBRaEgzbFBnUm9mbjR4cWVPcjQw?=
 =?utf-8?B?YWd4djNhQkdUM0xncWNETEwwNFk3L291SjJDY3QwREg1YU05c0JFVmhUUllw?=
 =?utf-8?B?Ty9QS1pQZGUzd3hjZjFFUDlHemhXWVoxczBLcE4yOFlrelI5eit2YWZ6Z1VB?=
 =?utf-8?B?eC9FaFRHL05Yb3lqRjAwS1BWWHZmbG01dFhZRnFBYjJNSU41SXcwSmVDakFU?=
 =?utf-8?B?T0o2V1pybGxyVWdpN20wdHJUT1BJWGJsTkdVQVhKc0VGcHpha0pDakxEdnNG?=
 =?utf-8?B?TG8zTDlpRTJQeEhhbitHOU41eXBDTjk0elZLc0syME1tdm1LdUQrdjl3VGN3?=
 =?utf-8?B?aWl1WTdhOVZVbTFaU2xycUIzTSt2cWpRVGZZQzlJeGlWN3poMXdsTy90cFUy?=
 =?utf-8?B?SkI2dXVuTlNVcEVTUnFEaDlEZC9yY1Yrb1NOU2paUzVFdC95QnNQUFZpM0Vu?=
 =?utf-8?B?Zm5uVVJCSlVSam5uaVlPd05US3dQRzJodUtuNmlsZG9mMTRhdDhkOHNkcWJh?=
 =?utf-8?Q?tSOXWvqVuighVAQMIXJghQvw8?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 34c8f523-4e50-46cc-048e-08dcbe03c583
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Aug 2024 14:57:38.9883
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: XoMeuBd4+7aMqqj16vd9OXOIbB62ZRFUHqrh/r59jQEuM2QJ3W9Ao5JPx0WVAFCIk0sj+dtIr60IhRiQCcF1vw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB4266


On 7/24/24 22:32, fan wrote:
> On Mon, Jul 15, 2024 at 06:28:27PM +0100, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Add memdev creation from sfc driver.
>>
>> Current cxl core is relying on a CXL_DEVTYPE_CLASSMEM type device when
>> creating a memdev leading to problems when obtaining cxl_memdev_state
>> references from a CXL_DEVTYPE_DEVMEM type. This last device type is
>> managed by a specific vendor driver and does not need same sysfs files
>> since not userspace intervention is expected. This patch checks for the
>> right device type in those functions using cxl_memdev_state.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/cdat.c            |  3 +++
>>   drivers/cxl/core/memdev.c          |  9 +++++++++
>>   drivers/cxl/mem.c                  | 17 +++++++++++------
>>   drivers/net/ethernet/sfc/efx_cxl.c | 10 ++++++++--
>>   include/linux/cxl_accel_mem.h      |  3 +++
>>   5 files changed, 34 insertions(+), 8 deletions(-)
>>
>> diff --git a/drivers/cxl/core/cdat.c b/drivers/cxl/core/cdat.c
>> index bb83867d9fec..0d4679c137d4 100644
>> --- a/drivers/cxl/core/cdat.c
>> +++ b/drivers/cxl/core/cdat.c
>> @@ -558,6 +558,9 @@ void cxl_region_perf_data_calculate(struct cxl_region *cxlr,
>>   	};
>>   	struct cxl_dpa_perf *perf;
>>   
>> +	if (!mds)
>> +		return;
>> +
>>   	switch (cxlr->mode) {
>>   	case CXL_DECODER_RAM:
>>   		perf = &mds->ram_perf;
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index 58a51e7fd37f..b902948b121f 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -468,6 +468,9 @@ static umode_t cxl_ram_visible(struct kobject *kobj, struct attribute *a, int n)
>>   	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
>>   	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
>>   
>> +	if (!mds)
>> +		return 0;
>> +
>>   	if (a == &dev_attr_ram_qos_class.attr)
>>   		if (mds->ram_perf.qos_class == CXL_QOS_CLASS_INVALID)
>>   			return 0;
>> @@ -487,6 +490,9 @@ static umode_t cxl_pmem_visible(struct kobject *kobj, struct attribute *a, int n
>>   	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
>>   	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
>>   
>> +	if (!mds)
>> +		return 0;
>> +
>>   	if (a == &dev_attr_pmem_qos_class.attr)
>>   		if (mds->pmem_perf.qos_class == CXL_QOS_CLASS_INVALID)
>>   			return 0;
>> @@ -507,6 +513,9 @@ static umode_t cxl_memdev_security_visible(struct kobject *kobj,
>>   	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
>>   	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
>>   
>> +	if (!mds)
>> +		return 0;
>> +
>>   	if (a == &dev_attr_security_sanitize.attr &&
>>   	    !test_bit(CXL_SEC_ENABLED_SANITIZE, mds->security.enabled_cmds))
>>   		return 0;
>> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
>> index 2f1b49bfe162..f76af75a87b7 100644
>> --- a/drivers/cxl/mem.c
>> +++ b/drivers/cxl/mem.c
>> @@ -131,12 +131,14 @@ static int cxl_mem_probe(struct device *dev)
>>   	dentry = cxl_debugfs_create_dir(dev_name(dev));
>>   	debugfs_create_devm_seqfile(dev, "dpamem", dentry, cxl_mem_dpa_show);
>>   
>> -	if (test_bit(CXL_POISON_ENABLED_INJECT, mds->poison.enabled_cmds))
>> -		debugfs_create_file("inject_poison", 0200, dentry, cxlmd,
>> -				    &cxl_poison_inject_fops);
>> -	if (test_bit(CXL_POISON_ENABLED_CLEAR, mds->poison.enabled_cmds))
>> -		debugfs_create_file("clear_poison", 0200, dentry, cxlmd,
>> -				    &cxl_poison_clear_fops);
>> +	if (mds) {
>> +		if (test_bit(CXL_POISON_ENABLED_INJECT, mds->poison.enabled_cmds))
>> +			debugfs_create_file("inject_poison", 0200, dentry, cxlmd,
>> +					    &cxl_poison_inject_fops);
>> +		if (test_bit(CXL_POISON_ENABLED_CLEAR, mds->poison.enabled_cmds))
>> +			debugfs_create_file("clear_poison", 0200, dentry, cxlmd,
>> +					    &cxl_poison_clear_fops);
>> +	}
>>   
>>   	rc = devm_add_action_or_reset(dev, remove_debugfs, dentry);
>>   	if (rc)
>> @@ -222,6 +224,9 @@ static umode_t cxl_mem_visible(struct kobject *kobj, struct attribute *a, int n)
>>   	struct cxl_memdev *cxlmd = to_cxl_memdev(dev);
>>   	struct cxl_memdev_state *mds = to_cxl_memdev_state(cxlmd->cxlds);
>>   
>> +	if (!mds)
>> +		return 0;
>> +
>>   	if (a == &dev_attr_trigger_poison_list.attr)
>>   		if (!test_bit(CXL_POISON_ENABLED_LIST,
>>   			      mds->poison.enabled_cmds))
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index a84fe7992c53..0abe66490ef5 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -57,10 +57,16 @@ void efx_cxl_init(struct efx_nic *efx)
>>   	if (cxl_accel_request_resource(cxl->cxlds, true))
>>   		pci_info(pci_dev, "CXL accel resource request failed");
>>   
>> -	if (!cxl_await_media_ready(cxl->cxlds))
>> +	if (!cxl_await_media_ready(cxl->cxlds)) {
>>   		cxl_accel_set_media_ready(cxl->cxlds);
>> -	else
>> +	} else {
>>   		pci_info(pci_dev, "CXL accel media not active");
> pci_warning() ??


The code will be modified and no error will be needed to be handled.


>> +		return;
>> +	}
>> +
>> +	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
>> +	if (IS_ERR(cxl->cxlmd))
>> +		pci_info(pci_dev, "CXL accel memdev creation failed");
> pci_err()


Yes. I'll fix it.

Thanks



> Fan
>>   }
>>   
>>   
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index b883c438a132..442ed9862292 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -26,4 +26,7 @@ int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct cxl_dev_state *cxlds);
>>   int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool is_ram);
>>   void cxl_accel_set_media_ready(struct cxl_dev_state *cxlds);
>>   int cxl_await_media_ready(struct cxl_dev_state *cxlds);
>> +
>> +struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>> +				       struct cxl_dev_state *cxlds);
>>   #endif
>> -- 
>> 2.17.1
>>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2050.outbound.protection.outlook.com [40.107.223.50])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id C92B91B373E;
	Fri, 16 Aug 2024 15:00:49 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.50
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723820451; cv=fail; b=XekOVOqCIqAgkuQuGrS5Y+9l0Jl5Jc+5fmEJEW7saM/RPlI06KS9hqAYSAw8dOmbMXRplI0Yphw8+5AeX8hHOul5V5O+XLKERA4tL+Rd3tQxtuhxss/W6yue4fLTIB9NkoR3eWLBUbIcZIoqs1zRZ3MRuDsIivDoSbrRSU7HZvg=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723820451; c=relaxed/simple;
	bh=SGUx3K5NMP6fpTkObJmO7nc3oONEGowBjj1c+71H8cA=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=ueSBsNqXiUe29nnoUJQrF3SiHaFFtEwBJnPQYflOxnwVerLSFb0SbTBWjVCkw0hdpf9Lhi220VHy8v0S/gF3LViN+f3Nuw8Cw4dd1FsQ6a2VDUzDYVcIz4N42h4PFALgXhLjEtNSIOqIHMWZRLfrTgHhuXp1ciRoBDcQVrq0akI=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=pPVupozX; arc=fail smtp.client-ip=40.107.223.50
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="pPVupozX"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=CvMfHloTWBCTYPVL1mH/et30/dVLc3Hy2gRBM7//V9UbSFNXTLT8Uw5+6OsZNuPLH91Elfgp1AYfQzGm7Hl+IGJgt6s7FtRwTzmfV/G8S9woZRWPIJSUvLDbl9w4HLYLdhbWPGlobvNcYtRteKk9vgiA8lx1PdbJwiA2nhpk3z0+YnKBsTKoPkRxgnL4lySqNY/BwTA+SyQr5c/RQ47tbAtxKaPtOQWp5D0JNYWnaVxly4ZcUnfPn8l6GQuOEkMCln9a83LCcPROAjuogp83XIEU2xKEE+DsdMaOraMQhQ4qOhDuqt3PWPXCg51ndNUI1dz00veMYxzsT/xyUUyYng==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=GDzq8qBInC9kp508LPpDzuMnjQY7j1R+uUJN7SNlFnI=;
 b=SLnfh4sRGPjEGiu9+Nq3mp2SLenwcrw0t6wtYv0AvJjxx36hZvj//qSkOukgNKjK8hQl1wNEwcWWa1bcWE5OhKlsrVppYfVCK939e3mouqSB2hrXCQU+Dp3Eaky/V4GemU3Vfdd5SmRUdYW6IUwt9iCYYBNtVSyO5OR0BGK3ueVUEE8YTyIw+/KEl4eCUegDws7LhMCx1x54jc+gRtrHRQCzJvmbE49ELW6Jz1wf9kOK882Ke8zBty4uvu3JePDx9UOZc5v2BDO+HdnoplCsCRE4Fl4133FY4wgZl6KErJ/mLqTcnse0VDicgTSlh3DbAfSYxOv1E1eUERYdWYHcBQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=GDzq8qBInC9kp508LPpDzuMnjQY7j1R+uUJN7SNlFnI=;
 b=pPVupozXli24Xmc59fhYOiD+pATaVP20WV2MuMDB3/Y5bLQz8PLAf/aJLdA6iS9fXMlu5CtAefvzU0+wmCKxUWY3Hy6MGUkroVipSJTTxsFk/A4qxVT6P2e+cI6v8xYFtP9CTLtCktIMYTEdR8I6OjGtf5Ab9YnimuTL7ajsmuc=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH7PR12MB5999.namprd12.prod.outlook.com (2603:10b6:510:1db::20) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.19; Fri, 16 Aug
 2024 15:00:41 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Fri, 16 Aug 2024
 15:00:41 +0000
Message-ID: <05ee01d8-4687-b44a-effc-1c14cd28d79f@amd.com>
Date: Fri, 16 Aug 2024 16:00:06 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 07/15] cxl: support type2 memdev creation
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-8-alejandro.lucero-palau@amd.com>
 <20240804183139.000019e2@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804183139.000019e2@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0024.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:2ae::19) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH7PR12MB5999:EE_
X-MS-Office365-Filtering-Correlation-Id: 9a660dab-c00b-4484-ce59-08dcbe043205
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?bWdzTkVLSnV0YzJMVzZGZ3o1S1ozdCtIZ3BFNGdXbnlkZk9GWGRlMW9CUXRF?=
 =?utf-8?B?eDR3WjAxOUNCT2txb1RNaVZ4SnIzU0h4aE1lcTdobDQySmVDZTEwdWhLd3lu?=
 =?utf-8?B?YmxpZ1UvalNoTUJyVlBXM1EvazAvbEFBZ3Fjb2FRNWNndEVxZzBnbmRPNkpD?=
 =?utf-8?B?QlI3aU5VRWozSDFPaUlGRWZHLzhtOWxpampjYmo0TjJ6K1NVVDV3TzZhOFl6?=
 =?utf-8?B?ZWFOMEVPeE96WC93N1R6TUh1bzR1Nms4T2UyS3laTE9JcHRoMXVMdlZRTkJI?=
 =?utf-8?B?NzRhSk9yQmdEUWJOaXB2V0lQNWtKS3d3djhoa3lyc2d4d3R3NWhiVkp0eFBJ?=
 =?utf-8?B?RkZHSGpHQnNoM0FHSHdrb01QMm9laC9hUVhaWVNoT3R3Sk90WHlpK1ZiUk5U?=
 =?utf-8?B?M2JZbGY0Y2xhaEZWamtTcnl3MFR6MGw0ZnZ1REx5UE5FV0hlb1h3QW5WY0lL?=
 =?utf-8?B?RnNLeWRJMFRoakVuT0JQQU5qQmgzSitTejdqMlFHTTJuTTVYMWx2SDkvaU92?=
 =?utf-8?B?SWYwK0c0a1VIRUFqbnc2dk1JZVYwRHBhQmJrQ3R4bm9vSFhTeXUvMzFERmc0?=
 =?utf-8?B?eE9lbXQ3Y2JLWHNGV1pqam1HNWdacmdzT3JLZXhMSk85K2d4K3J4MDRIUFc2?=
 =?utf-8?B?OE1GZ0sxRzRpM3JNRE9ldjBZakVPQWFZQmRzeFF1SENOWGZnYzhTeHVFK1NR?=
 =?utf-8?B?dEEydHBhMXMxbXlwaXdFbXlMa0FreG9JWC9UT2Z6eWJPWGkwSlQrR0JlMncv?=
 =?utf-8?B?U1Y2Z0pCeFFUWlBxM2c3TkV5dEhCODduUE9TcDlPb1hCbHJ1dGE2SXM1MlpK?=
 =?utf-8?B?c1h2UFU3bkxVZU56eXBwWkU2dllrcUVsU3NiUEY2NXMvYUwwcGlVRDRDMWlF?=
 =?utf-8?B?VjdXd3dYYkFvYVZpV0JmWWtDT2JRaEswMktOWDgzeURrUmgydmRmZVNvSUZX?=
 =?utf-8?B?RExJSXpJRnN4WXB6UEVYV1pVNjQxVFN4Q0orTEZmM3NBUmhOMWV3Y3BlVE9Y?=
 =?utf-8?B?NEV0UUo4MzFVKzloQTlKcnQyMXRqQlFNT3lmYnJyK2JSWnVRZGNHRjRHMkYv?=
 =?utf-8?B?eFpmek9xYUcvdy8vZXJteHREVlg4ZVZqa2N1MmFkdFp1K0JLN3J4c1pVV2Zl?=
 =?utf-8?B?VzRVSVB2dDdTY1hBSDdiZmdPNU5Ddk05cXhxUHlaTXpWeXNqOEFJZjdsRlIy?=
 =?utf-8?B?eDA1T1E5S0FHbU5qamNyZk5WS0V6cko4WE5yMmpOQmF2YW5ic1FyM3MwWHI1?=
 =?utf-8?B?QTExT2NJaURqdnRnZzVRWmdUQUwrZzdYZU0wZlgyZVM4OHpQaGNMb294V1c4?=
 =?utf-8?B?Wkw1RExtaDc5RGRoUkRDRk5jTEpJWG9leDQ0N3ByNUVOWTJyVDRabFFuTVJ4?=
 =?utf-8?B?NzZrR1k2dXRQd1BSampUWXZJWlJZVU5wdVNaNFJST1hWUmtMSEU4NUtyL1Rk?=
 =?utf-8?B?bVBmajJuTlliNmFvZGJPYWErVEZLT1A0L1lGN21zSFVMdEVjWHNPNnR6TThs?=
 =?utf-8?B?Ri92NW11Nm5ESVRlb3c3NWVEY0lMMzg0YUJLdUJzUnZwTC8wSEFEbWlaZ0Ru?=
 =?utf-8?B?bXRrVUdqVzVSMVRKZHlqSGFsZFdEbjVxWGs2R2RkWXZ2bGlNcE50MEh5RUtJ?=
 =?utf-8?B?NmlsdU9FclUrNWJZVGJtR2QwRWdTU0VKZHorKzZtaS9vbUYyTXZvYVJPQmRH?=
 =?utf-8?B?cUVkYnJuNzdqb1JzbzNtOFJYUHp4dk1zMWYyd3E4MWY5WHNieVhzRVIrV1Uz?=
 =?utf-8?B?c1dNZ2dwL2FsTldEWVlPS0Ura1dyTmdCOXJ0eENENUxUU3d3RlR2YXBUbnBi?=
 =?utf-8?B?T0J5THVtYkFzdWQxOXJrUT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(366016)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?UzU3bE5jRjZRS25ENFF0eGFMZGRtMU5McHR0S2J3aWZlWXJnSXVpZzVIcUJj?=
 =?utf-8?B?U3c4dVk2YTdGNlA5REswNUVvOHl2UW04TjU4cENwSVFxRXVUcVpRTCt3WXN1?=
 =?utf-8?B?aDVXUjVsaUZwUjhveFVGRTFySG1LaDhuR2RDZmh5WXlMdURpYkQ3UlhucGJT?=
 =?utf-8?B?NSt3eFBOWlpHU29vbTdVNkdlREs4d1JYbXJiNHJSeHEzSkFzS0s0cVJUSjI3?=
 =?utf-8?B?RTZFdVpoSjhZYUZKNlIxWC9pL1UrdUNVTHd0ZGJKL1NnZ2pmb0liRzhrWDJK?=
 =?utf-8?B?R0E4NklaWVlwVGtvdGlrME93U2JZWXBCUGJhZklUeUlld3k5QnpVbFNWZ2RN?=
 =?utf-8?B?QVQzYXo2YU4rV2VkK3ZpTXdpUGFROWppOFNoQjM0dkUxdGdOWVZDc29UcjlW?=
 =?utf-8?B?eWkzZjVhSnB0YXFUVTZzRHBFQXM1eVpiV21PcmpOUm53TS93YkVrVHg4VXBp?=
 =?utf-8?B?elhtWjZNTnh6QXlCMlAxOHo0RWp6dXM1MmxlZTFMMTc2dUJRbkE5dElyTEhL?=
 =?utf-8?B?UjBwOHFhZnhWdDB3dElPSGpSbHl4Nk1mQklPZDFsYmljM25PM2VTdlZlOGlY?=
 =?utf-8?B?eWZjNzRrS3ZWc0Y4cVhrcDRkbWUxWUVYOE8rNUJub2xEZ05pQzRQSzN4OUp3?=
 =?utf-8?B?TWc4alpOaXBlM3dMVnU3QkQvREhNV3Mwd2ZDcEZlMXIxNGlpNXpWNTdCTjVT?=
 =?utf-8?B?VEhEMWxUZWZIOVBtZHpkUndMNExUR2ZtQ1U3c3lNczF6cHNlWTU5aHg4Njds?=
 =?utf-8?B?UkdZVDlLTHhLSG1wV2RrRDhBRUtpQitSTXI0YWtaeWcwRUwvVW1tRzQzVjhO?=
 =?utf-8?B?TWlkaXE5dWNtTzkxcE10MkxUaWQyK0tSbm15aG1qV0tlUzVDaW9lZDQ1M1FS?=
 =?utf-8?B?WFdUaUFQLzJJZXZFRmdmcUxhdGtxTlBHZ3dQYUgrZ3RUa0xSVXFwcEZNaGJi?=
 =?utf-8?B?MkpjN3M0ZHlCdXRwZEVlbE9CWlN6TlJ6QmU0UVlhRzAvVEpUWHVpWm5NdjQw?=
 =?utf-8?B?eVBObGZDNFcyWjVXVnlEOWI4ZU0xMlIrcVBUNHROU1hIYS9NMVc5RjFCVFNN?=
 =?utf-8?B?QWFxajN6Q2xTT3VwaUhRdHkzRjZiVlNFcDdvMFplQ0tCdlVyc1JOQUtmOXdt?=
 =?utf-8?B?VkZmNjRndUxSZVJwSFRFOURpQTllYVVMQ2Vlb1lmRHU5TUdCdmJIQ0kxRWJm?=
 =?utf-8?B?RFgwMTdxQVA5UndvU21RODd5Um9EUm1MNWFjcWlUWFVNZkVrRjVNamw3aXFp?=
 =?utf-8?B?VFk4S1d3Z1cwQUgwdEdHd2I2QmJPcTRsd2J3ZGtkMVYzNGV0MkpweDRuVW45?=
 =?utf-8?B?MHEyRVY2bHF4NkRWZ2hibGhJN0xGcmlSRzA1ZmY1NHpSVU03UHJpaWltWVBS?=
 =?utf-8?B?TUZQclUwcThBVmFtUlp5aWxQU1UyeWhzME4vbUhLbGwzVStLaUV6cDJ2eGha?=
 =?utf-8?B?eVpyRFlLSHhreXI3Z1o2MmxjVlBKSm80QzdocXdMMGdtNHZ2OWZNc0hqNnNj?=
 =?utf-8?B?SE5XOTdTU0owQ1VZSkpwRUVTY1RFMzloa3pES00ybFhzMkpnc3BJYkIxZllj?=
 =?utf-8?B?eSs2Y1k0OFlkL0RVUjFQNk1WUUNCb1hFQjhSM3daUjdITlRhRWQveUFZdCtL?=
 =?utf-8?B?c2lGeGo2bUU4aFplTTNaL3d1SkJLK2pNdEY5UnllQ09Nakoxc25iV0VHc2Rk?=
 =?utf-8?B?K3VHMUZTMW56TzRwNnpXUGlHVHRma0RMUytsME1YUjhIYkpsZGsyV2QwUE03?=
 =?utf-8?B?ZElZdDEwOHFqWGR1ejltRDN2bU5HZEl3MGdRWTJ5dlZ2enRnUDAzU3pLVCtE?=
 =?utf-8?B?cUh3SnRWWVRuOG14NXI3QytFaTlEeXVIUDlPOW5hYmxiSUpVVVJxQnFhSjl2?=
 =?utf-8?B?THROMEVkQ0h2cWx6aDVlbGZvTlc3ZWdXVDYydW81NkRLd3MrWU1NZEpSQXFh?=
 =?utf-8?B?NHg1cWVJMExQMDZSVUEyOW1aQlZsOEhiRXhPMEZ3L3JYbFJUMGZNN2RlMytj?=
 =?utf-8?B?dEppdnJIbGMrREtFaEhMV3ZIK3RFWnJ0dEdZa1YvYnNOZnJqanArSVFvZUZj?=
 =?utf-8?B?UndRYytuQTZ2V0dPdkRVZG1aMVdGalFVTnVoci9jdnhONjhTcnB1UExOZGdO?=
 =?utf-8?Q?pVUsMDylt2j96y2mQHpBf1nMK?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 9a660dab-c00b-4484-ce59-08dcbe043205
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Aug 2024 15:00:41.0377
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: QnzYaUZlNkQSF5RWiffIAeWoz1aVR+pGCVOkczB6n8NI2ebNrip1NBzVgmUbrYleDxiPhfR++Kr5W/AdMrXp+g==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB5999


On 8/4/24 18:31, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:27 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Add memdev creation from sfc driver.
>>
>> Current cxl core is relying on a CXL_DEVTYPE_CLASSMEM type device when
>> creating a memdev leading to problems when obtaining cxl_memdev_state
>> references from a CXL_DEVTYPE_DEVMEM type. This last device type is
>> managed by a specific vendor driver and does not need same sysfs files
>> since not userspace intervention is expected. This patch checks for the
>> right device type in those functions using cxl_memdev_state.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Same general comment about treating failure to get things you expect
> as proper driver probe errors.  Very unlikely we'd ever want to carry
> on if these fail. If we do want to, that should be a high level decision
> and the chances are the driver needs to know that the error occurred
> so it can take some mitigating measures (using some alternative mechanisms
> etc).


OK


Other comments below already addressed when replying to fan.

Thanks!


>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index a84fe7992c53..0abe66490ef5 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -57,10 +57,16 @@ void efx_cxl_init(struct efx_nic *efx)
>>   	if (cxl_accel_request_resource(cxl->cxlds, true))
>>   		pci_info(pci_dev, "CXL accel resource request failed");
>>   
>> -	if (!cxl_await_media_ready(cxl->cxlds))
>> +	if (!cxl_await_media_ready(cxl->cxlds)) {
>>   		cxl_accel_set_media_ready(cxl->cxlds);
>> -	else
>> +	} else {
>>   		pci_info(pci_dev, "CXL accel media not active");
>> +		return;
> Once you are returning an error in this path you can just have
> 		return -ETIMEDOUT; or similar here adn avoid
> this code changing in this patch.
>> +	}
>> +
>> +	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
>> +	if (IS_ERR(cxl->cxlmd))
>> +		pci_info(pci_dev, "CXL accel memdev creation failed");
> I'd treat this one as fatal as well.
>
> People argue in favor of muddling on to allow firmware upgrade etc.
> That is fine, but pass up the errors then decide to ignore them
> at the higher levels.
>
>>   }
>>   
>>   
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2080.outbound.protection.outlook.com [40.107.236.80])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 93718824AF;
	Sat, 17 Aug 2024 20:33:02 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.80
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723926784; cv=fail; b=gxafnbPL1ymIjmEZnM2WAweJMyrS+30dhebaFfa1Av3D2R57GqHS95LBRNQjauumD+kKB+L+mYfnO/ZukBty2xXd28jGc0wvwbO9HjJCEgRVWXHRimOrxsu5McCV1U+eZz2ZB9/TsQjBs+YFRze/am0pUFxT7JJ7krCPlaUBMIQ=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723926784; c=relaxed/simple;
	bh=rKNlgkhB65A4i/m5FmQnDU87kGKjyxVsMXciYcPtCRA=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=RgSNfsfGMI7a3m1ndH+r5ksfF96jalPyW62ZmBdE33EOOs+mUfuroy6cUF7lQstvLybJ0GdW9esl55J/Aq56VlNZKoNmwVY5tKv8m5ze28gHEf13w77mEYZh6wwswRENwf0D1JaDPGPFjCkhjEs5zQbfzerp93rPiP7f2ef/9lE=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=fM7nDrTy; arc=fail smtp.client-ip=40.107.236.80
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="fM7nDrTy"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=JDOV1eD2p40WCVxUXIcBIMOTnD5QGJusWh4SPOuOKTiscbLyZtKq/lLpRbkz1etyJW44/yS9rU8AmAn14bVWtAdzj9TRcRb1RkWgt8uMjgyRwCLgasZC5Myix33+Eh6tCF23BzauY9iJvC2vSpHhC6IRZ2nyNKbNSXe+QBnKU0+GLpULDomQLG+kXoTNwi3dhZRexoBNz7YxMQuGGJmuJYpvMQyIh33faKcj5RVs0oc5lYU7KerUNt8M+ui0zzsKUDMCBYJ4nNgoh5Wf7ESmA14Aa9EddA6X4TzYnqmplEaWEs+ScACCJbKmQa8aNT+L+8yPD7vfltgIdRTLvgQeyw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=4wtw9uEzAQDQiye/h/kkN4VX/wpwtlJA9/FQkl9sA6o=;
 b=mH/cW4vFiSSniAZnWj3cACwE9IDpvxuh6dV8ZPya6Kx+UJuCMEBXlE2R0GZMIG4b8Kt7xppgLKoBJteezznYxA/oHixfesz1WyXZNn8XDphEFt65Cf+8HN8e6IEzwXVHlRtwM3v+65flU/cKZBDaZ0ONMC3G95pjIEEDfN2wLinqUzIHt4vDqNX/Rjnlo71DDgRwYTGQQ1j/XQDNBa+EN8vg4NtTWeBeDhh2ttjyN8GekFFfe+okmTq+scBTYgAgECKCh4rQzJAjCzQyVezKk9FpXtHACh7mUE4FWft/D4QY7NbcEjTwIj9qtYSwekWAdIbdu3EAWx1dP7wEKXuxUQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.118.233) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=4wtw9uEzAQDQiye/h/kkN4VX/wpwtlJA9/FQkl9sA6o=;
 b=fM7nDrTyTTTsyxKA6pPMHkrusY/74WoaWxOJwqI7fATj2ZBOK+qu2kXT6u5+57DDtgiewlPro7YVCuhskvl0EACzv2NBwpJql/xreNB3ueGG6VCxaYH5PpGjovFNCvV1tEfjDeUfm/Hfm8AKZ3PqFQG66gWZRVH4f8mvrVleIQgubdkAHbRrzgSTcrSBsB0bDc5xPoz6pdvBe1weuuCtiU/hF7jMYIA2yrfHai0Ysjt+AOtawMtHIHC2TJtU/wvXK1l76KLRg06/+urSRqcaTwIXgtmxBFMnmHvND09LpPPm6EHDF5HQubnmnZkTvwl4tstjZoOgB4MFbkDymQEwag==
Received: from BYAPR08CA0002.namprd08.prod.outlook.com (2603:10b6:a03:100::15)
 by DM6PR12MB4433.namprd12.prod.outlook.com (2603:10b6:5:2a1::20) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Sat, 17 Aug
 2024 20:32:57 +0000
Received: from MWH0EPF000A6731.namprd04.prod.outlook.com
 (2603:10b6:a03:100:cafe::8d) by BYAPR08CA0002.outlook.office365.com
 (2603:10b6:a03:100::15) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.19 via Frontend
 Transport; Sat, 17 Aug 2024 20:32:57 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.118.233)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.118.233 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.118.233; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.118.233) by
 MWH0EPF000A6731.mail.protection.outlook.com (10.167.249.23) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7897.11 via Frontend Transport; Sat, 17 Aug 2024 20:32:57 +0000
Received: from drhqmail202.nvidia.com (10.126.190.181) by mail.nvidia.com
 (10.127.129.6) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Sat, 17 Aug
 2024 13:32:57 -0700
Received: from drhqmail203.nvidia.com (10.126.190.182) by
 drhqmail202.nvidia.com (10.126.190.181) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1544.4; Sat, 17 Aug 2024 13:32:56 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.126.190.182)
 with Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Sat, 17 Aug
 2024 13:32:53 -0700
Date: Sat, 17 Aug 2024 23:32:52 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>, <targupta@nvidia.com>, <zhiwang@kernel.org>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <20240817232657.00005266.zhiw@nvidia.com>
In-Reply-To: <8498f6bd-7ad0-5f24-826c-50956f4d9769@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-2-alejandro.lucero-palau@amd.com>
	<20240809113428.00003f58.zhiw@nvidia.com>
	<8498f6bd-7ad0-5f24-826c-50956f4d9769@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: MWH0EPF000A6731:EE_|DM6PR12MB4433:EE_
X-MS-Office365-Filtering-Correlation-Id: a4697354-d160-4e8b-3b6d-08dcbefbc79a
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|376014|1800799024|7416014|36860700013|82310400026;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?CqRgHpWBvlzlBLuWcGZ6RBuQa+261YMMYkP91Afx6yen+jZmJF9yfEvJN2sX?=
 =?us-ascii?Q?ZUfJA9xplZ7FqDZls3lseM6ZGFBNnvnnqT9CIFqqJwEGOz8fDeTcnC0atQbf?=
 =?us-ascii?Q?eq/MulKYipO+Erwp+lK8xQ1+egQbH1sS83HyijM8NGNS+KLOmj2ERTdlvqjo?=
 =?us-ascii?Q?sVcg0dA2RB3timZ8S3pUSScS18b1ZLBxQERx1tIyEEa8T6dwjGzp5/WbyPYC?=
 =?us-ascii?Q?yzbw5XCHcPzVuikmOQ3wSOetuleO/KWY8ph9nXWlbLCoesrYVvltOrMLyWbk?=
 =?us-ascii?Q?MNmgcwmVNuG9Iq9VfiIdN/qiKtOHggw84jNAWf96PQ4LmzFmwQtNvGAhNlGk?=
 =?us-ascii?Q?F5UZUQm1fFNQImZWfz9+jG/zvVJG/O4BBM2TUJn1CbndR5IFCIO8DRYU/hvH?=
 =?us-ascii?Q?oP6c8VCePwDs/A77HiCl9STBEfLDq2RIQAePXUiJN9KIMEgGMyTrECgabcG+?=
 =?us-ascii?Q?e9b0dKEeEm7y1uvXUvslgfC2M7G2BocjBbEm7DYIycTzuqY1I01fyTaYgHLW?=
 =?us-ascii?Q?9aZmDi13lGw1yKO3bB+NiPy3GJKUOhl9Bn6oVqzA4wosPwoNBn60GDYieRyA?=
 =?us-ascii?Q?GEzG+8fRknhue7vz6yW0gzqiHALIHldnr+ApfsHShIggvcAMwDjpiV/Hmujp?=
 =?us-ascii?Q?7iL7FoBejlPMTgwO9zbOuENjDOdtHg+W7q6TJ78y2laUkw+8kZA+cxd/mceF?=
 =?us-ascii?Q?EHUocU/1bxCWYKupUdTFscbJMplJTz+0BeRalPd+CKn79JxGGhO/nXH/RN69?=
 =?us-ascii?Q?ooyv205kgCvf14fLI6MbF4Fgq3VA/bCVzbLdxaCfqhwqpu5SqQVIV7gv1nfK?=
 =?us-ascii?Q?BWYwDO51qctugjfmTEA3RBOt2NwoWBXthQk9NcQx81ClyyW9UmhkRA0dN1q/?=
 =?us-ascii?Q?jXRrocXA3ALpUYPVD8jQXNP7jvRg5JLi2w3on5sa9Udkt9YzzznKECB7rqaM?=
 =?us-ascii?Q?4MjH32De1lAQSUxhc7M7PcUIR+vf56TponlpWROOLoMcz1B3N19jxpgNmNBp?=
 =?us-ascii?Q?Ud0yjDmPXu/fiYA+ahTUuCG+KaiPFxCm+FKzy7o9drUcHcfOUlKNl5T9aT0P?=
 =?us-ascii?Q?5DHvzwu7u0JOwPUDPhQLUPDS5uHfMauoe01ihuXqxPm9Y2Rn/h5D/wra1sSc?=
 =?us-ascii?Q?9CG1wwT58iUIxIykuYNGriDBaSaRBIKvlTOGOe5k/7+ut2xl/22BEDlc3JPv?=
 =?us-ascii?Q?9+H9DL5nvNfMkYToXSRwxCWKTF4s276LDWMQpOoV5NOjlqCvrUfX/IjB3ARD?=
 =?us-ascii?Q?E7zgUL2mRzBGPL37edWb7IKe6GNzj6/ZHNvsw9EwQs9VODFWuQGyL0g3Oohe?=
 =?us-ascii?Q?x974VH4VYZydHfTH7Q4+2hW2vXZD1DZYR9uOTbFuDciIX6OjWVabyrqcwRWw?=
 =?us-ascii?Q?yStaCo9d/jrUsITKYT/4YvT0H2cae3u2ty5M5C4lGOOnduOQMQxXoiVhNlmf?=
 =?us-ascii?Q?UU7DLF9/w/ru/uy8NYMz8Pcm8fKBLjcx?=
X-Forefront-Antispam-Report: 
	CIP:216.228.118.233;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc7edge2.nvidia.com;CAT:NONE;SFS:(13230040)(376014)(1800799024)(7416014)(36860700013)(82310400026);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 17 Aug 2024 20:32:57.3672
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: a4697354-d160-4e8b-3b6d-08dcbefbc79a
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.118.233];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	MWH0EPF000A6731.namprd04.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM6PR12MB4433

On Mon, 12 Aug 2024 12:34:55 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> 
> On 8/9/24 09:34, Zhi Wang wrote:
> > On Mon, 15 Jul 2024 18:28:21 +0100
> > <alejandro.lucero-palau@amd.com> wrote:
> >
> >> From: Alejandro Lucero <alucerop@amd.com>
> >>
> >> Differientiate Type3, aka memory expanders, from Type2, aka device
> >> accelerators, with a new function for initializing cxl_dev_state.
> >>
> >> Create opaque struct to be used by accelerators relying on new
> >> access functions in following patches.
> >>
> >> Add SFC ethernet network driver as the client.
> >>
> >> Based on
> >> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
> >>
> >> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> >> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> >> ---
> >>   drivers/cxl/core/memdev.c             | 52
> >> ++++++++++++++++++++++++++ drivers/net/ethernet/sfc/Makefile     |
> >>  2 +- drivers/net/ethernet/sfc/efx.c        |  4 ++
> >>   drivers/net/ethernet/sfc/efx_cxl.c    | 53
> >> +++++++++++++++++++++++++++ drivers/net/ethernet/sfc/efx_cxl.h    |
> >> 29 +++++++++++++++ drivers/net/ethernet/sfc/net_driver.h |  4 ++
> >>   include/linux/cxl_accel_mem.h         | 22 +++++++++++
> >>   include/linux/cxl_accel_pci.h         | 23 ++++++++++++
> >>   8 files changed, 188 insertions(+), 1 deletion(-)
> >>   create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
> >>   create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
> >>   create mode 100644 include/linux/cxl_accel_mem.h
> >>   create mode 100644 include/linux/cxl_accel_pci.h
> >>
> >> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> >> index 0277726afd04..61b5d35b49e7 100644
> >> --- a/drivers/cxl/core/memdev.c
> >> +++ b/drivers/cxl/core/memdev.c
> >> @@ -8,6 +8,7 @@
> >>   #include <linux/idr.h>
> >>   #include <linux/pci.h>
> >>   #include <cxlmem.h>
> >> +#include <linux/cxl_accel_mem.h>
> > Let's keep the header inclusion in an alphabetical order. The same
> > in efx_cxl.c
> 
> 
> The headers seem to follow a reverse Christmas tree order here rather 
> than an alphabetical one.
> 
> Should I rearrange them all?
> 

Let's fix them.

> 
> >>   #include "trace.h"
> >>   #include "core.h"
> >>   
> >> @@ -615,6 +616,25 @@ static void detach_memdev(struct work_struct
> >> *work)
> >>   static struct lock_class_key cxl_memdev_key;
> >>   
> >> +struct cxl_dev_state *cxl_accel_state_create(struct device *dev)
> >> +{
> >> +	struct cxl_dev_state *cxlds;
> >> +
> >> +	cxlds = devm_kzalloc(dev, sizeof(*cxlds), GFP_KERNEL);
> >> +	if (!cxlds)
> >> +		return ERR_PTR(-ENOMEM);
> >> +
> >> +	cxlds->dev = dev;
> >> +	cxlds->type = CXL_DEVTYPE_DEVMEM;
> >> +
> >> +	cxlds->dpa_res = DEFINE_RES_MEM_NAMED(0, 0, "dpa");
> >> +	cxlds->ram_res = DEFINE_RES_MEM_NAMED(0, 0, "ram");
> >> +	cxlds->pmem_res = DEFINE_RES_MEM_NAMED(0, 0, "pmem");
> >> +
> >> +	return cxlds;
> >> +}
> >> +EXPORT_SYMBOL_NS_GPL(cxl_accel_state_create, CXL);
> >> +
> >>   static struct cxl_memdev *cxl_memdev_alloc(struct cxl_dev_state
> >> *cxlds, const struct file_operations *fops)
> >>   {
> >> @@ -692,6 +712,38 @@ static int cxl_memdev_open(struct inode
> >> *inode, struct file *file) return 0;
> >>   }
> >>
> >> +
> >> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
> >> +{
> >> +	cxlds->cxl_dvsec = dvsec;
> >> +}
> >> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_dvsec, CXL);
> >> +
> >> +void cxl_accel_set_serial(struct cxl_dev_state *cxlds, u64 serial)
> >> +{
> >> +	cxlds->serial= serial;
> >> +}
> >> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_serial, CXL);
> >> +
> > It would be nice to explain about how the cxl core is using these in
> > the patch comments, as we just saw the stuff got promoted into the
> > core.
> 
> 
> As far as I can see, it is for info/debugging purposes. I will add
> such explanation in next version.
> 
> 
> >
> >> +void cxl_accel_set_resource(struct cxl_dev_state *cxlds, struct
> >> resource res,
> >> +			    enum accel_resource type)
> >> +{
> >> +	switch (type) {
> >> +	case CXL_ACCEL_RES_DPA:
> >> +		cxlds->dpa_res = res;
> >> +		return;
> >> +	case CXL_ACCEL_RES_RAM:
> >> +		cxlds->ram_res = res;
> >> +		return;
> >> +	case CXL_ACCEL_RES_PMEM:
> >> +		cxlds->pmem_res = res;
> >> +		return;
> >> +	default:
> >> +		dev_err(cxlds->dev, "unkown resource type (%u)\n",
> >> type);
> >> +	}
> >> +}
> >> +EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
> >> +
> > I wonder in which situation this error can be triggered.
> > One can be a newer out-of-tree type-2 driver tries to work on an
> > older kernel. Other situations should be the coding problem of an
> > in-tree driver.
> 
> 
> I guess that would point to an extension not updating this function.
> 
> 
> > I prefer to WARN_ONCE() here.
> 
> 
> I agree after your previous concern.
> 
> 
> >
> >>   
> >> diff --git a/include/linux/cxl_accel_mem.h
> >> b/include/linux/cxl_accel_mem.h new file mode 100644
> >> index 000000000000..daf46d41f59c
> >> --- /dev/null
> >> +++ b/include/linux/cxl_accel_mem.h
> >> @@ -0,0 +1,22 @@
> >> +/* SPDX-License-Identifier: GPL-2.0 */
> >> +/* Copyright(c) 2024 Advanced Micro Devices, Inc. */
> >> +
> >> +#include <linux/cdev.h>
> >> +
> >> +#ifndef __CXL_ACCEL_MEM_H
> >> +#define __CXL_ACCEL_MEM_H
> >> +
> >> +enum accel_resource{
> >> +	CXL_ACCEL_RES_DPA,
> >> +	CXL_ACCEL_RES_RAM,
> >> +	CXL_ACCEL_RES_PMEM,
> >> +};
> >> +
> >> +typedef struct cxl_dev_state cxl_accel_state;
> > The case of using typedef in kernel coding is very rare (quite many
> > of them are still there due to history reason, you can also spot
> > that there is only one typedef in driver/cxl). Be sure to double
> > check the coding style bible [1] when deciding to use one. :)
> >
> > [1] https://www.kernel.org/doc/html/v4.14/process/coding-style.html
> 
> 
> Right.
> 
> I think there is an agreement now in not using typedef but struct 
> cxl_dev_state so problem solved.
> 
> 
> Thanks!
> 
> 
> 


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-CO1-obe.outbound.protection.outlook.com (mail-co1nam11on2088.outbound.protection.outlook.com [40.107.220.88])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 1622CA921;
	Sun, 18 Aug 2024 06:55:23 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.220.88
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723964125; cv=fail; b=q31W9rpAtSBCZDLax8VW8Mc93GIafINt88ScZa0dVu8qNbcZOic89z6bA9RjpTy/GdTXwg3uoO6B1ENRgnz7avi8KmgUkNGBdfwmQ94Htl8+F0aACR4PiToD5qMi+nhfzZvRFBe+0fPMie3FHjI+H1l4/jsW+47WNZfUfEgDJK8=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723964125; c=relaxed/simple;
	bh=iI1ZCCd+koFrMOJVj7OIIwtAI7Bo3KpJTo04Zkrppik=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=MsS8O6hSInJo5IVGSzI9AI6PsP/c4T1NsVGBxBNZNBD6t/iRXA081NxFCFwJg52mQPfr6bI53/HTywibNQHQQ6nm/2hT5VECh4pmeIE++nPXKA9+UbguGLz6S0xccF+CT0KLMjK63wIJ5M6moh5LYk88wa9afB8yMRcCu+oyYIw=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=SIXlZUwk; arc=fail smtp.client-ip=40.107.220.88
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="SIXlZUwk"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=C9yAYuu5yEvj929JbGGBQ1AuLMpnYPHSEbxQ4qlJZ1e5vl9MyUnaGaHRsWtrdhr1piiN9ch1ijHLaq+EjZOcgKM2+z4AyCQjIsuRnpeX+XoCfaTukujy8JjTAYpnqsh27mqcDUrNDRqqqVZ0fw4CYLUOEKcrvuJjVaMOe9F6bzPAaXVMgtxNgUTuD9nuVnEdccY+cFiB7N1K7LYdfZiLsUHb2wKTRQV0cJrHj7OAxeBR5Vckeehx6TPs3uRCteNOLi7y5cM/Lb4QwpKwK41UzotwYo+VZrAly/Zu6pGk363beE5nneOWg5Q2cHdqNuzMnDqKTe8PO3cr7zHSLhi4BA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=J69ZqN2S1oDqcjD6LjcOdjFL835N3PZgmYgQQf+P9kw=;
 b=qa2mRsaT0BAA/wgRYBcchwyEJBUJcO4UDWlYXXLR2VWFSf/c6WyhPuUrhcWkU1sNOu8apI/zLKLhT3Ie0Ur+6tekuaD1qMigjlmDLP3l9pJxaHdzpJCsYNaxRGnI8K6Aog9FDEZImarUK9nxonpYWwD00mut/Ox5K54d2oWXJKaYAcIEd5HY2BypqYrgVVhOwSUFmA/oMmYlmzFfrvNi3ToCoUlilryPQ4kVyDIYeXI+LGdqsVHq0+ui2CPjpKT2JH9o6NFxrT3JPLJaWEzh2eRdZ26C41eGuCkUP5zZYq8/s/ExW9+f85awMNHI5oWAOUjtn714ju9H5r7EMkvF+w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.118.232) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=J69ZqN2S1oDqcjD6LjcOdjFL835N3PZgmYgQQf+P9kw=;
 b=SIXlZUwkEAqhrkVKiPI/pbNuSd+vWReLPCg2a109MF1AM3DPdIUy15Se4zm8UAhXXmEJzFkloif/5O0jOoEiptNHvUDIdiFsiNXEHTh0C7VaKnjpCQ36YV1QAlHE6ijejy7mLJ98EVasMq8pBVwRLPCB153V3WH4utwiTtRRa572KTAxZZ+YUcXm4CbSUOqQ1xNmVC6mah4dCWYAV1Nn/Fc6Flioe+MN5q4YSH/jjnPZzfA3O03+rgO0RI/shMwM9dJaFu4LDCPDDl/K+JW+okNPdiEwhf6xzrmYQ3TFM6QC8RKiAWolYHVtrU2vVoB/pSAacOBk4a3tNki6EAvmsg==
Received: from DM6PR06CA0069.namprd06.prod.outlook.com (2603:10b6:5:54::46) by
 PH8PR12MB7136.namprd12.prod.outlook.com (2603:10b6:510:22b::5) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7875.19; Sun, 18 Aug 2024 06:55:20 +0000
Received: from CH1PEPF0000A345.namprd04.prod.outlook.com
 (2603:10b6:5:54:cafe::d) by DM6PR06CA0069.outlook.office365.com
 (2603:10b6:5:54::46) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21 via Frontend
 Transport; Sun, 18 Aug 2024 06:55:19 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.118.232)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.118.232 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.118.232; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.118.232) by
 CH1PEPF0000A345.mail.protection.outlook.com (10.167.244.8) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7897.11 via Frontend Transport; Sun, 18 Aug 2024 06:55:19 +0000
Received: from drhqmail202.nvidia.com (10.126.190.181) by mail.nvidia.com
 (10.127.129.5) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Sat, 17 Aug
 2024 23:55:19 -0700
Received: from drhqmail203.nvidia.com (10.126.190.182) by
 drhqmail202.nvidia.com (10.126.190.181) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1544.4; Sat, 17 Aug 2024 23:55:18 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.126.190.182)
 with Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Sat, 17 Aug
 2024 23:55:15 -0700
Date: Sun, 18 Aug 2024 09:55:15 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: Dave Jiang <dave.jiang@intel.com>, <alejandro.lucero-palau@amd.com>,
	<linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	<targupta@nvidia.com>, Vikram Sethi <vsethi@nvidia.com>, <zhiwang@kernel.org>
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Message-ID: <20240818095515.00004a98.zhiw@nvidia.com>
In-Reply-To: <2482b931-010f-30fe-14cb-2a483b0d8c38@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-5-alejandro.lucero-palau@amd.com>
	<e3ea1b1a-8439-40c6-99bf-4151ecf4d04f@intel.com>
	<7dbcdb5d-3734-8e32-afdc-72d898126a0c@amd.com>
	<20240809132514.00003229.zhiw@nvidia.com>
	<2482b931-010f-30fe-14cb-2a483b0d8c38@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CH1PEPF0000A345:EE_|PH8PR12MB7136:EE_
X-MS-Office365-Filtering-Correlation-Id: 216b8166-362e-4cad-065e-08dcbf52b932
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|1800799024|36860700013|82310400026|7416014|376014;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?Ui9ZRd38p035tIgl27afoEBK8WJEcczmj77D5XkF1v869CVwhlFsb7vAphf/?=
 =?us-ascii?Q?TQEL+kR+Jc2CKJi29lQItzKz6KXEgRfMbpmnsO+Q9g2xES1S8CtEd2kBQuif?=
 =?us-ascii?Q?cdgtgK2K4CEb1hMelXqWJqSj6416aFVaueKzgIfXlWzs8qfQFUHJh+rEh+7K?=
 =?us-ascii?Q?fa4JzWaNaqKOOJdywakcqfl8ITW96FdjQHPNdYSLcXM5Dj7iPCGHeka0P0hg?=
 =?us-ascii?Q?HvMrrjxHdcZSWCUhAEw6tz5IH+pyYjNnqaovlW+kqBR8Wvhr5LhiTOh7QqFj?=
 =?us-ascii?Q?lWNAnzNkRgpcRq0xTRKO3bDWHoWiiR8y8BCoPDjUU/btw/y9/KuYJJI0HXtt?=
 =?us-ascii?Q?wnO/dwuYMs3d9Ovq2/EkGJQZAdzQSo7RsN+vfMR4zwKNWRmdlgjp9FHOqoPy?=
 =?us-ascii?Q?Bdqq8E9/GnpVHzgsE01e/JrTiw+Ppc/5uffK1sUFLnmFQ0GGyWsK0p7q/Q8c?=
 =?us-ascii?Q?3rzJmLXtvpegBKuqUzU5Gpnp/WkWepgM93poy7ncb2JMbVXAjfg28oDpMvy3?=
 =?us-ascii?Q?ltyTvAw3FlBIEFOg2PeEgjUaJ6DUMH1Zp9mX/pJlalrpfLqxlWvNv/qVvPtb?=
 =?us-ascii?Q?lFIHGu2XzH1Y5OJvzoCWp0OipMXOW60QCyHhPd1ZzGmB9JKlWC5GKVrHJxRZ?=
 =?us-ascii?Q?mhQgD/e8mNUX5US2FPVRPNq3+9fZ7wJZeaV+kfUROODGz0gFO6EGfIWn2wam?=
 =?us-ascii?Q?pV/bgl99ycyc0AE8Q0RnmPEeU5FauiYLMscH+m624nJEOGJ38lQ4/fO2aw0S?=
 =?us-ascii?Q?nSEU8EvBE+InyC20VpdJvSkZ8T5T4Iv9IlequvKjJZ02B3hizlpnEIkM6i7x?=
 =?us-ascii?Q?5Rt7UQAzl9r00uorXuLzgF8GYW5Nc/cdOS3mObPaL93TK/YR101pBCkOuH8o?=
 =?us-ascii?Q?Pvd/z2e3Umz8oDRbu3UpYds+2wS4rVl5E0QmxnH9JJiWrq6S2z5foq4QYv0y?=
 =?us-ascii?Q?jGBjXu4lEBQjf69c7sEc8HzXiUruYlRZYSj7EV/EhOpTHm8pnNdUwujwVyx0?=
 =?us-ascii?Q?h/XOuy1L0eZIRBN3cRKncuA+fcxhxypHsjdOGbSQdWwZSvDY295qHq3YoRGX?=
 =?us-ascii?Q?Z2TZULJhwkGDT4pWONowhEjn4/AKGelTJsYUy5c4wd5K8gQah7cJSdg4tmwc?=
 =?us-ascii?Q?177I/kdLzQCkwDIRkKLV/9dgEbsMz+F7Spv9o3HBMI5+Kvz/CKJHrG6K2pY/?=
 =?us-ascii?Q?rl2DgwnW08zszlcIwi0LJd9fEBimSzVZN3ILKvR/vzzYMmJJvq5W6J8aB9jQ?=
 =?us-ascii?Q?yy8C4Djwf3amuWWrdS+TssYK9up0PIx6aDjLKaqQO5fUIvL6KoUIEO4H91RT?=
 =?us-ascii?Q?LmkDjnesSdmPlA87Pxw7smdNjlFep6lNT0rKAGgRxKY6fK4V95K/JZsQb6ok?=
 =?us-ascii?Q?2jaRKA4r8zK6359TKHh4j05wj4Zv8qApRGE5kR/hn8bTXKCiw86aFzdhb0Bx?=
 =?us-ascii?Q?/43xcPpS6FXii4uMgkF0Z3AG4LY8jeti?=
X-Forefront-Antispam-Report: 
	CIP:216.228.118.232;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc7edge1.nvidia.com;CAT:NONE;SFS:(13230040)(1800799024)(36860700013)(82310400026)(7416014)(376014);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Aug 2024 06:55:19.3492
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 216b8166-362e-4cad-065e-08dcbf52b932
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.118.232];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CH1PEPF0000A345.namprd04.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH8PR12MB7136

On Thu, 15 Aug 2024 16:37:21 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> 
> On 8/9/24 11:25, Zhi Wang wrote:
> > On Tue, 23 Jul 2024 14:43:24 +0100
> > Alejandro Lucero Palau <alucerop@amd.com> wrote:
> >
> >> On 7/19/24 20:01, Dave Jiang wrote:
> >>>>    
> >>>> -static int cxl_probe_regs(struct cxl_register_map *map)
> >>>> +static int cxl_probe_regs(struct cxl_register_map *map, uint8_t
> >>>> caps) {
> >>>>    	struct cxl_component_reg_map *comp_map;
> >>>>    	struct cxl_device_reg_map *dev_map;
> >>>> @@ -437,11 +437,12 @@ static int cxl_probe_regs(struct
> >>>> cxl_register_map *map) case CXL_REGLOC_RBI_MEMDEV:
> >>>>    		dev_map = &map->device_map;
> >>>>    		cxl_probe_device_regs(host, base, dev_map);
> >>>> -		if (!dev_map->status.valid ||
> >>>> !dev_map->mbox.valid ||
> >>>> +		if (!dev_map->status.valid ||
> >>>> +		    ((caps & CXL_DRIVER_CAP_MBOX) &&
> >>>> !dev_map->mbox.valid) || !dev_map->memdev.valid) {
> >>>>    			dev_err(host, "registers not found:
> >>>> %s%s%s\n", !dev_map->status.valid ? "status " : "",
> >>>> -				!dev_map->mbox.valid ? "mbox " :
> >>>> "",
> >>>> +				((caps & CXL_DRIVER_CAP_MBOX) &&
> >>>> !dev_map->mbox.valid) ? "mbox " : "",
> >>> According to the r3.1 8.2.8.2.1, the device status registers and
> >>> the primary mailbox registers are both mandatory if regloc id=3
> >>> block is found. So if the type2 device does not implement a
> >>> mailbox then it shouldn't be calling cxl_pci_setup_regs(pdev,
> >>> CXL_REGLOC_RBI_MEMDEV, &map) to begin with from the driver init
> >>> right? If the type2 device defines a regblock with id=3 but
> >>> without a mailbox, then isn't that a spec violation?
> >>>
> >>> DJ
> >>
> >> Right. The code needs to support the possibility of a Type2 having
> >> a mailbox, and if it is not supported, the rest of the dvsec regs
> >> initialization needs to be performed. This is not what the code
> >> does now, so I'll fix this.
> >>
> >>
> >> A wider explanation is, for the RFC I used a test driver based on
> >> QEMU emulating a Type2 which had a CXL Device Register Interface
> >> defined (03h) but not a CXL Device Capability with id 2 for the
> >> primary mailbox register, breaking the spec as you spotted.
> >>
> >>
> > Because SFC driver uses (the 8.2.8.5.1.1 Memory Device Status
> > Register) to determine if the memory media is ready or not (in
> > PATCH 6). That register should be in a regloc id=3 block.
> 
> 
> Right. Note patch 6 calls first cxl_await_media_ready and if it
> returns error, what happens if the register is not found, it sets the
> media ready field since it is required later on.
> 
> Damn it! I realize the code is wrong because the manual setting is
> based on no error. The testing has been a pain until recently with a
> partial emulation, so I had to follow undesired development steps.
> This is better now so v3 will fix some minor bugs like this one.
> 
> I also realize in our case this first call is useless, so I plan to 
> remove it in next version.
> 
> Thanks!
>

Hi Alejandro:

No worries. Let's push forward. :)

For a type-2, I think cxl_await_media_ready() still gives value on
provide a type-2 vendor driver a generic core call to make sure the HDM
region is ready to use. Because judging CXL_RANGE active & valid in
CXL_RANGE_{1,2}_SIZE_LO can be useful to type-2.

I think the problem of cxl_await_media_ready() is: it assumes the
Memory Device Status Register is always present, which is true for
type-3 but not always true for type-2. I think we need:

diff --git a/drivers/cxl/core/pci.c b/drivers/cxl/core/pci.c
index a663e7566c48..0ba1cedfc0ba 100644
--- a/drivers/cxl/core/pci.c
+++ b/drivers/cxl/core/pci.c
@@ -203,6 +203,9 @@ int cxl_await_media_ready(struct cxl_dev_state
*cxlds)
                        return rc;
        }

+       if (!cxlds->regs.memdev)
+               return 0;
+
        md_status = readq(cxlds->regs.memdev + CXLMDEV_STATUS_OFFSET);
        if (!CXLMDEV_READY(md_status))
                return -EIO;

Then for the type-2 device, if it doesn't implement regloc=3, it can
still call cxl_await_media_ready() to make sure the media is ready. For
type-2 and type-3 which implements regloc=3, the check can continue.

I think SFC can use this as well, because according to the spec 8.1.3.8
DVSEC CXL Range Registers:

"The DVSEC CXL Range 1 register set must be implemented if
Mem_Capable=1 in the DVSEC CXL Capability register. The DVSEC CXL Range
2 register set must be implemented if (Mem_Capable=1 and HDM_Count=10b
in the DVSEC CXL Capability register)."

So SFC should have this. With the change above maybe you don't need
set_media_ready stuff in the later patch. Just simply call
cxl_await_media_ready(), everything should be fine then.

Thanks,
Zhi.

> 
> > According to the spec paste above, the device that has regloc block
> > id=3 needs to have device status and mailbox.
> >
> > Curious, does the SFC device have to implement the mailbox in this
> > case for spec compliance?
> 
> 
> I think It should, but no status register either in our case.
> 
> 
> > Previously, I always think that "CXL Memory Device" == "CXL Type-3
> > device" in the CXL spec.
> >
> > Now I am little bit confused if a type-2 device that supports
> > cxl.mem == "CXL Memory Device" mentioned in the spec.
> >
> > If the answer == Y, then having regloc id ==3 and mailbox turn
> > mandatory for a type-2 device that support cxl.mem for the spec
> > compliance.
> >
> > If the answer == N, then a type-2 device can use approaches other
> > than Memory Device Status Register to determine the readiness of
> > the memory?
> 
> 
> Right again. Our device is not advertised as a Memory Device but as a 
> ethernet one, so we are not implementing those mandatory ones for a 
> memory device.
> 
> Regarding the readiness of the CXL memory, I have been told this is
> so once some initial negotiation is performed (I do not know the
> details). That is the reason for setting this manually by our driver
> and the accessor added.
> 
> 
> > ZW
> >
> >> Thanks.
> >>
> >>
> 


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2059.outbound.protection.outlook.com [40.107.92.59])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id E77229479;
	Sun, 18 Aug 2024 08:07:29 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.59
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1723968451; cv=fail; b=k1LqSOdr3kI4nl/ZyHSYamKWC+3ktqu7o6C1N2UBBTSo/maELwpRvpRFSfYH2xAZW3CTgy5S7fwwuLjDIb97FUIyq3D4IHpXHaHTG/Z7Gc0zmfL/WSP0LSqlPqNPIOCxnOvECUL/5N94gQyo4Y99weeV5e7JOa59u6JpgABdUuU=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1723968451; c=relaxed/simple;
	bh=NRZeCIkP6f2FvYvlmtKL5xpNvfBez6HDZ15HDFKgVhg=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=YwjSZzEBaCD0Mk9HlKd44xAdEyvZBJ8ZYhttE9mY1CFmHAvsW3ycA/0PaOIJfhrb8OP9LL4RjD7AxQNXfOjEjG5crX1MLaT0Muq2+kReXG7lczKvPMdZ5t33bduYVR61WQGRrgbRgbNzhjjKJwrV0SBDzAkM9reqasXpeEEXFd8=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=fyPWo7w1; arc=fail smtp.client-ip=40.107.92.59
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="fyPWo7w1"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=xT6bLtrtu8Gdk9ob6pKdvH9SbrC6mXyDNnW5Gs9sMLMUOBQdpHo/SdQ34ASjFAAWPDWe19iFs1A4ZmUd30lFb2l7fK+WDVHPGPrkznaR5JwXd5UmQaqidrFocDzN2vrwsf8p4wqJgPtD4urWv55jRXWerhfSmj4W1SbXxaNkGRB3Kb+6CqIdcpSRiV+EzJAyujO2Z/Tpk5hW4FZ4VflN+FZaEsNCpMUiH8mQDgvuoY3/dD1113DCJ/vHNmyymWRIzw1sTjPciSThVqJ8FYaexOWDkQ1LsnChNed6eR8/P+CzqbsKnymyJxjiChfSEwaU+UnyA6c8N6o7iP4NpIe0vQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=wKSsjxQchI5RdaQ81ATdRyFKZXvNxB5XI5YhMPguDBk=;
 b=aRe4E/+kTv8NDX9Q73okDXhfckEQNYcoAPBJW0K5QgUQxG5f/dgv1BUY32XckGJkMU8mRMniGP/Zelyof5xoO9uWTgC2bW4A3YJukTqh747Sto0bC157u6GHUsC7YsCXstQ/8YLzCOUG5WpFRB1aGiATTbq6Mwr0nwESzEXS9EhzGQk/9NjYRuoO5qNJDeg3aTtj9aI4NZ9Pb6ZE4+Sl/RiUrtzrG4r3G2VcAAQUqsvcLr+s7s1Uxozpk2yk0LxfuzibLXYwe7XoHjYQN+3KaGVqrdkLPTwFpb7rn/QLo+xYC4+1TLeDvRtDp7AmlcUD8ektgLVOhq52nQeFKUgSqw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.118.233) smtp.rcpttodomain=huawei.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=wKSsjxQchI5RdaQ81ATdRyFKZXvNxB5XI5YhMPguDBk=;
 b=fyPWo7w1jEd8WeBTynU2JHdS8dvNE4hX6ojbBQLCVtE2OfKJr00yuXti1ZCBOal8ZJMe5QFVQB2r1iV7uNVgVd5p7kkBDNZulm7hrTfl//utlEreDovhJPjml+sgWr5otXXfNmKffHYyYFsEK+BWWDhe6tu3Eu/EH+f7mLO1V69OWT3qG+cdaW1h1GhNUzI0Ih5vipnQ9BWQ91zTjYuFDvLQFe5vq66z65FVqo+Q0++lNfJDDRPVVIWkW+574r3u2j9q3wyg+eCAAaGtsjtNlym1iU/bg99jyzd9OsgeUr6PUCJO/ituA+q5T75bcxCXFzgkH2l/1WsO64t6hX4tZw==
Received: from BL1PR13CA0380.namprd13.prod.outlook.com (2603:10b6:208:2c0::25)
 by IA0PR12MB8748.namprd12.prod.outlook.com (2603:10b6:208:482::17) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Sun, 18 Aug
 2024 08:07:25 +0000
Received: from MN1PEPF0000F0E0.namprd04.prod.outlook.com
 (2603:10b6:208:2c0:cafe::3d) by BL1PR13CA0380.outlook.office365.com
 (2603:10b6:208:2c0::25) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.11 via Frontend
 Transport; Sun, 18 Aug 2024 08:07:25 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.118.233)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.118.233 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.118.233; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.118.233) by
 MN1PEPF0000F0E0.mail.protection.outlook.com (10.167.242.38) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7897.11 via Frontend Transport; Sun, 18 Aug 2024 08:07:24 +0000
Received: from drhqmail202.nvidia.com (10.126.190.181) by mail.nvidia.com
 (10.127.129.6) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Sun, 18 Aug
 2024 01:07:24 -0700
Received: from drhqmail201.nvidia.com (10.126.190.180) by
 drhqmail202.nvidia.com (10.126.190.181) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1544.4; Sun, 18 Aug 2024 01:07:23 -0700
Received: from localhost (10.127.8.11) by mail.nvidia.com (10.126.190.180)
 with Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Sun, 18 Aug
 2024 01:07:20 -0700
Date: Sun, 18 Aug 2024 11:07:20 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
CC: Alejandro Lucero Palau <alucerop@amd.com>,
	<alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>, <targupta@nvidia.com>, <vsethi@nvidia.com>,
	<zhiwang@kernel.org>
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
Message-ID: <20240818110720.00004e16.zhiw@nvidia.com>
In-Reply-To: <20240815174035.00005bb0@Huawei.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-3-alejandro.lucero-palau@amd.com>
	<20240804181529.00004aa9@Huawei.com>
	<5d8f8771-8e43-6559-c510-0b8b26171c05@amd.com>
	<20240815174035.00005bb0@Huawei.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: MN1PEPF0000F0E0:EE_|IA0PR12MB8748:EE_
X-MS-Office365-Filtering-Correlation-Id: 0147fdf9-79ed-4dc5-2f16-08dcbf5ccb78
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|36860700013|82310400026|1800799024|376014|7416014;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?ZuYoYkymBcRAGIqDvNcM/opi/p76PYEDe2ZDv9rDEbCe0VFe8Bq9QowuxN+r?=
 =?us-ascii?Q?ZAknL4B4ug6lA75mtqQcBVNOLvCtB9/r6O99yj2/R7fhnIgIwr3BeZWBil5i?=
 =?us-ascii?Q?YpeLGswnPuTPi0up+kdtaw0751dQCJmvG6eX+vTY79BRKE+AeItwARXgPuh1?=
 =?us-ascii?Q?ltKnppl3sOJ0AyWiXlVL1RTrw5Q0B008FPELn4gtEfUB3PZ9coO1PdAL6+wF?=
 =?us-ascii?Q?Qxs5txAH7PMTHW4VhEktdoMIPCUWvr8NREXAyhpf1Shnb6kUHVdSjGAM67Ht?=
 =?us-ascii?Q?gYvHYovZTscgkLUTh4PyZ3+6vObWluuDGNhh9WLOdjJjVWPp9C+wkyUTda8/?=
 =?us-ascii?Q?/F7bslXI3SxB1NJuSdUjFjfrRtN2xDbga/rrp07/F8y3lLRUI6DEx+7mHJkL?=
 =?us-ascii?Q?lT/Zua1Do9e1p6tigH2DzdyK0wfZ2ayMesIDHfxxboZGcxShGBzqKdObqiyM?=
 =?us-ascii?Q?lFEF7jdBF5GWe07pQJbV3udgxBKkIgQzanQPxdlXfKI3Hgfum07hb6ajLkz0?=
 =?us-ascii?Q?scZoGi+DIPAhmipN34JLGBiaQPck0Qprj7i+xAuzqibRVtMmayttNwBOjz6S?=
 =?us-ascii?Q?A0O7w+byJXNu1mM710rJTN2SAqH6ep1RmMKJVWZcmPcQh8SgvVM1QsvMOTV+?=
 =?us-ascii?Q?sKqa498lHP84YqTuHnbnT3l86L51bUZrTAoxOzgQZ+SB84xportjm5PfFNuZ?=
 =?us-ascii?Q?b0HEnaSwPCSWeHSq9joi7sTZhsZ03bCeeOb1xE9cyXIqsinDL3P2BUwFAeu4?=
 =?us-ascii?Q?hQLexe3woeH3zTazprib8vZnQwetlzax0TSFCIrES03vGNhhiepCdWy/FciT?=
 =?us-ascii?Q?81RdRyfxobiVkE74mBygc8/9SYomosJkhOudUxBP4LLQl5NBFyDM2RxEch0L?=
 =?us-ascii?Q?Kx4fOnpsxr44h7rExl2NxZg6OLBOey9fBeQ0OTsMkS0JdBIr6j5zH2YnnVM5?=
 =?us-ascii?Q?luaaLccQoqkN3syW9aT90YCrgBKnGSldPnEzo+mxyDalWAF0r6P5CRKjl098?=
 =?us-ascii?Q?q9pISWrRbYxXVRaaT6WlgcPz5H6ijNCXqj0etohpxSV7oGwKay1rnoJ97coi?=
 =?us-ascii?Q?0XPd9PycQckY/YVu6MSG4Nu+3G0SMb7avkZzUBEknsSKQYSRuvougLE+un4Y?=
 =?us-ascii?Q?rcFVX3DXk2igcYCqAv0/HjsXEvt1dtKpkid1kow7Wd9VDjwlnku+naKvaPld?=
 =?us-ascii?Q?7Gn/MeNcjTjusgdwrXc2xRhK6PTO9ZEH9ewrZU7oxHxee0c29YUNpnXGTdz6?=
 =?us-ascii?Q?9t/cloff66wkixFVqxY5UPQNhvuKwIlin0Dh23XnwNWBOe1u0yu1ug9B/2ci?=
 =?us-ascii?Q?9M8a7stgSfxtytpoWTuY+GBgYkmqcsjvxacVo0aqslYTgwuYkPKdCXZCRYN9?=
 =?us-ascii?Q?YEnu6gfMuQVexp7ZYdAcpAGXIc2CwpyQOd+cOdyX6VqFI0pJojgqHHS8F0lc?=
 =?us-ascii?Q?vvG7jW2J7R2sq2lSjVn400qbZAw04TDw?=
X-Forefront-Antispam-Report: 
	CIP:216.228.118.233;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc7edge2.nvidia.com;CAT:NONE;SFS:(13230040)(36860700013)(82310400026)(1800799024)(376014)(7416014);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Aug 2024 08:07:24.9284
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 0147fdf9-79ed-4dc5-2f16-08dcbf5ccb78
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.118.233];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	MN1PEPF0000F0E0.namprd04.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA0PR12MB8748

On Thu, 15 Aug 2024 17:40:35 +0100
Jonathan Cameron <Jonathan.Cameron@Huawei.com> wrote:

> On Wed, 14 Aug 2024 08:56:35 +0100
> Alejandro Lucero Palau <alucerop@amd.com> wrote:
> 
> > On 8/4/24 18:15, Jonathan Cameron wrote:
> > > On Mon, 15 Jul 2024 18:28:22 +0100
> > > alejandro.lucero-palau@amd.com wrote:
> > >  
> > >> From: Alejandro Lucero <alucerop@amd.com>
> > >>
> > >> Create a new function for a type2 device initialising the opaque
> > >> cxl_dev_state struct regarding cxl regs setup and mapping.
> > >>
> > >> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> > >> ---
> > >>   drivers/cxl/pci.c                  | 28
> > >> ++++++++++++++++++++++++++++ drivers/net/ethernet/sfc/efx_cxl.c
> > >> |  3 +++ include/linux/cxl_accel_mem.h      |  1 +
> > >>   3 files changed, 32 insertions(+)
> > >>
> > >> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
> > >> index e53646e9f2fb..b34d6259faf4 100644
> > >> --- a/drivers/cxl/pci.c
> > >> +++ b/drivers/cxl/pci.c
> > >> @@ -11,6 +11,7 @@
> > >>   #include <linux/pci.h>
> > >>   #include <linux/aer.h>
> > >>   #include <linux/io.h>
> > >> +#include <linux/cxl_accel_mem.h>
> > >>   #include "cxlmem.h"
> > >>   #include "cxlpci.h"
> > >>   #include "cxl.h"
> > >> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct
> > >> pci_dev *pdev, enum cxl_regloc_type type, return
> > >> cxl_setup_regs(map); }
> > >>   
> > >> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct
> > >> cxl_dev_state *cxlds) +{
> > >> +	struct cxl_register_map map;
> > >> +	int rc;
> > >> +
> > >> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV,
> > >> &map);
> > >> +	if (rc)
> > >> +		return rc;
> > >> +
> > >> +	rc = cxl_map_device_regs(&map,
> > >> &cxlds->regs.device_regs);
> > >> +	if (rc)
> > >> +		return rc;
> > >> +
> > >> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
> > >> +				&cxlds->reg_map);
> > >> +	if (rc)
> > >> +		dev_warn(&pdev->dev, "No component registers
> > >> (%d)\n", rc);  
> > > Not fatal?  If we think it will happen on real devices, then
> > > dev_warn is too strong.  
> > 
> > 
> > This is more complex than what it seems, and it is not properly
> > handled with the current code.
> > 
> > I will cover it in another patch in more detail, but the fact is
> > those calls to cxl_pci_setup_regs need to be handled better,
> > because Type2 has some of these registers as optional.
> 
> I'd argue you don't have to support all type 2 devices with your
> first code.  Things like optionality of registers can come in when
> a device shows up where they aren't present.
> 
> Jonathan
> 

I think it is more like we need to change those register
probe routines to probe and return the result, but not decide
if the result is fatal or not. Let the caller decide it. E.g. type-3
assumes some registers group must be present, then the caller of type-3
can throw a fatal. While, type-2 just need to remember if the register
group is present or not. A register group is missing might not be fatal
to a type-2.

E.g.

1) moving the judges out of cxl_probe_regs() and wrap them into a
function. e.g. cxl_check_check_device_regs():
        case CXL_REGLOC_RBI_MEMDEV:
                dev_map = &map->device_map;
                cxl_probe_device_regs(host, base, dev_map);

		/* Moving the judeges out of here. */
                if (!dev_map->status.valid ||
                    ((caps & CXL_DRIVER_CAP_MBOX) &&
                !dev_map->mbox.valid) || !dev_map->memdev.valid) {
                        dev_err(host, "registers not found: %s%s%s\n",
                                !dev_map->status.valid ? "status " : "",
                                ((caps & CXL_DRIVER_CAP_MBOX) &&
                !dev_map->mbox.valid) ? "mbox " : "",
                !dev_map->memdev.valid ? "memdev " : ""); return -ENXIO;
                }

2) At the top caller for type-3 cxl_pci_probe():

        rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
                                cxlds->capabilities);
        if (rc)
                return rc;

	/* call cxl_check_device_regs() here, if fail, throw fatal! */

3) At the top caller for type-2 cxl_pci_accel_setup_regs():

	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
                                cxlds->capabilities);
        if (rc)
                return rc;

/* call cxl_check_device_regs() here,
 * if succeed, map the registers
 * if fail, move on, no need to throw fatal.
 */
	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
        if (rc)
                return rc;

With the changes, we can let the CXL core detects what the registers the
device has, maybe the driver even doesn't need to tell the CXL core,
what caps the driver/device has, then we don't need to introduce the
cxlds->capabilities? the CXL core just go to check if a register group's
vaddr mapping is present, then it knows if the device has a
register group or not, after the cxl_pci_accel_setup_regs().

Thanks,
Zhi.

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2063.outbound.protection.outlook.com [40.107.92.63])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 7E77C1662F6;
	Mon, 19 Aug 2024 11:11:20 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.63
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724065882; cv=fail; b=Rsk0CgDfO/tb/bRekkc/Jtn4OYbUI/13Jwqe+vcnLbspkhp2iW6L0OYDEmGK4f++lI9HRV7QI2pm4cI0ccEb2fDBZ90LcB3bJ8v+oewIwZtFEKdA+PV6/dMOfMFuuGLd4z6p2T4bYjtQlj+83N3SHrnUCYIEBgqxzLO26vqljU8=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724065882; c=relaxed/simple;
	bh=3htM3uR8EMpzWOaEEAvoLSJ+TGOPsR124PlDCbje0zs=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=fOr/k3K+rFZ6ClwhpFY3rCqqbT1/GcYapTb2OVK0CcztkP8VF1Ut24mC4IG5ZEyb13GHuMo6LFVa75NfLs+z7ymR5/kOT1+Ce+Vy7bGv7waQ9Wwu0vacMhNbEFqytWjdxizFkI9mcAVn8T2k7QsfiEG4dW+NGdH43OU8eeMgLpc=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=SyjGDz05; arc=fail smtp.client-ip=40.107.92.63
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="SyjGDz05"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=hTn9Hg7NIINRgfs3w18uGUdev0hDv/fYolxeffoPruqXsbsgZmbeXlFTEB/vseZfiUHuAKErMXIx7szdgY1Nn/172WBqubW8iu2Qj4RTC8cJU/HOw1MZXRu3ZtpsEN34d3EU/cXGYyd6OJkuyfYVjuvnN8DyDSDJI2UnEkUKWcyf1kE3z1nXSX6mFJZFAPsl/Mn58gNF69UU5JoViyCEow1yroVirMLMQrD1RXIp3Vy2XkUWrp/0MRfhXcxbmp2feHVRlpN7wnNDIrAlT35xDcLXJ9a7viwrRxqMdcOedzaKZsCItAtU7/7HFjPfzbBp3RiGrTlAew5NUGF9QC7FeA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=zgY2D1N16G2SskdIz6hdrNOfl5tM+5TUMlAc6LQ9snk=;
 b=BvSkVmC7pxj+tRBJGrDhg4uYMkAng9+w012Lx96plYIVKiJgFlnvKqx5tiyZhVfnxAN/JwAhv0rUxRwCEqb3ftg8Uiup8muXxfuANNTYeBQDMaofVhOn/vVbP1/Qn+qdedtPRyz8Z/xT0+LPD4HpK2gHrsXxwfVzHms3Z3UcwP0Z37/5at48P3UKL+Nd5MyD1jqSA/eJv/x2DbACnS3uoIoFLJjSqS+KdeQmmAYXskyMZwRXch/QHiPf6codsF5s4zhNjpl85TVD+OnqvV0NsXQzwrRlG76s13wOS5WLrOzVYByTNBLpH+eYqgZfl9uJUmFenQkRWLmmsHH+m5s8pA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=zgY2D1N16G2SskdIz6hdrNOfl5tM+5TUMlAc6LQ9snk=;
 b=SyjGDz05nsb8v1e11qwpJgBkT2aC47aAxYx53SyS4+Ujq6vvkBt08zqGoBK1cPogljc1Olm3BE+jgO1YyHNzmzs5rGkBcIcXH6PsoEJsZE+oRArZtraqUFuJNEHwzF9cRhiRV1CwlE9u++MSVqa7+MA++bmCgmcZT99h2vLeDcc=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by IA0PR12MB8696.namprd12.prod.outlook.com (2603:10b6:208:48f::16) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 11:11:17 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 11:11:17 +0000
Message-ID: <3b23989a-9ac4-6a90-bc5b-bb12377c0385@amd.com>
Date: Mon, 19 Aug 2024 12:10:34 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
Cc: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <20240804181045.000009dc@Huawei.com>
 <508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
 <20240815173555.0000691a@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240815173555.0000691a@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: DUZPR01CA0066.eurprd01.prod.exchangelabs.com
 (2603:10a6:10:3c2::14) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|IA0PR12MB8696:EE_
X-MS-Office365-Filtering-Correlation-Id: 9910cf48-7740-42ba-be38-08dcc03fa599
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?NnM0Mk9JZnVuVnVXT3RYT0kvZDltakJTNjZaM2hiMDNpNjFrMnpvVWcrQmUy?=
 =?utf-8?B?Y1RMZ1VDV3RMbmgyaVB6QnA2L0JXQnoxdThlcmFYRkFsclQ2UTZmelhRVGJG?=
 =?utf-8?B?L3dGcVU2K1IwUldpZXdPd3Q2MmxGY0ZWTHQ1MnptcGljNWUyMFczNkliaFM3?=
 =?utf-8?B?ZDB3ZHdHdjJadVhnTzBxSnhRT28veEtPTW1uOG1ySVdIWnBMMHl2RmpoRDhP?=
 =?utf-8?B?M0FLNmhVK3pCUGRGeUpWMjN2dWhaNzBHa0s4bE14OFdnajNPaEhXMVJqWXNY?=
 =?utf-8?B?QWoyVVdsc2M0aTlscXdFWTc0Y3puR0R4MHF0RExBUDlwUVE4VURhbHBZaUpi?=
 =?utf-8?B?aXUwWEFoSWJYd29lSEs4V2gyWDd1Q0hsNzBzM1lUczd3RitPN1B4Qm1WTk83?=
 =?utf-8?B?cXdvTTJIeXBITk9HQitZNXJZZGMwbmtsZzUxd1BuZUNQSHdIQ3VTTmdMVnFj?=
 =?utf-8?B?ZVpQSzRJSWxUY0dPSFR5ZWlLaGJzUTZ3blRUK1o3dzV5aDhZdlI3VlVGWFlY?=
 =?utf-8?B?dVc5eEZvbHZGbktCL2c0UUtTWk5jY3ZCNzkxM2ZCYlBLakhmQm41dnJha3g5?=
 =?utf-8?B?TjBIWU55S1JKRXdUaHJVY1RVbnRHYU84NCtBeExkTXNUUjBpYkJtL2pONHRt?=
 =?utf-8?B?V00vaGNnM3g1SG9ta1psdGdaVHdubkVja2FTTTlFOGFBU1UrQlVyODVyVXFt?=
 =?utf-8?B?RVpLcG9iQU90QU8wZmZEM29pQjliSThOc0w3V2p6NzZJaVpuY2FCM1cybTQr?=
 =?utf-8?B?WUV3MlNpdTlvczFxeDJIVjh5UWJHcXlmQXBsZXNIVkdZR1NRZkJBRTUyWEVp?=
 =?utf-8?B?QysxZmk3bmppaWpiSXA1bkZKcnRkOEpCMFc3dWtkaVhzMXJkdTdldXltRkxY?=
 =?utf-8?B?VW5hbnMyZk1Veno2RGxoeHpmMDBEYTByajhmNVJsWjhhU040SEgrMjhVSFFj?=
 =?utf-8?B?VmNJaTcrTXhyLzJuL3hPUHJKb0VvaVBPelpESE1IVGNMaDNKWDAyYWRxcWpC?=
 =?utf-8?B?S1BaZllYWGtObjR5WmlKc0h5MGJPY2ZxcTVTUHEyWWZJdFJDMlZ5YjJZSzV0?=
 =?utf-8?B?OEdzWUppVVJuVXgwbWRVVkQ2ell5eHQ0TFpwbmNqcmsyeWNiYm5ETkY4aXZH?=
 =?utf-8?B?U0cxU1RxZGp1UHE3ZmZuZ1N3dkp0elhDVTVQLzM5TDFCZGdoWDkzN2hSakgv?=
 =?utf-8?B?SzBMWGtrUUdISHBVUG1qeXU5bjR0d1BQUnNXV255cTNOWTc2Tmc0T3BNelhw?=
 =?utf-8?B?RnBENXNiZlZEU3dELzQ5eGgwY3I5d0x3bjZsVDVyeTAvMXpoRDV0dm1rSjJp?=
 =?utf-8?B?OG45RERQRXhNZGRzT3BWd1dMY0M0VE5ielVPcEs4eWlVZytzalNhblR1R3JL?=
 =?utf-8?B?bDRmQWJCaE1mdWsyU0hlRStKcU5oM1dlVDZCY0NZci94UVl5RWVoMm9kUjZ2?=
 =?utf-8?B?RVlpbU9iQjMyN2UrSE1BUDBLWitSZ3hTaXF6RHhQZTVJeE4xdTh2NmdpUkt3?=
 =?utf-8?B?SUk2TVFMUk1QVTM5Q2lHVEtyK0JweEVqVTZyZkZ4UnhobHYvdkJnYlcvdzZu?=
 =?utf-8?B?Y2pQOG9TaStkdHVJNDd3d2p0a1dsMjNWK1RRZHdVczEwSmViQ3VyNjNwOXIz?=
 =?utf-8?B?QkIzYmdYdmg3TGk5LzlMRXVHRi9zWVN4R1hyRkN2L1VnRnZMdFQxS3JSbXla?=
 =?utf-8?B?V0RjSXZ2OWxnQ3dQcHY3aVZBVjBQTTZBNlMzejFMU1FmTDgwbTRYVzI3V1JN?=
 =?utf-8?Q?EOvZQD1nqhliH5CMtQ=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?WG1xNk9ma1NIeFFYaVJEQ0xjN2lNQjNZUlUwaDR1QUg4WjhKdStHcmdMTUpV?=
 =?utf-8?B?MVVjcmFkd1Q3RjRnWlFtb3NEMThpT3hoKzhYcGgyWmp3VStWck15L0hOUzBH?=
 =?utf-8?B?NkpWK1M4RnpTS3VMN2g4L2lVMzl5QVVHZ3hidS9YaXFQSkdDdjRDcFNBMVR6?=
 =?utf-8?B?cUNNKzVLaHFadzBCMlJHQnk2cVVBNm8rUEZlZUVUdjJ4Rk1XZGMvdXdrNzBB?=
 =?utf-8?B?L1J2UGtMTm50Z05zdnExTjh6elJQZHhhNDRLYTJTVGRHenR3NnFjV1MrY3VZ?=
 =?utf-8?B?eTZndVlGNlk0N09KeU9QdlNHVWxxamFkb0Y1eDgvdWxnVmhFaU0wMWxBU3pD?=
 =?utf-8?B?Z2dGUzg3TUgwVlVBaUpRTFV6Zm5aYVJNbHFPMDdFdjhJbkRWSUJVWkROYXBj?=
 =?utf-8?B?bmYvY1hmS0JqMWpGeXZNZElseldFVjJNVEJVMlF6WFM2U01uOU5nZHVQVWJU?=
 =?utf-8?B?VGdHUmhwdGhCQzE4Y051NmFFeGJwRXlqa2wwU24zS2sydzZQblRtTXNSajJn?=
 =?utf-8?B?bUFmR2J2UC9YZklEdzdHT215cW5mRUpPbG5BSStkdzlVVnJqM2tLYjNSVE5y?=
 =?utf-8?B?MUluS09LR2ZKQnlWWFNGVXBCRjF3Vmk5bFNXeVNOOUE4TU92ZEJuYlRoa1Uv?=
 =?utf-8?B?cWxCVUpYT1BJVFpxUFFtc1dNNWQ5YnRBeEhDRHROMGFkME5vYlNKZjAxUHlP?=
 =?utf-8?B?djN1YjJBU2dGUXhyRU9EaUtyWDAwUnZXbWhjNHdHV09scFNsWmNYUDkyay9Y?=
 =?utf-8?B?YkFxWnRaRUJUZnE3TEdwQkE3WmM3cW0wZFl6TEZkaXVISlZhcGptQjdFWUls?=
 =?utf-8?B?RVhXbWJDYWlPK1N5b0o4ZDJEbkRQVFlTUWk0QWhkOE54K0JWb3E1NEE0aWdN?=
 =?utf-8?B?OU16MHNYYVptaG92ditVRFllaW5QTHExVHBpSFpRZ3RyVWFGNWI0MHlnMU8r?=
 =?utf-8?B?WFNHMDY0UjNVeEtmc0tKaWpWdE16YWMxUzFPWkU4VHJpQTVjTDVLSzNkWFhM?=
 =?utf-8?B?VWlrNE5vOFdTSkFYdVhTenlTWlVENWtzU04vYUIxdkVkcWpLR2lsR1RrSWVW?=
 =?utf-8?B?RkRPdzNSRnV2Uk9EL1dnSGo1dEJIRkIxZXJ1NEVZUHJ5eUgvRmxGRXVNNmg1?=
 =?utf-8?B?a3lPVUduWTJsbUNOdE8rQk9kOFowTmVyWWlXMmlkWmFyY3BuaXlsQUlDQUMw?=
 =?utf-8?B?SEZ1M01RaEFpaVhNa2d4N0k1S0FSak9HK2hjV1grV1pQcWlXS2JIODdsaFFn?=
 =?utf-8?B?c0JuS3dDN3p2dVN6NWQ5eFh4VTUvOWNjWTRoYis4dkdGc1lGK0hza0dDM1BR?=
 =?utf-8?B?bXRjanZYMjBIZ1A4Y3lpVXMrbjh6NURIbDgyVHF4S0dvYm5DVHduT0d3UmdZ?=
 =?utf-8?B?N21rR2oyMDVxRGd3R1EwNjQ1dkw5R09CcUNMd1JISmpUWFYrTkhCNWwxQVI1?=
 =?utf-8?B?b0R6SW04UHd3MVV1MXVuYkQvdytWak1jZVQzRHdvTjdiZDk1eTBIQ1duVjlW?=
 =?utf-8?B?TkVjYk51SW04VjZIL2NXUHY0eVE4N3VZVittc0lueWdVeUxSakQwa0RlQzc0?=
 =?utf-8?B?T2dGMkRxYmhPRHpyOGlRbE85YUxEOG12Y2RjWS8yV1YyaHVZdHZJMW9GY3Bt?=
 =?utf-8?B?R0lvOU9VVWQ1SVhSditXazhXK1ZDOHNwcWdnelIxN2ZmVXdHVENsVUpxdXVr?=
 =?utf-8?B?empkTkZVOTc4dkQ1VlNvOXhsWUtiWnY3eVBIS0pJcFlFZkc4ZllZdVFqYlpy?=
 =?utf-8?B?U3RCWkhZL3FaQ0hJR254YzNZcWdWZFRKUDFOcUgza3J0c3k1SVdmWUQ4ZUFt?=
 =?utf-8?B?OEpua2dwTk44SEw1aTZEWFFSalRkOCtUZGRUOXFrTHNMUmNLMm1kMEFLTkhx?=
 =?utf-8?B?eVF0SWlpM3NieHhKTnFya0s2cHR5akFBdmFkMS9UczVxaWJuTThrQk5MWTRi?=
 =?utf-8?B?eFNNNk5CQnhGTmtCTG41dHZWTmUzQm9VU1o1dXlhN3EvYnZGbVM2Q1hQMmcz?=
 =?utf-8?B?cklNUC9aK1d6MXBCTE5uNEJYc2JXdS9lVVIybTBiNjB2U0tQV3hoZFRJcG9v?=
 =?utf-8?B?c3pHbzdobTBscUJPaklGcUVwMXdzeEJUdUZOZXE0NGowamErN0RJekdQbGc3?=
 =?utf-8?Q?8ginfPafNzCdSeKC7XIdafToT?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 9910cf48-7740-42ba-be38-08dcc03fa599
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 11:11:17.6910
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 8Ccf6/s15vQD6DuWcOHn9cXXxF4wc2SToCK5m2TWrHreoILrmQBMntKiU7BMndRu7DsGOixdz8Oc2jii53F1xQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA0PR12MB8696


On 8/15/24 17:35, Jonathan Cameron wrote:
> On Mon, 12 Aug 2024 12:16:02 +0100
> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>
>> On 8/4/24 18:10, Jonathan Cameron wrote:
>>> On Mon, 15 Jul 2024 18:28:21 +0100
>>> <alejandro.lucero-palau@amd.com> wrote:
>>>   
>>>> From: Alejandro Lucero <alucerop@amd.com>
>>>>
>>>> Differientiate Type3, aka memory expanders, from Type2, aka device
>>>> accelerators, with a new function for initializing cxl_dev_state.
>>>>
>>>> Create opaque struct to be used by accelerators relying on new access
>>>> functions in following patches.
>>>>
>>>> Add SFC ethernet network driver as the client.
>>>>
>>>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
>>>>
>>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>>>   
>>>> +
>>>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>>>> +{
>>>> +	cxlds->cxl_dvsec = dvsec;
>>> Nothing to do with accel. If these make sense promote to cxl
>>> core and a linux/cxl/ header.  Also we may want the type3 driver to
>>> switch to them long term. If nothing else, making that handle the
>>> cxl_dev_state as more opaque will show up what is still directly
>>> accessed and may need to be wrapped up for a future accelerator driver
>>> to use.
>>>   
>> I will change the function name then, but not sure I follow the comment
>> about more opaque ...
> If most code can't see the internals of cxl_dev_state because it
> doesn't include the header that defines it, then we will generally
> spot data that may not belong in that state structure in the first place
> or where it is appropriate to have an accessor function mediating that
> access.


I follow that but I do not know if you are suggesting here to make it 
opaque which conflicts with a previous comment stating it does not need 
to be.


> Jonathan
>
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (mail-mw2nam10on2052.outbound.protection.outlook.com [40.107.94.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 0D9C4165F00;
	Mon, 19 Aug 2024 11:13:18 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.94.52
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724066000; cv=fail; b=L9mmdo/fnH5HBueoqaFR/O+qQfDWZxq85k2fxUUl9J8LfEFr0wMBfZoCYD4VJIijM8I4DMnm4ktL6+NWeGn7wDq/9Cky34DqOpEXgD+aSGiwSIfvbvCV85XEwB8WmttioABKbWeR97DbYn+XYMbdRmYJQSx0hikDvP5AC4IaJzk=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724066000; c=relaxed/simple;
	bh=26Y4WJAPhxTNKTDZOMSq6c5HjJhB33ldLDK6PEouIpE=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=SCcXN61hdcmlNeVUsF/GNPR/CiEWeDjhfbnCjumxjyxG+gigDFyKWVZntePqMh4cLSg0YPVB5HQuXq+5R5NE+J4HG2UzR4jEKpoILXx5774wpDc+w1ozy+FINCi+jTioGU2JxmJzllztvFfUk/mCh+X1XO54MDGk0XZSwReuJuY=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=08L9X6Gs; arc=fail smtp.client-ip=40.107.94.52
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="08L9X6Gs"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=oXAOMMG0K2kDixNKLuzAcssbiLTXD4m9BZ5uLqh2M6qz+LiksCboPkF/vht+q6SrSV+S1Tv/Cr749Ld0wu+h5zkRiSKbHO1wHV96UKUS5PbD/fR7vNPPVzw2I1Y+d8+NeB0WKvTdoVwVkGTt4uRSyAI2QnJ6afMM/vJjR9HaU3K+TMoyfNft2mdUKV29Czvpt7vGJcxOrZY9UWJb0TP2/ZKZL2cMqKDKydFObKE0xLPCGnytPa6Vh/T8mVKbSSG3e8je8gX+MIhkk0830hE8jibYE/7SovfuQ5sUu10FdKDSyHGfP7i1YWPI2HoTSghuD88KU4a0vEOvUIbx5tRsNQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=p0533U7VSQ9THb/BTs8+rYC5p/kCG2FWoLaQhGAdWPc=;
 b=WIqdnKqbg6ila1S9OymetEmflN+GPFVfefJJTZs7vJAQgcw/pxLdGYZAjZTBeGJ6S0VD2kzHg+6fYCjd9xylmp6w23v1SKy7/I1wGT1K/ZTSRgcmJt76pqhFBHHMLYxIjimYu2DLe4yilDuRYATLoHQcCkohVy0XbvRDTNEmHkUu1YOFLlKkHDPO4Eody473AC0IDjbrSnfapMCsPxalB0N8zIJqgp+T8h3YHWJX6nBTKsJd7MK2126cbV298Xx8RmayyqA+ulEdwkDwIjVL9PLMXor+zoDfqSQyV84InQw6pxoD0p8Zk8e0L+4PCz4sKqtzX5ugJMnrB+hqnVzy+A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=p0533U7VSQ9THb/BTs8+rYC5p/kCG2FWoLaQhGAdWPc=;
 b=08L9X6Gst6hdiBR0dmMXxhZzVjn/CatUKABsyEl07kaX5k+XU1vqzyCWixDpD7Ddx2UYjwquwmGWFN7sRFmeYOGzjHh9svjMitEOxXyNcU2a4O5HTGd+e4pUPKBes9MIH9BJfFaliv0LikBIhleAHxVo1yAWR9gS8U70Nd1+X4o=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by IA0PR12MB8696.namprd12.prod.outlook.com (2603:10b6:208:48f::16) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 11:13:16 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 11:13:15 +0000
Message-ID: <26723cc8-c067-280b-f0cf-ee3906545837@amd.com>
Date: Mon, 19 Aug 2024 12:12:34 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
Cc: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <20240804181045.000009dc@Huawei.com>
 <508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
 <c9391139-edc4-73a0-3ede-d67c40130354@amd.com>
 <20240815173812.0000447c@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240815173812.0000447c@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: DUZPR01CA0074.eurprd01.prod.exchangelabs.com
 (2603:10a6:10:3c2::20) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|IA0PR12MB8696:EE_
X-MS-Office365-Filtering-Correlation-Id: aead4b1c-b7bf-4fde-03cd-08dcc03fec1d
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?ZWVQU3ZJQXpaWGFURU84RkN1RzVMc2Y3aDU1Y2RsK2dVMDdnb2hwcFVGbWhK?=
 =?utf-8?B?WHRPZzBJSnRxOFFoS2tzeC9BSmF6bzMrTW5JeDlNSUNlNTgycE02QXdFSFpr?=
 =?utf-8?B?Wm5KYXFmZWVnVGVmVlFFM3VRSEN3anhTdFhZSUw4R01ZTVJMRXR3QVRzTFZ1?=
 =?utf-8?B?dE9Yb2daTldOamVXY3c0ZGt4b1hnWG53LzZEbXVRNldMMkxjTXl2emxBZERE?=
 =?utf-8?B?TytNWGFzMjVPa1RTRnZEam9iUitPcXJiL0ZIbHhJMXZyUnB5VzJnSk50bTV6?=
 =?utf-8?B?Yk40eGtGeXoxUURsbmVwRjdadk9HTmRtOVVCclhocXkxOGlIR3dPUEtKcnhl?=
 =?utf-8?B?VEhDeXpRTmd3UVRXeXJHRFB1U2dCSGRHbk5OejMvK1dxOEMyempaWWVoQUNq?=
 =?utf-8?B?R3M3bDBMYUxLZDhLZkhjRjNNZkVCWmZKYkJ6djhMbzJrN0ZLUy9zcTR3aWhm?=
 =?utf-8?B?cFBMN3J4QW9reEh5NmFWaXZTTHcxb09CWC9uVGg0cDVvT3hTZXgvN1h2dVFi?=
 =?utf-8?B?ak5HNUpLMmg0TmhnR1llaU1SODZ1Q2luZFBGNzZnajZ0SDFGUXhRM0JZZXBt?=
 =?utf-8?B?MGZqSGdVcnBNaFp5VUlIWnduVFl1cFgrNy9TcHdaTFdSZ2lxZ215R3BxNXFS?=
 =?utf-8?B?T1RHdHhWMjB3TUlueUJ0REk4V0IwTmNlK0hxV2t2WGdKcnlHU3RWeGc4cFp0?=
 =?utf-8?B?UllKMk15T3RmQjFTYnovTElSOFNIcndxT1F4V3AxTjQ2UDFvaUVmQnZhMXRx?=
 =?utf-8?B?b055VVd0NWMwQ3hRTW8rd2FYbGZENmdRVlZWdjlDQ3ZpSE1TOW1XN25acWx4?=
 =?utf-8?B?SWxSYyt1akVMK2NwaWpaS2g4ZU84aWl2eEwyTlV2Tm16cUFwNGhJbDNjWGRa?=
 =?utf-8?B?MTdzY25LQU5SMVNqVGlIVFBYRW9RMWtwbVNOUWFBTjFTRDVaeE9HMXZWTC9W?=
 =?utf-8?B?ZkUrK1FNTm4rclpwZGVzM1UwTlFsZzVSbUVzc3NPcmM4U0RFZmFoRFBGQ3hP?=
 =?utf-8?B?cTJ5dUtGYlQwN3B2bktBVG5wZWlwdUtDNzNHYnUwVmNkQWptaHF4KytBMisv?=
 =?utf-8?B?NVRGZkZ0ZUFoNDd6MnBDTHFnTmNmSVpKRDgrZkFuVms3K1psS29zRzF5cTFU?=
 =?utf-8?B?Q2ovdTlqOFRLZm9TR2poRGlFY3pycTBKOEhNUi82bGY1aFMrSVhXemVZRDJP?=
 =?utf-8?B?NUJXRjJRWUcrbUlydFFpZ1dzZGpFRFFOTFlUbUc2aDBsWDNkOUs1YlNORk1u?=
 =?utf-8?B?WFpCUm9wMDdrVUhBeVdGS2NoazVITHNjZXVIZXRoQmFsejZsaC82U3RYR1lC?=
 =?utf-8?B?WFR2Wm1GTkl4QjM4dk5ZYzBZWTRaMjV6RjNlbEYrWXNhRUVWeEk4SHFrUlNS?=
 =?utf-8?B?NEVqcWQrb3BBNThSMGdqWDY2Rk05OE5aQ3dHZDNoRFBLOW5qb0tVdnZ1TG9z?=
 =?utf-8?B?WlUwN2NXREtieVR2djRJRlV6UmlBbWhRSHV0S3NWcG9DVCs4OFpOOVhLTEMv?=
 =?utf-8?B?aHE5TGkwWDNkU0lQQU5DQzhzTExtRUg4YlZjTHkvRVIvbms4dUtDNUowN29n?=
 =?utf-8?B?TzhmVWZiY0Z5cVEvbHdXZU1VZXhlUGMxaGxnc0JBaC9sKzRBeGNFVVhKRUdu?=
 =?utf-8?B?SGt3WmRvcjlpZkowZjcvL1hvZTJyM1lld2x0bnlRWnE1eVU2UnlJMlZ3U2ly?=
 =?utf-8?B?dFVXV01rQlNtS1BXOWhiTEwxOWIvaWxlTWNJYTZnYnFiUjloY3dNNklFMTVs?=
 =?utf-8?Q?YckWDNfYlnbEFAb2jI=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?WE4vQTRLU244eGY4eGpRRUNSa3d5ZnhCUGptbEcyMlNNNlV0TnA4eUJnb0la?=
 =?utf-8?B?aXRmSEFXT21keTJ6elVxOXFrNE9mdk5CVUlPOFJSZEpvWHAzZGtPbC9rRFdV?=
 =?utf-8?B?NHRtam1yNDdETlNlc1ovcFIzYlVRd2M3NlNEK2JlS2VVUkNadlVkUVZTd3RX?=
 =?utf-8?B?Vm1sait4UjRkTms5RUlrSlNNVDVFV2dYQ1hkd2VNdE1wS1Yxd1hpeElER290?=
 =?utf-8?B?dFBTVjRHZkc3OURrdDlCNG1KbkI4aXBtSXpWOWdVUThOaVdjZ011Qnd2VktO?=
 =?utf-8?B?VDFKd0VxUXNPRmRCbG8wY3laa2NFeXJLdTJwZm0wYmQrWkRJOS8yeTZ0SVhk?=
 =?utf-8?B?ZDc5NmV4OVF1VWhEUmtpeUFmb3NlcG1QSXd0ejdDc05QbFZvWXNMVmtra3Np?=
 =?utf-8?B?a1JxenF1bjhtMmE5RG5Db3dhb3ZxQnlyWEhSUmNBTlJvN2toc21JazVtUk5K?=
 =?utf-8?B?bWFnUEtnekNmZytEQllZU3NvNERwMStvY2hacmxFSlUrVXZRRFJYVnRFSzR5?=
 =?utf-8?B?RWwzRXJscTBGZUdYaTZXcHF2RWs3UkE0TUhLNTJCdjhWWEJDTXdWOVlpQnNM?=
 =?utf-8?B?MnNIRU1MUkU1MXRFWXdTbXlLTTRWTkgxTkZMZVM5c1IxazdWZy9RMXpCYi8r?=
 =?utf-8?B?N2tRVGlOaG1TN3k0M1luS3dwK2VGSjdzOTB6WlAzRkZIMGkxbUtsbVllWnRv?=
 =?utf-8?B?eHowKzJ0eUI4Uk9oSlJaa3NuSGk2VGNHNkVDU2VRWlhpekZJRGI3RGFsVlhH?=
 =?utf-8?B?aFZkTHN3cW9sMlBQZ210eHo1Y2hISmV6a2pTUnNJUWU3TzRiS2dQUGh5Sk4y?=
 =?utf-8?B?cnc0SlhucnhMZ0dJMUtaMUtWdkJqamRwU2Jsb01hTHJ6SkQ2aUwyRWpBWGtk?=
 =?utf-8?B?WlcyZmh3a3Z5MG5EUXU3NitiTHNDZkZ0eFdlUE9CZHdWcmtaMFZoZWMwQjhv?=
 =?utf-8?B?ZklPUC8yb1NsdlN1RzBNeXh4ckZrNFpYTkZNWjdGODQycXJrdWdIRjFtZWly?=
 =?utf-8?B?Uk9BT0NkWXd3VDZKamh0MC9uZzdNUHo0MEhjaUtwZmcwNUc4VmVWbEU4S09s?=
 =?utf-8?B?ZFBEcTRZMVI5TWt3Mm5qNURoemlITHhyUkt4cGcwd3V6a1NwQ1Z3aWFXeEdt?=
 =?utf-8?B?dDY5T2x4bTh3MnVSbG52T0V6alZOTGQwUE9EeFg0M041ckk4aHZGa0p3UTVV?=
 =?utf-8?B?a0R6Z3BhU2NXbCs2dWovSlZCSFJ3Zm1GNTFyQmxJK3dGNUNvMDByRHl0R1Ra?=
 =?utf-8?B?ejVVZGZZeXNFWU9WeVhZVVhrY25OdEMvZllOUEJxNy9xV3hNdHRrUlczTnpY?=
 =?utf-8?B?Zlo1RmdHUk0rMVk3L1hFQ0krVGlVb1Voclg5cjRMN1dWQXg2a0cySHJUSHJU?=
 =?utf-8?B?RzJNU2pLZk80U1lqR0lGSDRUNG01NE5vYXZPMm95N0VNWFFvcGxTZVZ6K2g2?=
 =?utf-8?B?clE0TGZvY3hLNHhMSXZsalcwci9Jc1Q2c3dyN3Q3WXI3QytLSG4xVlVkbHgy?=
 =?utf-8?B?d3hRLzdSdXlBSzBlN0FIRStEMVZteWlKYlg2Y3MxcUo0ZkpubFdTN3FWczEz?=
 =?utf-8?B?RlI0ZHhhNEQxSHROWFZ6TjU3NVlvL0x6TEZna3VrRm5sM3lrbmZGNjc4WEFu?=
 =?utf-8?B?T2Vzb0JiYm4ybU9DQmswdXJEckptQXdzUzdTVUtBYnlCdVQ1YkJzSGpOTlVp?=
 =?utf-8?B?TExub05hOXNGWUVBZjJBQnF0VDZsMkdCUGw0ZVZwcUdxaUtRQWJtN2FpdEFa?=
 =?utf-8?B?ODhXclVUVGNzTXhtTXZIeFJENnI4em9LTzgxOHVsbnB6YlFKOTJCS3pScitK?=
 =?utf-8?B?ZkNLbGU0MWUwTlh6VzBhVVBFdTBaYkQ2ZThGVjZzUFhKakFJaE1VWUxMRGVI?=
 =?utf-8?B?SFkveVZ5YVQ4QVRpaU1PTnhpa3FVVlRIenp0R3pPanA0Z3V1Q0FRSWlmZDdu?=
 =?utf-8?B?UGhuUWIySExoYlI5UVZDMFlRWWN5L04yM21xOW4rSVFjK1ZUMWxwbDFpUFpV?=
 =?utf-8?B?YXZrN09kNEE4U3doZkhXWDZjdWN0VlJvSmJWUzJpL2hqL2g5UUJTUytMMmpa?=
 =?utf-8?B?WWNIQzEzUGFVNTdSUVdBNFIrT0tCalYvQ0xCOEpUSU0wZEpzMmU5cDVTQW8x?=
 =?utf-8?Q?A5SEoAuycap/dHhwl0ctl6Jzk?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: aead4b1c-b7bf-4fde-03cd-08dcc03fec1d
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 11:13:15.8664
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: drBVQ8st3vA4XkzpHY4XiIeq96drmyUVHnFXSlcP5nPsdcc4E+oJS1orgIqlzwU5J7FCOzG7Ris7bLtNqvLMpw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA0PR12MB8696


On 8/15/24 17:38, Jonathan Cameron wrote:
> On Tue, 13 Aug 2024 09:30:08 +0100
> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>
>> On 8/12/24 12:16, Alejandro Lucero Palau wrote:
>>> On 8/4/24 18:10, Jonathan Cameron wrote:
>>>> On Mon, 15 Jul 2024 18:28:21 +0100
>>>> <alejandro.lucero-palau@amd.com> wrote:
>>>>   
>>>>> From: Alejandro Lucero <alucerop@amd.com>
>>>>>
>>>>> Differientiate Type3, aka memory expanders, from Type2, aka device
>>>>> accelerators, with a new function for initializing cxl_dev_state.
>>>>>
>>>>> Create opaque struct to be used by accelerators relying on new access
>>>>> functions in following patches.
>>>>>
>>>>> Add SFC ethernet network driver as the client.
>>>>>
>>>>> Based on
>>>>> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
>>>>>
>>>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>>>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>>>>   
>>>   
>>>>> +
>>>>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>>>>> +{
>>>>> +    cxlds->cxl_dvsec = dvsec;
>>>> Nothing to do with accel. If these make sense promote to cxl
>>>> core and a linux/cxl/ header.  Also we may want the type3 driver to
>>>> switch to them long term. If nothing else, making that handle the
>>>> cxl_dev_state as more opaque will show up what is still directly
>>>> accessed and may need to be wrapped up for a future accelerator driver
>>>> to use.
>>>>   
>>> I will change the function name then, but not sure I follow the
>>> comment about more opaque ...
>>>
>>>
>>>   
>> I have second thoughts about this.
>>
>>
>> I consider this as an accessor  for, as you said in a previous exchange,
>> facilitating changes to the core structs without touching those accel
>> drivers using it.
>>
>> Type3 driver is part of the CXL core and easy to change for these kind
>> of updates since it will only be one driver supporting all Type3, and an
>> accessor is not required then.
>>
>> Let me know what you think.
> It's less critical, but longer term I'd expect any stuff that makes
> sense for accelerators and the type 3 driver to use the same
> approaches and code paths.  Makes it easier to see where they
> are related than opencoding the accesses in the type 3 driver will
> do.  In the very long term, I'd expect the type 3 driver to just be
> another CXL driver alongside many others.


It makes sense, so I will change the name.

A following patchset when this is hopefully going through will be to use 
the accessors in the CXL PCI driver.

Thanks!


> Jonathan
>
>>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2054.outbound.protection.outlook.com [40.107.237.54])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id D3132165F0C;
	Mon, 19 Aug 2024 11:14:39 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.54
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724066081; cv=fail; b=VjpNDz6s+e/cLgNXw7hChnl4t2ejoMtTbQXGF2OeGSl6ZcODB1f5xbSD2+iNYn5u5fFsOueKhcK5WJ272P4s2i0YEv50rYAY074Op9aMUde8uib7pzsVXNCbIvfuBWbM30YfNpV6a4YRlnojzoPsqSolZtISuJsqR6MG8oeH5eA=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724066081; c=relaxed/simple;
	bh=yFd3VrDUK4awUn6Y+HWDeIZA1QBmQcVd5HzBDwuHYjI=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=d1EQ0kaiZa5rZbRm45JfUqDNbVYHfPUTK3FiZ3cFIns92ljJQUaBI+WfiyizlkTdTzjY0aaFEeisgttE7/uwB14h5g6IndewqYi3dGqpX28/7DBRN/Gd4ZZ25lhGat9395j66ouC7gwQvMVKlUQfr74DzOrFbecoXiM/lEa2ZYo=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=GNgKa3YD; arc=fail smtp.client-ip=40.107.237.54
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="GNgKa3YD"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=VkdqRbr4okUIJDq4HDtcorgEiQIALD++GaBa2jmgCxdtUgCu8lJddzrtj9G5GczzslOR6jgaAVCDxIl0kGIRvUxEbcml1BPROfZJ44jP7RmZlz7G70l0T/kWJ0JGKQ5QjzNmGe4UtE3p56ztUVNJpV5mymRCX8i1qw/DDTg9L8mXWi3vk+qP8OmMse/Oh0Pncc+RC1+fmImbkVid6Q9uKcrrKYDOF3soGDuIzRdlUPifAI89c7kpNK0wacrUWb1F7RRYGsJu6iyKyIsOCM5+bEiX7tFSA9GMVRairafim2lp4fIekwCm2qMzp/dLi3v/lJ+Vzdta4TAfN4qCgGsF3Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=aMyZigh+SK2TpbCTmxI06zAnyy9PXPv4ems6WPLVe2c=;
 b=IgumzbYzS+HXRHPmhaRXL9J/TW1eUXkNOH4U/2aeLVGEWp0PkG+mzL/dCty0Mf8eO3+t1ZUf/4vhTFUSo+BmYyvMTsXflhvEepH34PMwmK5VeAFFHLDfOb5jSGyVMlyCTNU/265A3w06l2aRN/+LsJ/oC/xOw9r9CVisbZAvGmIG1xvSXpTNi0wiKpqpFSZLUFUtwrB68RYVLaPNH9P7xW/AE/NgSPxYbVtFDQHGe9COefvgetZkNLiWKbnL1ozPQmE//IfctOKgdSUs5WDFk8Gk/UtabtZe4+4UzIIqI89Lc50j+/jMewjbjLZSCJf1wZUatUw9Ye7hUhZKGikI/g==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=aMyZigh+SK2TpbCTmxI06zAnyy9PXPv4ems6WPLVe2c=;
 b=GNgKa3YDoZHG1fwYumCko53UvxYpMkxIObiJ3Xf8YS1RZhTiQt/lLE8n3iJcjKgJfyxSafjm4igyHJ8BZHkch4lprsoTTjr458x2eh9zp/jJ++9KJT+oXy7a4zk3pPQ9Jm5lOLabUvLmwMn4uuqOYSMKVMire4d7eTSQ3ky4CcU=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by LV3PR12MB9187.namprd12.prod.outlook.com (2603:10b6:408:194::20) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 11:14:36 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 11:14:36 +0000
Message-ID: <7fba32da-09b7-e9d8-c859-b01f073d127e@amd.com>
Date: Mon, 19 Aug 2024 12:13:54 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>
Cc: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com,
 targupta@nvidia.com, zhiwang@kernel.org
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <20240809113428.00003f58.zhiw@nvidia.com>
 <8498f6bd-7ad0-5f24-826c-50956f4d9769@amd.com>
 <20240817232657.00005266.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240817232657.00005266.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0622.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:294::7) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|LV3PR12MB9187:EE_
X-MS-Office365-Filtering-Correlation-Id: e5d7a5c0-2521-440d-a0a1-08dcc0401c4f
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|7416014|366016|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?dGgxcWp4TDNEOVFyTUZQeDE3bHhGaG5vRTBjOHRxUndYVC9BUTBkQ3VNZEIy?=
 =?utf-8?B?NGs3WDl4R0J2RmFIUVZSZEdwZThkbkpFMkRuckpzNkFla2xncUFidzNSV2sr?=
 =?utf-8?B?Y09MQmxVWmZId0FZR3g5Z2FlOFFoR3hsNy9NVzNHL3Z4OW5FT2lXaitEaG1S?=
 =?utf-8?B?ZzBzNVRUMElrZU83UlJtRUFxZUxNaU5YWmFhT2tjbzIzZXZKMGQrT0owMjZS?=
 =?utf-8?B?TWhsaDd4ekNxNkRkL3hLLzZLMG5zNXN0aFR5cm1ZeDhiMERHbWN0WU4zK3Zv?=
 =?utf-8?B?ZjlHbUt5dG5lcmxMeFViaGsvb0VnVnNJSTlzR0d4NW5MZmFoTFp1eHp4TVdL?=
 =?utf-8?B?dytMTFloV1BRQzAwRmJibHpQOTZKT2hudFhkc05qZkZHZTRteU9xeFV0cGJj?=
 =?utf-8?B?b2RMS0FWVVJlZmRoUmkyY2tIUk1oQU92WE1xWmpKTWdjbUZQMWFQejF3Q2Z1?=
 =?utf-8?B?YSt1K1lBR2l0M1RlR3ZyRVJqck1sT3BNOXV6ekRESUFnWmQ5QzNuY1BiazJi?=
 =?utf-8?B?MnRWK3k2UHVLZHN6a1JUbmJ3Z1hjVUJlVHhHK05FS242Rlp1VTg4VGdhV2M1?=
 =?utf-8?B?V05GRm1TS3RkeVJOZkt0eWZXSFJ3N0VtVWNqVXNTV2pDK3JiVjJuL2cvaGNV?=
 =?utf-8?B?RUsvcTlrQWRrbXRpa0ZjRkNHNVh0YWtkYjY2N1lhSk02MGJBUkRVZDI3cHBG?=
 =?utf-8?B?YWlRem5XdUtEQ0xMeXdXR25LNnpMSXpIZWpQcXVGWW1aQmlCOWF5VlpiWnpm?=
 =?utf-8?B?ME9aTi9tM1V0UG0xVW9LSno5bXVhc0FKbzNXU0RGcWxxdVl4V3lZRFFOYWJh?=
 =?utf-8?B?dzFuOGlMQU13eXBndDdhSFZVNEZkdXFaak04bGJwSXBFYU4ySndNaWVVeGV5?=
 =?utf-8?B?b2dJK1RnYkNQRm5SRFJxTGdrcEdVOG55T3lPRThHTUYwUGp3TmFKWUF5dnI3?=
 =?utf-8?B?STNPOWlOMGszMkpXa204RytRR2NLTE1xanNFNEJxVmtoZm85K1Q0VnpXWHBX?=
 =?utf-8?B?bG9ad2laRHRlVGdNT1RtWXRiaXdvMFhaQkVua3lXek5Hdm44eHNiekEvL1FE?=
 =?utf-8?B?QXg5NFdSTjNwOGp3RXVRaDFObmtqRkFhcmYwN1JNTVI0MXE1bVQvZ1FwTGVo?=
 =?utf-8?B?Z1R3T2tuS0ZSRTNTSmxtb0ZTemhLOWs5K0J6VDM1endsUDNCU0R3L0c2WWkx?=
 =?utf-8?B?L1NwYlJ2YVJqNWZZNGkwVzdrYldSQWpBV3BSL3pudUt5bXVCS3JXZHZJbHhW?=
 =?utf-8?B?WHU0eDA3ZGFuSW1mL29iU1p5blRyT0ZDSXExMkZyelR4MzZyNjcySVdmcG0v?=
 =?utf-8?B?ZUh2N2phZ1h2ZWI0KzVISGg1K2c5MW44M3pGZU5zZGhoN0gxUHJKK3VONTRp?=
 =?utf-8?B?bGxjVU9QT3ZJMHkwZmxOUFZ3ZGlqWStkdjFxQmNna1NYWDJoNzVOV1Z6bDND?=
 =?utf-8?B?eXFTNmU2QzRBVTRYYVk2SnpEc2NtbEpVL3M1VnpFWWl5bWVFTVlBaWdLcFg5?=
 =?utf-8?B?dmdtTEljMjJQbno4eHdWdDdOeG1pWXV0cktRTkxvTlBzM2hRbzVHMzA0QlNE?=
 =?utf-8?B?QnhFbXR4NWlOaHh2OTZRak9PVFpibjRoNHA0MWdDTlM3YmxMMGs5cGR1OGo1?=
 =?utf-8?B?T01wcTBVRGZ4N0poY05pclVBWnE4V1FubDhjVGVoUzBZRi9PcWpmRS9VbW9n?=
 =?utf-8?B?bDZ5VUhobmpmbnJXSXM3bVI3RFhRMzRHd0tVVDgxSjlWUFJpbXlIS2RLUTJu?=
 =?utf-8?Q?plf7rTBeGfAqMnljvs=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(7416014)(366016)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?ZDdLcW9QQy9zVUhPTUEzUmc1cWZ5aHhQQ3NxOVhkVjhwVWRFNHptSHp1L0lo?=
 =?utf-8?B?SmlqMzZTRG9teEE0Qzcrd2NoTmNoQ2tFSkFMRStpb0dKQ2oxWjRQMGNaMmxo?=
 =?utf-8?B?VlFiWlRvWGxKVkR4MnJsanpuazdxMlI2TDVqSk12Mm5YUFhTc3ZZQmxFT1Ro?=
 =?utf-8?B?Wkh4Z1Vxb1I5VHhGcllxcVVkS2lVVTBkc0RXZ0VHaXpSdGN1bWRtTFZZUUta?=
 =?utf-8?B?Y0ZyTDNjN1pKdTBnQXVnNFR2Q3liRUtmR1VKYTFhSWVqSW9SM2NEU3kyV2ph?=
 =?utf-8?B?czROSEJNc2RCM01FdEFCOFBpY0l2UmdXajIvZ3MzRW5FQ0NTQzFYSXlPT3ZK?=
 =?utf-8?B?R3I5WnB6bDlUSEVmLzdObnFJaTJ6UHgxSUJmRFIraTViZzBqaDNjQmc5aFla?=
 =?utf-8?B?V09zSld5VU1JOEVjd1N6VjU5T000UTJpTXRUSi9wb0FvOTJqNTBJU3I2R3Zz?=
 =?utf-8?B?ZUUrOEtQNlRoNWFMVDAyblhnb2VvRzdtVFJVVStZWDZyZWpLdjg4RFRUaVg5?=
 =?utf-8?B?TytxNEwvUWZLUXdVdTIycXRCWjlYdWV4VDNNcmV6U1pHa0RwVTFSSkYvdWE1?=
 =?utf-8?B?Nlc5Smt2bmU3bEszKys2YWZGZ0lYYmFvZWFNUVBzVmtpWnJFTWdUeC9NVTBW?=
 =?utf-8?B?eUhFRGxXTzRreFB6TnNFSmdGZkdPL0swK3h1aHpBbjNuUWZReHZoYXVoR3dm?=
 =?utf-8?B?anptNWdJUmtqQXJGOWczT0d0ZmNIMG1DeWNrS3BjTWVsSDQyTTFDYy94QXEy?=
 =?utf-8?B?WWY5eVpjQWRvU2xRamdZZTNHNmxZR0c3YTYxWjFzK0NhMlYrbXl3Z3FCZmVG?=
 =?utf-8?B?cnFibFU3Y3ZCRzNmOWlxd2pRMnNjMFFRMFZ0bDd0VzRVZ2Nlak5abkxRYUR5?=
 =?utf-8?B?dzl6c3F0UHBGWUVTZU0ya0xmZWtzUmlieFpnYXBpMEc1OEY3RzE2QndOaENG?=
 =?utf-8?B?bG5sRnczeSs1TmZSd0pDWmNNeDB3emlhQzV4WEE0Q2g4blk5MFhsTkh3ckN1?=
 =?utf-8?B?R1lBTDk4dUdsRlloUDdXL3ZIWS8xb1c5aEZ2QVR6V3ZGbUtIbUZqZm5jRkhR?=
 =?utf-8?B?QmFOR2lsdW1ZKy9KelRKbmZsRGNMMHF3c0FuZkxpY01JUXBvcjI0TndPSmFI?=
 =?utf-8?B?MGhnaFQ3YVREZTBUMFBOT25nalJlNmhFazZzYWtWQWhFMm9WbGY0ejIvdHFm?=
 =?utf-8?B?aE0wYmw5eVM4b1oyc2lQVGo3YlgwVXd0WWxCSStMSjRpQnlnRW5lWVp0MUR3?=
 =?utf-8?B?T2wvNnk4NERBNHNXdURyOFQ2eDFRZDRsaVB5VVZYYnpOZzBxekJBUklhdDlO?=
 =?utf-8?B?MXFWclU1K2p0UXJPTmF2Ui9UZHVwVXFPazJWWVFnTHZQTW0rcVhyRFlPVHQr?=
 =?utf-8?B?VGhwZkRJVkdSSVJXU0IvSDJla3k2eWQ0RUpQd1MxbnFPQ3BCd1p5V3ZkMlNr?=
 =?utf-8?B?TXFhV2FRWlI0eGk3VGFFak0rWVlrUUZJdjBFSEJENmtQWlVKUGViQUduRFVu?=
 =?utf-8?B?c2Zobk10UVZ6TXNrWDNINStSUGd0RXI1R3l4dklnaENpQVBHWG83VlFnc1Rj?=
 =?utf-8?B?aEpzb1lIT0xVOFpsWXVXUDMwVnBsclIyTEdJV2FTdWZMS2FwM1J0YzY3LzJY?=
 =?utf-8?B?ZnM1dXJQc0FhVzUxL1JzV3NGb0lMbis0UXU1VDlMd29GTlJkRFpTYU5pdGhn?=
 =?utf-8?B?RGRMb1UxbVdwQXdGaGprTnFTVVQxTDhzdkpCd0pkdXg1K0xTN2pVRHhHMENN?=
 =?utf-8?B?ZHdxUjl1OThza0NJWmx0L2RDMDRlSGJCTWR4cHJmdGo1YUlJRnpSSzdtVTdZ?=
 =?utf-8?B?MysvY3d6dFdZK3Q1WWxNVHdqUFZPYnFjdjhaTEFlajI5K2dESlByT3VURXVm?=
 =?utf-8?B?djNRLy9FTG43Y1FmUTVTa0NzbTMybmVnK3V2OHFRUHlEZ0dWSVhMOE1lcU9V?=
 =?utf-8?B?S2N2Qk1BY0diUEhLOTVJSWtFTGExdGR0SWRIaHU0OE91T25rSlJoSnNEdHJ0?=
 =?utf-8?B?a1pLN1NhSk0zL243c2ZRa1RNai91MjFqUHZYYVVuT3dqZ0hXWUV4ZTFyNGRq?=
 =?utf-8?B?NURXWjhKcTFOMk5saDZDU1hQditDR1pKRDI5dlZvdjdGODQwM3RzQU13N1Uv?=
 =?utf-8?Q?Mc2u+ISnj9YCKew1c5gQ9fZ6+?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: e5d7a5c0-2521-440d-a0a1-08dcc0401c4f
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 11:14:36.7547
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: WQinQzJe4HLwg0QOXXg26oSX7s/QVfudBTxhDT69zDmhP1maVfZHDZBdqBU3eoiEq54JMJ5zALc54i8wN5Wq1A==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: LV3PR12MB9187


On 8/17/24 21:32, Zhi Wang wrote:
> On Mon, 12 Aug 2024 12:34:55 +0100
> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>
>> On 8/9/24 09:34, Zhi Wang wrote:
>>> On Mon, 15 Jul 2024 18:28:21 +0100
>>> <alejandro.lucero-palau@amd.com> wrote:
>>>
>>>> From: Alejandro Lucero <alucerop@amd.com>
>>>>
>>>> Differientiate Type3, aka memory expanders, from Type2, aka device
>>>> accelerators, with a new function for initializing cxl_dev_state.
>>>>
>>>> Create opaque struct to be used by accelerators relying on new
>>>> access functions in following patches.
>>>>
>>>> Add SFC ethernet network driver as the client.
>>>>
>>>> Based on
>>>> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
>>>>
>>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>>>> ---
>>>>    drivers/cxl/core/memdev.c             | 52
>>>> ++++++++++++++++++++++++++ drivers/net/ethernet/sfc/Makefile     |
>>>>   2 +- drivers/net/ethernet/sfc/efx.c        |  4 ++
>>>>    drivers/net/ethernet/sfc/efx_cxl.c    | 53
>>>> +++++++++++++++++++++++++++ drivers/net/ethernet/sfc/efx_cxl.h    |
>>>> 29 +++++++++++++++ drivers/net/ethernet/sfc/net_driver.h |  4 ++
>>>>    include/linux/cxl_accel_mem.h         | 22 +++++++++++
>>>>    include/linux/cxl_accel_pci.h         | 23 ++++++++++++
>>>>    8 files changed, 188 insertions(+), 1 deletion(-)
>>>>    create mode 100644 drivers/net/ethernet/sfc/efx_cxl.c
>>>>    create mode 100644 drivers/net/ethernet/sfc/efx_cxl.h
>>>>    create mode 100644 include/linux/cxl_accel_mem.h
>>>>    create mode 100644 include/linux/cxl_accel_pci.h
>>>>
>>>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>>>> index 0277726afd04..61b5d35b49e7 100644
>>>> --- a/drivers/cxl/core/memdev.c
>>>> +++ b/drivers/cxl/core/memdev.c
>>>> @@ -8,6 +8,7 @@
>>>>    #include <linux/idr.h>
>>>>    #include <linux/pci.h>
>>>>    #include <cxlmem.h>
>>>> +#include <linux/cxl_accel_mem.h>
>>> Let's keep the header inclusion in an alphabetical order. The same
>>> in efx_cxl.c
>>
>> The headers seem to follow a reverse Christmas tree order here rather
>> than an alphabetical one.
>>
>> Should I rearrange them all?
>>
> Let's fix them.
>

I'll do.

Thanks!



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (mail-mw2nam10on2059.outbound.protection.outlook.com [40.107.94.59])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 83182142900;
	Mon, 19 Aug 2024 11:28:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.94.59
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724066940; cv=fail; b=YsECgHzPe7VjJsBJXdhtZhCoqcY+zMMU86ZwZUdA2GPWjqmTvFfX8A5o2wMueXzN/QqVLg6mip11JYXSn9V4ko1kFEe7WXvpwu7Hj3sj4pnlz3+LxznhvfLB/M1itgz3xY/4nnARoHLKKAUGrRLZGfvyrH+4DkxahlcIYAKeJB0=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724066940; c=relaxed/simple;
	bh=eJRvKhC5qSzhrTs3Jmjr00IhBq9VudKtI/fdHTEy3Yw=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=iY73gft65FXFxMxUQ61FdOIbn+2f1CKw79HshTu9Ggx8VhdeRJ7+XhKaq5V29BmrCtsO2rI8nM+kUXsvy8/6EiaTf7p3o7NCzU6Ceu9wXuZfPErO29RX0mh0Rrp2WrtVXXq7g3GDPP+z1s0kk8bH1JWOqHa+BOVHHP9qEIQveyE=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=onG9EXBE; arc=fail smtp.client-ip=40.107.94.59
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="onG9EXBE"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=KiBF8g3yGfJkGbev+rWI9HDPLDmM+VUGVIZ935wnQUz93q71X9FEgPfvg7YvAW8fiVEUnwRU4VXSB7f6Md0WmK1nU7CUn8FHSwN8w5LJ8qvofmNkBNJwEK9wPkNMnPUbUslTknvd8Q9Jxj8MgNlIsmAxh8QiOTMTAIZ2ffYsXqWIw1McV9CvS11PtScUu1BXm8RVXf05XxH2okIfq6NXFtKZrBR5MvI4OrWYftdqV9vJMVVIrjrxEigvh6U62hDBotLp6O2ZeLs6M2weE3EgfrSSqIjx23eieApRJgZ9PihYixDncztS4aqd+uBxshbpX0DXiDyZNWSIOjrWGNZvow==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=XI+wivW1YLw6RBWEp3vriP5eFuxx+/AIk/W7yXMSFPs=;
 b=i7CvpGuYXtClRgbKMF7mgFJt6gwob3bGnlCZdj5e4aauuiN2bhVIOOaAOgYJ74i5RPswqK4JwUxZT8TrrINWk/MVLg1y50ZFcc2Tbt+YFeQm/SErJNXh8q7RRUyQVFmEg5gsbOeZM1llZBMKgSTYEikCRXRcuX8eOfdqWegqvscGG7+M3Zvi+oSPgfebQGwbWGV5jtNR1ujjtxuxYmg0dPfsRZ0iK8cf8KjfJlQotvDxPVX+z26l8rcrXHUnGP0L0tDsfnl5k4sI6sHoZUm7Tt7ymuS5wrvkVZPG8yoHHtczfl0csutq12qiaPP/+yJ13S6YMJvlJp/Vvv7QPOiOBQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=XI+wivW1YLw6RBWEp3vriP5eFuxx+/AIk/W7yXMSFPs=;
 b=onG9EXBEbjcrkvyF4BtCBj82DEvrIYp/hhU9dZbJB33JiwSAu/X+fLDbphvxV80gGn3O9+/9cQyNyq2CbbpP7vB1FVyt3mVREIbiBdwMnsR4rfU5nsf+4czUCdReP1D4faSrW0YY22e/0E+0UfzcJRVKBI2yZC+hwu3AsF4kOeA=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DS0PR12MB7970.namprd12.prod.outlook.com (2603:10b6:8:149::13) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 11:28:56 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 11:28:55 +0000
Message-ID: <24600a48-a173-7a32-445f-83337b035285@amd.com>
Date: Mon, 19 Aug 2024 12:28:12 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 02/15] cxl: add function for type2 cxl regs setup
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>, Jonathan Cameron <Jonathan.Cameron@Huawei.com>
Cc: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com,
 targupta@nvidia.com, vsethi@nvidia.com, zhiwang@kernel.org
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-3-alejandro.lucero-palau@amd.com>
 <20240804181529.00004aa9@Huawei.com>
 <5d8f8771-8e43-6559-c510-0b8b26171c05@amd.com>
 <20240815174035.00005bb0@Huawei.com>
 <20240818110720.00004e16.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240818110720.00004e16.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO6P123CA0008.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:338::16) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DS0PR12MB7970:EE_
X-MS-Office365-Filtering-Correlation-Id: a5f99a45-f46f-444f-efb7-08dcc0421c5e
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|7416014|376014|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?NXVmcW5SdzQzYktmMUVIQkFpcXdTMjdld2tHTjRuMm9GSDhSZHQyUE9RdFAw?=
 =?utf-8?B?MHpJZzhpNkdaUW5WMnNrcW1McmZTVERDWXM1Lzl4OXI4K09tVFBKK0tlNXRR?=
 =?utf-8?B?U2J2MGh5SjlrRzVJTzFNZFZuUlMzaCsrQzhQMUZGOEhYeERzUEY5N2theDVP?=
 =?utf-8?B?RDhYbVV3OGprR2dGUXR3UFQvS0FJZlVqMW1ZSlYvL0lQUnpjckVwMjN6WXdq?=
 =?utf-8?B?Z0ZLZHlkOXVUMldNNGdaS3NwdDloWDZEQmFyS2c0WkZ5T2xsVXRJeUdOWUtU?=
 =?utf-8?B?a1ZEL25paXBvTzEvcXpiZUtvNFlxV0s2aVNNdXNtY2Q5U2ViQUx3S3pLOE1j?=
 =?utf-8?B?b3o4SjdsUkRhalNHMkM0YWJOWm1yOVZVa3JYVUJ4Q3RxYTNiMmNGNXRXREpp?=
 =?utf-8?B?ak9TQ05oK1RaUkhSYnNORHQyZldtTVBERU1NRVNrSjgxMGVsSFlzdFp2S0tM?=
 =?utf-8?B?djR6UVcrQlRvODkzMkJpTUNteEJKR2Zkb051QnF2VEpWTkpnZWgzc2pGMGxY?=
 =?utf-8?B?UEdBMmdKa1l6MEJXT1FGN29uUHRGblZybG5aVWxzQWdybUlXa0R4WExiS1RJ?=
 =?utf-8?B?Z1k0S1U5YytYcGlMcWhweU0xTWx1OVBVeituWUZBOWl6bHYxb1VuT3ZvWVJx?=
 =?utf-8?B?RlBpa05ZNVFQbXhRNEF5ZWx4R2p6c0dqVGhWMm1nYm9oTkRNSkxaS2lZUk5r?=
 =?utf-8?B?SGo2QjFFVkUxNEpnWGRKT2tPaVllKzllZHhkcjNWQXNPYlhJN0hmQ1JpZnBW?=
 =?utf-8?B?TVVXMU5aZHdVK2FVZWdxeURBQ0dwWjBCMjA5bWF2Ly83Sko5Mmx6S25pdTVj?=
 =?utf-8?B?NmxoVG5mR2tIY2QxcGpoN3p0cWZrY3BPMFVuUllFZ1ZiTzF4blcxczl0bkE5?=
 =?utf-8?B?RGZjZndqbEVNaUp4ZndOMHNCRGFlcHQzSjU1MjR6RzdVcE1jRmhqQUlxM0to?=
 =?utf-8?B?dHhXbkZ1a29ITUkrb2FPdlJHNTRacjJjejJTc3k2K0FDWEc2L3haRURzV0x3?=
 =?utf-8?B?WDRuVmpId24rYWtaZ0xiNkJXb2xXaS9Rd2NSNktmenhMc1JIUUpMSGVyakpC?=
 =?utf-8?B?eXdaV1lldWl0ZEhTOGxOa1drT3lveGkzWlV4NEoyVFY5cjNsOWF1bS9WNXRk?=
 =?utf-8?B?cEc5dUFEeTNDcmlsVWZvQThaWU8xUVBMZ2E2TmhDeDJlck1RZDBEZHFkZmlO?=
 =?utf-8?B?a3c3eE0wV1E1cnRNK2xQWkQzakZ3M2NDZE8rMloxdDhvY1JhUnlFQURFY0xW?=
 =?utf-8?B?UnVFL2NQL1BuWVlpUU5zOVZaT0NBV2FoWExhbklEWm13MTFVV1F5Sk5NeUxN?=
 =?utf-8?B?NlFvU2pEM2Q1dHRSVnhmK3VTZldJczJuZU0zWmhLbVBDa2xpR1VCUlpUL3Rr?=
 =?utf-8?B?Z0QxNEZiSkFoN0E4ZmRvb2FuQUtKWHYvQkJlWGlQSkdidFN4YU1vSExJVHpt?=
 =?utf-8?B?QytvRE1LSHV3SndxeXhSOXBYaWszNERjd3ZDVDVuRkhUVXZiTUt5Z29RbjJ0?=
 =?utf-8?B?T3pENU5Gb3ZDMlV5dnFGY2VDQWpVS2hSOW1IdHpjS21FZVVKUnZIU0oySlNp?=
 =?utf-8?B?Y0R4VW1DeUdIRTBhR0RMZU1MM1dVaUFDRmxUbkh5VmhxU2w3cWpabjREWlFF?=
 =?utf-8?B?cDdIVGUySklVNmMvSGt0SjcxMHhSY01mWWRlSi9qeFNFMzluUjVvc090K0Ja?=
 =?utf-8?B?WkYvZGJ5OGx5dURZbWdib1dvWGU4T2hLZ29QSEFDNS9seXNpUUFXeWM1QXBs?=
 =?utf-8?B?UWVtZHRpV2VUWVp2TE4wMjcvZXZYd3YzQk82YmFKd0JCRlNBcmNXMW9ybEND?=
 =?utf-8?B?S1ZmeUc5STRkcU1LU3RUQT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(7416014)(376014)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?b1h1U2w2VmVYc21kYkxmLzNtRkpaM1puVFB4NXFtZEVHNFVpcUY4OXZzSEN1?=
 =?utf-8?B?RTQxOXZNK3Rrc0RRajd0ZTg2dlpTN2pBQ3BnM1FiTk9TaFNuSkNWakFlR2F6?=
 =?utf-8?B?TU5wcEJQaEhmV1lyNzZLMEtqeGI0SlJsc3JwSGlmQnNETDdaVXVWdnczQ2l3?=
 =?utf-8?B?K2V3WnpzNEtHQjU0YWJITFFhcWRZZkg1VVI5T1RzSnJhbFVZL3RwK0pqam5u?=
 =?utf-8?B?VlR0RW5oc2dHTWxGTUNGNmhTNFB1em5qVWdVVW1NQndpK29raEg4LzZZUVg5?=
 =?utf-8?B?bHd1UmRQdHJOcE0xSDlic28yQ1JVUmk2YnprZUU4UHJYekRzdTFZTWptOFcr?=
 =?utf-8?B?dHF5ekdlanEzNVROR3gvWHduU3dJaVNybElPcXVTelJLRzlXRGVpRUlkNlZG?=
 =?utf-8?B?MS9TMWNpcG1VaEk2bFlYZDMxMWphc0s4cW81MVNWNUsvbUptbVErNk1UaGNo?=
 =?utf-8?B?ZXYzVWVkQ2lVcU95aHBIK0FoSlJUSGN2Z0JDSzFUTnlQL3YxZVN1RW5iemZX?=
 =?utf-8?B?S281VkhjK0V0em5DUHdXeVZwbGpjNHZ0RzhmSVI0a3dkRzZQc1R4U2U5cFlT?=
 =?utf-8?B?M1Z1NlhUeUJTVmZSWi9wQzhDOFVIU0NGQlR6MGdOZzFlSSt4SlBORGZrTDB3?=
 =?utf-8?B?NlNmUzNaN3JuUlpLdWhzYlpqejBycGVRR20yVURTTjczOGlDQjNtK2JPNkE5?=
 =?utf-8?B?bVpEQWtRZnBsZ2dLT3ZLU2tSVW53U1FBUkJRM1NnbXF1TFhwZWRJZEV4OHp2?=
 =?utf-8?B?US9Db3lRa01FeDlWQmZaejlob2dyZmprOEsrL2JsZzdzSTU4NTZMQVRORTJW?=
 =?utf-8?B?UGt4ZmQ4Nk1wb3JOLzdOOFMwQkhvYTVocEY3R1ZyNlpoKy9KMC9vNHVRbzhQ?=
 =?utf-8?B?NG8rb1VQZlRWUENraEhMRWNLZjByNUs0cUJJdllRL1Fiem9zZGtKRUtIeEJI?=
 =?utf-8?B?ZktXTUV6V2JTRkRUS0YxelFNdXBoZ1ZuNDB6YWpUUkRYNGZxTXZHYytpbDhv?=
 =?utf-8?B?dHAvc2gxMWZBZVVKSUNWdjlyT1BKQmU2TDFhVDJvM01Wc08zME5jZ3ZQUHpC?=
 =?utf-8?B?aGZzZnhTSW1GN3llTys0a2dNbGRhTHhFYkhqSnZlWUFlb1dScEFZcFFhVHQw?=
 =?utf-8?B?ZFZvSUZQeWVLU29qdWJmNk9qSFRvUk9OeWtNeXp6V1duV2REdUVrOUlNaWRS?=
 =?utf-8?B?WlkxSHhxcWhwNzhrMFZROUxKVHU4dkZ1Y2RtL1U3YmR1RkFBdUEzdnV2K205?=
 =?utf-8?B?K0Y3b2JxdW1uQWJvUjh2aGtLdlZEQkt1TFNtb3M3cExURlBrM3FETkh5cGdI?=
 =?utf-8?B?eVc3OXRrSjdTbThsT3J1T1pFcWcvOTVQYzdJSGtnbi84ZDdpU3dobEVMbDI2?=
 =?utf-8?B?ZEFSVU1jY2lvSkp4aHROWVI1ZlNKdUdQS3ovN0I2RUFTRHlrUmtqYUo5ZGlj?=
 =?utf-8?B?dVJQb2NZVy9XTm1CYVFUUGRkYVdmSVpNamFkV3NScHAvQWo0dFh3aFg4YVpm?=
 =?utf-8?B?UEFVQVlCcHlHNFlIdCsvd2x1MndaRzBSRFJjbWRXQ1gxeHc3Tm5WOGc0VERB?=
 =?utf-8?B?cUlERTZ5TDh2TTc2Y2c0S3BOVzQ1SzJ5UkVjMlBFY1lBbWV1Mzlsb2NJVjVU?=
 =?utf-8?B?U2RBT3pnbU15TWtmdW0zWGdKUVlFTnpLRmh3eVpCME9ObGNadnZBS1g5SGZp?=
 =?utf-8?B?NWk4ckZIczliUkhsTDR4d2pCa01hdFJ1SU5ZREszQXpqR2NBQzVWVFhoQmI4?=
 =?utf-8?B?cVcyYkkzQUZUZUQ2aVJIV1YwKzVCajNyZTlNVWxyaGRBbkFLeDhMZWVGakQr?=
 =?utf-8?B?UitIVEZzbWNTM3JBdElmMU5wY2I5eDdTSUhjZ1RDYTBEYXc4OUJPNHllUHRa?=
 =?utf-8?B?OUJKNzBTNVV4WmgwRWgyR1hmeDltQTd5QUFLMllaM0FiOXJSMENyQTVPVkJU?=
 =?utf-8?B?bUVvMGYxQUpNbVhuUjVEK0ErdmVwWG5tTnc4VXFYeUtvRU1zUGFoTXhZa0xI?=
 =?utf-8?B?QVRmelpnMEwvK3hjZHZZcVphNi9Bc0tQVkRmVW1Zc3k3L05SUnJBcWxkbThm?=
 =?utf-8?B?ZENkOTRqM3ZYcFh4N1M4VkNjWXBTSGlYeC9JcUlqcEdMek95VDN3U2o2WTFq?=
 =?utf-8?Q?lhbn+Pb8bDUjZFN0A+3EU/CWd?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: a5f99a45-f46f-444f-efb7-08dcc0421c5e
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 11:28:55.8982
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 35FLw9WQOWiq0teQTrr6JTnKO1c4KsVrIAyLWVsyl/EXGu5YvdGujfCZbWikY7FlA5HtxMyvVlx7tUkLgK4+NA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS0PR12MB7970


On 8/18/24 09:07, Zhi Wang wrote:
> On Thu, 15 Aug 2024 17:40:35 +0100
> Jonathan Cameron <Jonathan.Cameron@Huawei.com> wrote:
>
>> On Wed, 14 Aug 2024 08:56:35 +0100
>> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>>
>>> On 8/4/24 18:15, Jonathan Cameron wrote:
>>>> On Mon, 15 Jul 2024 18:28:22 +0100
>>>> alejandro.lucero-palau@amd.com wrote:
>>>>   
>>>>> From: Alejandro Lucero <alucerop@amd.com>
>>>>>
>>>>> Create a new function for a type2 device initialising the opaque
>>>>> cxl_dev_state struct regarding cxl regs setup and mapping.
>>>>>
>>>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>>>> ---
>>>>>    drivers/cxl/pci.c                  | 28
>>>>> ++++++++++++++++++++++++++++ drivers/net/ethernet/sfc/efx_cxl.c
>>>>> |  3 +++ include/linux/cxl_accel_mem.h      |  1 +
>>>>>    3 files changed, 32 insertions(+)
>>>>>
>>>>> diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
>>>>> index e53646e9f2fb..b34d6259faf4 100644
>>>>> --- a/drivers/cxl/pci.c
>>>>> +++ b/drivers/cxl/pci.c
>>>>> @@ -11,6 +11,7 @@
>>>>>    #include <linux/pci.h>
>>>>>    #include <linux/aer.h>
>>>>>    #include <linux/io.h>
>>>>> +#include <linux/cxl_accel_mem.h>
>>>>>    #include "cxlmem.h"
>>>>>    #include "cxlpci.h"
>>>>>    #include "cxl.h"
>>>>> @@ -521,6 +522,33 @@ static int cxl_pci_setup_regs(struct
>>>>> pci_dev *pdev, enum cxl_regloc_type type, return
>>>>> cxl_setup_regs(map); }
>>>>>    
>>>>> +int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct
>>>>> cxl_dev_state *cxlds) +{
>>>>> +	struct cxl_register_map map;
>>>>> +	int rc;
>>>>> +
>>>>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV,
>>>>> &map);
>>>>> +	if (rc)
>>>>> +		return rc;
>>>>> +
>>>>> +	rc = cxl_map_device_regs(&map,
>>>>> &cxlds->regs.device_regs);
>>>>> +	if (rc)
>>>>> +		return rc;
>>>>> +
>>>>> +	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_COMPONENT,
>>>>> +				&cxlds->reg_map);
>>>>> +	if (rc)
>>>>> +		dev_warn(&pdev->dev, "No component registers
>>>>> (%d)\n", rc);
>>>> Not fatal?  If we think it will happen on real devices, then
>>>> dev_warn is too strong.
>>>
>>> This is more complex than what it seems, and it is not properly
>>> handled with the current code.
>>>
>>> I will cover it in another patch in more detail, but the fact is
>>> those calls to cxl_pci_setup_regs need to be handled better,
>>> because Type2 has some of these registers as optional.
>> I'd argue you don't have to support all type 2 devices with your
>> first code.  Things like optionality of registers can come in when
>> a device shows up where they aren't present.
>>
>> Jonathan
>>
> I think it is more like we need to change those register
> probe routines to probe and return the result, but not decide
> if the result is fatal or not. Let the caller decide it. E.g. type-3
> assumes some registers group must be present, then the caller of type-3
> can throw a fatal. While, type-2 just need to remember if the register
> group is present or not. A register group is missing might not be fatal
> to a type-2.


I agree.


> E.g.
>
> 1) moving the judges out of cxl_probe_regs() and wrap them into a
> function. e.g. cxl_check_check_device_regs():
>          case CXL_REGLOC_RBI_MEMDEV:
>                  dev_map = &map->device_map;
>                  cxl_probe_device_regs(host, base, dev_map);
>
> 		/* Moving the judeges out of here. */
>                  if (!dev_map->status.valid ||
>                      ((caps & CXL_DRIVER_CAP_MBOX) &&
>                  !dev_map->mbox.valid) || !dev_map->memdev.valid) {
>                          dev_err(host, "registers not found: %s%s%s\n",
>                                  !dev_map->status.valid ? "status " : "",
>                                  ((caps & CXL_DRIVER_CAP_MBOX) &&
>                  !dev_map->mbox.valid) ? "mbox " : "",
>                  !dev_map->memdev.valid ? "memdev " : ""); return -ENXIO;
>                  }
>
> 2) At the top caller for type-3 cxl_pci_probe():
>
>          rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
>                                  cxlds->capabilities);
>          if (rc)
>                  return rc;
>
> 	/* call cxl_check_device_regs() here, if fail, throw fatal! */
>
> 3) At the top caller for type-2 cxl_pci_accel_setup_regs():
>
> 	rc = cxl_pci_setup_regs(pdev, CXL_REGLOC_RBI_MEMDEV, &map,
>                                  cxlds->capabilities);
>          if (rc)
>                  return rc;
>
> /* call cxl_check_device_regs() here,
>   * if succeed, map the registers
>   * if fail, move on, no need to throw fatal.
>   */
> 	rc = cxl_map_device_regs(&map, &cxlds->regs.device_regs);
>          if (rc)
>                  return rc;
>
> With the changes, we can let the CXL core detects what the registers the
> device has, maybe the driver even doesn't need to tell the CXL core,
> what caps the driver/device has, then we don't need to introduce the
> cxlds->capabilities? the CXL core just go to check if a register group's
> vaddr mapping is present, then it knows if the device has a
> register group or not, after the cxl_pci_accel_setup_regs().


I thought about building up the device capabilities based on what the 
registers show instead of explicitly stated by the driver, what I think 
it is your point, but I think we need those capabilities in one way or 
another, not just for pure information purposes but also for finding out 
if other initialization should fail or not, what was the original goal 
behind this patch. The driver could also define those capabilities to 
expect and check out after identified by the registers initialization if 
they match.


So yes, I think it could go this way, but I would prefer to do such a 
refactoring after this initial type2 support.


> Thanks,
> Zhi.
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2088.outbound.protection.outlook.com [40.107.92.88])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 19EF21DDC9;
	Mon, 19 Aug 2024 13:15:33 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.88
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724073336; cv=fail; b=S7wsfNXDLZYxxEr1FtvYgzvuZxw3/lPWUaiSdXzCYhJGR6hrrogpN+CArQQkzwpUuR0Gctsk5l8BgUbhPPpd40bwWMYty+0fHVeUSTmjNSUHJlUXEWB3Dmra07ifER1oJZbOg5EtpnMCAADe1o9mMvZCM9KiaVLZ7jjacaaIG+E=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724073336; c=relaxed/simple;
	bh=oDPDUo3G0iVgVjVQQwdDoimYZRen4mbhC8PVberg7Ig=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=fKxoU3gTd+CW0J/D2Yw9XOYjXCWVujv+GbemVt2GqyRgEZvzAnct/9ym1iDMnwclLSh5QKA5cRZl9pQVy5AHmHZIjI+grQEoXBHK4NIBElM0STu3mkir9nfOPj9kXb6UB981+qOyb486tgFYmpDWelCim139Sad+lmpvv1QKPy4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=ZF7n4r0Z; arc=fail smtp.client-ip=40.107.92.88
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="ZF7n4r0Z"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=AWqUuWCzLlreAaU4XTwn1CaKjMH7DlE4yst8Wd/Vl4lEVlZ6MhfsbHLmdxapMxRKkL6IVUzUDKWMgKf4Xe3OqqfBlUaWLnSwXDlIK4qU3U4ariNOEj03LxEemAoUS9wXxlgqGsgHqctGV9K0xlWCwlp3NMBnSKFpbzMG5Es35aHPaKg6yZJQehATFKlIZYEtTDKu0fgp+Ekcf5v3QGWSqyIAeerXZvuYN25TYg6dk/Wz7Cb9cnYrTMmHylhzn8Qh9kXDjgHtN4KZqxRfFonuMzg6WR6YF6J795TBTCqfb6Xx0FWEMUFaFl9ekK0pcb1+n1Ly/H5T1P2+nOp2Y0aJPA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=yCbGdctHuoxIbLmXQxaYHzDVz/7WyQuSe0JW2fBzlo8=;
 b=yNgNlkXkh8modqn67Ei+DAfhY+zRhmhjAnSySgyl5FOsl7aDWydf15BB7gvGa680iB3S1O1EU4qRdgcs+vp4AF1mNfuIe5oFg26YQVQKCXvB0jWdLc6OnAqYvfy34tgyXdbpVKf5qIfnnaMAtmkofHfnWqmQWHdOHP0f2Rh/muspjIpNEkU0NUbKX9ueuFzzQ4oz/M74EAUnxW0Y4HC5Jtj4GCItKxlOLF5U5norAGl2dUzqoFa0wDwe2nAczeV3aD0hyCK6nZ/lP0oyrHltGCmE1NXuNrYU/e5iy+4kPhkbzSbRJrUh344DqWbRpTc4SVTOM1Q0TqlUNVX2E5kpNg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=yCbGdctHuoxIbLmXQxaYHzDVz/7WyQuSe0JW2fBzlo8=;
 b=ZF7n4r0ZL7+nSLpqFJtJADM5qEQ1k1sy6QKlgLQy01CSbD3o099UPAK7SEmbOTusUThMEEGoNAdkcyK1hbqQZrlY9IdsLMeONXMcwpCA4SOaXICRrbb+DzGK+8taTzT+IQJ1bPyRmZERtHX252evIuUDbAwmzMgtr7hFY3QFXHI=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DS0PR12MB8561.namprd12.prod.outlook.com (2603:10b6:8:166::8) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 13:15:28 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 13:15:28 +0000
Message-ID: <e597747e-17be-0f1a-8dbc-0682ec3522b2@amd.com>
Date: Mon, 19 Aug 2024 14:14:45 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 04/15] cxl: add capabilities field to cxl_dev_state
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>
Cc: Dave Jiang <dave.jiang@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com, targupta@nvidia.com, Vikram Sethi
 <vsethi@nvidia.com>, zhiwang@kernel.org
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-5-alejandro.lucero-palau@amd.com>
 <e3ea1b1a-8439-40c6-99bf-4151ecf4d04f@intel.com>
 <7dbcdb5d-3734-8e32-afdc-72d898126a0c@amd.com>
 <20240809132514.00003229.zhiw@nvidia.com>
 <2482b931-010f-30fe-14cb-2a483b0d8c38@amd.com>
 <20240818095515.00004a98.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240818095515.00004a98.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0136.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:193::15) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DS0PR12MB8561:EE_
X-MS-Office365-Filtering-Correlation-Id: 75b5d4b3-5d14-4e3a-e5df-08dcc050fe83
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|7416014|366016|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?OUVsamxzdis0SUp4UlJGY3hlVXU2MGxEQmtleGdNbFRiRTloKzA5U2dvS0FN?=
 =?utf-8?B?VUduM09EN3lFTmZYMWF3ZHdiclNLdjlVYW9jWEcvMzZudHZMTzhLMzNHODAx?=
 =?utf-8?B?RUtEVWwrbFNCSmNoTlU3YyswWkk2UVBiZXN1YXBhYnZrcStuVDdyU1JHdG54?=
 =?utf-8?B?TnRnVFpkRDN3cFV0S204aWlmcHd2SVdEM2hTK3UvZHJHZk5OSGtKcnNoeXd0?=
 =?utf-8?B?bXMwb0FQVENhTFREeU1jeVFnWDUvcXh6MGFjZGlDOVA3ZVFmNEJaaDdsdDMy?=
 =?utf-8?B?cG1wWWFUOUZoNDIrVEZieXBLSEJVdnhpNkhHdmhYL0EwRnRDNHE1TVd4WDR5?=
 =?utf-8?B?T1lvSjRudS9MaElydDRYdFF6MWdHQjZ6b3E2YWJzSGhRdmdzSGs1aDA3WEc2?=
 =?utf-8?B?c2FLcmdUWXZHRWhwcTVSa1ZPbGZCTEdJT3pjekdCZFFDUzdXTXpuK2hiSmZt?=
 =?utf-8?B?RXRPWjBjUnZDcHQyYm13OCttdFpwSnRCRDVjaFJoNDVvYVU4YnFwZUxKQXc5?=
 =?utf-8?B?bFBhRU5lYzZFK0RHOEJLM0s4K0pheW9IcFpNcm9WRENLaHNFaTVITXhSTWpj?=
 =?utf-8?B?eDl1REJKZkxQaDBzekFoZmlRTzBEREtWbkRhVVJMMndySkxRalNRN3NiUEVZ?=
 =?utf-8?B?TTdKZ2E2UUVJZEd6MEFCSFhxZlVIRnNXWTJaY0U4a2NxZ3M3OXRmS3RCMGVo?=
 =?utf-8?B?cmRJT2NnNTBKdk9QcGw0TFlJMFBjdnRrWDdlKzJ4Y1JCdnQrb3ZPaXFLcFhy?=
 =?utf-8?B?M1ZnM1pFRGtoS0VNakVQQWJnUWIycFhYY1JydDJINlBYTFp2aFl6TU9rRk5K?=
 =?utf-8?B?SkxEVVRFOFpaTmlSTWphRnVYbGpuZ1VXaG1oK1VvOVRzemtudWxVYzJCb1dL?=
 =?utf-8?B?MWxpSENTMys5RVNLT1BVNVltQW9vbTd3NTBOZGpHMFQyam80ZjZNc0hhaUZR?=
 =?utf-8?B?NHc3WklMMjZ1cmswSnhOOVROcktiSTNZcG0vdHdXU09CejRFTy8zWXZLWGFZ?=
 =?utf-8?B?ZnJ0VzZJMHBkUEM2OFJTdTVhUC9ZajhJdXlKbklMQXByWDhYdm42V0RmOG42?=
 =?utf-8?B?UVdiWWRteEdYaEtWZlk1cXBwbW1Uc2dIKzB1QnRxY0tyMkNWQ09RVTZRb216?=
 =?utf-8?B?c1hJVEgzbkZ4eUEwTDlORkxIdy9PczZqLzV5TGlVbTRBbHdwWFZHZUJTTS9x?=
 =?utf-8?B?M1k5SXlKVHFGNXhrWTVZVmkrdkJITmhqbUdXa3BvbWprblZzWmRtUUZzempT?=
 =?utf-8?B?N05rMURtcFlRTjh1dnByVCt2QmZHY3ZzM2E0QktiR2FGd215a2F5N2M0cmxj?=
 =?utf-8?B?eW1BQ0k0NitKcy8zYnRhZUVzY1V2dHdZN0FHenhQbllvTEx1OVRmc01mVzRy?=
 =?utf-8?B?MlU2QUNhZnRWVU9OeVUyaTFVaUJzZk83Vml4WldhUVQ0YUt5d3RKZFlWVkNy?=
 =?utf-8?B?QUdyNmZjTUJyQmZkb0F1SE9DR1V4V0dPc1VzVXdoME93SEdjSG9YaHd1bGRC?=
 =?utf-8?B?WU90UlZHeXVpcEp6S3RlMTluRmtZNnVxekNJeFNlcWpmVkRkVXVhZjdHckhz?=
 =?utf-8?B?WVBUbU1wSnl2ZG9seDByYjlDVUtlM3VMVjhIckJGVGxCWjA0RWRYcHo4QkRJ?=
 =?utf-8?B?aFVKcFZaY29RWVJIalpnNnJMekUvcndNanZZZmZnL2MxTkdKbG9Qby9UT1Nj?=
 =?utf-8?B?SmlUTitzd2R3WEI5N1djVVFMZU1BQ1JOb3duQXZsYk43TWlkYUdpVDF3Y1VW?=
 =?utf-8?B?NGtHbnlpL3lmZ2xQcUIyazZ4VGdPbFRKaW1SQTJxUkRnRG44UERRQmJ5WGUy?=
 =?utf-8?B?RFB1WlZ1SjVMYVJpd3J6QT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(7416014)(366016)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?WG9XbG8zV3VEYVZHcUJmTmdTK0J1NTZlNElSRUUzcTZMRzNaSDFJYjdMNUN2?=
 =?utf-8?B?WU1SN2xkUnNTNDlPQTRuaFVvQ2VhSGFqN0NvZUlrMnFaMVFnVlJRSnNCY0w5?=
 =?utf-8?B?bTVNc1puUDlzVE5MTmFxRWJQL1I2R3FVSTJmenlnV3IyWHRrT01tbzRiTDgy?=
 =?utf-8?B?eFpOOGJHYWh0UEp4d29XSk9MOE56WTZ6VFNDTVEzYmRuS2wrRlRYMitZRFZC?=
 =?utf-8?B?Q3VJZ05MdWRod3RWN1U2RDltS3QyVnlBRVExRnQyTU1Vb0ZTYW1xRUhnb0pY?=
 =?utf-8?B?bHZnQXo4UWxPeXRyOFhpRkNPODZLWTJEQkxGVy9jSUZieWo4OEhpT0h1V1h0?=
 =?utf-8?B?RWM2TkxjQW1tSE5hV3ZLSGR6c2pQTThLUlhnWlJIRzJkK3NtQkZ6ZnFuaUFv?=
 =?utf-8?B?bm4xdFlnSGNQV3M5aS9rajBodkpyTURGMFluaWxOMmRKa0hneWlKVlpNUlhQ?=
 =?utf-8?B?QmVQM0RnWk5ueWJMZVBKL3ZyTkE5Nmx4SEkxeW9mU3dSOHpCcEZ1T054VUk5?=
 =?utf-8?B?Zk01QkI5TVNNeEwxenMybjR2aTk0aldKdGp3MmZUc3QrY1FQVW8zNFhaT3ZM?=
 =?utf-8?B?enRZVWlxY3o3UVV1RmRWaFFmOUU0RDViYkJJYURoOE5VMVhzNjNhQlQvbHg0?=
 =?utf-8?B?RkxmVDQ0SHhIb3RQa2x0MFZiNkNXYks0UXFKMWd0aUNWbFpBWmtqN3c0dDdm?=
 =?utf-8?B?SjR2Wm9QQzlJd1AwTUJQcS92dUNTS1pac2JhV1dEcklnM1o0YVZQajdDN0Ro?=
 =?utf-8?B?NGpOQXdxS1VHcEhCR1h5aGt1a3BMVjJuZWRaWis3b2ZrNFREOElhb2s5TWc4?=
 =?utf-8?B?TDcxNTVyYUUxYStBNHNGUmxseFhZWWFaN242S2RUaVZBeXl6MEpXY0pHOUtW?=
 =?utf-8?B?K0pGM05OWnhRNDR0eHZqaWoyY2d0NVpLd0tJVyt4RXpzVHQ3cXBXMHZrSTNq?=
 =?utf-8?B?VWladTFGSG91bElTMlRpanQ0OVUwVFdsdC9QTVVGUzNvRnVMSE9vK0JHbWU1?=
 =?utf-8?B?NDZFL3QwM01HUStvL0lJbnQ4K3RGQm0zaVdEbkNERGFNTXVRcVk3VGlDOTVw?=
 =?utf-8?B?eUc3emVnTW9ndnhtSXVTRFJieDVZZHdjbkJuNy8zUXBqbG9od0h0OHY3RDUx?=
 =?utf-8?B?ZlRtVXBWRWEwaU5HdzNDc2FORGRIV3VFcXRIT09QMUJzNmlURnl4UnFVMnFY?=
 =?utf-8?B?S3lFM3hTYm81U2RvUVg4aHlqcDFmK1N0ZW9qWXFsNGhESDcxanFwM0tLbHhn?=
 =?utf-8?B?a01ZdGtUbXRhNE1zR3pCSG9NaWFEN01VdHl1bEMrNnFKaG0ybDVPdjljQTJC?=
 =?utf-8?B?Z3FGN2ZpcnFWVGZ0eEpJdnd2SmJQZTByQzE0SzhqSXhZQjVuMFNOa1RXK2wy?=
 =?utf-8?B?VmFTQzNISzhMVit6OHE5OUI3Z2NFK0lxWENPWnVQMVNUU1kvaldEQk9CekdJ?=
 =?utf-8?B?K0lNdXZPb1NnZXpycHdubEtqeFhueWcxODdRWm9sT2pob0xERjJEQ3kxZTg4?=
 =?utf-8?B?VE5GeXphL3J6ZmM1U3E2cnFDKzgwZm1RT3pqSlBXKzlsdDIrMmIwZU56ZVZE?=
 =?utf-8?B?ZjI1b0NwQkFiUDJaRWpnWnd2dXFKY0Z4eDhxRlN1Sm9pd2VOMHU2T3V3SEp5?=
 =?utf-8?B?T21qL0ZwcCt0ajhrbk5mQ0lFZUx1Y1RvQjVPT21qL1ExQU0rQTFVVERPYWl2?=
 =?utf-8?B?VldWMUh3R3pqTDNRL3hOc2l5THpxWFkydTUrWEc1WEphKzVDTGtoc0czTmJr?=
 =?utf-8?B?WlZQdEYzYzRyR291TGRhNTFKakR2Zk9YVEh2NU5pbmlDd21MbldZRDQ1eWZl?=
 =?utf-8?B?WnF4NktLZ0F0Z25neUZYOWR6TzJSTEd4dHg1T2ovUVNMTSt2SmZPSlpFS29v?=
 =?utf-8?B?eWpyaXJoQlJVN2ZkNU9CV0pkS3pKUFV6SHlyOHlyaXhXbmVoa2kzUDEwWUR4?=
 =?utf-8?B?ZDFUeEZqeUdUUjQ1eWhKdjJGLzJKSUZUcHY3bGFOeHVuVGp0VktseFFocndP?=
 =?utf-8?B?WmloWUhLcURCUS9kK3ZmNVUxR1grNE5hNWJ4SFVBa3V5K3pJcnhpZ3pta0Y3?=
 =?utf-8?B?d3JFVS9LaUIzWG01RXBFMnVaM0dyeVZSc1B4ZWVpdUUzTzhRWGdBQTBYRmhM?=
 =?utf-8?Q?Z6gaaQBGtVaKjIcxH4xoyQWsF?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 75b5d4b3-5d14-4e3a-e5df-08dcc050fe83
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 13:15:28.4165
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: Gc1vLGhXwOWYiCma3p5mhAL+TO4k6nSi/e3M6asVRhfjjjsEzQS1myAmBLkifuavx6w5p00uczIHDaPkGErx0Q==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS0PR12MB8561


On 8/18/24 07:55, Zhi Wang wrote:
> On Thu, 15 Aug 2024 16:37:21 +0100
> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>
>> On 8/9/24 11:25, Zhi Wang wrote:
>>> On Tue, 23 Jul 2024 14:43:24 +0100
>>> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>>>
>>>> On 7/19/24 20:01, Dave Jiang wrote:
>>>>>>     
>>>>>> -static int cxl_probe_regs(struct cxl_register_map *map)
>>>>>> +static int cxl_probe_regs(struct cxl_register_map *map, uint8_t
>>>>>> caps) {
>>>>>>     	struct cxl_component_reg_map *comp_map;
>>>>>>     	struct cxl_device_reg_map *dev_map;
>>>>>> @@ -437,11 +437,12 @@ static int cxl_probe_regs(struct
>>>>>> cxl_register_map *map) case CXL_REGLOC_RBI_MEMDEV:
>>>>>>     		dev_map = &map->device_map;
>>>>>>     		cxl_probe_device_regs(host, base, dev_map);
>>>>>> -		if (!dev_map->status.valid ||
>>>>>> !dev_map->mbox.valid ||
>>>>>> +		if (!dev_map->status.valid ||
>>>>>> +		    ((caps & CXL_DRIVER_CAP_MBOX) &&
>>>>>> !dev_map->mbox.valid) || !dev_map->memdev.valid) {
>>>>>>     			dev_err(host, "registers not found:
>>>>>> %s%s%s\n", !dev_map->status.valid ? "status " : "",
>>>>>> -				!dev_map->mbox.valid ? "mbox " :
>>>>>> "",
>>>>>> +				((caps & CXL_DRIVER_CAP_MBOX) &&
>>>>>> !dev_map->mbox.valid) ? "mbox " : "",
>>>>> According to the r3.1 8.2.8.2.1, the device status registers and
>>>>> the primary mailbox registers are both mandatory if regloc id=3
>>>>> block is found. So if the type2 device does not implement a
>>>>> mailbox then it shouldn't be calling cxl_pci_setup_regs(pdev,
>>>>> CXL_REGLOC_RBI_MEMDEV, &map) to begin with from the driver init
>>>>> right? If the type2 device defines a regblock with id=3 but
>>>>> without a mailbox, then isn't that a spec violation?
>>>>>
>>>>> DJ
>>>> Right. The code needs to support the possibility of a Type2 having
>>>> a mailbox, and if it is not supported, the rest of the dvsec regs
>>>> initialization needs to be performed. This is not what the code
>>>> does now, so I'll fix this.
>>>>
>>>>
>>>> A wider explanation is, for the RFC I used a test driver based on
>>>> QEMU emulating a Type2 which had a CXL Device Register Interface
>>>> defined (03h) but not a CXL Device Capability with id 2 for the
>>>> primary mailbox register, breaking the spec as you spotted.
>>>>
>>>>
>>> Because SFC driver uses (the 8.2.8.5.1.1 Memory Device Status
>>> Register) to determine if the memory media is ready or not (in
>>> PATCH 6). That register should be in a regloc id=3 block.
>>
>> Right. Note patch 6 calls first cxl_await_media_ready and if it
>> returns error, what happens if the register is not found, it sets the
>> media ready field since it is required later on.
>>
>> Damn it! I realize the code is wrong because the manual setting is
>> based on no error. The testing has been a pain until recently with a
>> partial emulation, so I had to follow undesired development steps.
>> This is better now so v3 will fix some minor bugs like this one.
>>
>> I also realize in our case this first call is useless, so I plan to
>> remove it in next version.
>>
>> Thanks!
>>
> Hi Alejandro:
>
> No worries. Let's push forward. :)
>
> For a type-2, I think cxl_await_media_ready() still gives value on
> provide a type-2 vendor driver a generic core call to make sure the HDM
> region is ready to use. Because judging CXL_RANGE active & valid in
> CXL_RANGE_{1,2}_SIZE_LO can be useful to type-2.
>
> I think the problem of cxl_await_media_ready() is: it assumes the
> Memory Device Status Register is always present, which is true for
> type-3 but not always true for type-2. I think we need:
>
> diff --git a/drivers/cxl/core/pci.c b/drivers/cxl/core/pci.c
> index a663e7566c48..0ba1cedfc0ba 100644
> --- a/drivers/cxl/core/pci.c
> +++ b/drivers/cxl/core/pci.c
> @@ -203,6 +203,9 @@ int cxl_await_media_ready(struct cxl_dev_state
> *cxlds)
>                          return rc;
>          }
>
> +       if (!cxlds->regs.memdev)
> +               return 0;
> +
>          md_status = readq(cxlds->regs.memdev + CXLMDEV_STATUS_OFFSET);
>          if (!CXLMDEV_READY(md_status))
>                  return -EIO;
>
> Then for the type-2 device, if it doesn't implement regloc=3, it can
> still call cxl_await_media_ready() to make sure the media is ready. For
> type-2 and type-3 which implements regloc=3, the check can continue.


In this case I think the driver should know if calling this function 
makes sense, apart from the code checking if the proper register does exist.


>
> I think SFC can use this as well, because according to the spec 8.1.3.8
> DVSEC CXL Range Registers:
>
> "The DVSEC CXL Range 1 register set must be implemented if
> Mem_Capable=1 in the DVSEC CXL Capability register. The DVSEC CXL Range
> 2 register set must be implemented if (Mem_Capable=1 and HDM_Count=10b
> in the DVSEC CXL Capability register)."


I have discussed this internally, and what you point to implies it is, 
as we understand it, only mandatory for memory devices what we are not. 
I guess this is an ambiguity in the specs but the fact is the current 
hardware design which will be part of the silicon coming has not such 
register implemented.

> So SFC should have this. With the change above maybe you don't need
> set_media_ready stuff in the later patch. Just simply call
> cxl_await_media_ready(), everything should be fine then.


The media_ready field inside cxl_dev_state needs to be set to true for 
avoiding later checks to preclude further initialization.

I could avoid this accessor as we have decided to not make cxl_dev_state 
opaque but in prevision of core cxl struct refactoring in the future, I 
think it is worth to keep the accessor.

Thanks


>
> Thanks,
> Zhi.
>
>>> According to the spec paste above, the device that has regloc block
>>> id=3 needs to have device status and mailbox.
>>>
>>> Curious, does the SFC device have to implement the mailbox in this
>>> case for spec compliance?
>>
>> I think It should, but no status register either in our case.
>>
>>
>>> Previously, I always think that "CXL Memory Device" == "CXL Type-3
>>> device" in the CXL spec.
>>>
>>> Now I am little bit confused if a type-2 device that supports
>>> cxl.mem == "CXL Memory Device" mentioned in the spec.
>>>
>>> If the answer == Y, then having regloc id ==3 and mailbox turn
>>> mandatory for a type-2 device that support cxl.mem for the spec
>>> compliance.
>>>
>>> If the answer == N, then a type-2 device can use approaches other
>>> than Memory Device Status Register to determine the readiness of
>>> the memory?
>>
>> Right again. Our device is not advertised as a Memory Device but as a
>> ethernet one, so we are not implementing those mandatory ones for a
>> memory device.
>>
>> Regarding the readiness of the CXL memory, I have been told this is
>> so once some initial negotiation is performed (I do not know the
>> details). That is the reason for setting this manually by our driver
>> and the accessor added.
>>
>>
>>> ZW
>>>
>>>> Thanks.
>>>>
>>>>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-CO1-obe.outbound.protection.outlook.com (mail-co1nam11on2077.outbound.protection.outlook.com [40.107.220.77])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id B79F21BDCF;
	Mon, 19 Aug 2024 13:54:46 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.220.77
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724075688; cv=fail; b=nUt5aHm+vC8URG3WU4Xa1wRXys4LoLYIURPd98fuhsdm0wVQP8ppP32eO4QzdZM4Y2sTPEnHHQ2DyQnavj0v1XekRgPY6cd2ARba3ju4ex20FX+df4ia21FuIrEcvxfaylPCzySwEMbtSZMBvtqhp0P78/nYnAcVAVQi9oZIfGU=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724075688; c=relaxed/simple;
	bh=CUes7hfRNUmj04VCzqyZoHaIvGHq3+yxfqJlESHRAJ8=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Kzq1f1SmmO42CsPUm6Gr4ysbHrr08Jx6VwfNewolco1y2/uZ80jjJYtVZK9oMUe0gMVML7Y5yr64wP0EwrpK6xtvNaWQH8g7nuJEyArvPfasPxPsaLhnuSTX/7N4TLYeTaKAHKYh7TTnkc1YyxEguqnzlf1GRMEHVvyXdrxO/E0=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=5Mol4Abo; arc=fail smtp.client-ip=40.107.220.77
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="5Mol4Abo"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=UF8rAneuMlgGyeKZf6EizObEVfF0bjy8+AkReW7nBG+d5lnapx85oEESkA7zzOlaGEeVqXcxyLZqKRh0PTN1C3W278x4qKwpFbvzmkif984rYWGrc1PIIQZ8HHpqPX3V9LalZJkk5dlnBXG9D+rLsyV4qAQdy/TLc5/K74Lwu3xtmqYqJBAIoziL/JG6cFskx9Ik3PG4aV7Ikf2YB4h8d1UfdlxX3G0/GMWC7U0VgYXX4x0P5Yqt0+DgiwU+Tiyoh+CZ8un3EWr+QPz+k9kGH5SX2xtoJw1mRVHmMc3QryV9deE8OvhkDUvv6tSM+Lt3rtFtSNbTkDXLGGQ+yE/83w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=a3CdT6arHaLEQTS1BHpXGQ+GrqBivJGJLTkkfuSytKQ=;
 b=K+nn/VgClfm35B4cBwRsvOt6ur1knXqrku9IKQZOGuJEBSFgZAZd3NUAaMLBITuqnLdSb+3GjWy5s5LzWu9HhjPwcz5N1KcFSSUQ14DJCcmaPyMgoYs2j+F7JwECw1VHJLv6Fx3QFcu4rDM9eAZbvpCzHRS9NFApo5wodrUEvhq1kObptGQD00AFbrI6RRzwRq14T8rxZPaSltOWa9RvhgGDt+439jhdqdKMf3CbCkyj7nwCilmtV3ijNJSYJp9UGoJ/DJO1/ebpI4BuhQ3yFnbGTd/csEWtAGUqvkm3omrG23foU7emGjw+5+D28Yho//KegWUof5M/pjLjEBTJOg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=a3CdT6arHaLEQTS1BHpXGQ+GrqBivJGJLTkkfuSytKQ=;
 b=5Mol4AbodTMBV0YymwN/SRKL+006Bl9uxMBBR0aCsnR82/Sw6QF8a9/ZhD244LrLYjCI4FGQ7bpwRq7+v4FFqrOiE/7foUaI//ToedRjDR0hSkIzX3Kip+njmnvKdEhWSkdtOkU7EAsma7r6BYIvoiCsVPx9GtDp5MfEsL/ykwQ=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by MW4PR12MB5602.namprd12.prod.outlook.com (2603:10b6:303:169::20) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.22; Mon, 19 Aug
 2024 13:54:43 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 13:54:42 +0000
Message-ID: <00272299-90d0-6e0c-8a35-dae8fa3ef03a@amd.com>
Date: Mon, 19 Aug 2024 14:54:00 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 08/15] cxl: indicate probe deferral
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
 <20240804184135.00001666@Huawei.com>
Content-Language: en-US
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804184135.00001666@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0594.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:295::23) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|MW4PR12MB5602:EE_
X-MS-Office365-Filtering-Correlation-Id: 4b0f8669-1047-4d22-681f-08dcc05679f4
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|1800799024|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?M0lJOStCQ2V4MHNtTHBVQ3lyYzlIdWZXZlczZzQ5S0ZxQU5UY29hb1NUcUxw?=
 =?utf-8?B?V2JzVWdLT1RBVFZFem5xOEZhNFdlWWFKTXdkd1l1cjFjQXN6NGNSNFBtWnlx?=
 =?utf-8?B?Mkd1d3JXMjQwYVJrQVMyaGJQbHZrS0VMQjRGUCtuZk84SjRINGhMUHp0U3dy?=
 =?utf-8?B?Wit2VC9WOEJuSk9Ed0tIejR1dkFmRmZjZFVXL0ZVWU1ERHNtR1JaNWdTZDRO?=
 =?utf-8?B?Wmhmc1U5SHlSdFFpbkNKQ29YNW9HVXVpVGk0RFF1eGdRK0RSdUhMMy9UZ1RG?=
 =?utf-8?B?VmRET0ZQSWpROHVrUG5vUHZYUERoYmgwUVVJWUxvT2dRejlyY3NNOEgvUElr?=
 =?utf-8?B?LzRlWk5BQU5KSGlUNCtRM3lueTMxdHgwdm5IS0lSZVFKQnJJdGVLZWdkSnI4?=
 =?utf-8?B?OUhna1kyTmRxU0J1TjFEaDBnS0g2NE9IYWgwRytrZGR1SFhUV213a1R6eTlF?=
 =?utf-8?B?QUVrV3hxQUVKeTJaVmdzRzZiMGZRTHJNRUNibnlBTmxEeGp6VmtiTjY5aHll?=
 =?utf-8?B?NkRET3BFN3NCcHhDQXNGWW1tdlNIaXFDYjc5em5RWFZWK2VKVllGcnlOWmRp?=
 =?utf-8?B?bzJXUjJhcy9tbHNsSWVJY3J3QWdOY091bUpTcWtSUTVnZUlBUWVGQlpqSi9l?=
 =?utf-8?B?NHkxVm1nK0NDd1lyZjNHYncxclBEK3VGQStPTXlDRTRMU2ViKzgySWR3UGt3?=
 =?utf-8?B?Rk12VCs4UmprSmJjamI3NWhmbERkYzU5SHBoSnUyMnNKWHZhaE56TnJRbUdQ?=
 =?utf-8?B?clVEUVBWZmFBWnA5SUc3aVNmZ004RXNjL05rb0VkL0dXT1dVbStFZHVqOW9t?=
 =?utf-8?B?VHFwa2x3YzRzMFZvTjhhZm9RaTNTbHo3MU1lRW56dTlRWjNDakJNek40Q21z?=
 =?utf-8?B?RXVkT0l2U1gyVFNkSFZ1SGxwbTF5LzFUMG15T2xQVWhqbGRScGJEci9aTnR6?=
 =?utf-8?B?MDFkTFlHRDg2YjY0VUZuNEFocEZwKy94VzdEa0JXVVdkcmpRbjQvVVdLU2Jx?=
 =?utf-8?B?a0Y5TEs5N0pNbGYwSS92RlFRRDJOTjd0QTJWNXg5NjNMT3hheS9tTGNBY0ZU?=
 =?utf-8?B?VDF1eUY1eGJjdlVJeXlydjJCcXcvdmlkZ0Vic2RCNGtzZy9nQU5reU14QTBF?=
 =?utf-8?B?OE4rTm5SeE5KYUFtVEFOOGEzWG9rUUs0aThOeGVYN1I1QzVMVnJYamwzR2cx?=
 =?utf-8?B?c1laa0Q0ZlBpMkJhUGhkVjBOemVFNWZxekNsMjVDOU5jaGI4U3VvNkZPT3dD?=
 =?utf-8?B?UkxiNU9CVmhYY25BQ0JaN3hqZWVwcXV3amZwdTZtTFZHcnpkUUZ2YXpVVHFE?=
 =?utf-8?B?eG85TDhYOFl5WTF4YXZuM2xyb0dVeW9Vb2NGSTJOUXBXdGlLNjNIWGtHQlp5?=
 =?utf-8?B?TWRDN29SeTZhd0luakdyb3JZYUduQXp4MVZwaHFlUG5YMEpTWTJOWkh0eHp5?=
 =?utf-8?B?a2o0Ykh6b0dqWTYvN09NQ1JNVldacGE3QXI1L3MxUE5VM2RSTk1kV2MwdFZO?=
 =?utf-8?B?blRETzBlSFoxYnFJT1Q1VlJmUkxST2dCb01EOWgrejBKU0pJd24xbWMrVlBn?=
 =?utf-8?B?Z21jUGd3bG9CRDc2UUY4cTNkOHcvSEpOYmhndlA2U0RjOGh3SXBVc1YyN1JY?=
 =?utf-8?B?Y0NJUGJ0OWpJc093Y2RYU1F6blQ1aHBabHBmbWlhRkhVaGpuWWNzNGNBNU13?=
 =?utf-8?B?RUxmY2c1NTlERGxNUFpiV0ZtMkZVNy9GMnJPdkYzUXNvTFpFUzUxbzJRUEtW?=
 =?utf-8?Q?Z6q4PHIekyp5dtEsA8=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(1800799024)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?cTZ0U3VwaGM1Y25hMG5nVGx4QklSV3FYMmhCTUhOcmgvVWRna1BET2loNDY3?=
 =?utf-8?B?WnYwUGN3MWc0eldjZ3o0WTdDN1FFcVp1S3ZEUGRZaFVTaGluRnF3S0RadndE?=
 =?utf-8?B?cEpvWGxlOXJLSnlMRmNGVjR3ZzBqR0V3QU1nei9mS0tLbkx3dEJkekVkc00y?=
 =?utf-8?B?WkxtOGx4bnE3bFJUOXdGOFlKTnVEMkNGV0FuV29KNWtkKzVKSFJUMkFsaVNh?=
 =?utf-8?B?N2V4ZTVWSnZETXNPL2ZlNE9NUisvdkgwR1B5L29SMkRMNWd2WDV6WjErWDBU?=
 =?utf-8?B?aC9ja3RFL1ZiZU9ySXcwbW1DWENtdU9uMS9JRWdTN2RoN1VPd25nbjFxU2M0?=
 =?utf-8?B?Tlp2bFVUc3A2OEhIQzBFQVM2QlJIdnJDWVdwSVYxUWpodEUvbEUzcUpPSGFK?=
 =?utf-8?B?SXJJOERyOEZBVUgzM2oxd3QvRWltZkVLajV4cEl1RUU3TmtGV0Nic2w5ZHVm?=
 =?utf-8?B?dWQzdHluRlNRdUFGeVdDenRwZkIrSmtPbFFsNE9jQTV0NlBOUW9xa1VHOXhR?=
 =?utf-8?B?bGVUbVd5WGR1dU5TQUMvc1Y0MjlUQXcwSmdoemR0b0pXQTFtcFVRL1NEOHo5?=
 =?utf-8?B?NVc0RGtDOW8zUEtyaG10Y3FYTkVJaDFFUTFjYTJLVkEwanBDdTMvVEJwcFJQ?=
 =?utf-8?B?MnFMdTlBVlNaTnZQNkRlMjdmUHRTZXZsNzljd3RCRE1hK2wrSnhrS3lqcUlS?=
 =?utf-8?B?Z2licktpMDVtSGFwOVU1bGlYZWZPMnA1MjBiY1gyR01paUg5Vko1dFBzTng0?=
 =?utf-8?B?OXVIU2VWV3BjbjBwQVQ3ZWRidk8xY0FNS2Fyd1NuMzAwbFBId0tYWWNab0Iw?=
 =?utf-8?B?QmRBRWlocUx1RXZ2dWhPWDVySEtyNW5VSVZTRFZtVUc0ZjhhV0g5c09nVlNz?=
 =?utf-8?B?akRFaHZPUzF6WVBFRDA4azFreHFmUmk0NHdBenBzdXpSeXRrbHdOODgwbUJt?=
 =?utf-8?B?T09KWVBpenpuY1lsNWVHb2F1YUZsSTB4dktvSno2TXhYbGdnbE80SFBzak1P?=
 =?utf-8?B?ZnUwKzhmdGpWOHgvQ3YxbzVDU1E1eG4rMHBWWXN2MDFnT3podGNuNXdRMkRK?=
 =?utf-8?B?WHhpc3R0RExvdzdxVkdzYThIYThUV2JWME5VdERmTG5PUWZHR3BDV01yN3gy?=
 =?utf-8?B?bjhibmRJN2tmbWwxM2J4eWtZZCtEaVV2RXpHeUFyTVAxdk9NU3R0aktMUUpo?=
 =?utf-8?B?WWhwcDlicEV4K3BVZ0JnUVBGZXVsczN0bHJ1dG1JWTYySFE4UnBDMHdXUTlO?=
 =?utf-8?B?SDQ3YXBzRklYQ0dVTTNHaTZpamFycXR0UE1aRndqamo1VE04QURKVGsrLzNK?=
 =?utf-8?B?K2RDUWd3NkxjYThRYzF1WjFNT09HZHVBcHU1NkQxd1FZZHRXMmQxeG1uWUk1?=
 =?utf-8?B?WEhVUm4vTlp3c0c5U2pUN29GeXJ6M0lkVFdOb01QWmRHYzJIdDBUOW14SUkv?=
 =?utf-8?B?WFMveWVReGhRQUtQS1BoM3NTWjZGN01ZdERWeVBUc01UUUJjaWVGdit2bnBK?=
 =?utf-8?B?Zmt0UnpGU3ZLdVY0TU82eFY4QnM3Z0dPLzV4Y2o5TjcxZ3dLczJpUndGYlVP?=
 =?utf-8?B?RWlzdEhEbWdteEg3S0dhcktUanpZam5wVkNJR08zb2VYUmlCRUI1VTB4K1JD?=
 =?utf-8?B?a1VOclMwLzJmYjZKeUJpb0xocXBtdm16d0JFWTVFQytaVisvWFYyenhSby9t?=
 =?utf-8?B?ajgveStYMHRnVm96b2VMZXpPTEhUL2VXNWNWbjl3dnppVEhoaHRlT1huOHIx?=
 =?utf-8?B?QzFHVXZWdEw2WjhTbXRBKzVBSUlMUGJ5M29KOFdwcGZYcnNPMXdLM2ZSZ09s?=
 =?utf-8?B?ZWhqOXJlRndDMEJnTlJIRTBXYkJId3JIbXVjd3RZQWJocWpOcWJHeU5PU3RL?=
 =?utf-8?B?NEJhMkx5WStlOUZPSVhaandieUNsMmw2Vzlma2VSWVFxRlFWQnJOL2g1c2NB?=
 =?utf-8?B?M09ONFplMGc0OVlLQzVYdkQyajhPcFhVMGlGY3pmWjRxM0RZQktBLy8yb3Fz?=
 =?utf-8?B?eTBVQjBVZW9MUlhXNVl1YWVKcFZ3ZXZleGZYNWdDNGRPQ0JmbWNNQWFrT1VQ?=
 =?utf-8?B?VWhYVTU0bm5kaWl2aWdEc2N3TlBnMk1ncGNoL3NqZXVSblgvVy9hSWx4Q2pL?=
 =?utf-8?Q?dDccJn/Eqa9+ffWMbEY3Eho0o?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 4b0f8669-1047-4d22-681f-08dcc05679f4
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 13:54:42.8061
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: jaEi2jRvruLAr0cP/OZRxS+Uz9EGgdTagX7OeNZQM07XjD7tS7cuzUtdNjca9mkXp95pMzFg4jTZJoym4MYh4g==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MW4PR12MB5602


On 8/4/24 18:41, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:28 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> The first stop for a CXL accelerator driver that wants to establish new
>> CXL.mem regions is to register a 'struct cxl_memdev. That kicks off
>> cxl_mem_probe() to enumerate all 'struct cxl_port' instances in the
>> topology up to the root.
>>
>> If the root driver has not attached yet the expectation is that the
>> driver waits until that link is established. The common cxl_pci_driver
>> has reason to keep the 'struct cxl_memdev' device attached to the bus
>> until the root driver attaches. An accelerator may want to instead defer
>> probing until CXL resources can be acquired.
>>
>> Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
>> accelerator driver probing should be defferred vs failed. Provide that
>> indication via a new cxl_acquire_endpoint() API that can retrieve the
>> probe status of the memdev.
>>
>> The first consumer of this API is a test driver that excercises the CXL
> Spell check.
> exercises


I'll fix it along with step instead of stop in the first line.


>> Type-2 flow.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>> ---
>>   drivers/cxl/core/memdev.c          | 41 ++++++++++++++++++++++++++++++
>>   drivers/cxl/core/port.c            |  2 +-
>>   drivers/cxl/mem.c                  |  7 +++--
>>   drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
>>   include/linux/cxl_accel_mem.h      |  3 +++
>>   5 files changed, 59 insertions(+), 4 deletions(-)
>>
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index b902948b121f..d51c8bfb32e3 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>>   }
>>   EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
>>   
>> +/*
>> + * Try to get a locked reference on a memdev's CXL port topology
>> + * connection. Be careful to observe when cxl_mem_probe() has deposited
>> + * a probe deferral awaiting the arrival of the CXL root driver
> It might have deposited an error that isn't deferral I think.
> I would be careful to make that clear in this comment.


Yes. The situation this patch is dealing with is not easy to handle. I 
realize the accel driver needs to be aware of it what the sfc code does 
not handle.

I need to work on this starting with emulating the situation and maybe 
adding the work as a test ... where we need some emulated Type2 device. 
Dan was asking about some work done before my initial RFC where Type2 
support in qemu was the target, maybe something we can talk about in the 
LPC.


>> +*/
>> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
>> +{
>> +	struct cxl_port *endpoint;
>> +	int rc = -ENXIO;
>> +
>> +	device_lock(&cxlmd->dev);
> I'd not really expect an 'acquire endpoint' to exit
> in the good path with the cxlmd->dev device lock held.
> Perhaps that needs a bit more shouting in the naming of
> the function?


Uhmm, not clear to me at this point if that is needed. This is basically 
the original patch by Dan so as said above, I need to work on this a bit 
further.

I'll try to get this sorted out for v3.

Thanks


>> +	endpoint = cxlmd->endpoint;
>> +	if (!endpoint)
>> +		goto err;
>> +
>> +	if (IS_ERR(endpoint)) {
>> +		rc = PTR_ERR(endpoint);
>> +		goto err;
>> +	}
>> +
>> +	device_lock(&endpoint->dev);
>> +	if (!endpoint->dev.driver)
>> +		goto err_endpoint;
>> +
>> +	return endpoint;
>> +
>> +err_endpoint:
>> +	device_unlock(&endpoint->dev);
>> +err:
>> +	device_unlock(&cxlmd->dev);
>> +	return ERR_PTR(rc);
>> +}
>> +EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
>> +
>> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port *endpoint)
>> +{
>> +	device_unlock(&endpoint->dev);
>> +	device_unlock(&cxlmd->dev);
>> +}
>> +EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
>> +
>>   static void sanitize_teardown_notifier(void *data)
>>   {
>>   	struct cxl_memdev_state *mds = data;
>> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
>> index d66c6349ed2d..3c6b896c5f65 100644
>> --- a/drivers/cxl/core/port.c
>> +++ b/drivers/cxl/core/port.c
>> @@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev *cxlmd,
>>   		 */
>>   		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
>>   			dev_name(dport_dev));
>> -		return -ENXIO;
>> +		return -EPROBE_DEFER;
>>   	}
>>   
>>   	parent_port = find_cxl_port(dparent, &parent_dport);
>> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
>> index f76af75a87b7..383a6f4829d3 100644
>> --- a/drivers/cxl/mem.c
>> +++ b/drivers/cxl/mem.c
>> @@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
>>   		return rc;
>>   
>>   	rc = devm_cxl_enumerate_ports(cxlmd);
>> -	if (rc)
>> +	if (rc) {
>> +		cxlmd->endpoint = ERR_PTR(rc);
>>   		return rc;
>> +	}
>>   
>>   	parent_port = cxl_mem_find_port(cxlmd, &dport);
>>   	if (!parent_port) {
>>   		dev_err(dev, "CXL port topology not found\n");
> Hmm. This seems excessive error print for a deferred path.
>
>> -		return -ENXIO;
>> +		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
>> +		return -EPROBE_DEFER;
>>   	}
>>   
>>   	if (resource_size(&cxlds->pmem_res) && IS_ENABLED(CONFIG_CXL_PMEM)) {

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2052.outbound.protection.outlook.com [40.107.236.52])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id CD66316C683;
	Mon, 19 Aug 2024 14:48:33 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.52
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724078915; cv=fail; b=dNwivOTZWItiXzuZL9iRGPRosMuvxof71TOnWgM6pZXWv/BpTtiEFnj7cLTQyK/fvkZZe3P1PrCII7dv0FlVozd8mkbZdiAIpZNSkHDqmXqiR1F6KSA9kll5OaItf5W1HUdDJ8N2k02GlrG/ax1/UX+R1QrW+JF2sYgbxt86pao=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724078915; c=relaxed/simple;
	bh=qO1V/lPh0CYX1dOYumlZyC4ch/QXmTt49/wnuqsa+qI=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=kjZM6GtBqAKuKAFRrI29X3FB1lxtkZLTDuK6JtucxM8XWPwKSc6r5UtjY4iQlNvXQUaqWCYGnKSs/xX0VUyEHyWQnU6QkyytXK88dC1uFwIb39wQnZdIt4sjnXjiPRzh5K4INVrfUxchFwTVPXkCOCOVFX/qveDQ183EQIWyP8o=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=oDhYNGNJ; arc=fail smtp.client-ip=40.107.236.52
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="oDhYNGNJ"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=FtPLtghBCGbQUpFI1NO0BAx02x9s+d5RLEOvol4WYHNmZ+IgYq9zodNUkKcflWONYfxEcfk5SGb71QMPo1g4d7b5jX+NVy0QFoUIVtkTtiuKZsxkgpNXuKSVbrSgDqldNTxzYrC5mLGDTvA6Fl9LVI5lqUE+7RhreOleWPsgd53Z68MbUIVV/5cdAq5pUB7TEefnQxE0B9ZIRW6/xeFk9W2qFl/wqxE03WVeT8dID4H68noRvQV2HVrtEoBZ+YRiVkVQY+V8h1kWXYoEjtpbs0kuoVUViFrBioCCibR8iW/W1ghnJMfKxa+ka+JcHpmXc6SRROOR8oTRv8JdjvpbnA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=YxgKcSwwEURqCTz/yvzdfi5QmyI9hm/7f/sy7K/z82g=;
 b=etAzJnfAC654LkndiPSfa4sohacOlaV8KwRv9uSQT1fCitt4e8kjptnFTi9NYq4jUAcGkerTycY/oBouK7LK4lwERtOc42JsykDbAqmkzvb6UfayhkIed+GDxZNikr5S2L5oyNYHx7txYxjzn0ThLlcxNiftXmopv/Dg56UQOeKVO9oxhJ+OynClo+sGDRlIg9GHM5ZwjgA2/QXhzOrrIL6LHU0+ewDQFgdmkkNl3IEZ/beHoX9musvQbInqJeq9UR9rkbNx9Wm4W0hysJoE5fGlPCJyweGYqx9qy5EXqzIk0B82+I+zGoi1+l90r/LudBSMh7FV0PoBbIF2Bdns1A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=YxgKcSwwEURqCTz/yvzdfi5QmyI9hm/7f/sy7K/z82g=;
 b=oDhYNGNJ0eJG8ccTgSm9GH1+lK5uEvCknKAXRfWruAJDUvsLXbQITR37o5pBGfcOkwCtpY7TWUG79PrT1/WBnaZcx35XWBplWODoBrqahHKdcRdeiTqGfiwmA+JNAZ2isOkmXREJunyY8TZ/DV5l1NQ4RT2tsTRzJ+eNerO2SLs=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by CH3PR12MB8727.namprd12.prod.outlook.com (2603:10b6:610:173::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 14:48:30 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 14:48:30 +0000
Message-ID: <adcc692e-8819-3741-31d3-d1202cc1b619@amd.com>
Date: Mon, 19 Aug 2024 15:47:48 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
 <20240804185756.000046c5@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804185756.000046c5@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LO3P123CA0013.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:ba::18) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|CH3PR12MB8727:EE_
X-MS-Office365-Filtering-Correlation-Id: 6470702b-40b2-47b6-c3a5-08dcc05dfdb8
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?amUyeGNseDRKQ1ZxVkJBYTBLVkM0TzBZc3V3N2xjN1JuYjB6dGhzVTBWMTZP?=
 =?utf-8?B?V0lPUzFad1dobVNlY2cvdlFrM01Pc3kxNEFLVVRlblRTdHBOVWJXS3hlQ3RL?=
 =?utf-8?B?aFFaRy9mSXFYQTNncGpaVDZ2eHRUemRXakp1OHZjdXorMlRkN1B2TlFtWC82?=
 =?utf-8?B?aVNocjdMU1RZQWVod0VtOXAyNlBsN3JSaGRjQVJKSDJPL1hQL3FBQ1NCUjA5?=
 =?utf-8?B?SHhieGEvdnAveWZkZFE4RWRaQVdTMGpCSFZHN3RXMUZROFJROHphc2M1WkMy?=
 =?utf-8?B?TFRwMExOUklXaW1ZS0htQ2huZUxzYUI2NFNKakNxbGNadzBRc1J2b2RmcUVw?=
 =?utf-8?B?Zm5DOVB6L3dmZnF4MlJSR3dKL1VFVWtCekt2QmlzS1lodzNBeWE0citBelhi?=
 =?utf-8?B?TUJndVptdHJkR1hFc3pvSWpzY0dPUms3bXBZWkkvQ0tvekl4SzJFYTFrOVEv?=
 =?utf-8?B?ZUVIc3VtL0hqMmtuNTQ4OVB3QmVVdDFpRjYxRGk0VUpiWmpLSG9JcmE2bTZN?=
 =?utf-8?B?V3Q0V2JsMnRPYjgzWnVNMzkyeHhjSGtoa1VqYW5KczZGdWRaYmMybUV6NW84?=
 =?utf-8?B?b2QzUEZiNFEvVVpmQVZRL042WFZnRnh0S0dicTdiY0psVVQvVzZGNElFNmdk?=
 =?utf-8?B?ZWNnVzZoeTVOQTNhOHdjYW1pa2VQTmdRdmFWU2tLcUxVUENwZHJWRGRGQk9z?=
 =?utf-8?B?SmFuRWtscnhkQlIwZGRtNjczS2tlWFo0ZjBNbFEwRlpqd1UveHUrcThKTU1o?=
 =?utf-8?B?endwVnFTMW16ZDVLem54bUhQTHh4clQ5WkhPSzZNMUJXZ2kyN0VLWk1rS0tH?=
 =?utf-8?B?emphVE9ZV21YNm04ejc1MEdMSDN4czRtNGhFdU90dlIxazRBL0ZVblJKaTJR?=
 =?utf-8?B?dVBFa200TG5UbmM1WXRLb1YxcXNEa1lDZ25zazZGSVBlRkdIcWFQSTR2UmVm?=
 =?utf-8?B?T3p2aTFoYnUyQ2x2clZKa21wZ0Y4MXRNbmYwcUpMMFVjbDNyZ0FaOWxZQy9y?=
 =?utf-8?B?Vi91TTM2T1FwQUVKTnIyVUdZdmNuOVJZbzhSOW5IKzhWOG55clRZaXdmbDho?=
 =?utf-8?B?ZmNzMHJ5dWtTcXNrQkFqTFVGZ1ZXbkpJYnRHcEVjQ09qWEs0bmhkWHVMMzZ4?=
 =?utf-8?B?TitGcW5JT2hjUG5hNzA0b3FVMnlSTVFsUm9TT1M4amxiZzcxeXI1elFqa20y?=
 =?utf-8?B?VHNIQk4yejZOVnNPN1pqUzFuUjdrVGNVbzMyMUNYZ0Z2OUFCRjJSUHYzdlJJ?=
 =?utf-8?B?TzZJWWUwWTNDZi90OFVRMng5TkV2L0pORE4wTGFJUlN1anJldHYxNHJDcFI1?=
 =?utf-8?B?aExmaUV4V2NjNStEcHpEUk82ektQTjV4b1pKN1FYaGJ6Z2p3azZXbjIza1hv?=
 =?utf-8?B?bnpsdEhzQTlCNG9KS1BBbUFXS2JoMkhCd1M5Z2xwZlpFUWZCdC85djlyMmJl?=
 =?utf-8?B?Qmdld2dGMm5RRzNiWkVJaWsxRTR6Rlc2Znl5N2c3ejZTdHhJR2JUZk1LTEgy?=
 =?utf-8?B?NGlNS2RnZXArNzEyY0U5d0VUUEZsb0ZreTBSaTZKazRwWmMzbmU5ZHNhNnpj?=
 =?utf-8?B?OHR1ay9YSjdGRTh5ZEJrdGxYNWFiaFlpbnl6TWFabGtkWUhKOTVHRGMxM3NO?=
 =?utf-8?B?cFpYRWZSajVTN25FY2Y2ZEdIWHNiRnhTUFgyVzByU1VmUmUvQWhJOWJtK0pk?=
 =?utf-8?B?Qi9BdGpkQ0dueDBwOHdiS2FqTEFWald1UHdTeEhxeDI1djJLWUpnaHZvZEFn?=
 =?utf-8?Q?Koo4ebnpr+erUwLkwE=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?eE01OEhnR3kzc3hqU2t4TXVWZlk4NkdnSC9rOHlacTlpYjR3bm1XMWZsd3lq?=
 =?utf-8?B?MXRUMU4rcCtQcUREVDIrMGM1YW5wN2ZnZjV6Vm0zRDVPcDI1WVBKL3haTW5X?=
 =?utf-8?B?UGp6a0ZTampYbjUxaUdKZjZZSDhLR1FsTmFWa1JoM0EzYUNTK0EyUGJoSEk5?=
 =?utf-8?B?L1dLL1FLTzFCcm5iSGUxRC9wNGk3dU9jYlNkUmhPYXlZeSs4ZExOMzR4NTMx?=
 =?utf-8?B?RkpsaU1NVEtRM0V1TXVoWUtiaC9wd3l4Y3YwOGFaWGlOZjRHN1l4VE9SU1NF?=
 =?utf-8?B?dWZWVCtIY3JsVGYvSGQvZi8xVFJIQWRUcHMxTEF3VTNuRC9iVzlibXlmeTRO?=
 =?utf-8?B?ZGREUWxzQVlrSEdQQXVUclNrNWd1SExjU2NjUHY5Lzhkenl6WTEwSVRBc3gv?=
 =?utf-8?B?UDE1WGJEZ1k3cWtLTlZsSFJLRjM0RE1qUTFUS0RMUFhteW9SbHlyK1JxME0v?=
 =?utf-8?B?emNaMU9nVFVUeGJGYjNkVTNud29WQ1BYd1htdWR2eUFtbFV5cTRSNWhJVW43?=
 =?utf-8?B?SHFZcVl5aUpHMnVuenlmQVpjVUIyWmlQRlJhbituL3hCVTZIdllGTGlSNFZK?=
 =?utf-8?B?bzJuYlBaU0VWOFowV0JaUHFsMFc0SnNwaTdvUllQM01sVTZnSSt4YjQzWmVC?=
 =?utf-8?B?UzluMmxCNHdpS3hTM2xTcHhMVDI0MGplSjdKSzZiUmdTTFo2WUpqTW1kdmd6?=
 =?utf-8?B?UFl4TXFTTlZBamNqME1qSk9UdnFkeHZQeDlUODVndXhJeW5PYUxRU1hiRUpD?=
 =?utf-8?B?ZWJUeFRTSUVlZ3lZejZDQTE0WFdoN1gyMyszb2Rzd3ZMc0xIc1U2SGhiQk91?=
 =?utf-8?B?L2tFSjkzNDltZjNhUlhVZUZSNTZRUDFsNmxiaGhPNDd3V3l4dVBLaE5DTmdS?=
 =?utf-8?B?R0JwcW0zUHE2SHhkanVOSEJXalRSbFRBTUpsdTNGRjkrbG4vTXlIL2xvcGJr?=
 =?utf-8?B?NjArY3NQQzFXNUc5R0tOR3JxS1NobE5YR0JBLzNBa0tuT2R0YVJiNmdQZnF2?=
 =?utf-8?B?dFVNazA4SzNyY25TN0JTOWYrd3lZSDZxNGtoNlVSUzFrc2YvQW9Zdmd0Z21M?=
 =?utf-8?B?dHdZSVFqR3dFbnRkcUlWQ3hhV3czMWxUWjdIR3BlcWllSVRseVpJRGFnbnBV?=
 =?utf-8?B?VmdTZE0wQ1hoSmU5RExJOHdaT1NscUNmUjBQblNaS0lJRTVHT2VYVkd0dUkw?=
 =?utf-8?B?L1RyR3RwbCtWakJiVFJqRE1UTitUZUdpV0tiYzRKUE9KY0lZNUhwdnhUWjdB?=
 =?utf-8?B?azZkblhyOVFyTEt1LzdEcmhNaWpITFpOdVVrRlZkUkpDbWhFWDk1cTJlVEIx?=
 =?utf-8?B?Q1ZjVTRxYTVKaTRVWk11SElmQm1pbmJqbkxpaUMyK2RRdnBBRzlnZUVyRWZ4?=
 =?utf-8?B?NUZFZTdtVVFqb3MxNDZQS1Bqclo0QkNabWdiNDJQYnM5TzUyV1BUWExYMUYr?=
 =?utf-8?B?eUlpQms4Qm80am5SYzFlTHJ1Nzh6TThrNDJhOVRWdG5RQjgxVCtPL1dtbnRp?=
 =?utf-8?B?cmpjbHNERWEwMFlBUXVhYWJneTZndXhFV3lDVkRaSzFvVlpPM2lBWk1LWXoy?=
 =?utf-8?B?WGVvZTIwZU5HVmhIQmxvWllXYTdRYVdTb3ZtTkJwb1AvSWRBOGtWUU1WMTUz?=
 =?utf-8?B?TWdqVEhRVFl6cFdmTWN5bExDdzB6MG1zUVRaQWx0bll0UHdqZkV3V2VWNVo5?=
 =?utf-8?B?Q2h0U1BmakJMcTAzdWZQTnhwSW9ucWZtVmtvVlRFRHFmanZ0Y0h0M0Z4T3g0?=
 =?utf-8?B?Vkt6TnRkbFhPQnkzMDQvaWNFa21rQlh3bUhCbkVkS01jSU1id000bVdwMW95?=
 =?utf-8?B?RldvenF1bytNMUNrSWRFNFdQcWxnWVYySkM3a1F4RE5SSCtNdm16N1Vwa2tZ?=
 =?utf-8?B?ay9YdHkyLzlUV1haWXl4WUFVYUdCRElNTkp6WUVUb0pyck1TVk16RXRGd2dE?=
 =?utf-8?B?SWozL253VENRR0gycFNyazBZZDJWZVgrN0lyV2JmK3hkcmk1ckFBY3VhZTdF?=
 =?utf-8?B?dnYzNm5WNGxlcVNkRG16Yi9Ga3JRRGpsekpNTWpMSU5oSHQxa3NXek1sTFBs?=
 =?utf-8?B?eVdBbXYzM1ZobjNLSnliTFVPZExOZ09nTkRKVzBVb2ZFeTRySG1zcDllbWhl?=
 =?utf-8?Q?KVIqiVkuHEnfmD+47Zj5UxwUr?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 6470702b-40b2-47b6-c3a5-08dcc05dfdb8
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 14:48:30.3937
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: MDotmB1YhlsGdfzBCviVkEfu1aqcoY+W6gR0gSQTFmloMc9HQ8xcrmruu69P/CsYFc784Jx7TialSgdudMaezw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH3PR12MB8727


On 8/4/24 18:57, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:29 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> CXL region creation involves allocating capacity from device DPA
>> (device-physical-address space) and assigning it to decode a given HPA
>> (host-physical-address space). Before determining how much DPA to
>> allocate the amount of available HPA must be determined. Also, not all
>> HPA is create equal, some specifically targets RAM, some target PMEM,
>> some is prepared for device-memory flows like HDM-D and HDM-DB, and some
>> is host-only (HDM-H).
>>
>> Wrap all of those concerns into an API that retrieves a root decoder
>> (platform CXL window) that fits the specified constraints and the
>> capacity available for a new region.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95c8acdc347345b4f
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> Hi.
>
> This seems a lot more complex than an accelerator would need.
> If plan is to use this in the type3 driver as well, I'd like to
> see that done as a precursor to the main series.
> If it only matters to accelerator drivers (as in type 3 I think
> we make this a userspace problem), then limit the code to handle
> interleave ways == 1 only.  Maybe we will care about higher interleave
> in the long run, but do you have a multihead accelerator today?


I would say this is needed for Type3 as well but current support relies 
on user space requests. I think Type3 support uses the legacy 
implementation for memory devices where initially the requirements are 
quite similar, but I think where CXL is going requires less manual 
intervention or more automatic assisted manual intervention. I'll wait 
until Dan can comment on this one for sending it as a precursor or as 
part of the type2 support.


Regarding the interleave, I know you are joking ... but who knows what 
the future will bring. O maybe I'm misunderstanding your comment, 
because in my view multi-head device and interleave are not directly 
related. Are they? I think you can have a single head and support 
interleaving, with multi-head implying different hosts and therefore 
different HPAs.


> Jonathan
>
>> ---
>>   drivers/cxl/core/region.c          | 161 +++++++++++++++++++++++++++++
>>   drivers/cxl/cxl.h                  |   3 +
>>   drivers/cxl/cxlmem.h               |   5 +
>>   drivers/net/ethernet/sfc/efx_cxl.c |  14 +++
>>   include/linux/cxl_accel_mem.h      |   9 ++
>>   5 files changed, 192 insertions(+)
>>
>> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
>> index 538ebd5a64fd..ca464bfef77b 100644
>> --- a/drivers/cxl/core/region.c
>> +++ b/drivers/cxl/core/region.c
>> @@ -702,6 +702,167 @@ static int free_hpa(struct cxl_region *cxlr)
>>   	return 0;
>>   }
>>   
>> +
>> +struct cxlrd_max_context {
>> +	struct device * const *host_bridges;
>> +	int interleave_ways;
>> +	unsigned long flags;
>> +	resource_size_t max_hpa;
>> +	struct cxl_root_decoder *cxlrd;
>> +};
>> +
>> +static int find_max_hpa(struct device *dev, void *data)
>> +{
>> +	struct cxlrd_max_context *ctx = data;
>> +	struct cxl_switch_decoder *cxlsd;
>> +	struct cxl_root_decoder *cxlrd;
>> +	struct resource *res, *prev;
>> +	struct cxl_decoder *cxld;
>> +	resource_size_t max;
>> +	int found;
>> +
>> +	if (!is_root_decoder(dev))
>> +		return 0;
>> +
>> +	cxlrd = to_cxl_root_decoder(dev);
>> +	cxld = &cxlrd->cxlsd.cxld;
>> +	if ((cxld->flags & ctx->flags) != ctx->flags) {
>> +		dev_dbg(dev, "find_max_hpa, flags not matching: %08lx vs %08lx\n",
>> +			      cxld->flags, ctx->flags);
>> +		return 0;
>> +	}
>> +
>> +	/* A Host bridge could have more interleave ways than an
>> +	 * endpoint, couldn´t it?
> EP interleave ways is about working out how the full HPA address (it's
> all sent over the wire) is modified to get to the DPA.  So it needs
> to know what the overall interleave is.  Host bridge can't interleave
> and then have the EP not know about it.  If there are switch HDM decoders
> in the path, the host bridge interleave may be less than that the EP needs
> to deal with.
>
> Does an accelerator actually cope with interleave? Is aim here to ensure
> that IW is never anything other than 1?  Or is this meant to have
> more general use? I guess it is meant to. In which case, I'd like to
> see this used in the type3 driver as well.
>
>> +	 *
>> +	 * What does interleave ways mean here in terms of the requestor?
>> +	 * Why the FFMWS has 0 interleave ways but root port has 1?
> FFMWS?
>
>> +	 */
>> +	if (cxld->interleave_ways != ctx->interleave_ways) {
>> +		dev_dbg(dev, "find_max_hpa, interleave_ways  not matching\n");
>> +		return 0;
>> +	}
>> +
>> +	cxlsd = &cxlrd->cxlsd;
>> +
>> +	guard(rwsem_read)(&cxl_region_rwsem);
>> +	found = 0;
>> +	for (int i = 0; i < ctx->interleave_ways; i++)
>> +		for (int j = 0; j < ctx->interleave_ways; j++)
>> +			if (ctx->host_bridges[i] ==
>> +					cxlsd->target[j]->dport_dev) {
>> +				found++;
>> +				break;
>> +			}
>> +
>> +	if (found != ctx->interleave_ways) {
>> +		dev_dbg(dev, "find_max_hpa, no interleave_ways found\n");
>> +		return 0;
>> +	}
>> +
>> +	/*
>> +	 * Walk the root decoder resource range relying on cxl_region_rwsem to
>> +	 * preclude sibling arrival/departure and find the largest free space
>> +	 * gap.
>> +	 */
>> +	lockdep_assert_held_read(&cxl_region_rwsem);
>> +	max = 0;
>> +	res = cxlrd->res->child;
>> +	if (!res)
>> +		max = resource_size(cxlrd->res);
>> +	else
>> +		max = 0;
>> +
>> +	for (prev = NULL; res; prev = res, res = res->sibling) {
>> +		struct resource *next = res->sibling;
>> +		resource_size_t free = 0;
>> +
>> +		if (!prev && res->start > cxlrd->res->start) {
>> +			free = res->start - cxlrd->res->start;
>> +			max = max(free, max);
>> +		}
>> +		if (prev && res->start > prev->end + 1) {
>> +			free = res->start - prev->end + 1;
>> +			max = max(free, max);
>> +		}
>> +		if (next && res->end + 1 < next->start) {
>> +			free = next->start - res->end + 1;
>> +			max = max(free, max);
>> +		}
>> +		if (!next && res->end + 1 < cxlrd->res->end + 1) {
>> +			free = cxlrd->res->end + 1 - res->end + 1;
>> +			max = max(free, max);
>> +		}
>> +	}
>> +
>> +	if (max > ctx->max_hpa) {
>> +		if (ctx->cxlrd)
>> +			put_device(CXLRD_DEV(ctx->cxlrd));
>> +		get_device(CXLRD_DEV(cxlrd));
>> +		ctx->cxlrd = cxlrd;
>> +		ctx->max_hpa = max;
>> +		dev_info(CXLRD_DEV(cxlrd), "found %pa bytes of free space\n", &max);
> dev_dbg()
>
>> +	}
>> +	return 0;
>> +}
>> +
>> +/**
>> + * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
>> + * @endpoint: an endpoint that is mapped by the returned decoder
>> + * @interleave_ways: number of entries in @host_bridges
>> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
>> + * @max: output parameter of bytes available in the returned decoder
> @available_size
> or something along those lines. I'd expect max to be the end address of the available
> region
>
>> + *
>> + * The return tuple of a 'struct cxl_root_decoder' and 'bytes available (@max)'
>> + * is a point in time snapshot. If by the time the caller goes to use this root
>> + * decoder's capacity the capacity is reduced then caller needs to loop and
>> + * retry.
>> + *
>> + * The returned root decoder has an elevated reference count that needs to be
>> + * put with put_device(cxlrd_dev(cxlrd)). Locking context is with
>> + * cxl_{acquire,release}_endpoint(), that ensures removal of the root decoder
>> + * does not race.
>> + */
>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>> +					       int interleave_ways,
>> +					       unsigned long flags,
>> +					       resource_size_t *max)
>> +{
>> +
>> +	struct cxlrd_max_context ctx = {
>> +		.host_bridges = &endpoint->host_bridge,
>> +		.interleave_ways = interleave_ways,
>> +		.flags = flags,
>> +	};
>> +	struct cxl_port *root_port;
>> +	struct cxl_root *root;
>> +
>> +	if (!is_cxl_endpoint(endpoint)) {
>> +		dev_dbg(&endpoint->dev, "hpa requestor is not an endpoint\n");
>> +		return ERR_PTR(-EINVAL);
>> +	}
>> +
>> +	root = find_cxl_root(endpoint);
>> +	if (!root) {
>> +		dev_dbg(&endpoint->dev, "endpoint can not be related to a root port\n");
>> +		return ERR_PTR(-ENXIO);
>> +	}
>> +
>> +	root_port = &root->port;
>> +	down_read(&cxl_region_rwsem);
>> +	device_for_each_child(&root_port->dev, &ctx, find_max_hpa);
>> +	up_read(&cxl_region_rwsem);
>> +	put_device(&root_port->dev);
>> +
>> +	if (!ctx.cxlrd)
>> +		return ERR_PTR(-ENOMEM);
>> +
>> +	*max = ctx.max_hpa;
> Rename max_hpa to available_hpa.
>
>> +	return ctx.cxlrd;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_get_hpa_freespace, CXL);
>> +
>> +

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2080.outbound.protection.outlook.com [40.107.237.80])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 54FF83BBF2;
	Mon, 19 Aug 2024 15:53:20 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.80
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724082802; cv=fail; b=Get+iiUb1AxI3+qi2/OF38zgpSTkOoJ4TtZa8oZHL9PTOhBE2UtK4MJOWtFDWHXYysvhilKFBEAg+HO9LywxuJiBXSQAqA49hlrksYx4spzzbzcvQjT5FxGc8r1hAfujdJmmFlyFsTW3nDA1wOtNyqkFHGXneugbEOmTXIfWi94=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724082802; c=relaxed/simple;
	bh=TKY0Mfi9Wguk/W0Xj/opnT6OQz2mbIRd0hd3kha0n/o=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=uZIHd0QVBDWswSXfRPpi6Mp2mk3q6Y9bz6TmJWuYDp+oBbmDIbyPJyAg6uE7+vcDEJlSA+RBHGDvBhzA/kFkRznXXz1wEa//ID24F+qxM+RtmjN6hRQNBsz6WJoXXNjmQXala1/HmrRynUtlqm9Qx3WgaiaFfO14n+3Ez9KUKuQ=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=VupC0wQA; arc=fail smtp.client-ip=40.107.237.80
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="VupC0wQA"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Fcl2t668QV/yppaZA9Yrqr8dsBsxl3BhD/9eEbORqoIHtn06CoI5eLsvQj90wV0dQg+re6Vcl1D2o0W3pRNWH1UCY5Sbp/izAEs6ibuRcT1sJpRexbV2XRvRn1j0fsGN71S5RUAViqn6OhN8dyPOe+2N+71AYAOWLBebseHQIPF85QIDKYHGQavWEIxBlN1ou+hSNE/qx15NOMIN6oT4dcr6y1BZBDlRWr8y/Uts9eCDvZ7FC4lCXdtvWuR3x3GZo3MuQvxq4LW7iFNZbqNZuNF8u6bXeWl5YSA/UOgYYcrSXfi4UyvHiruU/RR4lo2OPITp2WOdRmDDqyRanT005g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=y0LcTEWRWOa3lLdCYs7F7ews9QfoCP83Bs0vQy2xwCM=;
 b=WJywhgOtPD8/UPDmZOXpNKQJgU5BGQQ3IWw1L2HQYYTNvaycbyotUJwCW0HT8jhbVibFJz4AFyhsAOczVSYVeReAG6fbpkXrlVQvQWhO7qG1KseXBhez063DlleGUHUwgU0AqKFVL5q/XkL7FNtAxS4/X9Q837pI7l666YM5dzwLcpbboBUtfJiCWv6eCiNH40WqdoVDzf8fPa2FBKe+Xtl6NBiIzwluT0iLNMXo8uXpmLinezjtBEOMVgerRoXHI00xBiORGDzG/95qSSTWgnm8aDaM3HbMbNVclcFRkPJe0GFYZvJqCagkHcjvSCt9fRztrnPaXMkbMZNf86iOJA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=y0LcTEWRWOa3lLdCYs7F7ews9QfoCP83Bs0vQy2xwCM=;
 b=VupC0wQAhSd9iAqOMftKpQyZBZSH/Qt3aTayhvX4EDv3k6KZuVEAVihKWhSt+wUp14sbPeppRov/+jwh6P1h6rG7eO/7L+H3HfixQ8WX/01vu8PNqBtWvof7djej1NF7kALceBXaTKuSSTMUpDCaHDJ8yEimOehRL//zBxAwgt4=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by BL3PR12MB6401.namprd12.prod.outlook.com (2603:10b6:208:3b1::8) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 15:53:17 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 15:53:17 +0000
Message-ID: <bc823ebe-b887-bc54-0651-b28362a49a7c@amd.com>
Date: Mon, 19 Aug 2024 16:52:34 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 10/15] cxl: define a driver interface for DPA
 allocation
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-11-alejandro.lucero-palau@amd.com>
 <20240804190718.0000361c@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804190718.0000361c@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: DUZPR01CA0141.eurprd01.prod.exchangelabs.com
 (2603:10a6:10:4bd::28) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|BL3PR12MB6401:EE_
X-MS-Office365-Filtering-Correlation-Id: 12c3a64f-f405-479a-6d6f-08dcc0670a68
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|376014|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?R0YvdGNMSGtLZjFRQ3g0K2xGcjhpS0pGaHRvOERkU2EvclNTZE0wUmgvUDlH?=
 =?utf-8?B?RURpK2xWMVNVTkJCWkkrR1p1UlVKL2ltTS9DRUtZRXFKdFV6dVNtV1l2TXQr?=
 =?utf-8?B?Y0dYeDNjc0hQM3BZUzJpZHJVaW1ZdFJPbnpTT3NCRDBMMmJuM0JnRXRDRWJ4?=
 =?utf-8?B?MFQ2azFDWXFVNVgreGY2czRON0srdjd6T2duNHJ0Q0NPbXZBU1Y4cm5Seis2?=
 =?utf-8?B?VERCbG1JbVAwSUNoR3E0YnBHaW5zNEtzUkhlMytaS1B5aFQwazk3OS9OSU9E?=
 =?utf-8?B?ak9MU0NnM0NwNHZFRlJlT1BISktEOVJ3UDZmRFkwRDhiRzFFdWh3QytoOVJp?=
 =?utf-8?B?NHNGWnliSUxqRzNDWmUrcytEbFZML3B0dVpic1htREg3eFlMVzBQa0YwMktw?=
 =?utf-8?B?K3NuVUVOb0RGYUMxNjhHYXhxZGt1WW40eFFyQWtGT2k0R3dBWXlodzNQVXhh?=
 =?utf-8?B?L21wc0RxSXJURWMxbEtLVk0vM3RRSUFtRWhjT09IN0I1QUpJbnoxeFV3aUNY?=
 =?utf-8?B?NTlxaUJPTEh3a0dMK2lsR3FRSVAzM2lsaUtCNXlIbVFnQXBKUFAyZjZ4Y2lW?=
 =?utf-8?B?QlVTTk8zZytXM0lTL0wyN0lVdFZyV252TnRoM2xnUkE0ZThWWW9KRk1lKzlk?=
 =?utf-8?B?Sy9meVN1ZEtULzFzaVV3a20wNmtvU1ZHTkxOQ2N2dGNtcktSWEQ3eDJjOUds?=
 =?utf-8?B?Y0hsdGVuamJNMXdLUXQzT3ZrUDRQQmZxWXp1QWMzajJsakU3YUN0cGtMTHVr?=
 =?utf-8?B?V1pCSEVubFlyRmFUTmswVTRqdnl6QVBxTjl0L3l0djFaMFE4N2lMOFhZTVpv?=
 =?utf-8?B?UGJRUWZZbWdDVS9TbFpnV0U4VkJMTGxaYWo5bDFmNTRURjRsNTlWNDIzUVhY?=
 =?utf-8?B?QzJTODNWUSsvQmFWeVZHVEdkazZBa0FEOTU4aGE1clFSZnN1Q2daVTdWWHVV?=
 =?utf-8?B?c1JZWmFnYWtOTDBvKzRRM3AwRUhLL1hTQ2xiQmlTQUJBVWswemdiU2dtc21i?=
 =?utf-8?B?R1lOL2NTTlhYbWlydjFLNnNBYmJxeFFxTjcwK0NaMmg5dFFtNmdtZFFBYWdI?=
 =?utf-8?B?aHNaN2pOZFFZZXd4YXovdSs1RmRaMERneVZuQS83YjBlWWQ2YmNUaGt3dVor?=
 =?utf-8?B?allWZHU0MG9NU0kxNmY0Z2lRWGt3SDFsaWFqMFBUVUY2bzFxSDFWZFZBMC9y?=
 =?utf-8?B?eG0zNlBEaHRGeFZsK1I2UUhTay9aR09mYlZIbzVSVVp3S1VSb0MvZWlBRVds?=
 =?utf-8?B?MzhNVU1BcHpzclh0MkxyN1dFbEI0Tmd0WlFKUTNjUTFSMXFTcjZhaUJzcndD?=
 =?utf-8?B?UGZuUTJGU1ZpVmR4Y3A1YUxnaDk4dzJBK3BXc1d2WTZZVzJ3VWk0dW0vb1dF?=
 =?utf-8?B?a2ptcE85RUVmTDdqVnZQektOUkpYWjBOMUJSd1RZb2NpMkNnalVvWVVnalg2?=
 =?utf-8?B?UGtkR3Bjc2NMSXZCYVZmalBjMFR2YU00cUQ0cjlHUndMbEJtd1pDMkJIV0NI?=
 =?utf-8?B?Q21RaTdxY2k2VGVLNCs1M3dpODFaNWZnSVJma3dVUjBZMUFHYzgycGh5YmRv?=
 =?utf-8?B?WnJOdzdNQmZsRmJ6MFBCYTdHTjAxbDVmYkVlZmJkeDRTbTVtRm9QK1hQYXlj?=
 =?utf-8?B?N3J5ajh6SFZnOHZDZFFjSDkyYUZCLzkrSVJKOXRuRzhQKzlPSnlSV0xZNTZ5?=
 =?utf-8?B?akJacHFlM0t4VVFmT3JjTGdvWm95Y3FhL0M5aUhYRzJ5UVFpeDcreHpVNTNM?=
 =?utf-8?Q?VjRGuEynkQbhfuBq2UPZ4ndfIsam0VvpfFNg58F?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(376014)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?SlduUllvNTdrc1BJK1l0cUlzVHJzYjhGQzJFL0FNMGNycXgwN2NiUm1SU3A0?=
 =?utf-8?B?R1VjZjIvRk5NNHM2Y0dzZnBaUWVvN1lCMzJxOGNMdU5Wam00a0ViczJ2dGJq?=
 =?utf-8?B?dy9iQjFrUVM3SXY2QnNXaE0rSmh3aWNZOS9JU3lxWC9PN1hqVkV1TFNhOFFX?=
 =?utf-8?B?eVg5dlM1dXdxdThzTStIY3VEQ29oVThzVjN4a29MWlAzb3pwNzJLOGtOdWpE?=
 =?utf-8?B?Zjk5LzJaUFRhVzF6YU52bFEyeFpqMVdwemxldDF3T1VvNGxyWjZDc05FMjhy?=
 =?utf-8?B?bWphQ0FjTDhVMDVPMDlNNmdjeGYwSURpMVJ4MDdTQzZFdVBsRHRLWUdveXln?=
 =?utf-8?B?Y3kvcE9uWGRhR3d1dDBNMEo3a2tvcWFyWVQ4NUhrWXV4L1NJOVNxYW1YaUJx?=
 =?utf-8?B?VkV0QXBIcnVFNmIzUk9YQWgra0xKTFdFRDdBV3F6Zjh5RUd0cEVSVUJIVlBv?=
 =?utf-8?B?K2VVK0FrM3pEVjJnWnp6TFZsYytDMG5iZHZTQWNPb0VJaXQ1c0lNM2YrZXIr?=
 =?utf-8?B?QXVNWFE3bVVURk5kZWJieURabGNlZUZCT0E0Tm0rUi9KR1RqY2lxTlBUMjE4?=
 =?utf-8?B?c2h4dTR1QUQwRCtJUG5TWGhFV1g0WDZMeitMcnMwMmZWQkpOZnVBR00yS1F6?=
 =?utf-8?B?OG1KME5SZDBDQmRXbk5hYWVXSnQwdmVhQi9INGgwcTE0U3YwZ2ttWHN3bUgy?=
 =?utf-8?B?clh3QUpFQlhQVWRSeWZHdEZtTmNCdm94SEtwa2JYakliNUNTYlhJS3NaUkdo?=
 =?utf-8?B?eHdtaGZiNTVaMlJCK0NtRG5UMEk2RzN1V0d1alF3b0FpNHZaMEtnQU5lVnRs?=
 =?utf-8?B?WkpJZ2d6VHZVMk9wVGdIQVNaQVlrUGhnVGFudDdsMHFpZ3FTT0hoU2FqY1JG?=
 =?utf-8?B?eWk3NDk0SlljYmcvbUllNVZkeHZ3YVhmS1hvK1NXSlNBNHlBMTNaR0lyVVd0?=
 =?utf-8?B?L1Q1cVdUdDlLWUNKaThIZlQxNXVJR0ZnWUsxUGlGdGgraC9qeTNGdysrQjVZ?=
 =?utf-8?B?RGtPdi80TzFBTC8wVlI0emlGT3Z6UWx2cWFidVpaSTJnRTVXcFFDd3NnOUQv?=
 =?utf-8?B?cDVXb1dyY2NXNFdmNFFESW53Z3g1NTZuUGlMQzhVb0RySThsMUpPVjQ3RTQ3?=
 =?utf-8?B?K3BjSktabmh6ejhqWExUNHpzNVNhRmsvMUduYXRMSEg1VkxWRWdBY3U2OUVZ?=
 =?utf-8?B?Y0t3elRPd1h6b05SaC9iWnczdGQzTjdCdTlNazhOWmZVS01vd1pxOTkyNmh0?=
 =?utf-8?B?bUJnMDNJN1dLbkxxd3dQQmdsaG93Z01lSVkzVGlZUGRPOWh4dTJ1NEpQMnZj?=
 =?utf-8?B?V2pmQytiWEJKVVArU1AvNlh5TThyeWN4MUd2Y1ZUQnViVThyY3pyYndpSVRU?=
 =?utf-8?B?dHR4UUFZWnBFRTRseUgzSks2d1ExMW9RYXZDeXd2NTVRRHN3NTVPZ1ZYVHNo?=
 =?utf-8?B?aUlJb0hsRTdkZXhOV2JpRFB1RXdHMlZLTmdaU2ZDMVduQ2VSeWZxRU9RUVRN?=
 =?utf-8?B?Z01NY0M1QjYraWhRdTZqeWEzOExsdi9VZTY1WTZEdUthb0IzY1B0NTFRc3Q4?=
 =?utf-8?B?VVc0Q0dkY25ickd1M28zWDZ6NmdzTHdlRkM1c1JpeFkwUE9yUFFLS0VPZSto?=
 =?utf-8?B?cnZCdXlNeWIxVDNGUERtRGtFTjlCYmpSUWZIT2ZmOHkzZVI3ZEYweHg5MHN3?=
 =?utf-8?B?U09qbFNyenhTb2FVSW5JSWkvOHBxaSt5UGo0TEhVZFJ2a1NoTDlydXlTeFpZ?=
 =?utf-8?B?bXlpa0FjdDk1R2VGNnFmdk1OZ2kvQ0ZLVFF0MHhGb2pJcENBYUNBZm5pOUY5?=
 =?utf-8?B?UTdPSTV1WnFVUEZmSi8vb24xeVUvY2oxNEZ5QW41T3pmN2ludTVOTFRVblR0?=
 =?utf-8?B?dXZTWjFuUnJBcWNTdUtjbGRRK3Vray90VzBFTVNncnZ0VFlXU2VoOGRCSlFZ?=
 =?utf-8?B?eHg2UnVXd2NhZUpNSGxQSEp4VFVDakpOd1ZBTHhyUDBza0R5aUNmYjFveFoz?=
 =?utf-8?B?Y3BvYzRucmdUcHF5N2kyNlNpcVczampuaW4wL29TNnErNC9XaGV1M2l0NWRy?=
 =?utf-8?B?ZmkyaEdoNWRzblJNN000T1dMQk9CYXd3UStrU2ZUYXFkRXoydFRZZEpqaHBG?=
 =?utf-8?Q?oZS7OzuQyPZtCbl0DCHL/6ZuK?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 12c3a64f-f405-479a-6d6f-08dcc0670a68
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 15:53:17.1519
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: I/dNbvAH12hQt6Rt3CGuHFgfF1TEmWHxtzWoRq+6jh3nkM+zQdDzArhgYM1QrvaWqIrSjT0P+Jyw8THqepYV6A==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BL3PR12MB6401


On 8/4/24 19:07, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:30 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Region creation involves finding available DPA (device-physical-address)
>> capacity to map into HPA (host-physical-address) space. Given the HPA
>> capacity constraint, define an API, cxl_request_dpa(), that has the
>> flexibility to  map the minimum amount of memory the driver needs to
>> operate vs the total possible that can be mapped given HPA availability.
>>
>> Factor out the core of cxl_dpa_alloc, that does free space scanning,
>> into a cxl_dpa_freespace() helper, and use that to balance the capacity
>> available to map vs the @min and @max arguments to cxl_request_dpa.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m4271ee49a91615c8af54e3ab20679f8be3099393
>>
> Use the permalink link under these to get shorter links.
> https://lore.kernel.org/linux-cxl/168592158743.1948938.7622563891193802610.stgit@dwillia2-xfh.jf.intel.com/
> goes to the same patch.


I'll do.


>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>
>> +
>> +int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>> +{
>> +	struct cxl_port *port = cxled_to_port(cxled);
>> +	struct device *dev = &cxled->cxld.dev;
>> +	resource_size_t start, avail, skip;
>> +	int rc;
>> +
>> +	down_write(&cxl_dpa_rwsem);
> Some cleanup.h magic would help here by allowing early returns.
> Needs the scoped lock though to ensure it's released before the
> devm_add_action_or_reset() as I'd guess we will deadlock otherwise
> if that fails.


Yes, I'll try to use it making cleaner code.


>> +	if (cxled->cxld.region) {
>> +		dev_dbg(dev, "EBUSY, decoder attached to %s\n",
>> +			     dev_name(&cxled->cxld.region->dev));
>> +		rc = -EBUSY;
>>   		goto out;
>>   	}
>>   
>> +	if (cxled->cxld.flags & CXL_DECODER_F_ENABLE) {
>> +		dev_dbg(dev, "EBUSY, decoder enabled\n");
>> +		rc = -EBUSY;
>> +		goto out;
>> +	}
>> +
>> +	avail = cxl_dpa_freespace(cxled, &start, &skip);
>> +
>>   	if (size > avail) {
>>   		dev_dbg(dev, "%pa exceeds available %s capacity: %pa\n", &size,
>> -			cxl_decoder_mode_name(cxled->mode), &avail);
>> +			     cxled->mode == CXL_DECODER_RAM ? "ram" : "pmem",
>> +			     &avail);
>>   		rc = -ENOSPC;
>>   		goto out;
>>   	}
>> @@ -550,6 +570,99 @@ int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>>   	return devm_add_action_or_reset(&port->dev, cxl_dpa_release, cxled);
>>   }
>>   
>> +static int find_free_decoder(struct device *dev, void *data)
>> +{
>> +	struct cxl_endpoint_decoder *cxled;
>> +	struct cxl_port *port;
>> +
>> +	if (!is_endpoint_decoder(dev))
>> +		return 0;
>> +
>> +	cxled = to_cxl_endpoint_decoder(dev);
>> +	port = cxled_to_port(cxled);
>> +
>> +	if (cxled->cxld.id != port->hdm_end + 1) {
>> +		return 0;
> No brackets


Sure.


>> +	}
>> +	return 1;
>> +}
>> +
>> +/**
>> + * cxl_request_dpa - search and reserve DPA given input constraints
>> + * @endpoint: an endpoint port with available decoders
>> + * @mode: DPA operation mode (ram vs pmem)
>> + * @min: the minimum amount of capacity the call needs
>> + * @max: extra capacity to allocate after min is satisfied
>> + *
>> + * Given that a region needs to allocate from limited HPA capacity it
>> + * may be the case that a device has more mappable DPA capacity than
>> + * available HPA. So, the expectation is that @min is a driver known
>> + * value for how much capacity is needed, and @max is based the limit of
>> + * how much HPA space is available for a new region.
> We are going to need a policy control on the max value.
> Otherwise, if you have two devices that support huge capacity and
> not enough space, who gets it will just be a race.
>
> Not a problem for now though!


I agree. If CXL ends up being what we hope, these races will need to be 
better handled.

Thanks!


>> + *
>> + * Returns a pinned cxl_decoder with at least @min bytes of capacity
>> + * reserved, or an error pointer. The caller is also expected to own the
>> + * lifetime of the memdev registration associated with the endpoint to
>> + * pin the decoder registered as well.
>> + */
>
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-DM6-obe.outbound.protection.outlook.com (mail-dm6nam12on2054.outbound.protection.outlook.com [40.107.243.54])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 1596213698F;
	Mon, 19 Aug 2024 15:58:37 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.243.54
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724083119; cv=fail; b=r13QVlo1UOmBqhOqI59AMV7uRLSq+qpPyk1Qmv6Sc9bFcxitE54dK5dDBCs8D4JFZLFaJAdmb1q32tlej5NFCnCWes3EF4qBJrpvWc4elLHX6Y+1UnG43jHbypxy6hOc20q8J5J2BtepPEOmnma95bmTsA1R3TN7kLIyfifEOsg=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724083119; c=relaxed/simple;
	bh=9hRmtlCz99INlPcYorY4GxtqAMPD9gaF6N4gC6xW7sY=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=Qq3Q0Quu8ZrGGfV5yUe42rBO+oH1QC/XxB40GbrJ8XIR6iLq1x+YakEKjT/OEVhsE6qmpH/3B8bFW/5UogwDIAifPL/JiEkRSP9jQBke8PFCZ8iKUr7OT5WY06mj1pGyA+3YEgJuz1MixzS7DTjxMBcf8IAW/nbkTM2m4h17f9A=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=kvnBHvvF; arc=fail smtp.client-ip=40.107.243.54
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="kvnBHvvF"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=HkL3HxEhPYUV5WJzMvSYpKptqWKK09B+J8opPXxwlzNUihp7Sx4Q3T38Q1ScdGIxcIdPYQWGMhWm/wBFxEhU9aDMXl2F04khfCRawFkjjYkzZ9ZKQuc63VtK68NawSsHeKEx20QALCYsA6XSOiueeB54eSzMQw19Lmj2kH2vI9fdCHwMmNdFNTDVfhCQd9D1SgYly6Vb575brEqPn5IhYbKDz69zDybY3aSqrBdRJKDj7ADMDkwbomtTDguAP0cVzyLg8wA7fFeKhGfTcF2c13P/K4lLnoRoWxx/K1k9q04sVo8h3Aflw/qq7aycO7vYt/uBCvs3zIIscBXeSffOOg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=6wy40lwCf680Pi+2RBp0EuZuaoW+GWnfOepFQPmTvUw=;
 b=CErABK4phT0XPqumEKRcoE3l7KSr35kCfXaR0oa5SxO3zw2q9S7GGErXRD2YHkASqk1H9ixxBjNvDXjTFECXUCal65JhPw69EbTrhMhBdNplSuUAWaDPWSloEwaTlFocLhf2PKzcWfve6SZ2/Alnm2XEGl1+2YER4pnC99gmbMf/V/BSdWlMewI6FxlNFk+U90qs+zd/RDFh4bhWfnWNC6xgYNT2zm4/G101Vme91XhHMhtBFrD3+eVVejez0JaZAHWXHsRR/VAfMls0E18c+qyIFccNHLll4ulq5TIfeBYi+Nn87kSgB9mNRYZXQDPVsXbOIH29Xw5s/Jqvcms03w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=6wy40lwCf680Pi+2RBp0EuZuaoW+GWnfOepFQPmTvUw=;
 b=kvnBHvvFvl8rOaZHcWJ0JXAKozl8LJUJUpTFW6zcMvA+3Ggql8z7LfqtkytACRoxjKsM+4wGlJWGQRf894g3zpQJN9tRPR8JluYmLnDeJqPeWtoMRIvZG5lro3qvv1AXNWpd5xFEsq6TEa0yrD1O7O8XcjUoZW9D+79/MZa+f3M=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DM4PR12MB7765.namprd12.prod.outlook.com (2603:10b6:8:113::5) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 15:58:34 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 15:58:34 +0000
Message-ID: <0d9f54ee-5a9f-8f47-4911-204c42b33cba@amd.com>
Date: Mon, 19 Aug 2024 16:57:51 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 10/15] cxl: define a driver interface for DPA
 allocation
Content-Language: en-US
To: Fan Ni <nifan.cxl@gmail.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-11-alejandro.lucero-palau@amd.com>
 <ZrJecn2KNn_5_Xef@fan>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <ZrJecn2KNn_5_Xef@fan>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0161.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:2c7::8) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DM4PR12MB7765:EE_
X-MS-Office365-Filtering-Correlation-Id: 19264a5b-9bbf-4bb6-57a8-08dcc067c786
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?OEtMYmpPM2Y0QmhHMGVEZ0d6OG1NZVpQVGVMUUZ0clh1eWh2QkluWncrY0ts?=
 =?utf-8?B?U01CT3pkY2l5V3dnTm1zYkoyWFFKd01hQytheDBSSHRieTZTbkFweDh3cXZz?=
 =?utf-8?B?UmNHcEFXMnVFc29rNmVEbzQvaktxaUtwNUMyYm1CbjA4ZE5CMzRMRi9zYXdQ?=
 =?utf-8?B?NzNsZGJCVCtVRzB5bEdScGNJbnJrb2ZUK2FqQm0vREJmTlJCaDRUMUUxU0V3?=
 =?utf-8?B?RERsWFVOMWxvTkQ1cVFSc3NnOTN2N3p2MDRXY0E2M3FhM25EQ0w5UzZ2QTU0?=
 =?utf-8?B?NTUrekVEaGJOT0xSUjFRemdkNWJZYjdqd3lvc25FQlFmakphcDZMbFh6TFlw?=
 =?utf-8?B?b1ZsMGZTK092S2JYYVJISjFaVmRqZGJ0K2k2REdWVGRvWUZvQ3gxZVh3R2pG?=
 =?utf-8?B?Y0xuVi93dTBHNlZLWDdRVVI5VkNpWTc2UytKeVMxM0tGRW44dFhmcU1wR3o0?=
 =?utf-8?B?TUI4eTU4anQ4VUhmQ1RPLzBpdTU0Rzd1dDk5UWYrZmptcDM1QnFERmlmMm80?=
 =?utf-8?B?dW1FdEFJNmpOZkVDSVdXM0pJbWdGQTBpTm1SS1JMaUt0cEwxZGl1ZDZ3aldN?=
 =?utf-8?B?dHc5alVoSlYvbC8xV3IzUXVBMEF0NzNKYkszcDZzOUNEWWFwQjVQaTVISElO?=
 =?utf-8?B?eCtPMW1UMGFBOG9MOFU4QnlyQXN2YmYrUXd4SnhBVVkrVnp2bEdHSWNkV0ps?=
 =?utf-8?B?bUNuYW43eitZUEhCRmJHdWV2VXRpcTdDcGxsODZlSG0waHlNZ2M0VzRkUVE2?=
 =?utf-8?B?UnF5ZkVCaUlJQ0p1SkQ4MVlYTDB4Z1RYZ0dNUjlOT2pBNFZTcDdtVXVJTjJk?=
 =?utf-8?B?UXdVbTdGS3h4NU12bFR5VXY5MVlodkhPWFZhZVYxNS9hdkRid0N1S2EwUWRt?=
 =?utf-8?B?SlhLVkZMME83aU1PNjZEQjh5R001UTg4WEhoR0dwbmNRa1dzTXFXUy9TeE53?=
 =?utf-8?B?YlFyWHgrWFA3Y3pFY3RxMko2eFlVYTlVNSt4QUlNb2lrc1dNRzNuQTNsQk5C?=
 =?utf-8?B?RmtYUXhxbkY1Q0x2RTkzZXNXRzhaMlFEUkR1Q2tERWNaNHBUa20yKzZtZlo1?=
 =?utf-8?B?L21JYXYrUkV3aXpiMlV3MUR0UnVtV0R1TGUvQmNZdk4yMFNiTDZJNHZEUUox?=
 =?utf-8?B?c05vVXk1aWhTNStLaFUrRlB5TjB2THdKTnk5eEplQVMzeEZTanhKd2ZsYUxn?=
 =?utf-8?B?UTZ5T1ptYVJMbWZWcDZtRHNBM2VHT1NqbC9HT3N2ckZ2VWFyV3lhd2MwNVRG?=
 =?utf-8?B?V0k2VUtvTUpaelFqbXlxTnVMMnZLVEp4eHRLSzhNTlFDZ0ZGL0tKRy9wWWNo?=
 =?utf-8?B?VU1ndkZ6T3N0Z0UzemRGaTB5VkhGTVF0MlYxaUlsNnVIQ0JMRTRzTUdiLzIz?=
 =?utf-8?B?MHlPMkJmUmF1L3EzRU5JMmJ4elNjRFExMFRaNFZFdmlLY0lHRkFwcW4rU2ZF?=
 =?utf-8?B?c0E3RnptMi90akxSbkxWdFd5ZFdJanBXZ004cTJ5MzJPb01qSHdpUnJaMlZB?=
 =?utf-8?B?dTFQbDZROFI2OG5xTGNVMkdFUEh1VnpSKzFwVDEwQmJVdFFwWkMyZzRTWGlZ?=
 =?utf-8?B?VFBuMGhnaE5rOGdWZDZueENGdDRPZ25BbTBKRmQ1TXR5UnZHc2JVK3pWZ21p?=
 =?utf-8?B?aGw0QWVTdE8vSVlFSmwvN1NPampnZE9kdUQ5RDVHTXlSNjZxV1B6UWR4ZmRs?=
 =?utf-8?B?MzVtTHRhSWFlT2xKWE5tVml5dDMyY1RnVnlBaWw0M1hXOUNXOGRYS2tUWlNU?=
 =?utf-8?Q?At2z5EkgfQxGKl5Rb4=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(366016)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?VmZ1eVdrRHhjQjVTN2J1WER3TDloR0Y0WGV3RThvRGtmWTJmeDAyMXNhL2hT?=
 =?utf-8?B?NWk4cjdnOElDTjRJRGVscGNzOWUvZDZLRjlZNDl4bkl1SS9FNGVPL0FLWlpI?=
 =?utf-8?B?VWVvSDI4dDk5bjdrZnBjUFNYTjRnbHVYOEFXMEZuaDNWbDdnbU1nZjhuaW5s?=
 =?utf-8?B?ZGNwQmNqZWtvVVFEbWh0b1BqeGJaT1huNGNDamtqM2QvNHltREJLZjlFUlRM?=
 =?utf-8?B?V2ZmdlR3Yko2b0JuOC9CUFRuQjMweVJQYXpkU2Y2dFVBNlVwUGZHblVDQWYy?=
 =?utf-8?B?SCt6Mm9GeG1EWlVBUDZEeVIyUnNXZG03NnczS0lWTDcxempNaC9HVmk3WFd2?=
 =?utf-8?B?RC9zcGpiUGR0NUxRTTdWYThwRkF5eVU0bEZRdXpVQWI0alR3MzFHZHB2Nmlo?=
 =?utf-8?B?WTJRa3R0QXd6QXBEckVPL1NCRHNKWW00UnVnSDJZOHFvckdmcVNUNzlxU3Ji?=
 =?utf-8?B?MXhRTHJydzFIYU5TbGlTV3FvK2Q4YUp2TXBUaS9oWjI5QzBoelQ0L0tEbmE4?=
 =?utf-8?B?ZWx6dkViK3F4Z3JHdnh6YVBiVnczaFY5WGRoNDlqbjFCdlhtWHU0ZFJ5Wmpx?=
 =?utf-8?B?QUMzMitXNlZRVnBwRVdtMnlUckNsdlQxdTVtcnFwTHc3Zk1QTFhvREIxMmx3?=
 =?utf-8?B?QlU0ZEF6ZEhOUnJJL2JOOUlGRi9UV1lwS1JmZW82UlZIOWpqb1VGY3BUbFZG?=
 =?utf-8?B?Y1RwdnQ5V2Z5aU91TWlneDkwY21YSDErRmhwTWVETjNCdjZjemFyMEpyTnhq?=
 =?utf-8?B?OWxpRzNIS0hhQkI3b01FOHRob2tDeXgvbWJ4TEJDdTRpbytma3Q0b0ZJZ3NN?=
 =?utf-8?B?Q3JOOEV0dDU2UE5MSkEvSzMvdzdlaTBuREVLZXpGMGtSRkp1b2gzRTRZdHJZ?=
 =?utf-8?B?d2lCdndYMHdIUEs4bk5JNTdJTlFhODZ2Umd3ZHZjeGpvV2k4KzV1aUtrTUhu?=
 =?utf-8?B?U01ZS2o5RmI1djAwVTFMbmljcXpkczAxVmMwT1p5cVRFbi9HMklPNGV3eE1V?=
 =?utf-8?B?RFhTU1FwbUFlcG4xaWlod0FCcXBrTmdnUUhndVU3RDhlWmVTbXRyNnA3MGt1?=
 =?utf-8?B?cS9yNXJCY3VaOFR3VGNBR1VSS0F3UDVqSWJTTkwvQVNSWjNhRUtzamg3UWVY?=
 =?utf-8?B?L05aMGtMTmtRM3pKcmtPQ3RUSmEwNjVIZ0F1UlgrVHNrekZycjhpNmtYNWJF?=
 =?utf-8?B?N3N6dTJYalFQMGg4NUNRMzFZODRUdkhwbGRSUE8zaGJKUDRFL3JMVXpWUzdj?=
 =?utf-8?B?TStTSzRBQVNLb25hUlpyTEhQMXRRbTNFN1ZVaEZJd3ZYQ09SdVBCeTRpWjQy?=
 =?utf-8?B?WFZnRTFGeFQ0UjFuMzRicHpnZnV5VHJHUjg3dEdYbEJkTDVxS3R1dHErM28z?=
 =?utf-8?B?cWxmWlR6cnUyQ0EzNlhNSHhvVTc2empaZkRhVnYvaGtpU3lQWHZndmtySXM4?=
 =?utf-8?B?SDNBYkRxUHhWZjhONGRaNnU2RG1FWi9BcitHYWNKL3haYzBpQUs1VFZxNjJH?=
 =?utf-8?B?LzN6UU82RGhVSDFJbTV5ZlMrN2tQL1pFSVh5U3RmcmZvSXdFcVFlMWxUQ3J2?=
 =?utf-8?B?RzRKV0wzUFlWS2V5Nmw2MzJVQ1NWK0Y0b1J1T25pam9YS0hiVW4xTmw3SVd5?=
 =?utf-8?B?STAzYjh0bUhTb3k5NmlRQ1hvcDYzNFpCNFZpWVkyVURMWnMyOXEvd2tBMjVh?=
 =?utf-8?B?RTFhVE9ENnZXTEUvTHl4ck5xay9wQXRxTGQ0VDVGNXhtZklrZ0pwQlNTSENy?=
 =?utf-8?B?dEs2U0N1VnRicjBVYUU1ejFIL2NMNTZRWnlZQlY1bSt1TENBNW5lM1p1TSty?=
 =?utf-8?B?akVHem5MZFErdlBoSUZuRjNIK3pyalpma2d1d3V1T2pMWEtBNTloaVdqNllp?=
 =?utf-8?B?cGFEVEY0VVcyc2pGTFlqOWJOTXhSNXlhajVYMmpjYjFQemRWSHU2OUM3cWtK?=
 =?utf-8?B?am9zNGlTcnBNaWhZc2tYcGZxUFNEMlVISm9RaHFIVUY2N0paUHJkZXNGdSts?=
 =?utf-8?B?ODBUTU92QndxbnFONDIrUTdpL3N3N1FONTNaclpsaHJ1aWRSS09lbVlmT0FW?=
 =?utf-8?B?eDFkSllCbXdRRVZ5YXhza1F2MjBBOXdlanNJenNDQTRiZ2xXTU90K1hHOEpG?=
 =?utf-8?Q?mYYFzadiJVoL91n1IcDRiNWdc?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 19264a5b-9bbf-4bb6-57a8-08dcc067c786
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 15:58:34.3472
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: lHWGXMJ6XWIn71xtBcPFbhf0HylpVDIn4NTkVFK0wjD5TgGPM+0rp9qizzUYeqXMSnrljhxUZv9vU9gBCCet5Q==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM4PR12MB7765


On 8/6/24 18:33, Fan Ni wrote:
> On Mon, Jul 15, 2024 at 06:28:30PM +0100, alejandro.lucero-palau@amd.com wrote:
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Region creation involves finding available DPA (device-physical-address)
>> capacity to map into HPA (host-physical-address) space. Given the HPA
>> capacity constraint, define an API, cxl_request_dpa(), that has the
>> flexibility to  map the minimum amount of memory the driver needs to
>> operate vs the total possible that can be mapped given HPA availability.
>>
>> Factor out the core of cxl_dpa_alloc, that does free space scanning,
>> into a cxl_dpa_freespace() helper, and use that to balance the capacity
>> available to map vs the @min and @max arguments to cxl_request_dpa.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m4271ee49a91615c8af54e3ab20679f8be3099393
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>> ---
>>   drivers/cxl/core/core.h            |   1 +
>>   drivers/cxl/core/hdm.c             | 153 +++++++++++++++++++++++++----
>>   drivers/net/ethernet/sfc/efx.c     |   2 +
>>   drivers/net/ethernet/sfc/efx_cxl.c |  18 +++-
>>   drivers/net/ethernet/sfc/efx_cxl.h |   1 +
>>   include/linux/cxl_accel_mem.h      |   7 ++
>>   6 files changed, 161 insertions(+), 21 deletions(-)
>>
>> diff --git a/drivers/cxl/core/core.h b/drivers/cxl/core/core.h
>> index 625394486459..a243ff12c0f4 100644
>> --- a/drivers/cxl/core/core.h
>> +++ b/drivers/cxl/core/core.h
>> @@ -76,6 +76,7 @@ int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
>>   		     enum cxl_decoder_mode mode);
>>   int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size);
>>   int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
>> +int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
> Function declared twice here.


I'll fixed.

Thanks!


> Fan
>>   resource_size_t cxl_dpa_size(struct cxl_endpoint_decoder *cxled);
>>   resource_size_t cxl_dpa_resource_start(struct cxl_endpoint_decoder *cxled);
>>   
>> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
>> index 4af9225d4b59..3e53ae222d40 100644
>> --- a/drivers/cxl/core/hdm.c
>> +++ b/drivers/cxl/core/hdm.c
>> @@ -3,6 +3,7 @@
>>   #include <linux/seq_file.h>
>>   #include <linux/device.h>
>>   #include <linux/delay.h>
>> +#include <linux/cxl_accel_mem.h>
>>   
>>   #include "cxlmem.h"
>>   #include "core.h"
>> @@ -420,6 +421,7 @@ int cxl_dpa_free(struct cxl_endpoint_decoder *cxled)
>>   	up_write(&cxl_dpa_rwsem);
>>   	return rc;
>>   }
>> +EXPORT_SYMBOL_NS_GPL(cxl_dpa_free, CXL);
>>   
>>   int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
>>   		     enum cxl_decoder_mode mode)
>> @@ -467,30 +469,17 @@ int cxl_dpa_set_mode(struct cxl_endpoint_decoder *cxled,
>>   	return rc;
>>   }
>>   
>> -int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>> +static resource_size_t cxl_dpa_freespace(struct cxl_endpoint_decoder *cxled,
>> +					 resource_size_t *start_out,
>> +					 resource_size_t *skip_out)
>>   {
>>   	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
>>   	resource_size_t free_ram_start, free_pmem_start;
>> -	struct cxl_port *port = cxled_to_port(cxled);
>>   	struct cxl_dev_state *cxlds = cxlmd->cxlds;
>> -	struct device *dev = &cxled->cxld.dev;
>>   	resource_size_t start, avail, skip;
>>   	struct resource *p, *last;
>> -	int rc;
>> -
>> -	down_write(&cxl_dpa_rwsem);
>> -	if (cxled->cxld.region) {
>> -		dev_dbg(dev, "decoder attached to %s\n",
>> -			dev_name(&cxled->cxld.region->dev));
>> -		rc = -EBUSY;
>> -		goto out;
>> -	}
>>   
>> -	if (cxled->cxld.flags & CXL_DECODER_F_ENABLE) {
>> -		dev_dbg(dev, "decoder enabled\n");
>> -		rc = -EBUSY;
>> -		goto out;
>> -	}
>> +	lockdep_assert_held(&cxl_dpa_rwsem);
>>   
>>   	for (p = cxlds->ram_res.child, last = NULL; p; p = p->sibling)
>>   		last = p;
>> @@ -528,14 +517,45 @@ int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>>   			skip_end = start - 1;
>>   		skip = skip_end - skip_start + 1;
>>   	} else {
>> -		dev_dbg(dev, "mode not set\n");
>> -		rc = -EINVAL;
>> +		avail = 0;
>> +	}
>> +
>> +	if (!avail)
>> +		return 0;
>> +	if (start_out)
>> +		*start_out = start;
>> +	if (skip_out)
>> +		*skip_out = skip;
>> +	return avail;
>> +}
>> +
>> +int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>> +{
>> +	struct cxl_port *port = cxled_to_port(cxled);
>> +	struct device *dev = &cxled->cxld.dev;
>> +	resource_size_t start, avail, skip;
>> +	int rc;
>> +
>> +	down_write(&cxl_dpa_rwsem);
>> +	if (cxled->cxld.region) {
>> +		dev_dbg(dev, "EBUSY, decoder attached to %s\n",
>> +			     dev_name(&cxled->cxld.region->dev));
>> +		rc = -EBUSY;
>>   		goto out;
>>   	}
>>   
>> +	if (cxled->cxld.flags & CXL_DECODER_F_ENABLE) {
>> +		dev_dbg(dev, "EBUSY, decoder enabled\n");
>> +		rc = -EBUSY;
>> +		goto out;
>> +	}
>> +
>> +	avail = cxl_dpa_freespace(cxled, &start, &skip);
>> +
>>   	if (size > avail) {
>>   		dev_dbg(dev, "%pa exceeds available %s capacity: %pa\n", &size,
>> -			cxl_decoder_mode_name(cxled->mode), &avail);
>> +			     cxled->mode == CXL_DECODER_RAM ? "ram" : "pmem",
>> +			     &avail);
>>   		rc = -ENOSPC;
>>   		goto out;
>>   	}
>> @@ -550,6 +570,99 @@ int cxl_dpa_alloc(struct cxl_endpoint_decoder *cxled, unsigned long long size)
>>   	return devm_add_action_or_reset(&port->dev, cxl_dpa_release, cxled);
>>   }
>>   
>> +static int find_free_decoder(struct device *dev, void *data)
>> +{
>> +	struct cxl_endpoint_decoder *cxled;
>> +	struct cxl_port *port;
>> +
>> +	if (!is_endpoint_decoder(dev))
>> +		return 0;
>> +
>> +	cxled = to_cxl_endpoint_decoder(dev);
>> +	port = cxled_to_port(cxled);
>> +
>> +	if (cxled->cxld.id != port->hdm_end + 1) {
>> +		return 0;
>> +	}
>> +	return 1;
>> +}
>> +
>> +/**
>> + * cxl_request_dpa - search and reserve DPA given input constraints
>> + * @endpoint: an endpoint port with available decoders
>> + * @mode: DPA operation mode (ram vs pmem)
>> + * @min: the minimum amount of capacity the call needs
>> + * @max: extra capacity to allocate after min is satisfied
>> + *
>> + * Given that a region needs to allocate from limited HPA capacity it
>> + * may be the case that a device has more mappable DPA capacity than
>> + * available HPA. So, the expectation is that @min is a driver known
>> + * value for how much capacity is needed, and @max is based the limit of
>> + * how much HPA space is available for a new region.
>> + *
>> + * Returns a pinned cxl_decoder with at least @min bytes of capacity
>> + * reserved, or an error pointer. The caller is also expected to own the
>> + * lifetime of the memdev registration associated with the endpoint to
>> + * pin the decoder registered as well.
>> + */
>> +struct cxl_endpoint_decoder *cxl_request_dpa(struct cxl_port *endpoint,
>> +					     bool is_ram,
>> +					     resource_size_t min,
>> +					     resource_size_t max)
>> +{
>> +	struct cxl_endpoint_decoder *cxled;
>> +	enum cxl_decoder_mode mode;
>> +	struct device *cxled_dev;
>> +	resource_size_t alloc;
>> +	int rc;
>> +
>> +	if (!IS_ALIGNED(min | max, SZ_256M))
>> +		return ERR_PTR(-EINVAL);
>> +
>> +	down_read(&cxl_dpa_rwsem);
>> +
>> +	cxled_dev = device_find_child(&endpoint->dev, NULL, find_free_decoder);
>> +	if (!cxled_dev)
>> +		cxled = ERR_PTR(-ENXIO);
>> +	else
>> +		cxled = to_cxl_endpoint_decoder(cxled_dev);
>> +
>> +	up_read(&cxl_dpa_rwsem);
>> +
>> +	if (IS_ERR(cxled))
>> +		return cxled;
>> +
>> +	if (is_ram)
>> +		mode = CXL_DECODER_RAM;
>> +	else
>> +		mode = CXL_DECODER_PMEM;
>> +
>> +	rc = cxl_dpa_set_mode(cxled, mode);
>> +	if (rc)
>> +		goto err;
>> +
>> +	down_read(&cxl_dpa_rwsem);
>> +	alloc = cxl_dpa_freespace(cxled, NULL, NULL);
>> +	up_read(&cxl_dpa_rwsem);
>> +
>> +	if (max)
>> +		alloc = min(max, alloc);
>> +	if (alloc < min) {
>> +		rc = -ENOMEM;
>> +		goto err;
>> +	}
>> +
>> +	rc = cxl_dpa_alloc(cxled, alloc);
>> +	if (rc)
>> +		goto err;
>> +
>> +	return cxled;
>> +err:
>> +	put_device(cxled_dev);
>> +	return ERR_PTR(rc);
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_request_dpa, CXL);
>> +
>>   static void cxld_set_interleave(struct cxl_decoder *cxld, u32 *ctrl)
>>   {
>>   	u16 eig;
>> diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
>> index cb3f74d30852..9cfe29002d98 100644
>> --- a/drivers/net/ethernet/sfc/efx.c
>> +++ b/drivers/net/ethernet/sfc/efx.c
>> @@ -901,6 +901,8 @@ static void efx_pci_remove(struct pci_dev *pci_dev)
>>   
>>   	efx_fini_io(efx);
>>   
>> +	efx_cxl_exit(efx);
>> +
>>   	pci_dbg(efx->pci_dev, "shutdown successful\n");
>>   
>>   	efx_fini_devlink_and_unlock(efx);
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c b/drivers/net/ethernet/sfc/efx_cxl.c
>> index 6d49571ccff7..b5626d724b52 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -84,12 +84,28 @@ void efx_cxl_init(struct efx_nic *efx)
>>   		goto out;
>>   	}
>>   
>> -	if (max < EFX_CTPIO_BUFFER_SIZE)
>> +	if (max < EFX_CTPIO_BUFFER_SIZE) {
>>   		pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
>>   				  max, EFX_CTPIO_BUFFER_SIZE);
>> +		goto out;
>> +	}
>> +
>> +	cxl->cxled = cxl_request_dpa(cxl->endpoint, true, EFX_CTPIO_BUFFER_SIZE,
>> +				     EFX_CTPIO_BUFFER_SIZE);
>> +	if (IS_ERR(cxl->cxled))
>> +		pci_info(pci_dev, "CXL accel request DPA failed");
>>   out:
>>   	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>>   }
>>   
>> +void efx_cxl_exit(struct efx_nic *efx)
>> +{
>> +	struct efx_cxl *cxl = efx->cxl;
>> +
>> +	if (cxl->cxled)
>> +		cxl_dpa_free(cxl->cxled);
>> +
>> + 	return;
>> + }
>>   
>>   MODULE_IMPORT_NS(CXL);
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.h b/drivers/net/ethernet/sfc/efx_cxl.h
>> index 76c6794c20d8..59d5217a684c 100644
>> --- a/drivers/net/ethernet/sfc/efx_cxl.h
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.h
>> @@ -26,4 +26,5 @@ struct efx_cxl {
>>   };
>>   
>>   void efx_cxl_init(struct efx_nic *efx);
>> +void efx_cxl_exit(struct efx_nic *efx);
>>   #endif
>> diff --git a/include/linux/cxl_accel_mem.h b/include/linux/cxl_accel_mem.h
>> index f3e77688ffe0..d4ecb5bb4fc8 100644
>> --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -2,6 +2,7 @@
>>   /* Copyright(c) 2024 Advanced Micro Devices, Inc. */
>>   
>>   #include <linux/cdev.h>
>> +#include <linux/pci.h>
>>   
>>   #ifndef __CXL_ACCEL_MEM_H
>>   #define __CXL_ACCEL_MEM_H
>> @@ -41,4 +42,10 @@ struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>>   					       int interleave_ways,
>>   					       unsigned long flags,
>>   					       resource_size_t *max);
>> +
>> +struct cxl_endpoint_decoder *cxl_request_dpa(struct cxl_port *endpoint,
>> +					     bool is_ram,
>> +					     resource_size_t min,
>> +					     resource_size_t max);
>> +int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
>>   #endif
>> -- 
>> 2.17.1
>>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2071.outbound.protection.outlook.com [40.107.236.71])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id CB6DF139578;
	Mon, 19 Aug 2024 16:12:32 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.236.71
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724083954; cv=fail; b=p+KjGTOClV6CckMaMvdTwk9h0SK5e3+46PEp0fjK/8i0VKBOg1aD8oHsIwuk2xgjZhNMWUWXRc7HsbuqvDH0YIEwPw7Ia8B488RvjMtmTC9cSmvPscG26BoEoILlHLRTydsI3EJC7fhNIUHAoQxtj06ba24JqkEdItS2X4oA2AY=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724083954; c=relaxed/simple;
	bh=Y/w4fbG50X/a+8/H/Oe9/OD0izBW97DGnmEnkGhXfQE=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=SDNCrSdC026XxGxWYWOkPAd4zuqCIEqCun5pksR3L+Y3HZuuTBBVMGyqAzDJKkUtG1gIvXN4R8DusyE0xVgEuhwWuomYucARTlflpjJ4m0AWAH8a/pqUzPrDxYv9CCFlxtpNRXT9kAvEiFnQnhX6ENZ7/fE17sKL7N1fxf+eynw=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=Mm2dJyh2; arc=fail smtp.client-ip=40.107.236.71
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="Mm2dJyh2"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=y/HXIGt9Sjq1p1Icj5GC7wXI+11/mBE4H26LYw5SZWgN+nQzFYpiJspqEFF951K3uvIE/Cz0viGnJ1vzKXPo3R0XznT8Ce0KOVItoH5/g82gnNHQF5mIXf94NdOstQetlA6B7stJIlTVdaPVuVjPxdqr0g+5t1/Fp1vNwfn8FVf9n3dXWNvHKaBV+5B2ZvokPj7soGiFcsZvJWbrGeBLjb3ZPVgxDR6nEAFye3wO7anabyJzSeH/vMVqef/Ie+W5oI6f87rF6myiyKBvxfea73c+60f+CLOnzpWe4JPx8zQTUmxs7nRE8gRo3tnO6SVZpXd6BYhvZiZ6kHk/XjAYug==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=eXrcBB2AgZckce+SV8p2YG4DRrTNH7AGd2tCZ+kFFNM=;
 b=LEEk1H5+LvFEiXWH4565G6vl2H2gjWvVGtk9YsNntJENurbf00m0rs5puq8JhwdpOB7QkvQpm4AvulPrry/Yz/7sSY8/qbDzfzTiwvqiVZQahGSJpQb6enFaIHm369sZFDuNuc6Ot/awpkZ5l380JoP06YByFU5nD7lojuIff4mcoqai762LnUcL8JYshE5pjR+pltpLkYbdmLpE2rMRQG79T4nv1xpQt9aa+6d9mw1rloxw/XQKu9AFINhYRDnRljKk96bwpXdG2OU7nO8J8UAuyskKVXfssV75Zkwsj8ponS18k27lixD+GVnQbsQ4gA0uXd8JPUsa62GiyRGPDg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=eXrcBB2AgZckce+SV8p2YG4DRrTNH7AGd2tCZ+kFFNM=;
 b=Mm2dJyh2e5rZHiRD8dyGennLQqO/0D3JwBjre6zeYmalA/mp37Zum6AFedOjtlME/jhgU1Ps2+JYuj4Ygj0b2qsYn00MJjlLT0+feo7wq7SXFDxqwxcAXdgOd6xnhQz0GFzw/npHCHixkZ3dqB3wfUGLKi4PjcNzHhwhNGpTj1w=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by CH3PR12MB8236.namprd12.prod.outlook.com (2603:10b6:610:121::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 16:12:29 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 16:12:29 +0000
Message-ID: <ab8b5f77-7a53-a716-a1e6-bf1f7e06eb50@amd.com>
Date: Mon, 19 Aug 2024 17:11:45 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 12/15] cxl: allow region creation by type2 drivers
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-13-alejandro.lucero-palau@amd.com>
 <20240804192923.000035bd@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804192923.000035bd@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0015.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:2ad::18) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|CH3PR12MB8236:EE_
X-MS-Office365-Filtering-Correlation-Id: 5e925eb7-5d28-4870-3680-08dcc069b913
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?cGlKWWd5WXV1djBkQ2ZQaUFyMFUyaHFyaE5wa1hvTFZnVTZPeXlzeTdGdXlS?=
 =?utf-8?B?eStUVEVOK1ZqZllrL0lZYVZDendCWWduUnJhb28zZ2JCOGtUbHlQQVRIYVpF?=
 =?utf-8?B?TnpVVU1jNXlLT1RwWks1QVord2lLd1lpSWh0UWpUQzhJb0ZlVGozMVYzR29T?=
 =?utf-8?B?SStVdU1zdzBrMi8yRjdUWno5TFFmRkRGQ1BNRGx5V1BsRC9aZTF2dm9GdE0y?=
 =?utf-8?B?YkxCdERncVB6VElYbDRGeVJXMUpoZTFBemkvMWxLWHdPU0VEbmc2bFdDOTBZ?=
 =?utf-8?B?eTJlWW4wZkNPcVhNSjZvN3BRZGp0S0NrRWJ5TUZMNG4zZ0hwN1FrRnR5OVVK?=
 =?utf-8?B?dmRES20vc0VTWk1Oak9VUFdaVVRaUjBsSE52TTc2eVhoazNpc1VvYlZtMEs1?=
 =?utf-8?B?dktrN0NjT3d6cG10bjduREZJMzlwN3J2a0tPd3ZUWGJHMDc5VCtMN2JvaS9X?=
 =?utf-8?B?T29UeExnd1RndmJTRVVpb085eXUrc1VRa0pIRU9CMDVkbUozZUVRSVBYUklO?=
 =?utf-8?B?czR0ZmhnS2s3UFFEamlVRDdZRmJKakxTNUNEZ1V1VG05VmNCSGtYV1c4RUpL?=
 =?utf-8?B?TmRpS3g3YjBMLzR1azBhcGltK0lSc3dRa1EzaDBCUTlOZDJ1NFZsbkZ3aGFl?=
 =?utf-8?B?bmVMYnVObWRVOGRwOGl6bU42M1ZoS3A5UFhDdEkxMldCOERMSHJ0VFF3bC9s?=
 =?utf-8?B?aW1ZSzQvQVNMMERGVStRWGJZejBsZkhsNzdNdk8wM256ZkFwK0JYKzlnQTJt?=
 =?utf-8?B?YU50cHFDZk9ZZUYrYnlBbnpIdGVWSEhWajVIaDdYZDZJc3dVUUZCYlZzc3Jh?=
 =?utf-8?B?YXpXK05Xa3RReFNPaE9TTnNIcXNSdS93VTFhbmt1akFaV3F4aWZMbk9KZklz?=
 =?utf-8?B?K05ZMjV6bC8zVDY2bnk1QmhDY1BKNnZFM3pLWEZtVWhaZ25iZ2o4Vmo2Q0hY?=
 =?utf-8?B?VDNUd0NuL1l2a2MrZ1J3VUZTNVBGcmpsMkNOZDFBb3VkcU5BTVBEbWkyTFZ2?=
 =?utf-8?B?LzNlU1dvd3Zmc0greWZMQ3ZrM3F5Nzl2N3JEdTZ3UVdGdGg0cXl2V2V0eVN5?=
 =?utf-8?B?K2tmbVYwZW53dzk5TnVJSUlWNnNZL0lKek5ZK05JSHBJcVU1T29FZTRaR0FR?=
 =?utf-8?B?T1lCd1hseHNidFlxZXhBblB6cFoxWG9JWUpqZGhOTWtLUzZrSEJOWm5BdHZw?=
 =?utf-8?B?NlZmNWZML0duejBtbGRVYU14bFdvYktHbUJLOHhidnZ1d0ZGZU83ZHRJWDRJ?=
 =?utf-8?B?Q3dMSkdyUXFuRm05ejlRZkNXYkRWRWMrTlhnNzBNTjZRa1lCY0R5ZkVOZG43?=
 =?utf-8?B?a2Uzc25wUzc0Zy9qK2dFdEVJUTgzTDlYR1VFU0lFQ1lDeEduSWlPbXBTVzBo?=
 =?utf-8?B?Ri95MjVobFl0dUQ2V1VYdlcyOVlIeWh5akRlY2gvL3QzN0VOTlNwSHkweG9k?=
 =?utf-8?B?aXpKUEJ5YlptektqQ0VZRkw4Sk44U0ZWNEh4VThMMFgwZkttd2hqSnI0UEQw?=
 =?utf-8?B?NFNTWnFPczZEZkJjaUNLTG9vaW90TjJ2S3BiQ3dqaGEyVnQ3N1lwZ3hpQXZN?=
 =?utf-8?B?b1phMHc5S3JEUlNaMHJjR2pXUWo2YldYSjcvai9aei9DUTVudXJsay9Qby9H?=
 =?utf-8?B?RWc5d1lIZUhmTXFRaHBuQ1V4Y24zOTB5a25VckxTY2c5WDJ2a3JZWFRmQmtW?=
 =?utf-8?B?WHdPMm55ZnZubW5WcU5CbWZ2OEExeXVQOWQrMUdmejJ3eU1lUXNta3lsV0Jr?=
 =?utf-8?Q?4Ouu5gIOIjdeiY8S44=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?bFUzV0pHV2IrTWZoUDl6S3c2d3hsV0RqTjJJdndVQTRiaHllejhXRlN4R1R4?=
 =?utf-8?B?YmQwVFM0aHRRcDlJejVYM3F6WWp1UHpIQXVEbmxmak41dW1uVWlIem55WnNp?=
 =?utf-8?B?aWNINStXZjhKdnF4aElzL0tpS3Q4NGVFMng0eXgvQXJ0eGFHVDZHWjFWeE5G?=
 =?utf-8?B?T2dESm83NEdIS0dhL3g4QmVjNXBYY2hBazVJZ1BVWTc4U0dOSE9xUTBuUW5C?=
 =?utf-8?B?Y2dkcVByOUJlMXE0TGY1QkJSeWd5eU5lZzBXR2c4d1Z3d1VYVmgxeldZM0h3?=
 =?utf-8?B?d1MxTkNiVDhLNWE0dlVuZGFrK1Y4WmxYcmpFd2w2R2ZOWjZ3WGZDUHUwSmFZ?=
 =?utf-8?B?N08ycnVkcjJiU0I2SDJhWXF4dGdGeWVFQWRrQ2VmL284NHpmQWhIYkJmdEVU?=
 =?utf-8?B?M2dlRjdZV0JqcmxhV3BqdU1qVXp3UmJBRjgvbngyb2RDVTI4Q2Q1MmE4dDNn?=
 =?utf-8?B?eDVlSFpMcGNCUGdoUHpMdTVydnJISVJnMXlLaDlVSlVQdHI0VmRheE9kNXRX?=
 =?utf-8?B?eTdZL0pnbVBhQTJZWVJBZ2IrTXF3bFpBRHo0OXFWdnZxeVhkTzRWc3RiSVhB?=
 =?utf-8?B?TXJFSkFXdXJLd2l0aWhlRXpLUERjY3JuWHRDRVhFUkZtMk11S1RQbkxGMmpC?=
 =?utf-8?B?ZjR2OHowUTdiaEFXbUg1MFdKdnR0aU9JRXo4SUJaZm41aW5BYVBQeDBsTEEz?=
 =?utf-8?B?cnVveHlRYjhaRXc5bzZER21MdHFMbGFqYi9qY2N0VUJvY3FvU0Ria2tnTkVH?=
 =?utf-8?B?djZwZTdGTmIxSzJoTlNFS3FtenNSNTM0MVlKMXdqS1ZuSmhZR2ZRL1lVV0h4?=
 =?utf-8?B?SERVRS96RlhlTHNvSzZxa3BBMzN2SHk1c2oxMnliaHpLSlpMSlQyZForK1o1?=
 =?utf-8?B?TDAzNTlhVkd3R3B6dXVBZ25ZVmh0UFhXbUNPUXRaNkpqLzMzbWVia3R0Qitp?=
 =?utf-8?B?SE9UdjhqaU1CM3liY3dqRVA2NEtWbGFUdjROVUhhSzZCRGs5NnFxSGI5ek1M?=
 =?utf-8?B?bERaek5UdEZpaEN4ZzZLNmZCMGxINWNIVUJlOTdBSHQ0WTg3eDBQczFNaVBk?=
 =?utf-8?B?RkVpWkNSZlF3R2syU21xeEd2clZQNmoxMit1clpyS0QzVWxNR2ZnY3V4bEtj?=
 =?utf-8?B?SzRXUVhEUXgzS0g2QnlyMWNNWm4rVUNZdSs0dmFQMFZ1RTZFZ0hZNi9kSVE2?=
 =?utf-8?B?TTNndDRzSDFSSkgwVXdCUnp4WnlqeHFMNkdQNWlBYzBybFJMNGo5bU4xY3I1?=
 =?utf-8?B?OHlXWllSdDJPRFF0aWRZMGlLV3lHT0JrRU9vZ0FkcFJQdzlZSzZ2ZEZvc1Bo?=
 =?utf-8?B?THo0bE5oeVBHRGp4dXhON29PQW4vZTZpdSt4aE9QYUhXMG1qaEZ2K2pYNkJG?=
 =?utf-8?B?d3dnTFlpemZBRkFGdm5PbnF4cnlGQTdLR2pRdEUrS3VxZkhGYXJMU1BSRkhV?=
 =?utf-8?B?LzJNcGFVMjlWYjcrOFlHOTFRSExaWmtPaE1VaXJrR3RZemlKSHpoOTE2UWxV?=
 =?utf-8?B?N1g0NWN1dnB1UVV1KzhyOExhZU1SMUV2NzlnSUpMV2RoQzhrNUpYWm1JeHZZ?=
 =?utf-8?B?cHQwT0tkNWhuSHU2TThFbXVWSWpCWUVKR3hjVkd0anowODM5SE9Va1dBdlR1?=
 =?utf-8?B?RTB1WHV5TmxsWStsem1FVFVWQ2xqVHhEd0ZzSThyTHNVQ1RJMyt5L1NyQ0lX?=
 =?utf-8?B?bnI1aXdRV3Z1QWRUQVkzaVYyUkVpTzdEVG94MVNESWpLcmY0amNzVno2RkpF?=
 =?utf-8?B?VmpNUUh5VkdsL25JWFpiT2QzR3g2Zm1TWVh1TzdWN1pEaEFXVEg5QXB6U0xp?=
 =?utf-8?B?YUhLOU9ib1ZjSStiOXJEZ2FsZTgwSm1TQzNqSGpYd0NKUjhTRDAwdmpqdUll?=
 =?utf-8?B?OURzT2M5Zm9tVE1WTDVETklQc21md1NuSThPcFZQcllnQmQ2aDhNckE4UkIw?=
 =?utf-8?B?VmlFWTNhclltem9sMHBCNm1xNWV1M1U5aDM5NWRrc2p6TkFNWVN0aCtORDgx?=
 =?utf-8?B?cXZHWSt0RE9wcWF0VXkvdldDeFd3TFU5WFN2dC93emh2VjhQYUJtbGp2b3JY?=
 =?utf-8?B?UzgrNE9mUm0wZGp4NzUyL2swV290ekxlWmQxWDVEWWIxZlFpc2pTUjVpbnY1?=
 =?utf-8?Q?EcHNYmJmDvEz9OYCSQiUrvAb4?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 5e925eb7-5d28-4870-3680-08dcc069b913
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 16:12:29.3277
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: w82rKDP8cuHgIri61H0940OVPfF25IEVFtP8pQcIJe5QS//CVWBQWqCr3vkKaq5r6dXtpZuEHSWlj7jVOrRbsg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH3PR12MB8236


On 8/4/24 19:29, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:32 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Creating a CXL region requires userspace intervention through the cxl
>> sysfs files. Type2 support should allow accelerator drivers to create
>> such cxl region from kernel code.
>>
>> Adding that functionality and integrating it with current support for
>> memory expanders.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m84598b534cc5664f5bb31521ba6e41c7bc213758
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Signed-off-by: Dan Williams <dan.j.williams@intel.com>
> Needs a co-developed or similar given Dan didn't email this patch
> (which this sign off list suggests he did).


Yes, I'll fix it.


>
> I'll take another look at the locking, but my main comment is
> that it is really confusing so I have no idea if it's right.
> Consider different ways of breaking up the code you need
> to try and keep the locking obvious.


I have to agree and this means I need to work on it. I know it works for 
my case, what was my main focus for the RFC, but not looked at it with 
the right mindset.

I take your next comments as valuable inputs for the required work.

Thanks!


> Jonathan
>
>> +
>> +static ssize_t interleave_ways_store(struct device *dev,
>> +				     struct device_attribute *attr,
>> +				     const char *buf, size_t len)
>> +{
>> +	struct cxl_region *cxlr = to_cxl_region(dev);
>> +	unsigned int val;
>> +	int rc;
>> +
>> +	rc = kstrtouint(buf, 0, &val);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = down_write_killable(&cxl_region_rwsem);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = set_interleave_ways(cxlr, val);
>>   	up_write(&cxl_region_rwsem);
>>   	if (rc)
>>   		return rc;
>>   	return len;
>>   }
>> +
> This was probably intentional. Common to group a macro like this
> with the function it is using by not having a blank line.
>>   static DEVICE_ATTR_RW(interleave_ways);
>>   
>>   static ssize_t interleave_granularity_show(struct device *dev,
>> @@ -547,21 +556,14 @@ static ssize_t interleave_granularity_show(struct device *dev,
>>   	return rc;
>>   }
>> +static ssize_t interleave_granularity_store(struct device *dev,
>> +					    struct device_attribute *attr,
>> +					    const char *buf, size_t len)
>> +{
>> +	struct cxl_region *cxlr = to_cxl_region(dev);
>> +	int rc, val;
>> +
>> +	rc = kstrtoint(buf, 0, &val);
>> +	if (rc)
>> +		return rc;
>> +
>>   	rc = down_write_killable(&cxl_region_rwsem);
>>   	if (rc)
>>   		return rc;
>> -	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
>> -		rc = -EBUSY;
>> -		goto out;
>> -	}
>>   
>> -	p->interleave_granularity = val;
>> -out:
>> +	rc = set_interleave_granularity(cxlr, val);
>>   	up_write(&cxl_region_rwsem);
>>   	if (rc)
>>   		return rc;
>>   	return len;
>>   }
>> +
> grump.
>
>>   static DEVICE_ATTR_RW(interleave_granularity);
>> +/* Establish an empty region covering the given HPA range */
>> +static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
>> +					   struct cxl_endpoint_decoder *cxled)
>> +{
>> +	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
>> +	struct range *hpa = &cxled->cxld.hpa_range;
>> +	struct cxl_region_params *p;
>> +	struct cxl_region *cxlr;
>> +	struct resource *res;
>> +	int rc;
>> +
>> +	cxlr = construct_region_begin(cxlrd, cxled);
>> +	if (IS_ERR(cxlr))
>> +		return cxlr;
>>   
>>   	set_bit(CXL_REGION_F_AUTO, &cxlr->flags);
>>   
>>   	res = kmalloc(sizeof(*res), GFP_KERNEL);
>>   	if (!res) {
>>   		rc = -ENOMEM;
>> -		goto err;
>> +		goto out;
>>   	}
>>   
>>   	*res = DEFINE_RES_MEM_NAMED(hpa->start, range_len(hpa),
>>   				    dev_name(&cxlr->dev));
>> +
>>   	rc = insert_resource(cxlrd->res, res);
>>   	if (rc) {
>>   		/*
>> @@ -3412,6 +3462,7 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
>>   			 __func__, dev_name(&cxlr->dev));
>>   	}
>>   
>> +	p = &cxlr->params;
>>   	p->res = res;
>>   	p->interleave_ways = cxled->cxld.interleave_ways;
>>   	p->interleave_granularity = cxled->cxld.interleave_granularity;
>> @@ -3419,24 +3470,124 @@ static struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
>>   
>>   	rc = sysfs_update_group(&cxlr->dev.kobj, get_cxl_region_target_group());
>>   	if (rc)
>> -		goto err;
>> +		goto out;
>>   
>>   	dev_dbg(cxlmd->dev.parent, "%s:%s: %s %s res: %pr iw: %d ig: %d\n",
>> -		dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev), __func__,
>> -		dev_name(&cxlr->dev), p->res, p->interleave_ways,
>> -		p->interleave_granularity);
>> +				   dev_name(&cxlmd->dev),
>> +				   dev_name(&cxled->cxld.dev), __func__,
>> +				   dev_name(&cxlr->dev), p->res,
>> +				   p->interleave_ways,
>> +				   p->interleave_granularity);
>>   
>>   	/* ...to match put_device() in cxl_add_to_region() */
>>   	get_device(&cxlr->dev);
>>   	up_write(&cxl_region_rwsem);
>> +out:
>> +	construct_region_end();
> two calls to up_write(&cxl_region_rwsem) next to each other?
>
>> +	if (rc) {
>> +		drop_region(cxlr);
>> +		return ERR_PTR(rc);
>> +	}
>> +	return cxlr;
>> +}
>> +
>> +static struct cxl_region *
>> +__construct_new_region(struct cxl_root_decoder *cxlrd,
>> +		       struct cxl_endpoint_decoder **cxled, int ways)
>> +{
>> +	struct cxl_decoder *cxld = &cxlrd->cxlsd.cxld;
>> +	struct cxl_region_params *p;
>> +	resource_size_t size = 0;
>> +	struct cxl_region *cxlr;
>> +	int rc, i;
>> +
>> +	/* If interleaving is not supported, why does ways need to be at least 1? */
> I think 1 means no interleave. It's simpler to do this than have 0 and 1 both
> mean no interleave because 1 works for programmable decoders.
>
>> +	if (ways < 1)
>> +		return ERR_PTR(-EINVAL);
>> +
>> +	cxlr = construct_region_begin(cxlrd, cxled[0]);
> rethink how this broken up.  Taking the cxl_dpa_rwsem
> inside this function and is really hard to follow.  Ideally
> manage it with scoped_guard()
>
>
>> +	if (IS_ERR(cxlr))
>> +		return cxlr;
>> +
>> +	rc = set_interleave_ways(cxlr, ways);
>> +	if (rc)
>> +		goto out;
>> +
>> +	rc = set_interleave_granularity(cxlr, cxld->interleave_granularity);
>> +	if (rc)
> here I think cxl_dpa_rwsem is held.
>> +		goto out;
>> +
>> +	down_read(&cxl_dpa_rwsem);
>> +	for (i = 0; i < ways; i++) {
>> +		if (!cxled[i]->dpa_res)
>> +			break;
>> +		size += resource_size(cxled[i]->dpa_res);
>> +	}
>> +	up_read(&cxl_dpa_rwsem);
>> +
>> +	if (i < ways)
> but not here and they go to the same place.
>
>> +		goto out;
>> +
>> +	rc = alloc_hpa(cxlr, size);
>> +	if (rc)
>> +		goto out;
>> +
>> +	down_read(&cxl_dpa_rwsem);
>> +	for (i = 0; i < ways; i++) {
>> +		rc = cxl_region_attach(cxlr, cxled[i], i);
>> +		if (rc)
>> +			break;
>> +	}
>> +	up_read(&cxl_dpa_rwsem);
>> +
>> +	if (rc)
>> +		goto out;
>> +
>> +	rc = cxl_region_decode_commit(cxlr);
>> +	if (rc)
>> +		goto out;
>>   
>> +	p = &cxlr->params;
>> +	p->state = CXL_CONFIG_COMMIT;
>> +out:
>> +	construct_region_end();
>> +	if (rc) {
>> +		drop_region(cxlr);
>> +		return ERR_PTR(rc);
>> +	}
>>   	return cxlr;
>> +}
>> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
>> index a0e0795ec064..377bb3cd2d47 100644
>> --- a/drivers/cxl/cxlmem.h
>> +++ b/drivers/cxl/cxlmem.h
>> @@ -881,5 +881,7 @@ struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>>   					       int interleave_ways,
>>   					       unsigned long flags,
>>   					       resource_size_t *max);
>> -
> Avoid whitespace noise.
>
>> +struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
>> +				     struct cxl_endpoint_decoder **cxled,
>> +				     int ways);
>>   #endif /* __CXL_MEM_H__ */

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2046.outbound.protection.outlook.com [40.107.237.46])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id BCAA245014;
	Mon, 19 Aug 2024 16:15:19 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.46
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724084121; cv=fail; b=FesQNOzOfAR6+kx75E1v4Lhy2JWXiTEP7nFpGhtzwGWn8HC4QRIG8ZzNAuTDp1LmSPIIH4C3H6FHkcucX0XodtlJYMOPnmGTF/h46Y2O9INsRXBKNOqZgGunpIZbUq9ZA+h0+3bqAYvirXxz+dMLjq9jXRzDqX7s5xs+0zc8hV4=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724084121; c=relaxed/simple;
	bh=89vnAeYdK8mTeqnXQKb7jSKzEMTbj6NSvq1ijA8PTpc=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=ofK5dJFmBMM8ToknCC3TyVapFa7iQCAsOqOyvzfaCxjtY7RUr7/i5Bll4xu+MTYk3OcmQaW+bAKHUfGh9bV9Fvtp2GnCU+QDupZKXuYj/XbSzYyt5kFNy/QwT4dyoWJTSqhtE03XMShOOY6h/O3dpNN3YQ7z0hZDikGPSQ5RrC4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=M3vT0QfR; arc=fail smtp.client-ip=40.107.237.46
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="M3vT0QfR"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=KK2Xld626pjFTID8Jgz2mPy58z8p7OuBOdRxklIKnlvQUljJGTO8h5xKB0HxnkkRRw3T/KYHFZyvl+0ewCktuY18qJWtXzBNrTB64C1EkDXbtOTPfZwsC8Z8tf4Vb99D5cyimFwyutIBGGX73sV5EdO8McZbHNsP1raSYCjjOZXHM7QZeSyjTMA3y7rzEVVrsfxVtJI6UgRJGN/nwzf0Pd2SYD5nmPAqmwKyU/lO9ScVxhwgpxWD4E79UpXg8wJK2UklfHmth8Zto62rYJKGGcyhxblwvm+Dl1z2FCYOpscpDTWWaxSqHoNXKgOYth4TeQEl7ich2QdK1HosaqgFUQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=torwd5wNBOjTq1qY2OQ0L86ILij6qY57QO5WJYD6kaY=;
 b=wYfP4ZeIJA7Ug5K910UfLKDYF4lzZLBHSmfRm+0GVgbCQSq0ph+NuTcc5s7mTHtL8DJQfhGcgYbEDY+oHUZl/FkhbRNfll+tHAodOezkaW19EPRZs5lAWqj5S+LTZ9Xk6MvhwaGqdfud6nwVEFRu9cFBXzdp+57qaL+JlC0/1ZuS6I6RzSphv5GRlXF/gXYecUKVn59BBPNO4qLXbd36dMXhCtO/F6/wDAvDtVTMQoAGCIiH2m5cmv0knJ8jStC1refTIWRPz4malDJEM8M9KbJfkn7Xaj9W5U5VP64Ik9iZ/4uPEXvYIt5mUDFgN923jLvnKW0ZN7k+/xkXHnHuMw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=torwd5wNBOjTq1qY2OQ0L86ILij6qY57QO5WJYD6kaY=;
 b=M3vT0QfRxhA5oXc9SlLjChiQVTZKBrdkY2POREqEzrmD3oAoapwiqrpfo+qJiB6wTCOzd/Kqot/GXHf2cVz+Z8iBEbcX8qna7IWjaxvmdWaG/McuKE5Kr/w0BAfGQHLUsnKbofvbiraQO6diI70YRVIIeEBUKJ1zKE+c7Hnv0Hc=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by IA0PR12MB7627.namprd12.prod.outlook.com (2603:10b6:208:437::12) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Mon, 19 Aug
 2024 16:15:16 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 16:15:16 +0000
Message-ID: <76347d1e-5e49-860b-3cbf-bad2a52c3853@amd.com>
Date: Mon, 19 Aug 2024 17:14:32 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 14/15] cxl: add function for obtaining params from a
 region
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com, targupta@nvidia.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-15-alejandro.lucero-palau@amd.com>
 <20240809182420.00002f9e.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240809182420.00002f9e.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0056.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:2af::23) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|IA0PR12MB7627:EE_
X-MS-Office365-Filtering-Correlation-Id: 8c824f44-c8f7-42f0-cbc2-08dcc06a1ca0
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014|7416014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?UDdLMU5Hb3VNYnN0eURCZEI5MUl5VFB3OXJzNDc4bjl5YWtUYkNycjhRT0JW?=
 =?utf-8?B?dWJmR053T2hyZ0Y1ZDlJb1lVK0t5c1V0ZnVyTjBXbHBCUUxyYVBhVkpRS3Vh?=
 =?utf-8?B?WTBKNjR1b1VLb0JWWGh3UGhCcUJnZGJvd21EZFlKVFdUamRPSmxRaXp5Ujg2?=
 =?utf-8?B?M2NiRXFZMWJHQVRGR2dUZ2JINE1OQmsxQ1o4dnJtWTFQQ0JFdkZueXI1ZEhz?=
 =?utf-8?B?ODdTZ2NXcXBibFQwdC9vbDh1QXNXREZtZDVESGxacU5FSXRuY0Zlb0sySVVU?=
 =?utf-8?B?bS9tV1R4ZHVSNTVwQ0l1cGNWZXNTOVI2em83dGR6dUplU1EzdjdISEpPdWs1?=
 =?utf-8?B?aVJFdGFnM1ZhbmhzaTFTckducENleURpeWtKWENhSDZhQ2ZBWUlibWpWczIy?=
 =?utf-8?B?eVVvUitMN0k4am9HcVBmTGFGdGxOcnZBVWx3bDFvbmxUODMwazdBa2k5L2ta?=
 =?utf-8?B?REpITEUxWDdSMWFZT0c5ajdBa2cvWTdoRUhyWXVWRXJ2TW1mVEJhMDZCM0J3?=
 =?utf-8?B?T2VIN3ZrYXA3ZmtmZXV6OHVuOHJ1Ykd5OGo1MURwd3dXakZWaDAvak82ZGF6?=
 =?utf-8?B?YlVlSWpNTUdvSFJ2KzBSZnp6QlJGOGozb2lYUkFlNXJWV2hiMFRTU3ZPejdD?=
 =?utf-8?B?aGYzRm41YjgvME1Ma3VxZ28wbEdSckNWZmNKQzczVzhUR2gzOTg1WTI0K3l5?=
 =?utf-8?B?ak5aWUxIWjliQVd1K1VqUHJ5MnJHVnVObzZycFZhaStqZzZzdGxrQnhiNk56?=
 =?utf-8?B?Q3NINytGZXdCeEVIeDVNeWl5NHpNZWJZemdJajNWbTYwamJNVlBPbUN6WTZK?=
 =?utf-8?B?R1B6dlZMQ2hFbHpkalVRSzc0UElxU21qandsTVFDTDRZbWVoek5sZG5lM0pM?=
 =?utf-8?B?RjUzeHpTTkIvZG5FMG1HeGl3Tm55VFJZVURLeXZ1ZlJCVjRjVHBEK1FUdXVO?=
 =?utf-8?B?OUlRZUJzMU0vTER0Rzd6aTNQWS8zSmwxYklUQmdRbDYwY1I2VFNDZVpsQm5Q?=
 =?utf-8?B?WFBUOVE5RWhQZ3VIc0VpMTM5U0JnRjRlakxzSWZFcVpMVnpQVCtxQzAvVVNC?=
 =?utf-8?B?R1NESVZOYmNGS1hrMlhEZHVMc3hnTndnNGl3WlJieFVZM0FqcUNVNGNZb2VS?=
 =?utf-8?B?dmxwUnFjelhvcXpJeklGM0wzLy9CaXYvZ2FnUmpEQlRFTkFyRGtaTFd1eEJK?=
 =?utf-8?B?Q3NlSyswUHQ0YnNJMEREMUd2SlhEMUp0a2FMQ3JwdW11RENnOHBhYjFhWW5Y?=
 =?utf-8?B?RjlWY3hGYkVVTFpxSjA4SjE1b2VSK2w2SlhFY0M5cXZUVXFwOEkyYld3L2o1?=
 =?utf-8?B?R04yM3hUcDBxeWVQc1IvWVZZUVVGb0RjczdpV3ZacWxRbkU3cm9OV0R3YUMw?=
 =?utf-8?B?MDd2Y0IzYWttTVlPcHJ3TXBGZUphalVNNGNqSzdxdE54SGxteWNuM0d1Z3Rn?=
 =?utf-8?B?ZnZFdHYwZlQ1bG5pM2pnc2xENm82cEFSMlVGTEYrVjN1UnFSVy9ONytNdTU3?=
 =?utf-8?B?Z09OdURhZUpaeWZpWFZySkJERnVWd0g5OVordWFzdzFDZFhPVEMrWkR1ZGt0?=
 =?utf-8?B?VnZnNVRHb2lLK3BqT0JSS0VTelJ6RXpLTkN6cWtNdm5XUlRmSHFRUTBSb25U?=
 =?utf-8?B?UU8wOWtIaCtUYW5OcCtGTnkxdkFhVy91Z05la0tFOERvR1U3a2RXK2YrUUg3?=
 =?utf-8?B?aTRzMXlOQlZvUUxDSUVLVDRoRXhIRHRUOEYxb0pZd3R6cHVFK2I5UEdnRzVL?=
 =?utf-8?B?L2oyWUlCRmFjaXQ0SUZGNkdUNkdXOFNxNWo5ZXFLWHJmdGpORVIxVFpldGVW?=
 =?utf-8?B?N3hwVEo3LytWOTNBKzNEdz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014)(7416014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?TkxxaW4yL3pwZlp5ZmNiSTd2eWRtSFEycFNiM3Jhcm1hMWNFVnViSm9mQXgy?=
 =?utf-8?B?R21jb2Qwa2RRQW9YUGlpRlVXbkp3eUhmUW1XNFN0WUkwSWJ5RmhBeGZyR2RK?=
 =?utf-8?B?cG1JYTBVK3ZFU2FqeVl6ZGZkNTdYL29LaC9UeFJzOW9lSkkwZk1WbmZvNEVG?=
 =?utf-8?B?MnJHQUJEMFBxaGhwWVhLUi9ieHJPcTl4dzFwUzZlMU45d0pVYkIxMVhCOUV4?=
 =?utf-8?B?QW4yQStJNEMzZzF2R3dJWUp5M2JRK2pIQnU1N2ZndzdLbjR5QmNJQUVWY05M?=
 =?utf-8?B?YW5oMUVITmk4UDF2ZlF1K1k0SU1Hdldnek9mbW9uN2h6R2pOUERRSVR0RFVP?=
 =?utf-8?B?OS9iWklPa2oxekRJd1B6TzdKSnBwQWdlc2d5K3AvRnRlVjRHVnhKbnExUURJ?=
 =?utf-8?B?di9McVVFTmhuNDhrR09BVktaVmxyVnFTZTNRRmc0RWkrZzBON09JQlNGZFl2?=
 =?utf-8?B?d05OZUhQK1UxRmVYWDZmM0I4OWh0aXlGYzVocHAwWnJHMW42MVJFSXNQaE5x?=
 =?utf-8?B?N3FwR042cklxT3RpMXl3VDFUL0pCMVVRM1JnajZmWWFaZ1h1eUNoellscGN0?=
 =?utf-8?B?bDdtakZNUzd2SzRqQ29jNUxlU2IvWThPZU04cElRNHUxUXlBRjhKOVBRWVlL?=
 =?utf-8?B?KzM3RFM1SXBtOUwyV1U5SGlidFQyRG9iWW5vUHhtazNSaFJxaG8vQWFkVGs4?=
 =?utf-8?B?cUlLS1gvaWhuKzhJMVZaelM5VVVNMjZySTJsNTZrbnlMVXVFcWRUejBONmlS?=
 =?utf-8?B?djFVdUd4N0ZNWkdBb2FoTTI0ZGI2VUMycUFQNlRTaE1IVC82b2IydXVlRnd6?=
 =?utf-8?B?ZUxpNXVPOUR5MTFHMjZkeitvMVBaSmFWUDB2Q0Q0YSs2RmVKNTA5ZHlja1NH?=
 =?utf-8?B?M2NUNVlNU2lxL1Q3MGNxYTZmbDRTT2U2cms1TzNpRnhpR1d6bmY5K21LQnFr?=
 =?utf-8?B?ZU45SzU1aTZnTmY1a1J0OFJOUC9HdHNJaFVGSHBVUTBDSkNQeTNxVS9aUHlX?=
 =?utf-8?B?TUptNmcxUGhMNlgxRG9yd3hWaGhESU5ObVdZNDhMbkkyRWZMZWpMMWJ0NjB0?=
 =?utf-8?B?bVRxQ1Z0Uk1XTS9RZ3AzSlRoQlhITjVzbjlHZHd0aVp6QzVmbkhMVXZma0hw?=
 =?utf-8?B?T01hSjBsNEgrcGdXRHFVRERCOXZ6NXkyNXFiRHkrUmNqeGdDSGZFVVoxTlRM?=
 =?utf-8?B?WU9URElwTmpSdVpzVFlaRnJ0cWlrUERoTkNDTTc4WThUcUpocjhHUUNpNkVw?=
 =?utf-8?B?ZEpKUHpWcWc3VEtCaGd2aFN1SCtLenAyVktseSsweXFaVWNwS1JjV1JySnhy?=
 =?utf-8?B?S0FxOGNWWFJkbFlpM3h2dkRiNDJlTm13b0VmcktHbzRsekd1ck1pVXNmbmtm?=
 =?utf-8?B?MUU5bVNNOHpYdmJGYWJRNzN1NDM5YTkvcC9kMmVMWGxKU3JuQmdBdDEzaHhH?=
 =?utf-8?B?V2JRM1BLZDRpRDVNbkQ4c0hrSFdUd3ZMOFlJaGZlQVlwOWlYcHVza1ZOZ1ZF?=
 =?utf-8?B?MlJZcklWYWZFWlZPbk9yMG1sdG45eE9QK09JeW03RXJiU3ZsYkIyWmNaeVJ0?=
 =?utf-8?B?bkdvLzdjNlRUVXJpSkRhTVF4WENMWnUxWWFhQjUxRjJ0UisyUDltZVhDRU5i?=
 =?utf-8?B?VE1jc202ZWs5bzlBYXI0OFo0SjllL0lFNGlhaHNOb1ZZZ1BHRlZZcERBSGR5?=
 =?utf-8?B?VDVhU2xkc3NBbFBmSkErU0s3Y2FQMDA5clJSSWltc2pjZVc5elRjbVNWdDMx?=
 =?utf-8?B?SENTUW9yWHhycWhUaDRaNnVrTTlGYVRjT0NGN1YrTS9pWElCQ1R6REd0MW9P?=
 =?utf-8?B?KzRWbUdNNi8wYjVpOHpJRVNYb2h3KzRlRVJqenJYUm1LV0IzbjlnM0NKYnEr?=
 =?utf-8?B?bEp4aWsycS9aSW9CdFU5cGd4emtvSkZneDZTV3FndzQweGFiVWR2N1FwR3NN?=
 =?utf-8?B?TkFWNXhkOXBHcENyRldtYjRSYjB4eGpRUk11MzcxTFBjejFyc3Mrb0hDbzdV?=
 =?utf-8?B?SVlNN3c0TFk4eXVMMENxMmlyTzJPRS9sRUQvbFVjcHY2bi9KYnVma3VnY2xk?=
 =?utf-8?B?VzF4ajQ2eWg1cktGekhET0JTT2R1eHVYZnVwUVFoL2RDcXRFTTI4a3RFdHl3?=
 =?utf-8?Q?VCoYXtNubxw8aJERe1Y9sfbru?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 8c824f44-c8f7-42f0-cbc2-08dcc06a1ca0
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 16:15:16.1654
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: MveDaLkm1bHYd2fDaeB+AFLbTpUgli6sGy7qO0kyRX5nQdBtPb32ipygwMfcG0p9+0LVQbdnnkY6f3DzYF+fWg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: IA0PR12MB7627


On 8/9/24 16:24, Zhi Wang wrote:
> On Mon, 15 Jul 2024 18:28:34 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> A CXL region struct contains the physical address to work with.
>>
>> Add a function for given a opaque cxl region struct returns the params
>> to be used for mapping such memory range.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/region.c     | 16 ++++++++++++++++
>>   drivers/cxl/cxl.h             |  3 +++
>>   include/linux/cxl_accel_mem.h |  2 ++
>>   3 files changed, 21 insertions(+)
>>
>> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
>> index c8fc14ac437e..9ff10923e9fc 100644
>> --- a/drivers/cxl/core/region.c
>> +++ b/drivers/cxl/core/region.c
>> @@ -3345,6 +3345,22 @@ static int devm_cxl_add_dax_region(struct
>> cxl_region *cxlr) return rc;
>>   }
>>   
>> +int cxl_accel_get_region_params(struct cxl_region *region,
>> +				resource_size_t *start,
>> resource_size_t *end) +{
>> +	if (!region)
>> +		return -ENODEV;
>> +
>> +	if (!region->params.res) {
>> +		return -ENODEV;
>> +	}
> Remove the extra {}
>

Sure.

Thanks!


>> +	*start = region->params.res->start;
>> +	*end = region->params.res->end;
>> +
>> +	return 0;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_get_region_params, CXL);
>> +
>>   static int match_root_decoder_by_range(struct device *dev, void
>> *data) {
>>   	struct range *r1, *r2 = data;
>> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
>> index 1bf3b74ff959..b4c4c4455ef1 100644
>> --- a/drivers/cxl/cxl.h
>> +++ b/drivers/cxl/cxl.h
>> @@ -906,6 +906,9 @@ void cxl_coordinates_combine(struct
>> access_coordinate *out, bool
>> cxl_endpoint_decoder_reset_detected(struct cxl_port *port);
>>   int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
>> +
>> +int cxl_accel_get_region_params(struct cxl_region *region,
>> +				resource_size_t *start,
>> resource_size_t *end); /*
>>    * Unit test builds overrides this to __weak, find the 'strong'
>> version
>>    * of these symbols in tools/testing/cxl/.
>> diff --git a/include/linux/cxl_accel_mem.h
>> b/include/linux/cxl_accel_mem.h index a5f9ffc24509..5d715eea6e91
>> 100644 --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -53,4 +53,6 @@ struct cxl_region *cxl_create_region(struct
>> cxl_root_decoder *cxlrd, int ways);
>>   
>>   int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
>> +int cxl_accel_get_region_params(struct cxl_region *region,
>> +				resource_size_t *start,
>> resource_size_t *end); #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2065.outbound.protection.outlook.com [40.107.223.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id D7AE2175D38;
	Mon, 19 Aug 2024 16:29:32 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.65
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724084975; cv=fail; b=FkNjlIft6VjoIvPlO5iz5fOd72YigbPXXLbaByWAakSUUUIJGRPMG/yaZfRwm58E44Qpv18J2VMNYoiRtBNq/RVqwjeIKP4H6f4nae9Af4WtDP/ISBqGef7Vesn/IBWqsx8xGEjou6Uf/aCvFJReVmCOzFAqyDF51KxB3pivaeE=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724084975; c=relaxed/simple;
	bh=Y6+Mx+MZEMdXnYMgCdAmfpk/euwNkrLJVXjJPL8NKP8=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=sNr1jsEMDt/qv7e4G25PnB64Ozc/zjj78oGJiXPoXsD52VjNMG17NDeQGDuQeboc7KzAi84XC4zk86VeaJqn++W9xkY/TJpTTY22TKCkmAhT/NOiafYTzzJT5VCdDGZlZHfW2g6eXuKUDF3fPZ4Noxm28VEzkAs/029MBrTmD8c=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=rL8uxk36; arc=fail smtp.client-ip=40.107.223.65
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="rL8uxk36"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=k3CNMmCTO0GygzujR5izPil4Invm84u7yArsHoIC+QIuj7HLELfqt2/3cMvzaNh5n1fYxsyqrsqFkiOFXfmqN00HRAFsahtUKG2oSIjTPAnxBbBJjZDcp6t8qtrIfqObOjaTUd2LJ14Beg1KF2j/TVmQuhazd/gOVOlsg5me2rWHpejeR+azg37sTCDkekwSGkokA/quYTU0U8Wituc81h9CPrRK0U2nzMK9HiqJ5VwQdtTRaJk/i2NwhcRap+z1INugiXLMAS98bIWVEvG/fj+2/u8G8br2HTJvO8fa0sfYgFrprJRJMTHUYJJ+clo/8OJWKepS9IIlkInzFlwb3g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=bMLwVQm7l06ZM0hH5bN0FUrUsjKU47VULrbbjYO/wrs=;
 b=UiK84KVTe7G3IyrGFn/B4ro/36vov7c3Bc/XTy3fbcRhmRrsaRmayasg4na6qptfret/OnLFM31pBI5Vuwvj1FjQINPwClswmRyi4leIIsUbzMgCKPFIUbk2BBjWPrz6CWBuRiYR+7139bFC4XqN0yGeZOcWaBpPBVPpapUdkIzQUD4ZfybDuke4SlxrKDYU0zUMaqb38lWkJeE7YlEDlWgx7vJ8gLe67G/CAcVDk6ijHD4LXaYI12XV3sIQJF03NuYm/7+V7aT0au3lptqyRBhOL5GIXQtdiKIBS4qVHbd2gHaSjjvFFpV4ZQWxgKq8wpCB+q13Ph+pE+572znR7A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=bMLwVQm7l06ZM0hH5bN0FUrUsjKU47VULrbbjYO/wrs=;
 b=rL8uxk36lGV7n7quiNRtVE7O2ywg4PJUI/uIbyNTyi5Hpvx/BcDTuIFGxDU8zmDudx8O7o5L6vMQyah2zgXcHC9LNgMrm1E/RZZR+wOZYsNpNXw98SkMOiUGVCVTDAM2AAp4shxej0BWyzvIilgc27/y+KITOLHwCs5wz9CVIV4=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH7PR12MB7889.namprd12.prod.outlook.com (2603:10b6:510:27f::10) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.20; Mon, 19 Aug
 2024 16:29:30 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Mon, 19 Aug 2024
 16:29:30 +0000
Message-ID: <7e17a0f9-ef84-5ce1-3574-5d609525b7f1@amd.com>
Date: Mon, 19 Aug 2024 17:28:46 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 15/15] efx: support pio mapping based on cxl
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-16-alejandro.lucero-palau@amd.com>
 <20240804191339.00001eb9@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804191339.00001eb9@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LNXP123CA0020.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:d2::32) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH7PR12MB7889:EE_
X-MS-Office365-Filtering-Correlation-Id: 8fcacf91-ebae-4f38-a805-08dcc06c19c1
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|366016|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?WWs1TnBReWREbkY5OUJ3d3l4dTFTVmd6eTFMNUJXVm9zWHhsTkJTelRud01R?=
 =?utf-8?B?eERiNHg1dFJPdXl4d25vWGN6TTdUYnROeDhqbzIxcC9PMkdwRDN1RllVVk5G?=
 =?utf-8?B?bkxKNWhqeGZILzN3VlJBbmFBc2FHOXRuTU5ZV3E1ZUJjbjM0NTl3QnVkem9o?=
 =?utf-8?B?NkRLTUNDMHV2VkpWVjVxK2NiNDRiR3hjTnNFRTlmOUxXTUtuUjArVHUyQlBP?=
 =?utf-8?B?SGw5MDJHS0hZWnd2enFTa3RtS2s2cUVpK2tSaEJMQXhEeEFYUXFmK25tYzRK?=
 =?utf-8?B?NkE2citEWG1IQTRiN2F3b09kckV5RjlWNTk5eWlvdHFMRDdwdy9UZnl2S3hr?=
 =?utf-8?B?VUtEN1k1NGpKK0JJRTBVVzZGQkEzZjFKZWpveExZb2NqVFFVL29aVTRkOTZ5?=
 =?utf-8?B?c3ZSeldvZ0ZrZ0lPQkoyYlB0QmFqRTZiQ0dtVi8vU1ZEVDZoT2tRcjlKTVRj?=
 =?utf-8?B?R3lFUGIyR0tWMmF3bEo2WXpGRVRNaWQySXYxbnZBRE1udGhQQ25CNEZ1eHMr?=
 =?utf-8?B?aFRodzBUUERCeTZ2OXdZN1hOOWJFYU5PTlU0NjBaMmFYU0NnVDY5bmN6L0li?=
 =?utf-8?B?cVdNRHhGUDRxNlljR0E4ZXRtWlpyYllsWWorNkE2eHRwaVpwSlVWQTlVaVBX?=
 =?utf-8?B?V1VVYTB6dFBxTU5Zd0JKNjJ4ZzllSDBJRTFBNnR6RDJIN0xWTDNzNEVmcWxE?=
 =?utf-8?B?cVdDdEpjdHBFSk5PendKZEdaMVdOTEIwYSszdGdEY1FBM25sNnFld0hzak9O?=
 =?utf-8?B?aVNwOS9HanZYL0FPK1hFRHU4OFZVU2tBeGRwM1lUaFAvV2FpZUhJcjF0dVpU?=
 =?utf-8?B?d0c4aGZLVEVGVTQxSkFERmNNT2RNRExOVGM5YVZjZlh6akxDeGRNWkhjNWsx?=
 =?utf-8?B?OVNWYm11V3Zpc1RuOGw4RUxmUld3TlUwTmgxM3lCS1RXSUtWdkZqSTJvVTR0?=
 =?utf-8?B?aVJRTXc0Yk1raEU3SzN1NHFLeTVMWmUweGhrcEZraldJL1FrcE1zRDd6Vksx?=
 =?utf-8?B?VFFkaVZZQVJuOXFSck9YSlpsdmZWM3hlZE1aUGNnVGYyUy8vbGJ3UUJPeUpw?=
 =?utf-8?B?MjVRdXVMRks1OGZuRDE2aEtoNkMvVTFURERGYk8rY3dEY05RQTF3SDJBVjN6?=
 =?utf-8?B?VWZ3M1M3eTkya0s3aWd0ZnU1WTdweTNMUWsrQUpOdHJIN2gvT0UvTUtGSWI3?=
 =?utf-8?B?cWZIOHo4NkFYa282YmVTUkQ4NHVCck9yNm8yY3UxK2l6TC9qNC95NXJjL0Ey?=
 =?utf-8?B?eUxCNHE4ejVFaThsbTF3cjJLS3B6elA2NmszYTVvZ3NGc21hNndrZk1TYTBS?=
 =?utf-8?B?QzNyWGFrQldjSy9KaTd5RXdwRnM4S29NNHB1cTU5QWZWcVhxbHQ0cElLUWg2?=
 =?utf-8?B?bytJM2xmNC9PWDZuUDI0U09lYkRiWnVxeU9JTlpsRWFObVowTk9kdG41d1lk?=
 =?utf-8?B?WkU2RE1uZzNiemx4MnFWb2kvelBUWWdFWGtMU09rNi94ZGgyY0lQbFNQZWdU?=
 =?utf-8?B?clUvU0pCcDdxV05IREVOQ2Q3QWZRRzIycElKY3pzbnlBSVpLcGlvbHRqM2lE?=
 =?utf-8?B?K2FveVNRNEhDb0xYY0dUOXBtQUpkSTM3V0hQcEM2VVh4RWN1aC9tSUNSRytl?=
 =?utf-8?B?ZkhxNmNhS2RxVXZjdkFKNlJlT2NmT3RFaDZJcVdUSEhUZExPblRUakZZOENp?=
 =?utf-8?B?SE1rSitHUUx0US81ck5lZ0hoWDlWS2pkN0szVjJsR0xCOXRRZ3huQTFKeGVK?=
 =?utf-8?B?WDZVSGRDM0J6ZE9vS2k1SHIwaG1Uam5jK0Vkeng3WjVQTlFXZ1JBR1VGY2c1?=
 =?utf-8?B?RE8yU282QitETzVSanVndz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(366016)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?VXY1M1NOY0xPZEF5S0tRYmgrTmNyVk52dTBHeEpkeldqZW1GUHJrSHF6VDls?=
 =?utf-8?B?WG5Uay92c1NrWDRSMHBMOW5UT015Sm1tVmtPc1BDNk42NHpTNjNPTlpaaVBk?=
 =?utf-8?B?QlJLbXhzdWw0cFNkWldxdjh1UWpSMDY2UTZoSzNPSjE0S1U2eUV3NUYxVGRs?=
 =?utf-8?B?Y3NDM3VQM25nRGJGeldWMTVqNk42bzV6akQvcHFjeFQ1S0hWWHExNFBYQXRq?=
 =?utf-8?B?cmU2VHBYOFVCcnpQcWpIQ0pQeXZkaUl1WUZ2RDQyUXkweXVPaHlHNXZ4SWx0?=
 =?utf-8?B?bEZYRDRXSk80NkprL0l3L3NaVnJRbFNyV00rOEJ5WWNTMnZjcnhrRlp0dDFm?=
 =?utf-8?B?R3dWV3dIUVdHZzd0UnhyUjIxRkxoWGFLRTdVUzNWOWhyY3NUWEhBS2RiZXVn?=
 =?utf-8?B?NTBDQjBhZG92bUhkWll2VURXZklDc0RiSVF6d2NUQUtDcTBjMHJON2x6YWlL?=
 =?utf-8?B?ZHRraTBEQjFvSHppYzB1QXRVNzdlekNEekdiV2VSUnZTdlpYTnZyNUgzSVor?=
 =?utf-8?B?d3NSYkhUbFpVWTJubmJHNlZBeXQwazh6ek9lYW5KQlR2S0ZvaUFyNWh2UTU5?=
 =?utf-8?B?Y29RL3AyVGZpT0dnRlJzRmpIbjNlajNkcEp1c0F5dERMTkdMWG5RUE5BcHhw?=
 =?utf-8?B?WGNNNFpsbDBKZmVQZ1lnZXRpai8rNHp5UkFqV0lhbmZiVHU4b29wOVIxRXk0?=
 =?utf-8?B?MDhDWTMzbGlZaWc3OStvQzFuNTVGSlhVWTFpWlVEL0ZwRy8yL2FtdnRMNUtv?=
 =?utf-8?B?dEdJNy80Y0UrTkRCTUlSNUszeTl4aVdjN2JkTjJvcEw1bHdHVHREbWJscEFr?=
 =?utf-8?B?RjlmL0pUZktiT1BGWU1MdG85dXpyUU9wbU1IZTJwYnJzQ1BkZ2o0dlk2clQ4?=
 =?utf-8?B?QmRXNGQ2UDBzblJhM0NuYzRvUVplZ1BPY1pHdGQ3UkQrYk9aZ3czTzZ2WFc4?=
 =?utf-8?B?VHV3d2plZGZwejlHcHdGZGJEL1Y5RGgrNTNTVjdVTEJ6ZDBBSmhCOGtNeEdm?=
 =?utf-8?B?aXc3K0Z1WEQ1SzVrTlJYVGpkN1RHdGFqM1p4QkdnamhaWDNmOHpQWUM1VUZh?=
 =?utf-8?B?c1NWR3o5SlJYazYzc1FUT2YxQnlBR3JUc2dOVkx2UGJxUTlJUnZHR2NDdlZw?=
 =?utf-8?B?N2NKTkFnNGFpRm5tdWJzVXJ5Wmw3TE14YTJQdW5XaXkzbzlLTzlmbjVQa2Fq?=
 =?utf-8?B?VWRBWlJMeFRhWUkyNk43TGJCVHR1d3RSQTVhN01Xc3o4N0tFeXoyNGFCZVN6?=
 =?utf-8?B?cVJCS2Rzak9FSkg4UTdIc1QxeFFUb3ZZU3gyaXpqNmN1Syt3R0dySEExclRY?=
 =?utf-8?B?V0xETnRSYlphWUFUdEFEWWZFa0k0OHR5Ni9IK2RKcG1qU2dpQWpFQ25DQ2F5?=
 =?utf-8?B?aUp4Z0ZuRHpySjE5TXBkMFQ3ZmRBTWhDSFkyL3FIL2tWbytoOVJmNkd5Y2NV?=
 =?utf-8?B?REpmeW5YRUFYZTQvbklXbG1xNE1VMEluVjNlU0ZFYnVFREQ3VDdWdHdub1VB?=
 =?utf-8?B?ZElsRTBoL3JnVG1ZTlNiT0p3NVBFL2hUZ1BubTcwb3hFckNnYUFSeTFuMGw4?=
 =?utf-8?B?WTU3dU9DbjZibWZWL01uYXpJMGRRd1B5WTRNZlFYZnlSREdXbTZ6dUdRcmJR?=
 =?utf-8?B?ZUkyQzdtS3dKOUwyblFzNWlHSFU5L2V0M0tGWlhVUEQ2VlpEVWJkOWpZektR?=
 =?utf-8?B?S2pNUkRVQ3lleGd4SW80Q2V3bWxPSTlybmJEaFBLeTZUdkZ5Rk1NckZES2lW?=
 =?utf-8?B?d3QyZk1wM2R2ejEyRmVYUlZvUlZNVmtSOEdNR2VsRWtMMnVkKzhsU3Z0Qlk4?=
 =?utf-8?B?V2FZcC9HZ1dQNDVmbVhhTWsrTDNWVW50TGJuYWcrcllTN0hGd1JEWWZLUGF2?=
 =?utf-8?B?T2h4NGJJdWpMbmVyZGViQ0IxcEdBTjBjbldTV2NBRit3ZWp5b0JvUEsvZmpI?=
 =?utf-8?B?MTBoQWxCWFN2aXN1UHZkRGVPQkErYW91YUpTZXg5aytRQ1BhV2ZQRzV5RVlZ?=
 =?utf-8?B?KzQyRzBqcUo1U1pMZlNuQ25MSkVVZ2dxOFdaVGRFdWpYTlgvS0xPd1FjTExl?=
 =?utf-8?B?cS9Mb1M5NEVDVmFFWUR4WnVtcG03Y2ZtRzRGYlhzYTBvbUZkSDFIdkJQa1Yv?=
 =?utf-8?Q?LUaIduKBrINu6AZTywhbsXlop?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 8fcacf91-ebae-4f38-a805-08dcc06c19c1
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 19 Aug 2024 16:29:30.2791
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 9WQrVGsOuQwKieCO6y2BHK2+F3Sdrr85M5MnQDoKGhxTFvYr3aWQ40WEXftwz24L6/ks3S//F0I/Cg5rqS1DXA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB7889


On 8/4/24 19:13, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:35 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> With a device supporting CXL and successfully initialised, use the cxl
>> region to map the memory range and use this mapping for PIO buffers.
> This explains why you weren't worried about any step of the CXL
> code failing and why that wasn't a 'bug' as such.
>
> I'd argue that you should still have the cxl intialization return
> an error code and cleanup any state it if hits an error.


Ideally, but with devm* being used, this is not easy to do if the error 
is not fatal.


> Then the top level driver can of course elect to use an alternative
> path given that failure.  Logically it belongs there rather than relying
> on a buffer being mapped or not.
>

Same driver needs to support same functionality which relies on those 
specific hardware buffers.

The functionality is expected to be there with or without CXL. If the 
hardware has no CXL, the system or the device, the functionality will be 
there with legacy PCIe BAR regions. The green light for CXL use comes 
from two sources: the firmware and the kernel. Both need to give the 
thumbs up. If not, legacy PCIe BAR regions will be used.


>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/net/ethernet/sfc/ef10.c      | 25 +++++++++++++++++++++----
>>   drivers/net/ethernet/sfc/efx_cxl.c   | 12 +++++++++++-
>>   drivers/net/ethernet/sfc/mcdi_pcol.h |  3 +++
>>   drivers/net/ethernet/sfc/nic.h       |  1 +
>>   4 files changed, 36 insertions(+), 5 deletions(-)
>>
>> diff --git a/drivers/net/ethernet/sfc/ef10.c b/drivers/net/ethernet/sfc/ef10.c
>> index 8fa6c0e9195b..3924076d2628 100644
>> --- a/drivers/net/ethernet/sfc/ef10.c
>> +++ b/drivers/net/ethernet/sfc/ef10.c
>> @@ -24,6 +24,7 @@
>>   #include <linux/wait.h>
>>   #include <linux/workqueue.h>
>>   #include <net/udp_tunnel.h>
>> +#include "efx_cxl.h"
>>   
>>   /* Hardware control for EF10 architecture including 'Huntington'. */
>>   
>> @@ -177,6 +178,12 @@ static int efx_ef10_init_datapath_caps(struct efx_nic *efx)
>>   			  efx->num_mac_stats);
>>   	}
>>   
>> +	if (outlen < MC_CMD_GET_CAPABILITIES_V7_OUT_LEN)
>> +		nic_data->datapath_caps3 = 0;
>> +	else
>> +		nic_data->datapath_caps3 = MCDI_DWORD(outbuf,
>> +						      GET_CAPABILITIES_V7_OUT_FLAGS3);
>> +
>>   	return 0;
>>   }
>>   
>> @@ -1275,10 +1282,20 @@ static int efx_ef10_dimension_resources(struct efx_nic *efx)
>>   			return -ENOMEM;
>>   		}
>>   		nic_data->pio_write_vi_base = pio_write_vi_base;
>> -		nic_data->pio_write_base =
>> -			nic_data->wc_membase +
>> -			(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
>> -			 uc_mem_map_size);
>> +
>> +		if ((nic_data->datapath_caps3 &
>> +		    (1 << MC_CMD_GET_CAPABILITIES_V10_OUT_CXL_CONFIG_ENABLE_LBN)) &&
>> +		    efx->cxl->ctpio_cxl)
> As per comment at the top, I'd prefer to see some clean handling of the an
> error passed up to the caller of the cxl init that then sets a flag that
> we can clearly see is all about whether we have CXL or not.
>
> Using this buffer mapping is a it too much of a detail in my opinion.


Yes, maybe that is clearer than relying on the pointer from the CXL 
mapping.

I will do it.

Thanks!


>> +		{
>> +			nic_data->pio_write_base =
>> +				efx->cxl->ctpio_cxl +
>> +				(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
>> +				 uc_mem_map_size);
>> +		} else {
>> +			nic_data->pio_write_base =nic_data->wc_membase +
>> +				(pio_write_vi_base * efx->vi_stride + ER_DZ_TX_PIOBUF -
>> +				 uc_mem_map_size);
>> +		}
>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (mail-mw2nam10on2064.outbound.protection.outlook.com [40.107.94.64])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 38F5918E047;
	Tue, 20 Aug 2024 10:45:41 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.94.64
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724150743; cv=fail; b=n0m5ST41nVFn470ROE1xtGKDzaQXqgu5vVxM2Q7vtWW0E7EnF5YXfrlsnmudhn3jh9icJOZlacJqOm7q0dhhg9OxQswlqpKZHdz79+y/ysNbXow4bOcE8RvjGlLIOzLWVZQiOyruAt2gijmKExapLv34AsAgPrZNB9XAEK5ZMao=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724150743; c=relaxed/simple;
	bh=TjG3TpDnnoTQ+Aex0HyrCGDZ6CV/JBjQAs2Ptvc1rlY=;
	h=Message-ID:Date:Subject:From:To:Cc:References:In-Reply-To:
	 Content-Type:MIME-Version; b=CczMwAqVjNmP/ITnnH6G/dCzidKwx1MoOprqMSxk0LOiDRIPVo1L3YqolkChuwFPzQKwiojC8+LbaJkIAW4eJonHDDhkTKITLwKgzm1m8+ewG04s+6icyYeVuDWNLkdlO4jLcZ0C748NoEebVitfKLRSevfy9vDYy7bNh+cZTq4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=1+sTE65X; arc=fail smtp.client-ip=40.107.94.64
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="1+sTE65X"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=bsvh9LMbQAEKdrzm7l+NuQwozM8g1tEKC1hbWx8hA1kuN/nuNL1IqgU0VxEhxkSzduzQSA6yEKjdRFDja7+djV/vnO0b4RjaxICVwlE06YmAvMtP19YwcLZlhIeuPUkyxKpAMV3ZpHnlNkphUSJpIVFFeAGyVAOhbpBYhbAcXgFlo25i6oDYN/Ai5PxtySxQUkT+nUqJ/8iEu5jkbBeLgHD/MO2AZ1s6QsUJ9iDC7lkLqYQCQxTPpqCY7M0F2oRM3H64l2blktp6cD0ZsMxFw2ipYKR3t25EMPbhS/Ia7F+EHpLA9tTezFX8hFXLptJJgZAN43wwai4zQah3sZ12Wg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=/FFVE2g/FjHlxJKufZECjQjJ9O0HVtRuZVBgp0rBz7E=;
 b=uzd5EwdpOhHI1u4ykkaNRXcVK2Ged1YhrQAoreLRUDAdDhf0cPUjGpyOGVOwSfyR+AZ6ABumI0Ii5ZuWjzfmPNm3VJU7ZHl8dUvfsb8ei4Er77XD33jh8hNg1BgCbVuCmE36UkRGUAhnoXix1F5Zmp/Qcd187xeyLZ/EgY4Saw15kqMaGRmk50Xi1YLeXULP6M9pY35mXhWJTBxTbGgjoz2JuM/+Zg42rD6No/50BfAeGT4hrrusGIcU+i37cdx2MqK+OonEbr/9Ltx8WMtqHEbvIxK11xRnaBl5dwnXalwCKfX5abDGC5wpGDo48Y9PuAYQwV1075ATUg0FBgVKBg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=/FFVE2g/FjHlxJKufZECjQjJ9O0HVtRuZVBgp0rBz7E=;
 b=1+sTE65Xru0ZYB/ymwHzeeD1WNYtQlDoZ7fsh1rLQsZE/3hG0j1t4vMlw1X5HAandQtMCXiljGTtcVrPDr3VyOvURI8BFmXckGJbU7G3m73L9dytQiSoTPntAMVSkMkphClRCSu0id8elMr8FVNMzxeGyn7HBszZJN3YbwxMI3o=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by DM3PR12MB9414.namprd12.prod.outlook.com (2603:10b6:0:47::21) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.21; Tue, 20 Aug
 2024 10:45:37 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7875.019; Tue, 20 Aug 2024
 10:45:37 +0000
Message-ID: <942da248-7140-6cb0-d960-34e300544d5a@amd.com>
Date: Tue, 20 Aug 2024 11:44:52 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Content-Language: en-US
From: Alejandro Lucero Palau <alucerop@amd.com>
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
Cc: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
 <20240804181045.000009dc@Huawei.com>
 <508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
 <c9391139-edc4-73a0-3ede-d67c40130354@amd.com>
 <20240815173812.0000447c@Huawei.com>
 <26723cc8-c067-280b-f0cf-ee3906545837@amd.com>
In-Reply-To: <26723cc8-c067-280b-f0cf-ee3906545837@amd.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LO4P265CA0294.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:38f::7) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|DM3PR12MB9414:EE_
X-MS-Office365-Filtering-Correlation-Id: 30978c44-1aa6-435f-c446-08dcc1053a2f
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?eGQ4UEpYT25wdEdDbVlRWk1sc1A1eUxzYkwvZzM1eVRTdDRmSVU4TzJ0TmNm?=
 =?utf-8?B?eVA3WEVVQWVuWVRTZ3VuVTU1NHpLRi9Nb2MwY1owaERaMmw3SWRHbmpHaSs3?=
 =?utf-8?B?RkJ0VzFtSytkbXFwbFdwRUMzdkN2MVdqMjBvN2VSL2lacmxrY2g2NkNFNVZl?=
 =?utf-8?B?ajhkcXQyUFNhZnVpd0tOOXBOTGdQekdSVjdUL3U0bUh6TElHUUw2ZkVjVVhm?=
 =?utf-8?B?TW1qNjdnSGhlR0Yvamh4VEYzUm1QdFU0NnFDTG9OMVI3QTVuZUJCaEphVCtQ?=
 =?utf-8?B?NjJjdkF6WHducjJXaC9Gd3FlaU1ERFAzUFdkTXNFeGp0T2RRTjVCRDBaTW9E?=
 =?utf-8?B?RUZnSy9hOE9lMUU0cmJZRDRtTVdLaDBrekFUb3dXampyWUdvUElwMi9mZzlp?=
 =?utf-8?B?amF4Q0NsWDZLZmpUc2xjbldQeVRSR3JzQXpNK3RhTDIzbWszNjlwRGkzYTJn?=
 =?utf-8?B?Z0tmY2hRSTY3MDFKVmVkY1Y1aHBUQzRtbXZCWXgxQ1pQZkNMbWQzODlQOFUw?=
 =?utf-8?B?QVpjUU12OWdlTHJzZ0NjTE9kcnVCS2FhWTZHVm1nbGdJVm5wT3RqQ056NmtN?=
 =?utf-8?B?b0VFTjhTZ0VDYlAzVzBHbDhpSjVoMFFtb3R3bkp3Y0EvbHFZbnNWNHNpSmNv?=
 =?utf-8?B?Sm01Smp3RzRZTVBrVVR0dCtNRWYraUVIRmxDc3RHdEF2Vk1wY2lnaVVtenFw?=
 =?utf-8?B?OG1zV1B1d3YzcTc2YW9OUjdoeVpObDVsSUlYellZMDFObzVUTnVtS2hDNmFV?=
 =?utf-8?B?SzlmdkpvWTRtenlqL0JXR0owWFZXcHExWnU1MGEzenF1b3ltdmk0UlVoTWV3?=
 =?utf-8?B?YVZGSlRjQ1U3TWkwSllxMS9udlRySWxveFRTL2FKTXZ2eTE1Sk1pcmRGbTk2?=
 =?utf-8?B?Vm95Zm1reUhkMnlsY01XeFJJYzBPU3lYR3V3YWZxTzluZ2p3VkM4aWZEQnZj?=
 =?utf-8?B?UG9iREJPZEtkTEQrMzhpTDI5Q2tKMTJFdWxNYUtjRTdienNOTHdMd1RqTDBR?=
 =?utf-8?B?dkZLMlh6MG9IQVgwYVBraTRGZ0Y0Sk1lMDcwVWV3bHFiUnhvZG1YdkwvQVpt?=
 =?utf-8?B?bDVLbHhZL3NYSUxyVnVYS0I3S1QxcDJOd3d5L0kyQ09ld0ptektNbkl0ajlu?=
 =?utf-8?B?ZFVUcEpzQU5HS2VFZFk5bXNGVXdjWGxlN2U5d2lhSjkwTmhnOHQ3YTgyNXN5?=
 =?utf-8?B?b2dyYi9McUNMS3R5d0M1aWVmUkZ6cFFmcUlDbnpDaGt0c2NLRmV6SWplbDZB?=
 =?utf-8?B?SEE2QzhzdXlrSFVzTG5QUkF3Q0FHQlltdEJrd2tDV25PZVIwM0V3TUY3cDk5?=
 =?utf-8?B?REo0blVYTnByN2szRFZ3OG9xNXVrYTVCRHRyQnltR2NENkNmeXhJTC8rNmNM?=
 =?utf-8?B?RTRzemRFck5DY3ZYTm9lK0ZJUWVtSENSL1h2Q20rWlVLdTZSQUxQV3pxaDQv?=
 =?utf-8?B?QjQxbmU5YllzbEZFZ3pCZkVEOW9teTR2azhueFFSckxJTGZCZGZXY1p2S2NE?=
 =?utf-8?B?MjVMYTBudEszSWkvN3VGcEkyYWV4YURjSnJiRkVkeUJkUkpzOWVjZTBzYTVo?=
 =?utf-8?B?ODA5VVRnUk9vQXJSa1lqK3JwaU9aVjF0TTR3RHVJWHhEcVFqLzlvRnpJZS93?=
 =?utf-8?B?ZlVlTEtHRDVpOWJWRk5lRWtEQ3VsM3dXK1l0UHpqZEVLQ2luSEdCM3dkb01h?=
 =?utf-8?B?WDFnQWY0R0JQTFdVdWhJM3Y2VWVRaStZTThYZzhNdGZHemJFN01VOGdlL3pX?=
 =?utf-8?Q?qGHt+vwbi8OFES5gZU=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?VXZQZkoxdmZKd0xXRmR6S0Uwc2hYTGpOREpLcG51bEFLdU40NnBvQi9KNGpQ?=
 =?utf-8?B?NlN0RVhBWUtjeWVwTWovYVU1c3hyYU0wa3FkZ3FJK1ZkUE1QcmNFcVNBVzA4?=
 =?utf-8?B?YTZ0cml5bVhyM0N6dGZPSDhMcVlYS3RCdWcwTnhyNmNnb1cxVWpOL3JhNjdt?=
 =?utf-8?B?cmJtbXpKV1BiV0F1Z0NMNVpEZk9zYU8yWXpERmcvT1pmNEZyT0VTWkhkMTI4?=
 =?utf-8?B?aUFIK0VPRnRjeThQS2xtcDR0MjBUOGl3S1E3bnNjRGZya1JybHRXbmFIL3B2?=
 =?utf-8?B?REpsMDNDQjR4MDUzMGNqZlhrcEpHdUNSZ2IyZkdobEQrWnZ5Vi9mRlhJUHNJ?=
 =?utf-8?B?N1d6Nmxpa1JYVStWTVhwcmJzNk03SFR3bXZSQS9jZ2J5ZGM0cDdzVnVpYkpj?=
 =?utf-8?B?dURqZW5nWU9aZVRJRUhobTQzMUwwek1ybzFnWXB6cGh0WE9OdHVXU084ekZW?=
 =?utf-8?B?S3RCUVBLbEhpSjQ3V0FkV0ZrQTh4VHRyNUFWYWsvRUlPVkJkUDNDUmoyU2lK?=
 =?utf-8?B?ekdXQ1NUNVZMeDU1QkJ1SDI2MHVXZHh6cTU2YThHdEYrRWdYNEUvOU1IWE1R?=
 =?utf-8?B?dlU5a2NNZ09pVFl5WFVtNVRzZFJEU3MrWFdROVNBRWxtOW0vdVdheHpIQkxa?=
 =?utf-8?B?bEdXdkxjNGFHdUg3b0FXN2tkek13eHd5L0JCVnMvTDE4eFZOSHl5MXNBZ1BB?=
 =?utf-8?B?aHBxY3JlRmpaNWhSemZpWEZMWVNMSEpHT1YrMFZ5TU1pOTFpYitiRzBKYjdM?=
 =?utf-8?B?QVNIYzkwT0YxaTlZbVcydy9EbXVVZk94cjlSSlVwZ0pham5iSXBMNGxBWkUv?=
 =?utf-8?B?MGxHaXNnTjJhK29jYXZxc09rQk5ncmRXcUZqN1doMVFPSGpKTTczQS9panE3?=
 =?utf-8?B?MTloMWdrWXNFN1VZSHJlUExCeDNudkZ5YTVEaWF2OFBNajR2NUJqSXJHbFBO?=
 =?utf-8?B?S2pJbGRQVms2cU80blhGM3g5clN5NDJUR2d4K2wweEZjUXBUOUhsdDFsY3V3?=
 =?utf-8?B?a1hUeVJUYUxRbGZ5Tm1aUGRCOEJPSE02aW5NSXk1THJHb0QxdnJRSUxRZVVG?=
 =?utf-8?B?WU5tTW5Ud3U1WWdjd204ZWs1T1NqUk1pUDZtcWZGNVdLNUl2T0txZDQzblVi?=
 =?utf-8?B?SHlaUER1aHE4MExXbjdDbTIzRXp6NnMxMHI3Ym1mUEx2M1BVd1d3NWw2dVRh?=
 =?utf-8?B?cjRxRTNSUC83alZVc0Q1T0FmUXVEeTFPREVHd1ZMN1pIbTFQTG5tazBHTDBF?=
 =?utf-8?B?dHNxUnlBcndVdXJtcW00SnVTSktvSDVTMC80V2JteWlRbklWbDlZc0RuQUZm?=
 =?utf-8?B?RThibG8rYmVvTVU0WnhFRktpV3ZYZWpXMXIrcTJwQzcrdW5yWSt6ckwyVUJk?=
 =?utf-8?B?SlRUNHkyb2MyaXZZKzh0UFB0NjRkNk5jMm0wQUZDd2FaSjExT3EvZHpwRXFB?=
 =?utf-8?B?MVZDeVJPWnBocllRblZja1kzUVVROFQ3bjAzcThRNU1sbjZWcXBoWmNDTEJB?=
 =?utf-8?B?dURsQlJ2OTBpTDBHdVVoSUFTVzljREkyNSsxakluMlBZNXU1NWFVMGh6S2N0?=
 =?utf-8?B?OWhYeDlhYldWRW1SbzBmeDBTdlpQTG1icHZ6dU9WUzlSWEVmYkF0d0NOVGkr?=
 =?utf-8?B?dytCckdtdG01bEdLUFZXT0Y3ekxobWhYV2dZRUNLTnY0OVl6aFMwVDE5WWRD?=
 =?utf-8?B?NHVwNi9xczhPRXlNV0hOSjVSUlMzMnZCeEtvV2pCekVXRU5JL2YvRHJSOVRO?=
 =?utf-8?B?RWxSNE8wMzNXL3N6ci9EV2RmTkQvWlpoTnNDUDN2dVdZNEZiM3F2MWNHU1Z4?=
 =?utf-8?B?ZEw2VEVETkZUSWlOeXlGTlhMME1xNmFxUGhrak5Edy9mZ3FBMDB0U0dJblV4?=
 =?utf-8?B?Lzk0UWhMYnJnamFhR2tpcjFQaGF6ZUwrdDl1OERNQ051RXdjWjFhd0RHd1gy?=
 =?utf-8?B?L0VWOEJIMm01YlNCQmRKTnEyaXoxNUUxMmZLb3M2bkRWdHF0UjR1Vy9kU1Fk?=
 =?utf-8?B?amQzQTBsSExyRXZTRmFwME0vbzlqTWZBem5RUzJJZmp3aXI1K3JTVER5OXBz?=
 =?utf-8?B?bVJjUXBYa0NzY1lReHJ0djkyK0FOZVFNNHpIVVcrdVV3N3lYRk9hSjlEdE1I?=
 =?utf-8?Q?nUoihmZ3eW14wAxWtB7EdQnOE?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 30978c44-1aa6-435f-c446-08dcc1053a2f
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 20 Aug 2024 10:45:37.6987
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 7jp7AeIyImVE4hLmv47KLzGMZEzynJeU8clqUXPqjNJvyQaZ8omvbOmiQ95WJxDbPWpxP8Mse6XdbTWjQTNgPg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM3PR12MB9414


On 8/19/24 12:12, Alejandro Lucero Palau wrote:
>
> On 8/15/24 17:38, Jonathan Cameron wrote:
>> On Tue, 13 Aug 2024 09:30:08 +0100
>> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>>
>>> On 8/12/24 12:16, Alejandro Lucero Palau wrote:
>>>> On 8/4/24 18:10, Jonathan Cameron wrote:
>>>>> On Mon, 15 Jul 2024 18:28:21 +0100
>>>>> <alejandro.lucero-palau@amd.com> wrote:
>>>>>> From: Alejandro Lucero <alucerop@amd.com>
>>>>>>
>>>>>> Differientiate Type3, aka memory expanders, from Type2, aka device
>>>>>> accelerators, with a new function for initializing cxl_dev_state.
>>>>>>
>>>>>> Create opaque struct to be used by accelerators relying on new 
>>>>>> access
>>>>>> functions in following patches.
>>>>>>
>>>>>> Add SFC ethernet network driver as the client.
>>>>>>
>>>>>> Based on
>>>>>> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e 
>>>>>>
>>>>>>
>>>>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>>>>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>>>>>> +
>>>>>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
>>>>>> +{
>>>>>> +    cxlds->cxl_dvsec = dvsec;
>>>>> Nothing to do with accel. If these make sense promote to cxl
>>>>> core and a linux/cxl/ header.  Also we may want the type3 driver to
>>>>> switch to them long term. If nothing else, making that handle the
>>>>> cxl_dev_state as more opaque will show up what is still directly
>>>>> accessed and may need to be wrapped up for a future accelerator 
>>>>> driver
>>>>> to use.
>>>> I will change the function name then, but not sure I follow the
>>>> comment about more opaque ...
>>>>
>>>>
>>> I have second thoughts about this.
>>>
>>>
>>> I consider this as an accessor  for, as you said in a previous 
>>> exchange,
>>> facilitating changes to the core structs without touching those accel
>>> drivers using it.
>>>
>>> Type3 driver is part of the CXL core and easy to change for these kind
>>> of updates since it will only be one driver supporting all Type3, 
>>> and an
>>> accessor is not required then.
>>>
>>> Let me know what you think.
>> It's less critical, but longer term I'd expect any stuff that makes
>> sense for accelerators and the type 3 driver to use the same
>> approaches and code paths.  Makes it easier to see where they
>> are related than opencoding the accesses in the type 3 driver will
>> do.  In the very long term, I'd expect the type 3 driver to just be
>> another CXL driver alongside many others.
>
>
> It makes sense, so I will change the name.
>
> A following patchset when this is hopefully going through will be to 
> use the accessors in the CXL PCI driver.
>
> Thanks!
>

I realize you likely mean all the accessors and not just the dvsec one. 
Right?

Also, I think I could add the changes to the pci driver for using them 
within this patchset.


>
>> Jonathan
>>
>>>

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (mail-mw2nam10on2043.outbound.protection.outlook.com [40.107.94.43])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 7E6791CB125;
	Thu, 22 Aug 2024 13:07:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.94.43
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724332080; cv=fail; b=XtSJCGn79snmRh3SUl7PKOVirTAqe5KAS9ZKDdnBDHbjvk03vDL6Wv7Uf6/gJ/m+FNtz8XELDRbAuprRM38XSEOSOEKS/hnlZiUnr15QGJA2dCouT8u1XeP47n7k1FOSQzhAmE/XQmD9cRWn6vOdOKji4RGA3BCqusj759WC+ks=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724332080; c=relaxed/simple;
	bh=QUDNdBzwLh//7wBJLa+AS5ZEgyiy5SOg7dwdPZVk1IQ=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=mZQKFGi1iElCA6Obh6kcDU01K7fMA8r8Bdo0aA78sp/5FsSp7/M/Ub0G/s8vwa5ZFlZC8ZBFJQ5Wyff06SMUiHKA75mcbGwqp3YnTm76xKvRdDO5QNZmDZnnC/ogXBmlS2VtMiN2rAt23t42dsujBv6zQE6MpCF7DhQirCPjbk4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=Hx2KKmUM; arc=fail smtp.client-ip=40.107.94.43
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="Hx2KKmUM"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=pKercLBAU1pecI5GgvGh+d7jV7mj+E9HKeE58T9Yn1OLk+Tu3tnLVxhnfM++q65380LfFiUNjS6RLucKoOOHcvs+o9yTFBW3hqFQtAMRn9HYRmsdxTtfnIU8e/RcL8/Ql8/ajXx/HSF42zbZCkZOva8u4EP2seh8WL3C0WptIrySmhnpLlXAC7oBg93dLb9/f3z5+273eQZoaaWoThYAbM2ChnzGuj1UYICJR/w2a2Di8GOSoFu2IT/PGPr1GMKOSqdjJMYTPq9zNKhuhAvAZE8xne38oVuD7aR0obKIpuy+WimrAeqvHe1Tn8yC/5dpyy7PBHsiXLr+7ihg+S7Oow==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=WVgSWbXogk5kXejJZzJSCS2Y0tn6n0iXfpOUmtVj/bc=;
 b=lLFbkW2c6/bgi8Mywm0juuy496PnhBZSnY+KayD8TmU8soW0a6ue/vOq6grypvr6NBEI20BVKLTOBWapirmrBrzUSLQY66jkQGD78ZGTHvrvoJ+32lAPc9bkO+UepNHdo3oej29eN4nDK0943l0C0K3EniV4qGrQ4Zpehm0oYN+paV3xXrGg04j/Se9wUMxTfDGy9aoQHTaB2TK7Stke9mqi4czVtFeMF36tpyOIeh+RACHKcMGoN55N+DJJbuO0BJTIYg3bSDJFSxEs6SUq4WoHt7m7cO23XNsZmkABkO5CFg6+HbyORXbn7o+FHRkjzWVedD4vw0dzG3JHQUJAXw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.118.232) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=WVgSWbXogk5kXejJZzJSCS2Y0tn6n0iXfpOUmtVj/bc=;
 b=Hx2KKmUMlyGNzN40X1rBL3PbCPF4lSrLPqOHw3valOnnUuowMXd3/74Ek4b2eO7u2cIPTTCF2C+BJ9pxFwVMsuRiz2s2uHoLMwiXzITFPpLH3n13qXzw4LvACZ3MJDfA0qEsO7aUQKu9zo2pxbsS1YK9C2UajX8+cGrQmkp1oEsAiiaZYLL2FonjZ9zrah44l5GQiHAry68RNrmUcSsd3m7KlytuR0aa8RZ/mda9XmL/rqsE4oKryZioMvq/X+677jyOeSfEh4dc0HmOKS1rv/6xrKQtebagabUNHefJbVrw7L6i8pPQ+V+iRgXZv2DM7z1MCohE/Lo1Qfps5f52kw==
Received: from BN8PR15CA0058.namprd15.prod.outlook.com (2603:10b6:408:80::35)
 by BY5PR12MB4163.namprd12.prod.outlook.com (2603:10b6:a03:202::18) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.19; Thu, 22 Aug
 2024 13:07:47 +0000
Received: from BN2PEPF0000449E.namprd02.prod.outlook.com
 (2603:10b6:408:80:cafe::dd) by BN8PR15CA0058.outlook.office365.com
 (2603:10b6:408:80::35) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7875.25 via Frontend
 Transport; Thu, 22 Aug 2024 13:07:46 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.118.232)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.118.232 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.118.232; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.118.232) by
 BN2PEPF0000449E.mail.protection.outlook.com (10.167.243.149) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7897.11 via Frontend Transport; Thu, 22 Aug 2024 13:07:46 +0000
Received: from drhqmail203.nvidia.com (10.126.190.182) by mail.nvidia.com
 (10.127.129.5) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Thu, 22 Aug
 2024 06:07:33 -0700
Received: from drhqmail203.nvidia.com (10.126.190.182) by
 drhqmail203.nvidia.com (10.126.190.182) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1544.4; Thu, 22 Aug 2024 06:07:32 -0700
Received: from localhost (10.127.8.9) by mail.nvidia.com (10.126.190.182) with
 Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Thu, 22 Aug 2024
 06:07:30 -0700
Date: Thu, 22 Aug 2024 16:07:30 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>,
	<zhiwang@kernel.org>
Subject: Re: [PATCH v2 03/15] cxl: add function for type2 resource request
Message-ID: <20240822160730.00002102.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-4-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-4-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: BN2PEPF0000449E:EE_|BY5PR12MB4163:EE_
X-MS-Office365-Filtering-Correlation-Id: ca5d76ed-70d5-4192-3436-08dcc2ab6adb
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|36860700013|7416014|1800799024|376014|82310400026;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?tF1cGVtNOqp+t2a9bbr53737/aziQ7451tpPsk1W3ZGJhGyWlAv+gugdrUyI?=
 =?us-ascii?Q?oIds84dcCbhHIOdsP0fLlvzwOIWb/WAbIyzjerMaxOiwWgtbSGVqVVP96Lrr?=
 =?us-ascii?Q?7AGg74DAQZvMOXmwMEsT1TgN9ehllp/abGzZofrq0DlxSDYzicf9tBLRcryo?=
 =?us-ascii?Q?DaaX3XF4c9Ar8WhyS5VGl15f1wmrn85cqYVgM7YsmKNMCFPg4ItPI/4zG1Wk?=
 =?us-ascii?Q?+qNNYOv+bBwZLqSlmu/LX/uDU4et1Q2XTDP7YyPMkSKl9tVZzHKFs5LzLUz4?=
 =?us-ascii?Q?fo9927igVkt3ZnQ8LN1YF3CK+iAofbxcEVj/9FnKuGpw0hPPkcDJhJdYPpjm?=
 =?us-ascii?Q?i+wsoSEqJFQt2q9IctTZd5+ofSR6CI8F5aK7e0+bGZW4+NZYjAi89lb+xXNc?=
 =?us-ascii?Q?HtU3HljIbH++FAyqZ5kP2PFOWGB6S3ZWmkpoz826CItXoDe6FZhbH1SPC1+7?=
 =?us-ascii?Q?ak170OWItpEOm+DZuF2yuoJnkGNuLgzTdB2mHv1fg8gexrc8zVIGlYlNAoxm?=
 =?us-ascii?Q?OA0yLqS2Wl8kj8GmZzBlNqAQXEd4rK6I+Lim3Y5jScWPeL/O8bHUKk8lFsUZ?=
 =?us-ascii?Q?365/KfyQTJj2t7Ewqo62t5eKnOceqlIfeo3QXVFggabnl+BNjlx4l3zy3pcT?=
 =?us-ascii?Q?XiOPU1xmn99H5HVLU2BXZtZ2mqFEThL6xUSM57oSTXw2ZcQXNpByBcmIvwFn?=
 =?us-ascii?Q?b9UzLRd+EAV/NLKiIH6b9K5W+yGNR3oKz/k/sZGaI68k7hMydMVaz5YKxCKr?=
 =?us-ascii?Q?8rZVpemdpUyy92NEwA1sT8GkuXnypcrcV08f8OERFulL0xeQnXFJg4HYqajV?=
 =?us-ascii?Q?i7moOaE1hYVZ67aKi5Mpg4nS4Vmxe1884sofL2eFhe3RuBkc0kyQf5+dRe3M?=
 =?us-ascii?Q?bsx76bMs3RSd3btreYuk0VtI3NapUjb6FsTIE1QndI1pXU6R5ArM56BIh1O3?=
 =?us-ascii?Q?+LspNvDc1cLNr4JNc9W8Ju9YvEUZGcO+d0SfNmGb54PqbUMIxDq31cPF+gcF?=
 =?us-ascii?Q?lfFgrnoivEDJvAUy2jJtR+ASivT6fw0lhQIbhqoPEoBbCW+rzwIhElHcfLdV?=
 =?us-ascii?Q?wiuyMadW12ZUEh9Z55/R//pNE79HRGYTxD9FSo/gkanlCDaXlQ1Up1eufva7?=
 =?us-ascii?Q?03Wgog7hT+ukUJPmaplA7KU0AWlVbnLfK8d3w1CCQ2Obz9GqEh840z/LTWQk?=
 =?us-ascii?Q?un6geBRirAGZGnZa8ZxwkKPvCgKI6e+qOwOxiOzq1pbx28l7KNcwNcIK0kyY?=
 =?us-ascii?Q?X0MeAFk3/FwzfQ4Zb8QTyd/eS9xJja5vWgh4fH/nRetN4V8KlHYMTa2bfPBy?=
 =?us-ascii?Q?Dk9EWk8kgA/o2Rqfjrv3/7RH5gzsfvZLVjzDJYEhyZcQoNcgwPWnHCm5cWcm?=
 =?us-ascii?Q?ZcCKjkqg7XnWz2HG3YFkq+eyeOy2S4PFBrTS249vDx1OWld6PtlbSfGyY504?=
 =?us-ascii?Q?XFiqo1o95ovRFcuVG4WF2WHm5HxEA6zP?=
X-Forefront-Antispam-Report: 
	CIP:216.228.118.232;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc7edge1.nvidia.com;CAT:NONE;SFS:(13230040)(36860700013)(7416014)(1800799024)(376014)(82310400026);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 22 Aug 2024 13:07:46.5839
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: ca5d76ed-70d5-4192-3436-08dcc2ab6adb
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.118.232];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	BN2PEPF0000449E.namprd02.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BY5PR12MB4163

On Mon, 15 Jul 2024 18:28:23 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Create a new function for a type2 device requesting a resource
> passing the opaque struct to work with.
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> ---
>  drivers/cxl/core/memdev.c          | 13 +++++++++++++
>  drivers/net/ethernet/sfc/efx_cxl.c |  7 ++++++-
>  include/linux/cxl_accel_mem.h      |  1 +
>  3 files changed, 20 insertions(+), 1 deletion(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index 61b5d35b49e7..04c3a0f8bc2e 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -744,6 +744,19 @@ void cxl_accel_set_resource(struct cxl_dev_state
> *cxlds, struct resource res, }
>  EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
>  
> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool
> is_ram) +{
> +	int rc;
> +
> +	if (is_ram)
> +		rc = request_resource(&cxlds->dpa_res,
> &cxlds->ram_res);
> +	else
> +		rc = request_resource(&cxlds->dpa_res,
> &cxlds->pmem_res); +
> +	return rc;
> +}
> +EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
> +

Hi Alejandro:

Since we only have cxl_accel_request_resource() here, how is
the resource going to be released? e.g. in an error handling path. 

Thanks,
Zhi.

>  static int cxl_memdev_release_file(struct inode *inode, struct file
> *file) {
>  	struct cxl_memdev *cxlmd =
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c
> b/drivers/net/ethernet/sfc/efx_cxl.c index 10c4fb915278..9cefcaf3caca
> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -48,8 +48,13 @@ void efx_cxl_init(struct efx_nic *efx)
>  	res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
>  	cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
>  
> -	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds))
> +	if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds)) {
>  		pci_info(pci_dev, "CXL accel setup regs failed");
> +		return;
> +	}
> +
> +	if (cxl_accel_request_resource(cxl->cxlds, true))
> +		pci_info(pci_dev, "CXL accel resource request
> failed"); }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h
> b/include/linux/cxl_accel_mem.h index ca7af4a9cefc..c7b254edc096
> 100644 --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -20,4 +20,5 @@ void cxl_accel_set_serial(cxl_accel_state *cxlds,
> u64 serial); void cxl_accel_set_resource(struct cxl_dev_state *cxlds,
> struct resource res, enum accel_resource);
>  int cxl_pci_accel_setup_regs(struct pci_dev *pdev, struct
> cxl_dev_state *cxlds); +int cxl_accel_request_resource(struct
> cxl_dev_state *cxlds, bool is_ram); #endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-CO1-obe.outbound.protection.outlook.com (mail-co1nam11on2066.outbound.protection.outlook.com [40.107.220.66])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 0C5A21C9DE5;
	Thu, 22 Aug 2024 13:12:44 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.220.66
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724332366; cv=fail; b=jXH8rsv5/r4u8eghhaMOM6dRkWdHQHExAy9MBRFQAhN2StFLWK5KU3SJNbVBdbwO2AyneZ+5OVQOlqLt5joOeoSC9EL9vaSl88kala/VG66td/MRFlz4ryasShOlhX4okhhDkG3ssWHKQg+WIhBoPGENvsgQ4hCYI3wonYolwAM=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724332366; c=relaxed/simple;
	bh=TqIPz5UWcHKheLpEZaQPCYHpdJHzFxl6oth/dTRt4sw=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=eU9Wxh5qe5c/YTRJzG7iQ79RAi7WzqBSFB538qZcMrHjvE4ZE4tw9PGFfKAlCyEZwQE2NTKftaLw2wa2fJtq+JOBsE+stuT1zpMhBqL08voFfom4Wz+ij3go+LEQDamvBeG40qa24a5SFq3nqB1j7CK2hLyqDDB9NJELlMpmCAg=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=UC2srTeI; arc=fail smtp.client-ip=40.107.220.66
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="UC2srTeI"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=hLKzKYVH3qfB8ZuEVJu3dEN+oSc3LiMdQTMugbBASeAcMpel2EmUvb8HHXfcpKhYjPiK1Rs2liYpn2fBv+kVsdYHBALGYCrlAFper2ZZoXsvh1dSAasvJUFDWX0IDUgyvT/l/S2GO3Wow6G1oXoCtUppuW2GMBbNr8NE9S5I6QtmQlYyQdsPfSeen6j0j1FCKp2Qtwr6IIH1OsZsPuCEnIux0PUaAjbiJ9Jt8MpgQTG5w2eBQWwUyIWhD7aU+6vs9g4JCGpax4ia1CqGzLX2j7etlQW+olwSUqwzGpI3B3JS8XSa4X9GEGz1wPb97KNOlr36kaBzlGQWwzQp5eZXXQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=diPnuMM3rMtq51F+eSIbCsRDYC3T5EAxxGoztnUZEzc=;
 b=YDqrjTTC0m0fGADux7zmDPwxoA+udcfvfOexKQ52V2WK782UZQZlm7kcjtm0HGqEYifL6NoM3AFb2CpqKyhJOV/7Ibplfh5Zr+L/B31vIHWFsPaYzLxk4eXq1xJTUTJAZkDQ1xqyUtgYfytcc4OJ1vsM6h2cbthyRvn/8Mc+uKjHxMIuShI/VF8IdLfFCD+iRkqWtmks946z2X8Jhx4sTq7/NgRtt+05DHmDZzUCDry7fu4VQ8l0hlqmzH/65umX4rbu6rPTHOOuPUGp83OXRf3W1rcUR20dmExLvvz1dAPzviDJFFFj8shKwTCBerc4q59lOX8uUAXqpXACmlGg+A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.118.232) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=diPnuMM3rMtq51F+eSIbCsRDYC3T5EAxxGoztnUZEzc=;
 b=UC2srTeIROUdG/FnhEdXtbF7GEtyWCvWCeaLn/eyNvrvUr2ZP1Mxo9FEA18tv4Vulb4g2eeOI74p8tXBob6W8tIoiHB3v6/G31kRQG6CNE2TrQ4XENHqI/IP557VFruKqrxiZ49brqcyA2dHNkKvh/JWMazmlo3AJbMuphD4sabdjg1cXuB5oXMVWCPnt1v6XrX44hIaykiJMf3ob5NT8AAWwgPYb4lOI13xyS19xvo9zx0kAikyV895WyuL35JzK6LbEhLmCwK7MNxO88y0CKtIARSevViN8toVQCSsB6u/6VHqt5RUVjlgDSit3ZcUtL7CB8O2mN+9HHbVHkCHrQ==
Received: from DM6PR07CA0122.namprd07.prod.outlook.com (2603:10b6:5:330::18)
 by CH3PR12MB8211.namprd12.prod.outlook.com (2603:10b6:610:125::11) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.19; Thu, 22 Aug
 2024 13:12:38 +0000
Received: from DS3PEPF0000C380.namprd04.prod.outlook.com
 (2603:10b6:5:330:cafe::38) by DM6PR07CA0122.outlook.office365.com
 (2603:10b6:5:330::18) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.19 via Frontend
 Transport; Thu, 22 Aug 2024 13:12:38 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.118.232)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.118.232 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.118.232; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.118.232) by
 DS3PEPF0000C380.mail.protection.outlook.com (10.167.23.10) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7897.11 via Frontend Transport; Thu, 22 Aug 2024 13:12:38 +0000
Received: from drhqmail202.nvidia.com (10.126.190.181) by mail.nvidia.com
 (10.127.129.5) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Thu, 22 Aug
 2024 06:12:29 -0700
Received: from drhqmail202.nvidia.com (10.126.190.181) by
 drhqmail202.nvidia.com (10.126.190.181) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1544.4; Thu, 22 Aug 2024 06:12:29 -0700
Received: from localhost (10.127.8.9) by mail.nvidia.com (10.126.190.181) with
 Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Thu, 22 Aug 2024
 06:12:26 -0700
Date: Thu, 22 Aug 2024 16:12:26 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>,
	<zhiwang@kernel.org>
Subject: Re: [PATCH v2 12/15] cxl: allow region creation by type2 drivers
Message-ID: <20240822161226.00001736.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-13-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-13-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DS3PEPF0000C380:EE_|CH3PR12MB8211:EE_
X-MS-Office365-Filtering-Correlation-Id: ba0e986d-a459-465b-5bbf-08dcc2ac18b7
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|82310400026|1800799024|7416014|36860700013|376014;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?Z7Yt89c5SpshqHwtJWnG7KWT6MZc7mHZ2S3qVTvdCajLNIqFZPqd9p+4nOVA?=
 =?us-ascii?Q?x7+aRjKt2yq1k/15nYcwWedYjP6WwtBc4WALPa++FVO/zWIcxnzkPR4wLJ49?=
 =?us-ascii?Q?DCMAvIgYyFTcssPZK59UknBnvHPGUPxib+bA719YtgzTfF4rfTN+O6GHsA69?=
 =?us-ascii?Q?sBUsg4Hq3KR2zKyg66PjuDIavMvhuYecQePUDJTooC4bpdMjWMhtGTtWxdGN?=
 =?us-ascii?Q?y+sc13xMH2FVeKXm3qT/Sy5IblYiSpercC/uikdEZyJUs5WKPboUk2mFzlI+?=
 =?us-ascii?Q?EBFuSJoCzXHx7n3VvmlS0+K9664KxCLzfMiViGaweFIY/VMv8UlMJ+3et9CT?=
 =?us-ascii?Q?znTD4Ae4Z07ShC2vluKEjSplo2iHjBHEMbYL/2yNQq2XiKmjWlgcQ37MMRNr?=
 =?us-ascii?Q?IVm8deSsD2Hn49Or+j3omS0d7cvV+3DOKi6PMq5NwiYy9gkg8B184XPmisXZ?=
 =?us-ascii?Q?jVFiuh0Iq7a3zxHjAmmmLrpRZf38mpUI1/S6fJ2e5dUy60OFOXC04mBdT2ZH?=
 =?us-ascii?Q?w8XGhZQdMsuacOqESgYLqkCuvsYRLjP8CRYbfkXBmJVaFWu9y9iwKy1yd6Zu?=
 =?us-ascii?Q?SNig8g2r1JtLghTpiblWHwKjlG+G+wjUZentYneS0AFtI6kfOpC3wO+W8ES6?=
 =?us-ascii?Q?m8HeNrRZO/SFH4U96dzocYct17ve1Sfa5ESSLlOn/ptBigpzxztVbEqZWlRw?=
 =?us-ascii?Q?gr/QwnimW6g4bwAUgNTvA76bdsc2B6nv1b8Jv7Eba6ZCPXvPyhX/iHTlMefi?=
 =?us-ascii?Q?VVNGmo8dNF5NVuRGQuF0+8gZj82kNkhLWKCbmxcPafRdJHkfFbJnmIM1jzUN?=
 =?us-ascii?Q?ZFlavOaQfJMgYQPJPBe0MLMV5oDxXHj+5Tan37x/bOeSxcP9Mssw3rbNVWXx?=
 =?us-ascii?Q?guM1dYTyFYezd9aKQqPYbyfE7HT/Wn7SniDvfJNjdQfHTJzzFGfuu/JttwsG?=
 =?us-ascii?Q?lpn8fWpAWxCfk06BhZVZETV3rnv57VFpuR4Wquk3z+CnAzAsd3Md6Z1P8Mw3?=
 =?us-ascii?Q?R3bo5gkK6w5Tvw9Q9g/sB5u79GTmymNs8v5EuLVEn6j7CN258n08sZ+cRL/p?=
 =?us-ascii?Q?EyRvcCoLDPj901w16sjJxpeqMKssW5HyhHwSLSMiTAiL+f8TMpNtNWiDDiUa?=
 =?us-ascii?Q?DkqtydW548uVkeFWx0ozt+kpXCu8Yv4WuTD1fnEk0oKsTdzHHn48TWvSY/en?=
 =?us-ascii?Q?040ZfsjeaKeY2hHl6eZFiOaHbNhLolAf0wW5D5C5yZpw1BPAtWfhd6zofAKa?=
 =?us-ascii?Q?NwGth9XRvV5MAj7yTCaqBVscKDTAWQ/8c94Ba1UW8UaokuoONc8HSXhk0AQy?=
 =?us-ascii?Q?WRoMAiB5S6zg6YbxshS8HVB2QQVVi/ckg9hKWQ8JbAmR7/ecGmzQggSVZimz?=
 =?us-ascii?Q?qPx+JnnTPgwMJAzUfYkr/2YCWyF9u2bCt0kc1hW1WS/03llXUJQNy4VQIPjo?=
 =?us-ascii?Q?SXg9qYZh805YHbc+trasWvFSNRrn8bBn?=
X-Forefront-Antispam-Report: 
	CIP:216.228.118.232;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc7edge1.nvidia.com;CAT:NONE;SFS:(13230040)(82310400026)(1800799024)(7416014)(36860700013)(376014);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 22 Aug 2024 13:12:38.3194
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: ba0e986d-a459-465b-5bbf-08dcc2ac18b7
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.118.232];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	DS3PEPF0000C380.namprd04.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH3PR12MB8211

On Mon, 15 Jul 2024 18:28:32 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> Creating a CXL region requires userspace intervention through the cxl
> sysfs files. Type2 support should allow accelerator drivers to create
> such cxl region from kernel code.
> 
> Adding that functionality and integrating it with current support for
> memory expanders.
> 
> Based on
> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m84598b534cc5664f5bb31521ba6e41c7bc213758
> Signed-off-by: Alejandro Lucero <alucerop@amd.com> Signed-off-by: Dan
> Williams <dan.j.williams@intel.com> ---
>  drivers/cxl/core/region.c          | 265
> ++++++++++++++++++++++------- drivers/cxl/cxl.h                  |
> 1 + drivers/cxl/cxlmem.h               |   4 +-
>  drivers/net/ethernet/sfc/efx_cxl.c |  15 +-
>  include/linux/cxl_accel_mem.h      |   5 +
>  5 files changed, 231 insertions(+), 59 deletions(-)
> 
> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
> index 5cc71b8868bc..697c8df83a4b 100644
> --- a/drivers/cxl/core/region.c
> +++ b/drivers/cxl/core/region.c
> @@ -479,22 +479,14 @@ static ssize_t interleave_ways_show(struct
> device *dev, 
>  static const struct attribute_group
> *get_cxl_region_target_group(void); 
> -static ssize_t interleave_ways_store(struct device *dev,
> -				     struct device_attribute *attr,
> -				     const char *buf, size_t len)
> +static int set_interleave_ways(struct cxl_region *cxlr, int val)
>  {
> -	struct cxl_root_decoder *cxlrd =
> to_cxl_root_decoder(dev->parent);
> +	struct cxl_root_decoder *cxlrd =
> to_cxl_root_decoder(cxlr->dev.parent); struct cxl_decoder *cxld =
> &cxlrd->cxlsd.cxld;
> -	struct cxl_region *cxlr = to_cxl_region(dev);
>  	struct cxl_region_params *p = &cxlr->params;
> -	unsigned int val, save;
> -	int rc;
> +	int save, rc;
>  	u8 iw;
>  
> -	rc = kstrtouint(buf, 0, &val);
> -	if (rc)
> -		return rc;
> -
>  	rc = ways_to_eiw(val, &iw);
>  	if (rc)
>  		return rc;
> @@ -509,25 +501,42 @@ static ssize_t interleave_ways_store(struct
> device *dev, return -EINVAL;
>  	}
>  
> -	rc = down_write_killable(&cxl_region_rwsem);
> -	if (rc)
> -		return rc;
> -	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
> -		rc = -EBUSY;
> -		goto out;
> -	}
> +	lockdep_assert_held_write(&cxl_region_rwsem);
> +	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE)
> +		return -EBUSY;
>  
>  	save = p->interleave_ways;
>  	p->interleave_ways = val;
>  	rc = sysfs_update_group(&cxlr->dev.kobj,
> get_cxl_region_target_group()); if (rc)
>  		p->interleave_ways = save;
> -out:
> +
> +	return rc;
> +}
> +
> +static ssize_t interleave_ways_store(struct device *dev,
> +				     struct device_attribute *attr,
> +				     const char *buf, size_t len)
> +{
> +	struct cxl_region *cxlr = to_cxl_region(dev);
> +	unsigned int val;
> +	int rc;
> +
> +	rc = kstrtouint(buf, 0, &val);
> +	if (rc)
> +		return rc;
> +
> +	rc = down_write_killable(&cxl_region_rwsem);
> +	if (rc)
> +		return rc;
> +
> +	rc = set_interleave_ways(cxlr, val);
>  	up_write(&cxl_region_rwsem);
>  	if (rc)
>  		return rc;
>  	return len;
>  }
> +
>  static DEVICE_ATTR_RW(interleave_ways);
>  
>  static ssize_t interleave_granularity_show(struct device *dev,
> @@ -547,21 +556,14 @@ static ssize_t
> interleave_granularity_show(struct device *dev, return rc;
>  }
>  
> -static ssize_t interleave_granularity_store(struct device *dev,
> -					    struct device_attribute
> *attr,
> -					    const char *buf, size_t
> len) +static int set_interleave_granularity(struct cxl_region *cxlr,
> int val) {
> -	struct cxl_root_decoder *cxlrd =
> to_cxl_root_decoder(dev->parent);
> +	struct cxl_root_decoder *cxlrd =
> to_cxl_root_decoder(cxlr->dev.parent); struct cxl_decoder *cxld =
> &cxlrd->cxlsd.cxld;
> -	struct cxl_region *cxlr = to_cxl_region(dev);
>  	struct cxl_region_params *p = &cxlr->params;
> -	int rc, val;
> +	int rc;
>  	u16 ig;
>  
> -	rc = kstrtoint(buf, 0, &val);
> -	if (rc)
> -		return rc;
> -
>  	rc = granularity_to_eig(val, &ig);
>  	if (rc)
>  		return rc;
> @@ -577,21 +579,36 @@ static ssize_t
> interleave_granularity_store(struct device *dev, if
> (cxld->interleave_ways > 1 && val != cxld->interleave_granularity)
> return -EINVAL; 
> +	lockdep_assert_held_write(&cxl_region_rwsem);
> +	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE)
> +		return -EBUSY;
> +
> +	p->interleave_granularity = val;
> +	return 0;
> +}
> +
> +static ssize_t interleave_granularity_store(struct device *dev,
> +					    struct device_attribute
> *attr,
> +					    const char *buf, size_t
> len) +{
> +	struct cxl_region *cxlr = to_cxl_region(dev);
> +	int rc, val;
> +
> +	rc = kstrtoint(buf, 0, &val);
> +	if (rc)
> +		return rc;
> +
>  	rc = down_write_killable(&cxl_region_rwsem);
>  	if (rc)
>  		return rc;
> -	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
> -		rc = -EBUSY;
> -		goto out;
> -	}
>  
> -	p->interleave_granularity = val;
> -out:
> +	rc = set_interleave_granularity(cxlr, val);
>  	up_write(&cxl_region_rwsem);
>  	if (rc)
>  		return rc;
>  	return len;
>  }
> +
>  static DEVICE_ATTR_RW(interleave_granularity);
>  
>  static ssize_t resource_show(struct device *dev, struct
> device_attribute *attr, @@ -2193,7 +2210,7 @@ static int
> cxl_region_attach(struct cxl_region *cxlr, return 0;
>  }
>  
> -static int cxl_region_detach(struct cxl_endpoint_decoder *cxled)
> +int cxl_region_detach(struct cxl_endpoint_decoder *cxled)
>  {
>  	struct cxl_port *iter, *ep_port = cxled_to_port(cxled);
>  	struct cxl_region *cxlr = cxled->cxld.region;
> @@ -2252,6 +2269,7 @@ static int cxl_region_detach(struct
> cxl_endpoint_decoder *cxled) put_device(&cxlr->dev);
>  	return rc;
>  }
> +EXPORT_SYMBOL_NS_GPL(cxl_region_detach, CXL);
>  
>  void cxl_decoder_kill_region(struct cxl_endpoint_decoder *cxled)
>  {
> @@ -2746,6 +2764,14 @@ cxl_find_region_by_name(struct
> cxl_root_decoder *cxlrd, const char *name) return
> to_cxl_region(region_dev); }
>  
> +static void drop_region(struct cxl_region *cxlr)
> +{
> +	struct cxl_root_decoder *cxlrd =
> to_cxl_root_decoder(cxlr->dev.parent);
> +	struct cxl_port *port = cxlrd_to_port(cxlrd);
> +
> +	devm_release_action(port->uport_dev, unregister_region,
> cxlr); +}
> +
>  static ssize_t delete_region_store(struct device *dev,
>  				   struct device_attribute *attr,
>  				   const char *buf, size_t len)
> @@ -3353,17 +3379,18 @@ static int match_region_by_range(struct
> device *dev, void *data) return rc;
>  }
>  
> -/* Establish an empty region covering the given HPA range */
> -static struct cxl_region *construct_region(struct cxl_root_decoder
> *cxlrd,
> -					   struct
> cxl_endpoint_decoder *cxled) +static void construct_region_end(void)
> +{
> +	up_write(&cxl_region_rwsem);
> +}
> +
> +static struct cxl_region *construct_region_begin(struct
> cxl_root_decoder *cxlrd,
> +						 struct
> cxl_endpoint_decoder *cxled) {
>  	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
> -	struct cxl_port *port = cxlrd_to_port(cxlrd);
> -	struct range *hpa = &cxled->cxld.hpa_range;
>  	struct cxl_region_params *p;
>  	struct cxl_region *cxlr;
> -	struct resource *res;
> -	int rc;
> +	int err = 0;
>  
>  	do {
>  		cxlr = __create_region(cxlrd, cxled->mode,
> @@ -3372,8 +3399,7 @@ static struct cxl_region
> *construct_region(struct cxl_root_decoder *cxlrd, } while
> (IS_ERR(cxlr) && PTR_ERR(cxlr) == -EBUSY); 
>  	if (IS_ERR(cxlr)) {
> -		dev_err(cxlmd->dev.parent,
> -			"%s:%s: %s failed assign region: %ld\n",
> +		dev_err(cxlmd->dev.parent,"%s:%s: %s failed assign
> region: %ld\n", dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev),
>  			__func__, PTR_ERR(cxlr));
>  		return cxlr;
> @@ -3383,23 +3409,47 @@ static struct cxl_region
> *construct_region(struct cxl_root_decoder *cxlrd, p = &cxlr->params;
>  	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
>  		dev_err(cxlmd->dev.parent,
> -			"%s:%s: %s autodiscovery interrupted\n",
> +			"%s:%s: %s region setup interrupted\n",
>  			dev_name(&cxlmd->dev),
> dev_name(&cxled->cxld.dev), __func__);
> -		rc = -EBUSY;
> -		goto err;
> +		err = -EBUSY;
> +	}
> +
> +	if (err) {
> +		construct_region_end();
> +		drop_region(cxlr);
> +		return ERR_PTR(err);
>  	}
> +	return cxlr;
> +}
> +
> +
> +/* Establish an empty region covering the given HPA range */
> +static struct cxl_region *construct_region(struct cxl_root_decoder
> *cxlrd,
> +					   struct
> cxl_endpoint_decoder *cxled) +{
> +	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
> +	struct range *hpa = &cxled->cxld.hpa_range;
> +	struct cxl_region_params *p;
> +	struct cxl_region *cxlr;
> +	struct resource *res;
> +	int rc;
> +
> +	cxlr = construct_region_begin(cxlrd, cxled);
> +	if (IS_ERR(cxlr))
> +		return cxlr;
>  
>  	set_bit(CXL_REGION_F_AUTO, &cxlr->flags);
>  
>  	res = kmalloc(sizeof(*res), GFP_KERNEL);
>  	if (!res) {
>  		rc = -ENOMEM;
> -		goto err;
> +		goto out;
>  	}
>  
>  	*res = DEFINE_RES_MEM_NAMED(hpa->start, range_len(hpa),
>  				    dev_name(&cxlr->dev));
> +
>  	rc = insert_resource(cxlrd->res, res);
>  	if (rc) {
>  		/*
> @@ -3412,6 +3462,7 @@ static struct cxl_region
> *construct_region(struct cxl_root_decoder *cxlrd, __func__,
> dev_name(&cxlr->dev)); }
>  
> +	p = &cxlr->params;
>  	p->res = res;
>  	p->interleave_ways = cxled->cxld.interleave_ways;
>  	p->interleave_granularity =
> cxled->cxld.interleave_granularity; @@ -3419,24 +3470,124 @@ static
> struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd, 
>  	rc = sysfs_update_group(&cxlr->dev.kobj,
> get_cxl_region_target_group()); if (rc)
> -		goto err;
> +		goto out;
>  
>  	dev_dbg(cxlmd->dev.parent, "%s:%s: %s %s res: %pr iw: %d ig:
> %d\n",
> -		dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev),
> __func__,
> -		dev_name(&cxlr->dev), p->res, p->interleave_ways,
> -		p->interleave_granularity);
> +				   dev_name(&cxlmd->dev),
> +				   dev_name(&cxled->cxld.dev),
> __func__,
> +				   dev_name(&cxlr->dev), p->res,
> +				   p->interleave_ways,
> +				   p->interleave_granularity);
>  
>  	/* ...to match put_device() in cxl_add_to_region() */
>  	get_device(&cxlr->dev);
>  	up_write(&cxl_region_rwsem);
> +out:
> +	construct_region_end();
> +	if (rc) {
> +		drop_region(cxlr);
> +		return ERR_PTR(rc);
> +	}
> +	return cxlr;
> +}
> +
> +static struct cxl_region *
> +__construct_new_region(struct cxl_root_decoder *cxlrd,
> +		       struct cxl_endpoint_decoder **cxled, int ways)
> +{
> +	struct cxl_decoder *cxld = &cxlrd->cxlsd.cxld;
> +	struct cxl_region_params *p;
> +	resource_size_t size = 0;
> +	struct cxl_region *cxlr;
> +	int rc, i;
> +
> +	/* If interleaving is not supported, why does ways need to
> be at least 1? */
> +	if (ways < 1)
> +		return ERR_PTR(-EINVAL);
> +
> +	cxlr = construct_region_begin(cxlrd, cxled[0]);
> +	if (IS_ERR(cxlr))
> +		return cxlr;
> +
> +	rc = set_interleave_ways(cxlr, ways);
> +	if (rc)
> +		goto out;
> +
> +	rc = set_interleave_granularity(cxlr,
> cxld->interleave_granularity);
> +	if (rc)
> +		goto out;
> +
> +	down_read(&cxl_dpa_rwsem);
> +	for (i = 0; i < ways; i++) {
> +		if (!cxled[i]->dpa_res)
> +			break;
> +		size += resource_size(cxled[i]->dpa_res);
> +	}
> +	up_read(&cxl_dpa_rwsem);
> +
> +	if (i < ways)
> +		goto out;
> +
> +	rc = alloc_hpa(cxlr, size);
> +	if (rc)
> +		goto out;
> +
> +	down_read(&cxl_dpa_rwsem);
> +	for (i = 0; i < ways; i++) {
> +		rc = cxl_region_attach(cxlr, cxled[i], i);
> +		if (rc)
> +			break;
> +	}
> +	up_read(&cxl_dpa_rwsem);
> +
> +	if (rc)
> +		goto out;
> +
> +	rc = cxl_region_decode_commit(cxlr);
> +	if (rc)
> +		goto out;
>  
> +	p = &cxlr->params;
> +	p->state = CXL_CONFIG_COMMIT;
> +out:
> +	construct_region_end();
> +	if (rc) {
> +		drop_region(cxlr);
> +		return ERR_PTR(rc);
> +	}
>  	return cxlr;
> +}
>  
> -err:
> -	up_write(&cxl_region_rwsem);
> -	devm_release_action(port->uport_dev, unregister_region,
> cxlr);
> -	return ERR_PTR(rc);
> +/**
> + * cxl_create_region - Establish a region given an array of endpoint
> decoders
> + * @cxlrd: root decoder to allocate HPA
> + * @cxled: array of endpoint decoders with reserved DPA capacity
> + * @ways: size of @cxled array
> + *
> + * Returns a fully formed region in the commit state and attached to
> the
> + * cxl_region driver.
> + */
> +struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
> +				     struct cxl_endpoint_decoder
> **cxled,
> +				     int ways)
> +{
> +	struct cxl_region *cxlr;
> +
> +	mutex_lock(&cxlrd->range_lock);
> +	cxlr = __construct_new_region(cxlrd, cxled, ways);
> +	mutex_unlock(&cxlrd->range_lock);
> +
> +	if (IS_ERR(cxlr))
> +		return cxlr;
> +
> +	if (device_attach(&cxlr->dev) <= 0) {
> +		dev_err(&cxlr->dev, "failed to create region\n");
> +		drop_region(cxlr);
> +		return ERR_PTR(-ENODEV);
> +	}
> +	return cxlr;
>  }
> +EXPORT_SYMBOL_NS_GPL(cxl_create_region, CXL);
>  
>  int cxl_add_to_region(struct cxl_port *root, struct
> cxl_endpoint_decoder *cxled) {
> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
> index d3fdd2c1e066..1bf3b74ff959 100644
> --- a/drivers/cxl/cxl.h
> +++ b/drivers/cxl/cxl.h
> @@ -905,6 +905,7 @@ void cxl_coordinates_combine(struct
> access_coordinate *out, 
>  bool cxl_endpoint_decoder_reset_detected(struct cxl_port *port);
>  
> +int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
>  /*
>   * Unit test builds overrides this to __weak, find the 'strong'
> version
>   * of these symbols in tools/testing/cxl/.
> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
> index a0e0795ec064..377bb3cd2d47 100644
> --- a/drivers/cxl/cxlmem.h
> +++ b/drivers/cxl/cxlmem.h
> @@ -881,5 +881,7 @@ struct cxl_root_decoder
> *cxl_get_hpa_freespace(struct cxl_port *endpoint, int interleave_ways,
>  					       unsigned long flags,
>  					       resource_size_t *max);
> -
> +struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
> +				     struct cxl_endpoint_decoder
> **cxled,
> +				     int ways);
>  #endif /* __CXL_MEM_H__ */
> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c
> b/drivers/net/ethernet/sfc/efx_cxl.c index b5626d724b52..4012e3faa298
> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c
> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> @@ -92,8 +92,18 @@ void efx_cxl_init(struct efx_nic *efx)
>  
>  	cxl->cxled = cxl_request_dpa(cxl->endpoint, true,
> EFX_CTPIO_BUFFER_SIZE, EFX_CTPIO_BUFFER_SIZE);
> -	if (IS_ERR(cxl->cxled))
> +	if (IS_ERR(cxl->cxled)) {
>  		pci_info(pci_dev, "CXL accel request DPA failed");
> +		return;
> +	}
> +
> +	cxl->efx_region = cxl_create_region(cxl->cxlrd, &cxl->cxled,
> 1);
> +	if (!cxl->efx_region) {

if (IS_ERR(cxl->efx_region))

> +		pci_info(pci_dev, "CXL accel create region failed");
> +		cxl_dpa_free(cxl->cxled);
> +		return;
> +	}
> +
>  out:
>  	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>  }
> @@ -102,6 +112,9 @@ void efx_cxl_exit(struct efx_nic *efx)
>  {
>  	struct efx_cxl *cxl = efx->cxl;
>  
> +	if (cxl->efx_region)
> +		cxl_region_detach(cxl->cxled);
> +
>  	if (cxl->cxled)
>  		cxl_dpa_free(cxl->cxled);
>   
> diff --git a/include/linux/cxl_accel_mem.h
> b/include/linux/cxl_accel_mem.h index d4ecb5bb4fc8..a5f9ffc24509
> 100644 --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -48,4 +48,9 @@ struct cxl_endpoint_decoder *cxl_request_dpa(struct
> cxl_port *endpoint, resource_size_t min,
>  					     resource_size_t max);
>  int cxl_dpa_free(struct cxl_endpoint_decoder *cxled);
> +struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
> +				     struct cxl_endpoint_decoder
> **cxled,
> +				     int ways);
> +
> +int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
>  #endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2066.outbound.protection.outlook.com [40.107.223.66])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 03A7220DF4;
	Fri, 23 Aug 2024 09:31:12 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.66
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724405474; cv=fail; b=q/MF3/G1Yo0MHXJNeHkKZ+r92x4OBCQ4+AJeSHmblIHrP+uCPtYl6qSb5ycmY0SFxqL5pdZE+kK712o0yUiw829tZttG5N5Ar4OS7fGd0uTF02WvnI3Rr9XK3M527G4NZzt2S0rSPYZbqMRx1hX+WP+IOWO0+AmHugs+K/ROTOI=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724405474; c=relaxed/simple;
	bh=JW227/nCcBU6WtcMe4InjFOwXY56H3XxF8HWQGLqmgc=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=bvr31aIzTaNeca7+apsYJmYghZedJXPUNbt7hx1ZUkWcj2YQg+UQqbgps25th+frSsb69zth4fMV77v2PJQSntaj2xWi+a0QKdTyqp5geZAn593lbh/1WxNlTObO5WdqWHNQBlPWRLsRDpdGb/UQE/uWPzwnmc32DYmyckrvTIk=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=vGHKNUtb; arc=fail smtp.client-ip=40.107.223.66
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="vGHKNUtb"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=S5SnhXvOnLZ3zlNY6f91eJJc4Iy4418Fddx3pA0E8iulrOUcA+Z90dIScAsVcrLCwwQvrngDemeeY7ojNcOuxh0peZ0KcZhS0zuEmB5OaOqpLW0dIEpE80zzGUxKvA/vjQB9hMteFGwvse26If5qoHwNbCjX47tkhXGbvjQkKfYhNFMHZaaDu6EUHGNemuopGWOyF5zVsy9t17FDJm9uIXMuiT9pNVwn3gR24cO+UmzeAuqiNpssUUmzwKuU6JdcAj94Gh4rAsHakdngcjpAO9cAQ5K9ECAemll5HTXa6RXR/jUF1rNRMrzmlPX1RrVJPTpB65Vm4LqElEWLL016IQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=4xovwCXOuNM1zR1wnb0VZcqQFrHTYfMVYWLVl7u2AZk=;
 b=ilgc45GlOFe1EltNlb9Wx2o5wNpqJYnWl+uf2b+Y0ei6tzQnwxIFRZ6l1sPQGoJ43WIgf4amYUXL9DV7w26kRg5+vfRSy7zfojakSaNQ+Q/Db7FMYboXzbpy9cpX7JWyeTuUoBz4Qe6CC7dnddGYbRuXGEmAwhjY5AKY14uQIyUkxZtgMN7C7U/hnAPl/8/XYdpExhZ4iA6Iv6gdO+4WoJ9ZLXexTE5ZvHwpITAedI5EyC0+18aOFCRmRHRhcvCTqeqsTVbv68F+bAZvp6tTqMmhK9yUDl4bQ5lnip85HjucO+71i24TFntf0vrOhKaKjAjzqbKziJYs1SWMjLK33A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=4xovwCXOuNM1zR1wnb0VZcqQFrHTYfMVYWLVl7u2AZk=;
 b=vGHKNUtbLwpFHNGQFzHw3v5YaOQ/SkTW01JayGOXYUZoZqutkYM7+8HDMdZKO2zRCFToWCp/3sa/SwxpU/B6kF3Yu5H6Gve1vL2NuSQX7ymLwaCQColEdE59VeriMCEjFOgzyPLQosHIg63kt1oeWaVj/WQDbmpBc9OXH+w2w3M=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH7PR12MB7966.namprd12.prod.outlook.com (2603:10b6:510:274::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.19; Fri, 23 Aug
 2024 09:31:08 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7897.014; Fri, 23 Aug 2024
 09:31:08 +0000
Message-ID: <3165b1e7-c66f-163b-5101-34293453cc32@amd.com>
Date: Fri, 23 Aug 2024 10:30:14 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 03/15] cxl: add function for type2 resource request
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com, targupta@nvidia.com,
 zhiwang@kernel.org
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-4-alejandro.lucero-palau@amd.com>
 <20240822160730.00002102.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240822160730.00002102.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0204.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:318::14) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH7PR12MB7966:EE_
X-MS-Office365-Filtering-Correlation-Id: f92574a0-9fe2-4b89-3b7c-08dcc35651a9
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|366016|7416014|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?aWh0Yld6ZFY0cWRKOWc4YURTbHBQYTVNY2pIT0FZVkg5UDlyNUNxdHpNN2py?=
 =?utf-8?B?c0NLN2lYWThKNG52clNHY25hZzZxVmY5bGgveVd3Z1k3V2lTd1oxazdwTjBP?=
 =?utf-8?B?Q1RDZy96VmlFOWtoVGtOMDRCUWd4SVBDS2JsdzZmeFl3QWF0cFY0RFJBRXR3?=
 =?utf-8?B?Tll2anJOSno2WEhHRlZ4V1h3RlJFQWxWV0svbUlmSFMrT1h5RC9OanFqckJJ?=
 =?utf-8?B?bzRhR2pzdmY4eml2SkpDNHE3dll4cXcyMDdMd1lNNGlrV1lkZFZGZHNkSnRj?=
 =?utf-8?B?bHBWRzlkeTc2VHdHZDRuUFRwYzRMSWNhbFpGZTQ4cENmelk2VElWdDVKOFBT?=
 =?utf-8?B?dVUwaXpCUU5hbWpSQUVENWJPS3Y4M1dYOTUyYnY2VWM2Y3BnaDc5QW5uOWxy?=
 =?utf-8?B?RStZRVJPRzIxaEZ6T3V0ZUpmcGFBTzNSaDMxcjhLSGhGUGlKRENiZkVxZ0Y4?=
 =?utf-8?B?RGt1bXVQTk9zODVDTWlGMVROUTh1a2RqR29SZHNGN3llU3hPdTRPSVc2WEFu?=
 =?utf-8?B?WW94ZCtLdm1PSE03Yk5LbkY3MjhMK2Q3bExpY3dONW56VE44NmVYNjB6UGVR?=
 =?utf-8?B?ekVVRFYyaE1mcDcrOC8ycU0yTGd6RkRTMVdPb1BlVWw3YlhEZUMzRGFmOTRw?=
 =?utf-8?B?VC9ocWkrUmhpN25nVWdZNlV4YXNtRGJEZStZbVF4bkk1L3cwNUFVaCtTTG9P?=
 =?utf-8?B?Q0J0ME1GamV5MjZ1V3VxUUxJM2lVWlExaUdiOEFIT2hFdjFlUlJsdjFrRGgw?=
 =?utf-8?B?RTNVNVRMRmR6VnBWZ2ZuVmFlN1k4N3pIYkpvQWhrOEwvei9MTnYwaUsvZ25F?=
 =?utf-8?B?d0dXTDB2VXBwNTAxcUlmT1ovR2VSZ1FjMkVGQXJpRjhlUmkwRzdlbHMxR2FU?=
 =?utf-8?B?ZHRkZ0RVSkE3Q28wZlZMM29zSXhwTVpUTmJEZm9US0hoMUwzRmNnQ1NHZW9t?=
 =?utf-8?B?b0lGQ1BqV3Z2aGpNeFJCOGo3RlBpTDJDM0dqY1RGTG5xS29FZkQ1cnlpOWpK?=
 =?utf-8?B?V1ZVZENualNXZGkySEFzb2FsS0RnWitIcHgxc1hjS1RXQlZnZHArb0NQbmhh?=
 =?utf-8?B?aUNxaEtYcFdTd1JqVzNwdzAyOVdSN21tRG1iejE2dkR2b3ova0d3aW5odkl2?=
 =?utf-8?B?S1NTUTdkTm5SeHlKd1BBd0RLZ3p6d1ZWNVhCNVM3aktkUEI2a1NnYmlPMm1m?=
 =?utf-8?B?RnBueGU0alJ3Q0N2ODl0dGpQQk1BRHpsWjJGTy8wVWM1bDVaSkN2SFN6dDVT?=
 =?utf-8?B?UW93cnRXQkptV3RmdWpiRUNJbHVVSWE4RFZZYmQ3Y1Z0SUFidEp6dE5VZ21I?=
 =?utf-8?B?SW9nQTNoN3htSlRBcDVJT1BvSTgraGdISGtNakVwWEtlcGdTSEo5b2puMEsz?=
 =?utf-8?B?WHpuVkZmQ2Z4d3RSQlFacGxuenBDaUp5WjUwM3dOL0tTVTBaSEVzOWVWbjNV?=
 =?utf-8?B?NDR5K0tOVjJIdjZEOGozaFRKSDZxSDVhVkhrajVzbEdGdnNQdmZYeFF2b212?=
 =?utf-8?B?Wm9vTEsyQ1psM2psNTRqU0psemhXb2hWR2NwTUpUS2RnL1pHa1FDbXp4WVQr?=
 =?utf-8?B?ekZBUmh2TmJlaHErZXpKS214V1RoMis2UDY1K0ZzeU5keDM4WWNaUXdxdkxO?=
 =?utf-8?B?dlVhVmlYdDlNYXAwc0pyTThXeVI5K0NSUlIxVit6dDRFRWRYNzFSbHZtVm5M?=
 =?utf-8?B?V0w3Z2lGVVllZ3YvZUpaYkRic1V3SVA3ckJuRmxtWWdkNVJwNi9CZXMrdStQ?=
 =?utf-8?B?V3dzNXpTWXBRdllJMUpiMlNsRHpSaEhvWjkvQVB1M1NSM0ZqY1o0alc3OVd2?=
 =?utf-8?B?a0NwQmNPZXVkZ21Oc3h6Zz09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(366016)(7416014)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?QkxnRGl0cy8rT2tZa29jN2xYYVh4a25leVY3OE5uM1pmVld6YTBlMWExTnVr?=
 =?utf-8?B?azRnaDFnRkhVS2lQNEpDNHgvWWs5S2h2S1pJWTZiaklWVDBEaXdDc3Uxa0Jl?=
 =?utf-8?B?U3FoT3BXd09EbUhuaWh4WTN6Qmp5WDB2VVc4NEVlVUplU3Y1Z3p6NjA3TmlQ?=
 =?utf-8?B?YXcrT2ZuV2d3SVBhNXI3aktWUkZ4VWZCYzE3eldtTC9Rem83ekxIMHd4c3BW?=
 =?utf-8?B?STR3UnVPUndaa0J1cVpVSXZuR0w4VVZZclRsUndZeUVMeFNaL0U1bndqN0Rw?=
 =?utf-8?B?Qkg2SzU3SFZaRWtWNHhyanByQ3IxME11aElVbzM4RlQ2NGhVeE95aGQvR2hR?=
 =?utf-8?B?Ny8wcHFPRmpjWWRRdkJYa0Nxa2hud0U5QVhHcnBZdmF3QTRuY1RkRGdSQkxx?=
 =?utf-8?B?SFdQNDRoMklHL1YwZlp1bHN0YngrRTBCOS9LUnh6VjBsSDVISFYvei9kdndW?=
 =?utf-8?B?OXgreldIR3d4cDVwT2M0YjRCOTAvMVIwN2gxd1JIR0pJMThsdEFEK1BnbFRD?=
 =?utf-8?B?M0VzMmhmdkpjWElyU3RuaHFRY1BhVGlZNFRNM1dueHZoVjVVYm5VelhPMkVh?=
 =?utf-8?B?emhNMEZReklKU3o5VTF3ZTBLRHdDbDJHZzhhc05DWW5Ed2c4V2VKRHZ3Q0Jz?=
 =?utf-8?B?STJyVFZFWDZpS0V5Q0c3ZmEwVEsybjExWWNjV3I0ejNSUkpoSE1waWRUdWNB?=
 =?utf-8?B?dHJ3a0JrMEFjSWNRWVNhSjNuYnVVQ24xRm5Xemp4ZTg0czlqdzUwdERSaWkx?=
 =?utf-8?B?Vnc5WDhVckllRTlya29KYUNPRU53cnVxVDVjMVRQdEdZN0NSaEtHcWQrbjNt?=
 =?utf-8?B?OVJIc2lyK3ladVRNc0ZKZm5mVTFCSmg2SWs1UkxGWXlFdTg5eE5aQVlqZ2xs?=
 =?utf-8?B?cDdMaDJ1SWpnTUd0d2FTUnMyN1hLb2RDM2pSa1VzRWtYcUxYWFhvVFhLb3c1?=
 =?utf-8?B?WE41K3BSa21yNHVRV0I1UW14YmVobWFVb0tFS2c3Umd5SWh6cGpVUGJ6WmdM?=
 =?utf-8?B?cE1qZnJQMWMvNWVCdDI2elpqK2lIUERsN0NUOUova2FPNEIxdGw4WjVlRzMz?=
 =?utf-8?B?a1N4UDJacVdBQXVINm9raGcrMjJrOFBLMER2TFpTMzhYa1d5VGJhbkxHT2VL?=
 =?utf-8?B?cml2T3RicXpGWTlMYjcwdnRiZ1AraGF6WGkvZ0dYeEs1bGVXdkNrWFBQSnQ4?=
 =?utf-8?B?SUhhQ1JxWExqRE5vcTBJZGs5bklhNXNXZmZ5MldQMnZtcWxRaE5BUThaREhH?=
 =?utf-8?B?d0Z2SGZFVWdWa2V6bEh6NnI2Nkh6Z1J1bGx6S3VyMmJ2a0ZISkdMVWI2TDdV?=
 =?utf-8?B?bGN0M3NLZkxFNTE1Tm5jY3JNZjFNcmhwckdISVlJZkhaOWFxcFB3a000VTBt?=
 =?utf-8?B?eGtNeUd5MjFmd2t6UlJtYlkvT2JISXdseWJTYjJmZ2Y3V1ExTWJxR3pPNE5o?=
 =?utf-8?B?YkVvYzV2cW5PMDhqOG9maFJCWXc5N01aR3JzaTd0SHhITE5FYkwyc0xaM0hR?=
 =?utf-8?B?bXpZSEExbGRyVU5ha2ZBT0E1Y3hQWElHRU8wZFl0ZTkvTitYOStGbTFPMGJL?=
 =?utf-8?B?UWs1RDg0R09mUUoxd2s5QVBGd01xQkpranowVFVHQ0hmUFRGWWlaZEU3eEVN?=
 =?utf-8?B?c2RMNi8ydUM5MFlBNE81TEZUdWs4M1RYWGJ0SU40a0pQK3JIOG5NYlVleGVN?=
 =?utf-8?B?WktqSUJLVHUyenFvL2E2MHhUZmNXb1dtc21tZE80RitqNXRQM0ErQXdLQU5v?=
 =?utf-8?B?aWpIR1BXVTMzQVRQSjlpU3BsTllUUEkxTFd2cmVuR3pYWVhKN2JoNDJCdUha?=
 =?utf-8?B?RFlSUGcxTjJWOTNPU1dKcUFaeGtSNlBlbGF2a3J4T2hBSjFwQTZoRVhKSTZz?=
 =?utf-8?B?TzdkckxuYmlPNlpSM2poVjVBTHUzeG5JamwzSXZTbDQ4a2drNjh5bTlDcldJ?=
 =?utf-8?B?V2tWUWdxLzN0cEd0bldUeDRnTE5uQ2NwLzlEMXRJRzNKZjdqdUU2ckxheGd5?=
 =?utf-8?B?SFJLdVplRzNva3pzMkNjaWlZOVcyZzBPZlpzMEN0elJ5Uy9tdktKSExYaWdH?=
 =?utf-8?B?ZXpsL1MxRHV0eFBYa3NQQ2M2cTYrVjF3MnU5ZFhnNGJZb1RPUlQrTS8xTlVp?=
 =?utf-8?Q?Zf/juE2+7AkbwPRBC/M4pYAu5?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: f92574a0-9fe2-4b89-3b7c-08dcc35651a9
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 23 Aug 2024 09:31:08.7049
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: E50ZosfW7keCj7U9/jpsRKfa6jAJFayQI55vLX9I6zzvVniIgsP7zvbVYlxFMo73XUdlqjKmOvRAGlQ3Jq1cvA==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB7966


On 8/22/24 14:07, Zhi Wang wrote:
> On Mon, 15 Jul 2024 18:28:23 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Create a new function for a type2 device requesting a resource
>> passing the opaque struct to work with.
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> ---
>>   drivers/cxl/core/memdev.c          | 13 +++++++++++++
>>   drivers/net/ethernet/sfc/efx_cxl.c |  7 ++++++-
>>   include/linux/cxl_accel_mem.h      |  1 +
>>   3 files changed, 20 insertions(+), 1 deletion(-)
>>
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index 61b5d35b49e7..04c3a0f8bc2e 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -744,6 +744,19 @@ void cxl_accel_set_resource(struct cxl_dev_state
>> *cxlds, struct resource res, }
>>   EXPORT_SYMBOL_NS_GPL(cxl_accel_set_resource, CXL);
>>   
>> +int cxl_accel_request_resource(struct cxl_dev_state *cxlds, bool
>> is_ram) +{
>> +	int rc;
>> +
>> +	if (is_ram)
>> +		rc = request_resource(&cxlds->dpa_res,
>> &cxlds->ram_res);
>> +	else
>> +		rc = request_resource(&cxlds->dpa_res,
>> &cxlds->pmem_res); +
>> +	return rc;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_accel_request_resource, CXL);
>> +
> Hi Alejandro:
>
> Since we only have cxl_accel_request_resource() here, how is
> the resource going to be released? e.g. in an error handling path.
>
> Thanks,
> Zhi.
>

Right. I will use devm_request_resource in v3 using cxlds->dev and the 
owner.


Thanks


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-CO1-obe.outbound.protection.outlook.com (mail-co1nam11on2088.outbound.protection.outlook.com [40.107.220.88])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id CD1A120DF4;
	Fri, 23 Aug 2024 09:32:17 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.220.88
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724405539; cv=fail; b=qeTAejYEoh9Bkr5NTksmw/LijlLAUx+hZAnX3HbpNphx2+tElQ2Gm8760w0cojK1eyl6wk7xYYCHCxoFO0YXggoVoZ9teQYk30NDxzy8yiegxj0F/X/HaPuD/kJpYGPAXt1Ky4yfjvpiFAyHJzOG0atpQt2z39s1lzO79wGM0yc=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724405539; c=relaxed/simple;
	bh=puLksp6KTwzghydy+QavdoHx85OENfj6r4ARaNTHylQ=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=DHqWxz0DYgI4iDaFsb9ll5wkSTsLtqwuSXCvOK35UE0UTeI6bbTWBFWngIjfMXPoXnXRUkrq1/g+x61DBBY/+9HBeLvqoW74Hbl8FwZC20SX9lesbjsybBRc/GOGXw+Wp4Y+O1BpzJaCobQxc+N8MtnJeiLxfWn5S2Mo+fcDTsE=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=T9qYlQfb; arc=fail smtp.client-ip=40.107.220.88
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="T9qYlQfb"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=dpu9AWsWBiw/PO40FdTP6iJZ3f73z+NW9/Xuu9Xgtm1YK+/vJpMkEigmtrULcyTBe9AdX6GQmRukiqyZP2zlLUF95FmJgfcwpJqZPdU6Hlqh3n/MyiepFr9OwgD9lFtIhuFNo3Jje2GC85vebZ5wlA/G2r2OIQHbLF25+XzTN+CiMqmfuVUFPXZhdAFZOkIOkW3lpGlQNVt5glsLpvhwJc9islzRGtV7vj8BgobQeMdiNH63m9k7kpHAaUyYSMKEyuCrve78JwHDkiotFgFGRrNJumQbG1pOgEEhE7PcdrURczl48lLRarDT778alLh8d3ydGI9WOFb1JPTeNiPx7A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=BbREYIddyPIsVD7V/hy8S3WreqTeFn6Pan/7VBeJqG8=;
 b=UmTp1AqdgZiqVgnJEeTQ7O9rkvkjhE6qFs/XMHdszMG0HpYtVrFXPjXK4I09DXM2HVeTCxqWBKvTlvKrtKzTVWzAkP8Jm9mliAnmuAkxRkl7eZwHj5DbqWUfOSea+COVXYsox8U3TG7kZR74Ykiny//OTj9Huj4DX1tPBf9JeDH9TapZfb16L1sHWLkOQ0JP4KybPvTKx6KPd5at56hHScZvZ5fG446LX/EIuuja5v9xQZKoPwNZnWKeGbAYIGzLCYiD/AxA4DlK4I+tbYG0NLhIhBVSWx+Pcb2r7oyKC7R6qQQlx/XgZaAmgk2aVTqrjeodNvk9rpdsKVr+h3oXGQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=BbREYIddyPIsVD7V/hy8S3WreqTeFn6Pan/7VBeJqG8=;
 b=T9qYlQfbyZyYW1MQyoXHUBJM0W1NTfb8Dkgq2DHKmO3n3B5GIRrxEGiMtVdAMSuNK/yKjuS7aks9dBx0zM2rv8JyVVemT3rwiYcaVsDH0yA2u5Vhi1/IsjW3fgsSfB7p0QNOINAUtGm+bU1YIwKDlE9vIkeIRNAb1YdGNvoI1FA=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH7PR12MB7966.namprd12.prod.outlook.com (2603:10b6:510:274::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.19; Fri, 23 Aug
 2024 09:32:14 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7897.014; Fri, 23 Aug 2024
 09:32:14 +0000
Message-ID: <17e5cf38-39f2-4136-fe2e-6936d8f45633@amd.com>
Date: Fri, 23 Aug 2024 10:31:20 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 12/15] cxl: allow region creation by type2 drivers
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com, targupta@nvidia.com,
 zhiwang@kernel.org
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-13-alejandro.lucero-palau@amd.com>
 <20240822161226.00001736.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240822161226.00001736.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0207.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:318::20) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH7PR12MB7966:EE_
X-MS-Office365-Filtering-Correlation-Id: 3e9b9bf8-1313-4cab-8c9f-08dcc3567900
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|1800799024|366016|7416014|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?SjAvS2U4dEk4cEp0d0ZzdkZyYkY0YkFyK3JtazZjSXljVnFDZ09PaVdFdHJX?=
 =?utf-8?B?K2FhdmJrNEhyaEZjc2UxaFE3SWtRYytDK2RCb1pvTmR5c2JmaTFML2Y1QnVX?=
 =?utf-8?B?bHIxT1ZpbHd1eGNNMStVWC8yUFd3K0tGSXA0aHc3QXY2cmRwS2VuZEtteVpT?=
 =?utf-8?B?cUVwMnR2cnZwcDNvMUNFVTlpbzJrTUsvcGE0NksrRTBWMFY0UHZ1eFlUajAv?=
 =?utf-8?B?bi92cUJuN2Q3WmZ0a21UazF6OHd1RWZBbHV4eWNreTlLbjlrWjFPam4vNGdG?=
 =?utf-8?B?bk1uaHdHMGNiM2JDVEVUMHdpOUZRWGk1eW1ma0NGdzYyTmwxejVxZUxBYzF6?=
 =?utf-8?B?TXg2R3l3OURDOHpyTHJQT2w2OTY3R1d1MGRVN1VERElwNWp3TVh2Rk9xeDJo?=
 =?utf-8?B?dk9OeGRaU3QxNG10OVQ1aUZ5UHdwek9HY0kwZWFBTDIzeEpIVDh0dTdSWjcy?=
 =?utf-8?B?NmxhT1RjaHNOc2VKNFBaODM0MzI1U093RDE1K1Roc3BCUEhBUUV5cm1sRWxJ?=
 =?utf-8?B?aXdvNHE4bXNDVUtGdjUrdms3Y212ZXRGT29Wdk9wa3VLc1hNY1U1SktDU0p4?=
 =?utf-8?B?SHJtamZzRzhJcXg2Q01FS2plYmR2WFNHaklCcGhNTytpR2tBZjlOZjRXMys3?=
 =?utf-8?B?RlVjODN2WXRRZjdycDkxS1J6ajZCUHF6ZExrUlk0WmtjT1RVSi9kYlZLUFZo?=
 =?utf-8?B?QkdRZVoyOVhidGhCMlpmUWVrRi9ULzB0RWlLbFBUalJoc0JReW4xc3JKVVpy?=
 =?utf-8?B?THowZk9GdHZJY2lQbFYwRDlwVi9lWGs2NU80Z1J0U3YzSVI1VEdlR2hocmlt?=
 =?utf-8?B?WVdReG9MVVAzdkRhbGt6a1hnRFg1aG0vOE44bVFTN1pvSHhWL0p0aFpmSmdu?=
 =?utf-8?B?SUVzbHF5TVNRNGl4NEJWNGk0RWpHN0hNUzgzQ05nSzRmSFZNZE9sMDQ4ZHBN?=
 =?utf-8?B?L3plZUEzTjJUKzlDb0ttVGtGdlFIR0t0K29rZTZYRzlVcTVSZ09xVGlwa1Yy?=
 =?utf-8?B?dU9MSnl2aU9VMVR3ZW8xYjQ2Z1NyMm50ZFZGU1dmeUNvdy9za2VjUWs2QnhH?=
 =?utf-8?B?cjRlRFBmd2tvdkRKZnVGSU92YnNoQUU0Q0h0NmZDUkhhNUFGVDA3T0FUUkdk?=
 =?utf-8?B?WUJXclNYUFhOS05Yckl2YkFwYVh1ODZjdVZPOVdKNktVR1lsWVVaaTZJOTVa?=
 =?utf-8?B?aDRTaEJGTjRRR3lyL3lVK1l1TnNLMVBHZWxpZG41Q3hDeUpJQnFJaTg0cmVv?=
 =?utf-8?B?VE9qTWZoWUVHMVl1SU91cDNyWEhqcW50U2lJd0daWTA3ZmJxZmVWM0Zmcy95?=
 =?utf-8?B?ZE85SXJOZzgxakN5KzB2bGNxQ0hsSDdRYmE0RUFvVTQvZ2VBRzVBRE9Jd2kv?=
 =?utf-8?B?TmRVK0xFWE4xUmVzSElvVkxjblp5OFpLakRteGFPejZVZjJnTzUwckJUR1dv?=
 =?utf-8?B?VFhRcmZLa0FGTVZiNGdzdkVTOFljSVpjcUtPZXBzUjNPbjhUaTgzVm1aeVQ0?=
 =?utf-8?B?c2c4Vi9SQm5Beml0d3NQRkYrcHVMT3huZmJycWIvYWVZblcrNVE4T25RTno2?=
 =?utf-8?B?UE1ya2NpREdsZGppb2Jnd1c2dlphYXVHZEVKS3o2RUs0UHFhRXF4ZzBBYUJj?=
 =?utf-8?B?YzZhQ2NBMUNCWmZZYy9jZHJMUEdWQmhkRi9RRUdtbFJqNTRvN1UrZXhMaU9a?=
 =?utf-8?B?UHhQN0NoWlE0VkJlSmRmdjhGaGIzbS9DSXFpbktRUmR0bTRkTzNOcThmTTMr?=
 =?utf-8?Q?yTV9wYesCKHM5qLfIY=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(1800799024)(366016)(7416014)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?VXNXYXdFUmxSZnlsdFhnV2poekc2UWlSdmFaUERGT3hDejJpUnR1ZVpJbW52?=
 =?utf-8?B?VkhpU0RxbmlDcUU4YTNwb2F2RzIrRng1OXY4M2pma0RSbnZUbnIvQkoweVJX?=
 =?utf-8?B?STBSNWx3bjdoOFRNeUl2c1ZoK1RlRzVmSmJkTmRxNlpjOXNDRHIrVDJ4ckJZ?=
 =?utf-8?B?OGJCQ1ZWS050VmU3b2FsdVlWOHRWcE5xejY3RDNodTJTN3ZQR0I0T01sei9y?=
 =?utf-8?B?NWZzNGQyWG5Pak8yRjEyd3htdzVENUd6UDlKU3Fpd0pVcHNDck8zVHZhRVFv?=
 =?utf-8?B?VXgrMDlOL21LdzVtdm5NTnMxbFhPUld3bmQ4bFhVei9CbzRmZkpoQkJEVHNU?=
 =?utf-8?B?eGRZSmJpSXV6bmhVbEQyeWEyQlJqemtnd3FHb2Yyc2ZwMXo4dkZLWU9EUzNl?=
 =?utf-8?B?cjJ1Sm1mWkpuKzNOSDViSXJuSnNyNVQ4dlRvVGpwODNOeTV1RHRnakdTdXlE?=
 =?utf-8?B?OGdwNkMyNlRHcE1Ic1dTdnFsRFI2ZW1XZ0RzcHd4SjRCSmw3WVAyMm42WUJv?=
 =?utf-8?B?N0VUYUd5NG0weDJCZE14b2JvM2F2VjhQcVlWdko3N3RYb2hWNWdaS282WVJK?=
 =?utf-8?B?QVRDU2VadEdXRmd5WXBPVFkxb1dLd015VmlhdTlSTFdoTmxEOVhsOVU5dE04?=
 =?utf-8?B?S0F2c01tZEJzc0U4Q05ZTml4YzNmVG9rOGs3WWl5cjZyT0U4VEhRd2hBbS8z?=
 =?utf-8?B?T0J6dDFUUE1yK2RadmZvMDJic1M4VnVVVWhTZU43QXltNlhrVmxYcUE0UU9s?=
 =?utf-8?B?NW5rZ3JsMTJxVy9PUWlGQ2QyYmdyUVpwMzFiSUNGWU1jT0RJdnYxbHBmcTdh?=
 =?utf-8?B?S0c2OVpBL0FLd1VTRTZWenpCRGVRRE9tV0NxK0RjSDcrUFRhY2FHekFLR29Z?=
 =?utf-8?B?WkVEVmYvcmp2d2QrNHNmTTRaVUFkREJ2N2dyalVqZ0NadXF6UjVkVnBsZjFH?=
 =?utf-8?B?cXc3bU94RG9CUW5NTDVrQmxwMGYwUzFYSGFGM0ovTXZYT0piVlFTV3pUekl5?=
 =?utf-8?B?Qkc3cExQUis4SHlvdURUdVpubkZpODczWkcxQmt1a1cvNGRhcVhHVVUxenRp?=
 =?utf-8?B?blN6ZFlnNm5xcUdnQUNVZEhCTkxpTjVoalI1S1hCZkd6WFc0dTdHeldSODkv?=
 =?utf-8?B?TnJZZzlTYlN6MWxqalZYV0VuWEZSSE8zZ0oveWpmYUV2cmRnbitJQmlRTFkr?=
 =?utf-8?B?Myt5WWl5djI1TCtTR09uZURHMUc4dWlHYzZidlowbENWbERUUGZQcXp2K2lt?=
 =?utf-8?B?VW5qcGlma0ZyeVZ1MGxPRExoaFNjSXViOGlJODBBdnBweDdpNEp5cjVSUGFR?=
 =?utf-8?B?VHJSZm9ZbDRrYURjdWJrdXdRa0pBMGQ1Y3FlcmFSVVdyS2toQ3lJdDl2N2o0?=
 =?utf-8?B?dHZ6R2t2Y2lrZEJXaXZBajh3MGtkN3hYY0NaMmgvQW1OSmZ4czdUUHBGeFIx?=
 =?utf-8?B?Q1NSZUxjUjdyL3ZTSHgzcnBuVWlDai92K2pTdXJISnRBV211cnJBQi95eUdM?=
 =?utf-8?B?UDdYcC9GWE5EdXNETTQ2NjNMczFMU3VNSnNUbFVyckdCTTFqRkJSTTNRc2ha?=
 =?utf-8?B?RmxoWFVvT1ViYmdXKzJBY0FLMTRxSzhiTjdTVjloc3VDZjlOL0RHL0RCZEZn?=
 =?utf-8?B?Vmg2bVpPVkxsazZtOHl6cE80N3BOQzhSTk9ZeEdlNTg2WHRjQUhyenF6bnZD?=
 =?utf-8?B?N3A1NkQ4Z2VNOFJUemt0RDltbEZwYWNHakZza2cxZHNXNVRubUNkcWpWUGYz?=
 =?utf-8?B?NnlUWmMzRlBTUjY0Z0QzMzR6Nng3bjJJQkV3M0ZLMkEralp2Y2NTbGNabGlo?=
 =?utf-8?B?R3I3YncwaUFUaDg1QlJjNUtETSsrNDlHc1RzS3A4QnBpVG9WNERON2NpeFl5?=
 =?utf-8?B?VkRMTFBjeEZubFN6QllmTkpQdlQ0OHdJclN5c25ud2VhdVc3NTRWOWtsUGNr?=
 =?utf-8?B?TGRrdXZHdkpxZXl0RmtNNXl6L2hmTlp2YncyUWVEVWJZeU8wakxudlo2RGJ3?=
 =?utf-8?B?cEJ5VVFXTE5EeGJRZ3VsRVVVZFlvY2FZMGcrdUJ1Z1A0N2hQZ0d5YVlDSjht?=
 =?utf-8?B?dU5MdEVhRkR4cG9UcWFGc0FoSWpoaGU2cHgzaVhjUHFpekRZelhoUUFsMGE3?=
 =?utf-8?Q?wKo/T5Dn+/f5G+wR3GrZPvj1P?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 3e9b9bf8-1313-4cab-8c9f-08dcc3567900
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 23 Aug 2024 09:32:14.8404
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: J/eRjVMZlp/eq8bHfocbAUswOntjYMc6U1UL7c63xtVbsfGNIPnJvrEkhtiMxzYh3TBhlaolb6taINuaTUAXyg==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB7966


On 8/22/24 14:12, Zhi Wang wrote:
> On Mon, 15 Jul 2024 18:28:32 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> Creating a CXL region requires userspace intervention through the cxl
>> sysfs files. Type2 support should allow accelerator drivers to create
>> such cxl region from kernel code.
>>
>> Adding that functionality and integrating it with current support for
>> memory expanders.
>>
>> Based on
>> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m84598b534cc5664f5bb31521ba6e41c7bc213758
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com> Signed-off-by: Dan
>> Williams <dan.j.williams@intel.com> ---
>>   drivers/cxl/core/region.c          | 265
>> ++++++++++++++++++++++------- drivers/cxl/cxl.h                  |
>> 1 + drivers/cxl/cxlmem.h               |   4 +-
>>   drivers/net/ethernet/sfc/efx_cxl.c |  15 +-
>>   include/linux/cxl_accel_mem.h      |   5 +
>>   5 files changed, 231 insertions(+), 59 deletions(-)
>>
>> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
>> index 5cc71b8868bc..697c8df83a4b 100644
>> --- a/drivers/cxl/core/region.c
>> +++ b/drivers/cxl/core/region.c
>> @@ -479,22 +479,14 @@ static ssize_t interleave_ways_show(struct
>> device *dev,
>>   static const struct attribute_group
>> *get_cxl_region_target_group(void);
>> -static ssize_t interleave_ways_store(struct device *dev,
>> -				     struct device_attribute *attr,
>> -				     const char *buf, size_t len)
>> +static int set_interleave_ways(struct cxl_region *cxlr, int val)
>>   {
>> -	struct cxl_root_decoder *cxlrd =
>> to_cxl_root_decoder(dev->parent);
>> +	struct cxl_root_decoder *cxlrd =
>> to_cxl_root_decoder(cxlr->dev.parent); struct cxl_decoder *cxld =
>> &cxlrd->cxlsd.cxld;
>> -	struct cxl_region *cxlr = to_cxl_region(dev);
>>   	struct cxl_region_params *p = &cxlr->params;
>> -	unsigned int val, save;
>> -	int rc;
>> +	int save, rc;
>>   	u8 iw;
>>   
>> -	rc = kstrtouint(buf, 0, &val);
>> -	if (rc)
>> -		return rc;
>> -
>>   	rc = ways_to_eiw(val, &iw);
>>   	if (rc)
>>   		return rc;
>> @@ -509,25 +501,42 @@ static ssize_t interleave_ways_store(struct
>> device *dev, return -EINVAL;
>>   	}
>>   
>> -	rc = down_write_killable(&cxl_region_rwsem);
>> -	if (rc)
>> -		return rc;
>> -	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
>> -		rc = -EBUSY;
>> -		goto out;
>> -	}
>> +	lockdep_assert_held_write(&cxl_region_rwsem);
>> +	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE)
>> +		return -EBUSY;
>>   
>>   	save = p->interleave_ways;
>>   	p->interleave_ways = val;
>>   	rc = sysfs_update_group(&cxlr->dev.kobj,
>> get_cxl_region_target_group()); if (rc)
>>   		p->interleave_ways = save;
>> -out:
>> +
>> +	return rc;
>> +}
>> +
>> +static ssize_t interleave_ways_store(struct device *dev,
>> +				     struct device_attribute *attr,
>> +				     const char *buf, size_t len)
>> +{
>> +	struct cxl_region *cxlr = to_cxl_region(dev);
>> +	unsigned int val;
>> +	int rc;
>> +
>> +	rc = kstrtouint(buf, 0, &val);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = down_write_killable(&cxl_region_rwsem);
>> +	if (rc)
>> +		return rc;
>> +
>> +	rc = set_interleave_ways(cxlr, val);
>>   	up_write(&cxl_region_rwsem);
>>   	if (rc)
>>   		return rc;
>>   	return len;
>>   }
>> +
>>   static DEVICE_ATTR_RW(interleave_ways);
>>   
>>   static ssize_t interleave_granularity_show(struct device *dev,
>> @@ -547,21 +556,14 @@ static ssize_t
>> interleave_granularity_show(struct device *dev, return rc;
>>   }
>>   
>> -static ssize_t interleave_granularity_store(struct device *dev,
>> -					    struct device_attribute
>> *attr,
>> -					    const char *buf, size_t
>> len) +static int set_interleave_granularity(struct cxl_region *cxlr,
>> int val) {
>> -	struct cxl_root_decoder *cxlrd =
>> to_cxl_root_decoder(dev->parent);
>> +	struct cxl_root_decoder *cxlrd =
>> to_cxl_root_decoder(cxlr->dev.parent); struct cxl_decoder *cxld =
>> &cxlrd->cxlsd.cxld;
>> -	struct cxl_region *cxlr = to_cxl_region(dev);
>>   	struct cxl_region_params *p = &cxlr->params;
>> -	int rc, val;
>> +	int rc;
>>   	u16 ig;
>>   
>> -	rc = kstrtoint(buf, 0, &val);
>> -	if (rc)
>> -		return rc;
>> -
>>   	rc = granularity_to_eig(val, &ig);
>>   	if (rc)
>>   		return rc;
>> @@ -577,21 +579,36 @@ static ssize_t
>> interleave_granularity_store(struct device *dev, if
>> (cxld->interleave_ways > 1 && val != cxld->interleave_granularity)
>> return -EINVAL;
>> +	lockdep_assert_held_write(&cxl_region_rwsem);
>> +	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE)
>> +		return -EBUSY;
>> +
>> +	p->interleave_granularity = val;
>> +	return 0;
>> +}
>> +
>> +static ssize_t interleave_granularity_store(struct device *dev,
>> +					    struct device_attribute
>> *attr,
>> +					    const char *buf, size_t
>> len) +{
>> +	struct cxl_region *cxlr = to_cxl_region(dev);
>> +	int rc, val;
>> +
>> +	rc = kstrtoint(buf, 0, &val);
>> +	if (rc)
>> +		return rc;
>> +
>>   	rc = down_write_killable(&cxl_region_rwsem);
>>   	if (rc)
>>   		return rc;
>> -	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
>> -		rc = -EBUSY;
>> -		goto out;
>> -	}
>>   
>> -	p->interleave_granularity = val;
>> -out:
>> +	rc = set_interleave_granularity(cxlr, val);
>>   	up_write(&cxl_region_rwsem);
>>   	if (rc)
>>   		return rc;
>>   	return len;
>>   }
>> +
>>   static DEVICE_ATTR_RW(interleave_granularity);
>>   
>>   static ssize_t resource_show(struct device *dev, struct
>> device_attribute *attr, @@ -2193,7 +2210,7 @@ static int
>> cxl_region_attach(struct cxl_region *cxlr, return 0;
>>   }
>>   
>> -static int cxl_region_detach(struct cxl_endpoint_decoder *cxled)
>> +int cxl_region_detach(struct cxl_endpoint_decoder *cxled)
>>   {
>>   	struct cxl_port *iter, *ep_port = cxled_to_port(cxled);
>>   	struct cxl_region *cxlr = cxled->cxld.region;
>> @@ -2252,6 +2269,7 @@ static int cxl_region_detach(struct
>> cxl_endpoint_decoder *cxled) put_device(&cxlr->dev);
>>   	return rc;
>>   }
>> +EXPORT_SYMBOL_NS_GPL(cxl_region_detach, CXL);
>>   
>>   void cxl_decoder_kill_region(struct cxl_endpoint_decoder *cxled)
>>   {
>> @@ -2746,6 +2764,14 @@ cxl_find_region_by_name(struct
>> cxl_root_decoder *cxlrd, const char *name) return
>> to_cxl_region(region_dev); }
>>   
>> +static void drop_region(struct cxl_region *cxlr)
>> +{
>> +	struct cxl_root_decoder *cxlrd =
>> to_cxl_root_decoder(cxlr->dev.parent);
>> +	struct cxl_port *port = cxlrd_to_port(cxlrd);
>> +
>> +	devm_release_action(port->uport_dev, unregister_region,
>> cxlr); +}
>> +
>>   static ssize_t delete_region_store(struct device *dev,
>>   				   struct device_attribute *attr,
>>   				   const char *buf, size_t len)
>> @@ -3353,17 +3379,18 @@ static int match_region_by_range(struct
>> device *dev, void *data) return rc;
>>   }
>>   
>> -/* Establish an empty region covering the given HPA range */
>> -static struct cxl_region *construct_region(struct cxl_root_decoder
>> *cxlrd,
>> -					   struct
>> cxl_endpoint_decoder *cxled) +static void construct_region_end(void)
>> +{
>> +	up_write(&cxl_region_rwsem);
>> +}
>> +
>> +static struct cxl_region *construct_region_begin(struct
>> cxl_root_decoder *cxlrd,
>> +						 struct
>> cxl_endpoint_decoder *cxled) {
>>   	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
>> -	struct cxl_port *port = cxlrd_to_port(cxlrd);
>> -	struct range *hpa = &cxled->cxld.hpa_range;
>>   	struct cxl_region_params *p;
>>   	struct cxl_region *cxlr;
>> -	struct resource *res;
>> -	int rc;
>> +	int err = 0;
>>   
>>   	do {
>>   		cxlr = __create_region(cxlrd, cxled->mode,
>> @@ -3372,8 +3399,7 @@ static struct cxl_region
>> *construct_region(struct cxl_root_decoder *cxlrd, } while
>> (IS_ERR(cxlr) && PTR_ERR(cxlr) == -EBUSY);
>>   	if (IS_ERR(cxlr)) {
>> -		dev_err(cxlmd->dev.parent,
>> -			"%s:%s: %s failed assign region: %ld\n",
>> +		dev_err(cxlmd->dev.parent,"%s:%s: %s failed assign
>> region: %ld\n", dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev),
>>   			__func__, PTR_ERR(cxlr));
>>   		return cxlr;
>> @@ -3383,23 +3409,47 @@ static struct cxl_region
>> *construct_region(struct cxl_root_decoder *cxlrd, p = &cxlr->params;
>>   	if (p->state >= CXL_CONFIG_INTERLEAVE_ACTIVE) {
>>   		dev_err(cxlmd->dev.parent,
>> -			"%s:%s: %s autodiscovery interrupted\n",
>> +			"%s:%s: %s region setup interrupted\n",
>>   			dev_name(&cxlmd->dev),
>> dev_name(&cxled->cxld.dev), __func__);
>> -		rc = -EBUSY;
>> -		goto err;
>> +		err = -EBUSY;
>> +	}
>> +
>> +	if (err) {
>> +		construct_region_end();
>> +		drop_region(cxlr);
>> +		return ERR_PTR(err);
>>   	}
>> +	return cxlr;
>> +}
>> +
>> +
>> +/* Establish an empty region covering the given HPA range */
>> +static struct cxl_region *construct_region(struct cxl_root_decoder
>> *cxlrd,
>> +					   struct
>> cxl_endpoint_decoder *cxled) +{
>> +	struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
>> +	struct range *hpa = &cxled->cxld.hpa_range;
>> +	struct cxl_region_params *p;
>> +	struct cxl_region *cxlr;
>> +	struct resource *res;
>> +	int rc;
>> +
>> +	cxlr = construct_region_begin(cxlrd, cxled);
>> +	if (IS_ERR(cxlr))
>> +		return cxlr;
>>   
>>   	set_bit(CXL_REGION_F_AUTO, &cxlr->flags);
>>   
>>   	res = kmalloc(sizeof(*res), GFP_KERNEL);
>>   	if (!res) {
>>   		rc = -ENOMEM;
>> -		goto err;
>> +		goto out;
>>   	}
>>   
>>   	*res = DEFINE_RES_MEM_NAMED(hpa->start, range_len(hpa),
>>   				    dev_name(&cxlr->dev));
>> +
>>   	rc = insert_resource(cxlrd->res, res);
>>   	if (rc) {
>>   		/*
>> @@ -3412,6 +3462,7 @@ static struct cxl_region
>> *construct_region(struct cxl_root_decoder *cxlrd, __func__,
>> dev_name(&cxlr->dev)); }
>>   
>> +	p = &cxlr->params;
>>   	p->res = res;
>>   	p->interleave_ways = cxled->cxld.interleave_ways;
>>   	p->interleave_granularity =
>> cxled->cxld.interleave_granularity; @@ -3419,24 +3470,124 @@ static
>> struct cxl_region *construct_region(struct cxl_root_decoder *cxlrd,
>>   	rc = sysfs_update_group(&cxlr->dev.kobj,
>> get_cxl_region_target_group()); if (rc)
>> -		goto err;
>> +		goto out;
>>   
>>   	dev_dbg(cxlmd->dev.parent, "%s:%s: %s %s res: %pr iw: %d ig:
>> %d\n",
>> -		dev_name(&cxlmd->dev), dev_name(&cxled->cxld.dev),
>> __func__,
>> -		dev_name(&cxlr->dev), p->res, p->interleave_ways,
>> -		p->interleave_granularity);
>> +				   dev_name(&cxlmd->dev),
>> +				   dev_name(&cxled->cxld.dev),
>> __func__,
>> +				   dev_name(&cxlr->dev), p->res,
>> +				   p->interleave_ways,
>> +				   p->interleave_granularity);
>>   
>>   	/* ...to match put_device() in cxl_add_to_region() */
>>   	get_device(&cxlr->dev);
>>   	up_write(&cxl_region_rwsem);
>> +out:
>> +	construct_region_end();
>> +	if (rc) {
>> +		drop_region(cxlr);
>> +		return ERR_PTR(rc);
>> +	}
>> +	return cxlr;
>> +}
>> +
>> +static struct cxl_region *
>> +__construct_new_region(struct cxl_root_decoder *cxlrd,
>> +		       struct cxl_endpoint_decoder **cxled, int ways)
>> +{
>> +	struct cxl_decoder *cxld = &cxlrd->cxlsd.cxld;
>> +	struct cxl_region_params *p;
>> +	resource_size_t size = 0;
>> +	struct cxl_region *cxlr;
>> +	int rc, i;
>> +
>> +	/* If interleaving is not supported, why does ways need to
>> be at least 1? */
>> +	if (ways < 1)
>> +		return ERR_PTR(-EINVAL);
>> +
>> +	cxlr = construct_region_begin(cxlrd, cxled[0]);
>> +	if (IS_ERR(cxlr))
>> +		return cxlr;
>> +
>> +	rc = set_interleave_ways(cxlr, ways);
>> +	if (rc)
>> +		goto out;
>> +
>> +	rc = set_interleave_granularity(cxlr,
>> cxld->interleave_granularity);
>> +	if (rc)
>> +		goto out;
>> +
>> +	down_read(&cxl_dpa_rwsem);
>> +	for (i = 0; i < ways; i++) {
>> +		if (!cxled[i]->dpa_res)
>> +			break;
>> +		size += resource_size(cxled[i]->dpa_res);
>> +	}
>> +	up_read(&cxl_dpa_rwsem);
>> +
>> +	if (i < ways)
>> +		goto out;
>> +
>> +	rc = alloc_hpa(cxlr, size);
>> +	if (rc)
>> +		goto out;
>> +
>> +	down_read(&cxl_dpa_rwsem);
>> +	for (i = 0; i < ways; i++) {
>> +		rc = cxl_region_attach(cxlr, cxled[i], i);
>> +		if (rc)
>> +			break;
>> +	}
>> +	up_read(&cxl_dpa_rwsem);
>> +
>> +	if (rc)
>> +		goto out;
>> +
>> +	rc = cxl_region_decode_commit(cxlr);
>> +	if (rc)
>> +		goto out;
>>   
>> +	p = &cxlr->params;
>> +	p->state = CXL_CONFIG_COMMIT;
>> +out:
>> +	construct_region_end();
>> +	if (rc) {
>> +		drop_region(cxlr);
>> +		return ERR_PTR(rc);
>> +	}
>>   	return cxlr;
>> +}
>>   
>> -err:
>> -	up_write(&cxl_region_rwsem);
>> -	devm_release_action(port->uport_dev, unregister_region,
>> cxlr);
>> -	return ERR_PTR(rc);
>> +/**
>> + * cxl_create_region - Establish a region given an array of endpoint
>> decoders
>> + * @cxlrd: root decoder to allocate HPA
>> + * @cxled: array of endpoint decoders with reserved DPA capacity
>> + * @ways: size of @cxled array
>> + *
>> + * Returns a fully formed region in the commit state and attached to
>> the
>> + * cxl_region driver.
>> + */
>> +struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
>> +				     struct cxl_endpoint_decoder
>> **cxled,
>> +				     int ways)
>> +{
>> +	struct cxl_region *cxlr;
>> +
>> +	mutex_lock(&cxlrd->range_lock);
>> +	cxlr = __construct_new_region(cxlrd, cxled, ways);
>> +	mutex_unlock(&cxlrd->range_lock);
>> +
>> +	if (IS_ERR(cxlr))
>> +		return cxlr;
>> +
>> +	if (device_attach(&cxlr->dev) <= 0) {
>> +		dev_err(&cxlr->dev, "failed to create region\n");
>> +		drop_region(cxlr);
>> +		return ERR_PTR(-ENODEV);
>> +	}
>> +	return cxlr;
>>   }
>> +EXPORT_SYMBOL_NS_GPL(cxl_create_region, CXL);
>>   
>>   int cxl_add_to_region(struct cxl_port *root, struct
>> cxl_endpoint_decoder *cxled) {
>> diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
>> index d3fdd2c1e066..1bf3b74ff959 100644
>> --- a/drivers/cxl/cxl.h
>> +++ b/drivers/cxl/cxl.h
>> @@ -905,6 +905,7 @@ void cxl_coordinates_combine(struct
>> access_coordinate *out,
>>   bool cxl_endpoint_decoder_reset_detected(struct cxl_port *port);
>>   
>> +int cxl_region_detach(struct cxl_endpoint_decoder *cxled);
>>   /*
>>    * Unit test builds overrides this to __weak, find the 'strong'
>> version
>>    * of these symbols in tools/testing/cxl/.
>> diff --git a/drivers/cxl/cxlmem.h b/drivers/cxl/cxlmem.h
>> index a0e0795ec064..377bb3cd2d47 100644
>> --- a/drivers/cxl/cxlmem.h
>> +++ b/drivers/cxl/cxlmem.h
>> @@ -881,5 +881,7 @@ struct cxl_root_decoder
>> *cxl_get_hpa_freespace(struct cxl_port *endpoint, int interleave_ways,
>>   					       unsigned long flags,
>>   					       resource_size_t *max);
>> -
>> +struct cxl_region *cxl_create_region(struct cxl_root_decoder *cxlrd,
>> +				     struct cxl_endpoint_decoder
>> **cxled,
>> +				     int ways);
>>   #endif /* __CXL_MEM_H__ */
>> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c
>> b/drivers/net/ethernet/sfc/efx_cxl.c index b5626d724b52..4012e3faa298
>> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c
>> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
>> @@ -92,8 +92,18 @@ void efx_cxl_init(struct efx_nic *efx)
>>   
>>   	cxl->cxled = cxl_request_dpa(cxl->endpoint, true,
>> EFX_CTPIO_BUFFER_SIZE, EFX_CTPIO_BUFFER_SIZE);
>> -	if (IS_ERR(cxl->cxled))
>> +	if (IS_ERR(cxl->cxled)) {
>>   		pci_info(pci_dev, "CXL accel request DPA failed");
>> +		return;
>> +	}
>> +
>> +	cxl->efx_region = cxl_create_region(cxl->cxlrd, &cxl->cxled,
>> 1);
>> +	if (!cxl->efx_region) {
> if (IS_ERR(cxl->efx_region))
>

I'll fix it.

Thanks



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2068.outbound.protection.outlook.com [40.107.223.68])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 113B5198A34;
	Mon, 26 Aug 2024 17:42:51 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.223.68
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724694173; cv=fail; b=ChoYJrQgInNErOGGp+BHZ/Udl9NJKT8AjBBWegLdvpwXClPW9Ztz8OvE14AMdK1Kiw08osoj7N0maDHKeaCLXOPXRWkMx+fWOR41q0VHQaqM4Th1gScciz/V8l4kiKladH3ZbLFxZNzS8M+/gPTAF+6PcqrECfmpU0lrXRvrVV0=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724694173; c=relaxed/simple;
	bh=zJky7vNmRv2JA2yi5L8PEweBvoVg07l1/zw7RDL211E=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=MM541+CW2cXrnOymhPDB+VRh4ypf1pb4jO026BK1qOpf8JdXHeyMnklGV7OKhEP2X2f9BaxhQ4bLnBocB3W3rs6xSsT1QPCeMQsgXypAzxJO+7ia4SGlraHxdGoXsBPxLPbh0ve2Tsg44fdjZ3cZ8QTAhg/IJY9tyx+H+atbiZs=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com; spf=fail smtp.mailfrom=nvidia.com; dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b=uE594LGu; arc=fail smtp.client-ip=40.107.223.68
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=reject dis=none) header.from=nvidia.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=nvidia.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=Nvidia.com header.i=@Nvidia.com header.b="uE594LGu"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=RkIXWv78Zux6dlffo7Wn4zUXTmXguDe64Uly2cL+dtWCMv9/vjm5dnh3gViBduR2I6bouQd0utTyiOK/dOrQDZw6SkeidARPGblIV6V3YOxAwGKCsTLcRKJZN4OeWzmVgroOKR36hFXml8zrDc+zsQopzsqBQD9d/JG8BwBdOG4X6mc6k5OZY8wL9Cep93ZAPp97dpqk5AWevn4/chkPLRSL3dNuyfAryU6jTO9sSlFN/9NAEiLrgRsdQF68stC/sI4paZpvxP14BeFuRaOyFMP3BKamGukVhofqopRAVr8lza4ga+tRid44eQRzP6CvzenrQqt8+wp/4K/lu+fu8A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=ueBTpgi6j8528zGDbioSTFoD0F4KUUPfGF2+MDRuJhM=;
 b=uWK8nGI8U2CM5hmJeGImbLdqasHlojPu2/f7NY8/vAIekAhsEr+SortLREHSmuat8tJb17KeaOBe+fk/kfb1/HwWHx0asQa3RAO53rRFk/cgSV8r0SVNu3h+hOAY10lo17vFjt7rteD864Qy1H4X/n424C2MMZ2GYtARli+ZwaN2DwVYNV9BAHHE6T86X3MIGgdH2RVJUzA3NzCsCT7j0de5mq716ZJb8Qu2cVSefPXdBedqQ5uUJn00PZrmWndZ6KyGQSTJKa5LeOEjoYneQoPOOvW9/B5GGXNKnvWdvlTSUiu8MpUamx7FWQC9OU+LycBzoBUU4JVbqgZETko4pQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass (sender ip is
 216.228.118.232) smtp.rcpttodomain=amd.com smtp.mailfrom=nvidia.com;
 dmarc=pass (p=reject sp=reject pct=100) action=none header.from=nvidia.com;
 dkim=none (message not signed); arc=none (0)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=Nvidia.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ueBTpgi6j8528zGDbioSTFoD0F4KUUPfGF2+MDRuJhM=;
 b=uE594LGutOqhgMl/3I7Rg3UMDu5B9W3cqR2NLuBMsaIWCASgikwve/ChSdbZp/asX9Ak15Du9ey8cGdJ6vSGrX8OD6ewqtgKy6KjIeSg2zE4DeoIAaOq9Gc8QU2ZQuHNwe+1UFNgzRWln41w8lVFOACLmwxG3X57Wlk6js5l4AUbdMklnmRAke1HvY74O3Te/HIbZu6qL/otFBKHZ6NDaCdvHx1VDm02WCgpJEoq9GvRILd4N+n0VijSpIbQ5mICqU2yOOC727+VoxIMlu2q8sio3q+j8YBAk/rphptymbHB2TQuHt4EWK4yee3Y2oUfii+67zModCP1hP2IekfExg==
Received: from DM6PR06CA0083.namprd06.prod.outlook.com (2603:10b6:5:336::16)
 by CYYPR12MB8991.namprd12.prod.outlook.com (2603:10b6:930:b9::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.24; Mon, 26 Aug
 2024 17:42:47 +0000
Received: from CY4PEPF0000E9DB.namprd05.prod.outlook.com
 (2603:10b6:5:336:cafe::f0) by DM6PR06CA0083.outlook.office365.com
 (2603:10b6:5:336::16) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.25 via Frontend
 Transport; Mon, 26 Aug 2024 17:42:47 +0000
X-MS-Exchange-Authentication-Results: spf=pass (sender IP is 216.228.118.232)
 smtp.mailfrom=nvidia.com; dkim=none (message not signed)
 header.d=none;dmarc=pass action=none header.from=nvidia.com;
Received-SPF: Pass (protection.outlook.com: domain of nvidia.com designates
 216.228.118.232 as permitted sender) receiver=protection.outlook.com;
 client-ip=216.228.118.232; helo=mail.nvidia.com; pr=C
Received: from mail.nvidia.com (216.228.118.232) by
 CY4PEPF0000E9DB.mail.protection.outlook.com (10.167.241.74) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.7918.13 via Frontend Transport; Mon, 26 Aug 2024 17:42:47 +0000
Received: from drhqmail201.nvidia.com (10.126.190.180) by mail.nvidia.com
 (10.127.129.5) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.2.1544.4; Mon, 26 Aug
 2024 10:42:36 -0700
Received: from drhqmail203.nvidia.com (10.126.190.182) by
 drhqmail201.nvidia.com (10.126.190.180) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.1544.4; Mon, 26 Aug 2024 10:42:35 -0700
Received: from localhost (10.127.8.14) by mail.nvidia.com (10.126.190.182)
 with Microsoft SMTP Server id 15.2.1544.4 via Frontend Transport; Mon, 26 Aug
 2024 10:42:33 -0700
Date: Mon, 26 Aug 2024 20:42:32 +0300
From: Zhi Wang <zhiw@nvidia.com>
To: <alejandro.lucero-palau@amd.com>
CC: <linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	Alejandro Lucero <alucerop@amd.com>, <targupta@nvidia.com>,
	<vsethi@nvidia.com>
Subject: Re: [PATCH v2 08/15] cxl: indicate probe deferral
Message-ID: <20240826204232.000009ce.zhiw@nvidia.com>
In-Reply-To: <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-9-alejandro.lucero-palau@amd.com>
Organization: NVIDIA
X-Mailer: Claws Mail 4.2.0 (GTK 3.24.38; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-NV-OnPremToCloud: ExternallySecured
X-EOPAttributedMessage: 0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: CY4PEPF0000E9DB:EE_|CYYPR12MB8991:EE_
X-MS-Office365-Filtering-Correlation-Id: 16701a84-5107-4ad2-cde0-08dcc5f67fcb
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: 
	BCL:0;ARA:13230040|36860700013|1800799024|7416014|376014|82310400026;
X-Microsoft-Antispam-Message-Info: 
	=?us-ascii?Q?Cid3mCvW4LpuayBNmo0Gpq44l5Na9gldbb3NhV9eWB23OXHOmUK4883Pqu7B?=
 =?us-ascii?Q?nhnz8tw6tHEfaOO4EQNTnVc8pYS1XlwEBSbnkqDMaH9XoIerOitpxGEKiYeS?=
 =?us-ascii?Q?1+pU409f6gTRd1ZG43he6lbyUJgtZfJNENv4vAEdGg8fcGc2Qf+MA8QFmJc2?=
 =?us-ascii?Q?81NaMyhC00buZaIaL1SQY6py63t/BwPwDG4VdmyRZ4IVu3ExMp8DhuzzVBRR?=
 =?us-ascii?Q?BJby5RrSK+gkDf11xaj6S2jiD/vJkHFrGfnlagta/rfRr9SzwKtZdy0ti/Iw?=
 =?us-ascii?Q?k5bpkfXjDnnuuUW0sliVpFiUOeZnSLRkAQNO9eAaX+/1FMqZp8JOE79AXP2u?=
 =?us-ascii?Q?q+rOZBGfM7Wizs8xd1el0IvSwm+8UPtQIO7H7sBWnT0drkDiqLLu9mgXvyS7?=
 =?us-ascii?Q?YqpsKy+TfeQW2a6xrojTtjOmA9JCCwIW7BgFe6IniQkKNz9BGY4kIneLbm3V?=
 =?us-ascii?Q?rcdkgdN2s3G06hKn+qWQjIwBQI118ULf83lQQHkQM9gpOW4/KxFfuAAIhQfQ?=
 =?us-ascii?Q?WRugAjlCh6kIYVhaQ86PYMFaJ7X7WcXrkRUDv1DIba1RdB+CeKOlVp07+oYd?=
 =?us-ascii?Q?d0wgqZ0O9ZP7aQEhPFbVP8uRmlwA0N7XHYaRqT9H6Z4LmiIhv0jxbqB7IAn5?=
 =?us-ascii?Q?pwfdWkitRE8FH5IlxGPv2ocnfM0qWyLWqhz0ATbjQC1/V4aCSHT3a5B0lEl1?=
 =?us-ascii?Q?5/WAN2D+Yp4sMitpZ7URvyy0Sd1NNrjKepOHP5iP+LVYFzQKJxPrIa75C23c?=
 =?us-ascii?Q?HjWRcfjsxbR9G/n4M57PQQaOu2UOQdLkobsEb6GZrrbBssGpFJHt8F1kwHOK?=
 =?us-ascii?Q?iftIaNd0y1rQsDH0MSEAcxaQgiT62lYEq4n4P6NSm6GYjGCOdojZaBOsdsTp?=
 =?us-ascii?Q?o5c66j/W3q0+5hS6+ztsR8FryqEOSm8TKZPJjTeY4WSgMmdV7RkjFKPVcgMV?=
 =?us-ascii?Q?h1BSa4c6paGWZkAi5lb24NKrvAeDLmuJmkVuHRSYmCIz9fDneTISr/uQxFci?=
 =?us-ascii?Q?u1/Pm8WbBCL5WdOzYDK1RYEby2x9vahK/T3AKRteQB3R1/6lWHFQykxrQuFr?=
 =?us-ascii?Q?Zau5lXWwY6B5jByLF5VpWu8OR/ScRVV2LT72JWPFeDc2t/OtpMEZpXoiGaJ2?=
 =?us-ascii?Q?3lQDH8b56vGN67fB/sSkNeHeAsGzzMgA5TdB8ooEMTwaZa09dFA9FmmodBEU?=
 =?us-ascii?Q?vNnUjga7oEYVKNJju4+ywBXxVrFec4GLr8QtDx+wjXVgkVtineDVhGG6SpzR?=
 =?us-ascii?Q?8ujaRxd/2LR3k4qbrOzndaPRakay1ALYFi7HljRQpJTAdhfjORGTn/xCP1md?=
 =?us-ascii?Q?vs8MNwiOr0cj2kHKKvu356SQ+LkiGGrKuQCzeFl8HFpfYZ+WPtJ9CkmGdGtf?=
 =?us-ascii?Q?Mgcq3utEllaCDAaSncMD3Wme0l5NWKsgNbRvAjMJd6v3VIKGKgQyXVv2PXIm?=
 =?us-ascii?Q?mH9edRgBt0zYEw6p/jpsbPqxH4PN1Z1U?=
X-Forefront-Antispam-Report: 
	CIP:216.228.118.232;CTRY:US;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:mail.nvidia.com;PTR:dc7edge1.nvidia.com;CAT:NONE;SFS:(13230040)(36860700013)(1800799024)(7416014)(376014)(82310400026);DIR:OUT;SFP:1101;
X-OriginatorOrg: Nvidia.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 26 Aug 2024 17:42:47.5363
 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 16701a84-5107-4ad2-cde0-08dcc5f67fcb
X-MS-Exchange-CrossTenant-Id: 43083d15-7273-40c1-b7db-39efd9ccc17a
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=43083d15-7273-40c1-b7db-39efd9ccc17a;Ip=[216.228.118.232];Helo=[mail.nvidia.com]
X-MS-Exchange-CrossTenant-AuthSource: 
	CY4PEPF0000E9DB.namprd05.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CYYPR12MB8991

On Mon, 15 Jul 2024 18:28:28 +0100
<alejandro.lucero-palau@amd.com> wrote:

> From: Alejandro Lucero <alucerop@amd.com>
> 
> The first stop for a CXL accelerator driver that wants to establish
> new CXL.mem regions is to register a 'struct cxl_memdev. That kicks
> off cxl_mem_probe() to enumerate all 'struct cxl_port' instances in
> the topology up to the root.
> 
> If the root driver has not attached yet the expectation is that the
> driver waits until that link is established. The common cxl_pci_driver
> has reason to keep the 'struct cxl_memdev' device attached to the bus
> until the root driver attaches. An accelerator may want to instead
> defer probing until CXL resources can be acquired.
> 
> Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
> accelerator driver probing should be defferred vs failed. Provide that
> indication via a new cxl_acquire_endpoint() API that can retrieve the
> probe status of the memdev.
> 
> The first consumer of this API is a test driver that excercises the
> CXL Type-2 flow.
> 

Out of curiosity, when and where do we probe CXL_DVSEC_CACHE_CAPABLE and
enable the CXL_DVSEC_CACHE_ENABLE bit for a type-2 device?

Thanks,
Zhi.

> Based on
> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2
> 
> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/memdev.c          | 41
> ++++++++++++++++++++++++++++++ drivers/cxl/core/port.c            |
> 2 +- drivers/cxl/mem.c                  |  7 +++--
>  drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
>  include/linux/cxl_accel_mem.h      |  3 +++
>  5 files changed, 59 insertions(+), 4 deletions(-)
> 
> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
> index b902948b121f..d51c8bfb32e3 100644
> --- a/drivers/cxl/core/memdev.c
> +++ b/drivers/cxl/core/memdev.c
> @@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct
> device *host, }
>  EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
>  
> +/*
> + * Try to get a locked reference on a memdev's CXL port topology
> + * connection. Be careful to observe when cxl_mem_probe() has
> deposited
> + * a probe deferral awaiting the arrival of the CXL root driver
> +*/
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
> +{
> +	struct cxl_port *endpoint;
> +	int rc = -ENXIO;
> +
> +	device_lock(&cxlmd->dev);
> +	endpoint = cxlmd->endpoint;
> +	if (!endpoint)
> +		goto err;
> +
> +	if (IS_ERR(endpoint)) {
> +		rc = PTR_ERR(endpoint);
> +		goto err;
> +	}
> +
> +	device_lock(&endpoint->dev);
> +	if (!endpoint->dev.driver)
> +		goto err_endpoint;
> +
> +	return endpoint;
> +
> +err_endpoint:
> +	device_unlock(&endpoint->dev);
> +err:
> +	device_unlock(&cxlmd->dev);
> +	return ERR_PTR(rc);
> +}
> +EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
> +
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port
> *endpoint) +{
> +	device_unlock(&endpoint->dev);
> +	device_unlock(&cxlmd->dev);
> +}
> +EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
> +
>  static void sanitize_teardown_notifier(void *data)
>  {
>  	struct cxl_memdev_state *mds = data;
> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
> index d66c6349ed2d..3c6b896c5f65 100644
> --- a/drivers/cxl/core/port.c
> +++ b/drivers/cxl/core/port.c
> @@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev
> *cxlmd, */
>  		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
>  			dev_name(dport_dev));
> -		return -ENXIO;
> +		return -EPROBE_DEFER;
>  	}
>  
>  	parent_port = find_cxl_port(dparent, &parent_dport);
> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
> index f76af75a87b7..383a6f4829d3 100644
> --- a/drivers/cxl/mem.c
> +++ b/drivers/cxl/mem.c
> @@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
>  		return rc;
>  
>  	rc = devm_cxl_enumerate_ports(cxlmd);
> -	if (rc)
> +	if (rc) {
> +		cxlmd->endpoint = ERR_PTR(rc);
>  		return rc;
> +	}
>  
>  	parent_port = cxl_mem_find_port(cxlmd, &dport);
>  	if (!parent_port) {
>  		dev_err(dev, "CXL port topology not found\n");
> -		return -ENXIO;
> +		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
> +		return -EPROBE_DEFER;
>  	}
>  
>  	if (resource_size(&cxlds->pmem_res) &&
> IS_ENABLED(CONFIG_CXL_PMEM)) { diff --git
> a/drivers/net/ethernet/sfc/efx_cxl.c
> b/drivers/net/ethernet/sfc/efx_cxl.c index 0abe66490ef5..2cf4837ddfc1
> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c +++
> b/drivers/net/ethernet/sfc/efx_cxl.c @@ -65,8 +65,16 @@ void
> efx_cxl_init(struct efx_nic *efx) }
>  
>  	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
> -	if (IS_ERR(cxl->cxlmd))
> +	if (IS_ERR(cxl->cxlmd)) {
>  		pci_info(pci_dev, "CXL accel memdev creation
> failed");
> +		return;
> +	}
> +
> +	cxl->endpoint = cxl_acquire_endpoint(cxl->cxlmd);
> +	if (IS_ERR(cxl->endpoint))
> +		pci_info(pci_dev, "CXL accel acquire endpoint
> failed"); +
> +	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>  }
>  
>  
> diff --git a/include/linux/cxl_accel_mem.h
> b/include/linux/cxl_accel_mem.h index 442ed9862292..701910021df8
> 100644 --- a/include/linux/cxl_accel_mem.h
> +++ b/include/linux/cxl_accel_mem.h
> @@ -29,4 +29,7 @@ int cxl_await_media_ready(struct cxl_dev_state
> *cxlds); 
>  struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>  				       struct cxl_dev_state *cxlds);
> +
> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port
> *endpoint); #endif


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id AB2BC19F485;
	Tue, 27 Aug 2024 15:06:29 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724771192; cv=none; b=oTN4SaHxHVmQFJjEczZCUAyfSbPryTtfRcKI7Ix082Sv/3bTo8G7S8txVaA9aCYpY4FEJHmSKnI9uZP06ZECai818RtMrRgi4GeRBMa3f/6dPS/cBw3nu3L+GMgvtfs2JcsqYWJic2s5JOg3ZMmWJET2Dw0HTF/q8GDhCTq/igg=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724771192; c=relaxed/simple;
	bh=9dFmxU9XikVnndxj6IR/n8hH8VSnVajZd3oUbPdkPZ0=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=iJ8TuTiXlQ0qQ2QbUsP3qF2J8DRM14gUSwJVVc9WlYHGoEnuCWas6EwYMkxOkaS2PbF3K7f3uXLxPBbWPDCQjWMwYI3RK8edl+Ymo5j9ROgn3Be9UfpO4r/n0jQqzBk0MChuifz0mvV8pW0YgYoqejfMLNnMRUkZQaaLD7cF9Zo=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.216])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WtW4v5nFNz6DBhm;
	Tue, 27 Aug 2024 23:03:11 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id B0F0A140B39;
	Tue, 27 Aug 2024 23:06:26 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Tue, 27 Aug
 2024 16:06:26 +0100
Date: Tue, 27 Aug 2024 16:06:25 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <20240827160625.0000505c@Huawei.com>
In-Reply-To: <3b23989a-9ac4-6a90-bc5b-bb12377c0385@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-2-alejandro.lucero-palau@amd.com>
	<20240804181045.000009dc@Huawei.com>
	<508e796c-64f1-f90a-3860-827eaab2c672@amd.com>
	<20240815173555.0000691a@Huawei.com>
	<3b23989a-9ac4-6a90-bc5b-bb12377c0385@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100004.china.huawei.com (7.191.162.219) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 19 Aug 2024 12:10:34 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/15/24 17:35, Jonathan Cameron wrote:
> > On Mon, 12 Aug 2024 12:16:02 +0100
> > Alejandro Lucero Palau <alucerop@amd.com> wrote:
> >  
> >> On 8/4/24 18:10, Jonathan Cameron wrote:  
> >>> On Mon, 15 Jul 2024 18:28:21 +0100
> >>> <alejandro.lucero-palau@amd.com> wrote:
> >>>     
> >>>> From: Alejandro Lucero <alucerop@amd.com>
> >>>>
> >>>> Differientiate Type3, aka memory expanders, from Type2, aka device
> >>>> accelerators, with a new function for initializing cxl_dev_state.
> >>>>
> >>>> Create opaque struct to be used by accelerators relying on new access
> >>>> functions in following patches.
> >>>>
> >>>> Add SFC ethernet network driver as the client.
> >>>>
> >>>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m52543f85d0e41ff7b3063fdb9caa7e845b446d0e
> >>>>
> >>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> >>>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>  
> >>>     
> >>>> +
> >>>> +void cxl_accel_set_dvsec(struct cxl_dev_state *cxlds, u16 dvsec)
> >>>> +{
> >>>> +	cxlds->cxl_dvsec = dvsec;  
> >>> Nothing to do with accel. If these make sense promote to cxl
> >>> core and a linux/cxl/ header.  Also we may want the type3 driver to
> >>> switch to them long term. If nothing else, making that handle the
> >>> cxl_dev_state as more opaque will show up what is still directly
> >>> accessed and may need to be wrapped up for a future accelerator driver
> >>> to use.
> >>>     
> >> I will change the function name then, but not sure I follow the comment
> >> about more opaque ...  
> > If most code can't see the internals of cxl_dev_state because it
> > doesn't include the header that defines it, then we will generally
> > spot data that may not belong in that state structure in the first place
> > or where it is appropriate to have an accessor function mediating that
> > access.  
> 
> 
> I follow that but I do not know if you are suggesting here to make it 
> opaque which conflicts with a previous comment stating it does not need 
> to be.
> 
Different potential approaches.  I'm not totally sure we 'yet' care
about making it opaque as we don't have that many drivers so review for
misuse is enough. Longer term I think we want to get there - maybe now
is the convenient moment to do so.

Jonathan

> 
> > Jonathan
> >
> >  


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id C15B71C6894;
	Tue, 27 Aug 2024 15:12:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724771582; cv=none; b=oslc8vHfHlckW4kt84DnSNFYJSFzC5t62sXMphV6529MrMd2FOc8P73avCwTMaHu17WS2XBZQRjgTEVi7d+hfpUewTFOe3m0FdxjchrMn+xx4HDVaFmlWpSJTFdJRwwAJl47oGfFALLXetRxQI1DA3ratCnS9wQVpP4WTa737QA=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724771582; c=relaxed/simple;
	bh=U6ZXTvMC7qfXZv/4gvYoEX0upKnN/rHEnjpxOPk+BBE=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=GnzcHLQp4ApbY2Rh4fHH28vSEPtafu8S6vmkCoq9iMesUMV8DlAKvDnog3DeikxJ8lslZuZqIzQY+10HV3N9dvKCFB8rHCrVjEEhgIOz5QIhzoaKyzGCOxyT841EjKDyDsd0nNZP91jIhDB75s6DKVGq6bpPkKdFR1XM6qzrKqg=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WtWCY33nlz6J73k;
	Tue, 27 Aug 2024 23:08:57 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 52C6F140B33;
	Tue, 27 Aug 2024 23:12:56 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Tue, 27 Aug
 2024 16:12:55 +0100
Date: Tue, 27 Aug 2024 16:12:54 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 05/15] cxl: fix use of resource_contains
Message-ID: <20240827161254.00002dbe@Huawei.com>
In-Reply-To: <32f38caf-8cc3-2e4c-668f-f36552b7cffe@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-6-alejandro.lucero-palau@amd.com>
	<20240804182519.00006ea8@Huawei.com>
	<32f38caf-8cc3-2e4c-668f-f36552b7cffe@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100004.china.huawei.com (7.191.162.219) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Fri, 16 Aug 2024 15:37:14 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/4/24 18:25, Jonathan Cameron wrote:
> > On Mon, 15 Jul 2024 18:28:25 +0100
> > <alejandro.lucero-palau@amd.com> wrote:
> >  
> >> From: Alejandro Lucero <alucerop@amd.com>
> >>
> >> For a resource defined with size zero, resource contains will also
> >> return true.
> >>
> >> Add resource size check before using it.
> >>
> >> Signed-off-by: Alejandro Lucero <alucerop@amd.com>  
> > If this can happen in existing type 3 case the fixes tag
> > and send it separately from this series.  
> 
> 
> I have been looking at this possibility and although not with 100% 
> certainty, I would say it is not for Type3.
> 
> "Type3 regions" are (usually) created from user space, and:
> 
> 1) if it is RAM, dax code is invoked for creating the region
> 
> 2) if it is pmem, pmem region creation code is invoked.
> 
> None of these possibilities use the affected code in this patch.
> 
> There exist two options where that code could be used by Type3, which 
> are confusing:
> 
> 1) regions created during device initialization, but for that the 
> decoder needs to be committed and it is not expected for Type3 without 
> user space intervention.

More than possible a bios already set them up.

> 
> 2) when emulating an hdm decoder, what I think it is not possible for 
> Type3 since it is mandatory.

HDM Decoders are not mandatory for older devices and not mandatory for
bios to have used them.  Papering over that gap is what the emulation code
is there for.

> 
> 
> Finally we have code when sysfs dpa_size file is written, which I'm not 
> familiar with.

That's an early part of the userspace bringing up the memory if it
wasn't set up by bios or from pmem lsa data.

Not sure any that helps though ;)

Jonathan

> 
> 
> 
> > If there is no path due to some external code, then
> > drop the word fix from the title and call it
> >
> > cxl: harden resource_contains checks to handle zero size resources  
> 
> 
> After the explanation above, I will do as you say.
> 
> Thanks!
> 
> 
> > Avoids it getting backported into stable / distros picking it
> > up if there isn't a real issue before this series.
> >
> > Thanks,
> >
> > Jonathan
> >  
> >> ---
> >>   drivers/cxl/core/hdm.c | 7 +++++--
> >>   1 file changed, 5 insertions(+), 2 deletions(-)
> >>
> >> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
> >> index 3df10517a327..4af9225d4b59 100644
> >> --- a/drivers/cxl/core/hdm.c
> >> +++ b/drivers/cxl/core/hdm.c
> >> @@ -327,10 +327,13 @@ static int __cxl_dpa_reserve(struct cxl_endpoint_decoder *cxled,
> >>   	cxled->dpa_res = res;
> >>   	cxled->skip = skipped;
> >>   
> >> -	if (resource_contains(&cxlds->pmem_res, res))
> >> +	if ((resource_size(&cxlds->pmem_res)) && (resource_contains(&cxlds->pmem_res, res))) {
> >> +		printk("%s: resource_contains CXL_DECODER_PMEM\n", __func__);
> >>   		cxled->mode = CXL_DECODER_PMEM;
> >> -	else if (resource_contains(&cxlds->ram_res, res))
> >> +	} else if ((resource_size(&cxlds->ram_res)) && (resource_contains(&cxlds->ram_res, res))) {
> >> +		printk("%s: resource_contains CXL_DECODER_RAM\n", __func__);
> >>   		cxled->mode = CXL_DECODER_RAM;
> >> +	}
> >>   	else {
> >>   		dev_warn(dev, "decoder%d.%d: %pr mixed mode not supported\n",
> >>   			 port->id, cxled->cxld.id, cxled->dpa_res);  


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 4CC761CDA04;
	Tue, 27 Aug 2024 15:18:29 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724771911; cv=none; b=p5wwfXDZMIhn7iIXHFTxX7GPkcWHv1vMGcWInRrPB1GasuxUfmjJxGAPcOdh5R7t9O91EyvpPKntDkkrVJSaTzvUdq9jqNPJN7ikljtT1+FUGO+cIPxdFgVkSQ0rOajAE5D09uE+kMMo/OZMRVZCsRIjTkUw/uK2nImIGfPz7IA=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724771911; c=relaxed/simple;
	bh=nNRIz068p/qgB1Y61AXhoZ04ufnISP5a48d3JNGk+ak=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=bDHe8cy/Dq/pjNvStO2lsCwOgITonfSNjPO+4sKPL/g3AzoIeNGAybFnHs889aDAheFg/+Zdl2mqCYtAtFcgbDmuNlRgFcY3IOochz733TLm693+U/tPIGF1PP+Fxr3btXkEfsEXSg21OpCZKeHdwt227Gx/zHVyLHCnxjIbpjk=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WtWLl05Yjz6K5VM;
	Tue, 27 Aug 2024 23:15:11 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id BD348140C9C;
	Tue, 27 Aug 2024 23:18:26 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Tue, 27 Aug
 2024 16:18:26 +0100
Date: Tue, 27 Aug 2024 16:18:25 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Message-ID: <20240827161825.0000146b@Huawei.com>
In-Reply-To: <adcc692e-8819-3741-31d3-d1202cc1b619@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-10-alejandro.lucero-palau@amd.com>
	<20240804185756.000046c5@Huawei.com>
	<adcc692e-8819-3741-31d3-d1202cc1b619@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml500003.china.huawei.com (7.191.162.67) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 19 Aug 2024 15:47:48 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/4/24 18:57, Jonathan Cameron wrote:
> > On Mon, 15 Jul 2024 18:28:29 +0100
> > alejandro.lucero-palau@amd.com wrote:
> >  
> >> From: Alejandro Lucero <alucerop@amd.com>
> >>
> >> CXL region creation involves allocating capacity from device DPA
> >> (device-physical-address space) and assigning it to decode a given HPA
> >> (host-physical-address space). Before determining how much DPA to
> >> allocate the amount of available HPA must be determined. Also, not all
> >> HPA is create equal, some specifically targets RAM, some target PMEM,
> >> some is prepared for device-memory flows like HDM-D and HDM-DB, and some
> >> is host-only (HDM-H).
> >>
> >> Wrap all of those concerns into an API that retrieves a root decoder
> >> (platform CXL window) that fits the specified constraints and the
> >> capacity available for a new region.
> >>
> >> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95c8acdc347345b4f
> >>
> >> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> >> Co-developed-by: Dan Williams <dan.j.williams@intel.com>  
> > Hi.
> >
> > This seems a lot more complex than an accelerator would need.
> > If plan is to use this in the type3 driver as well, I'd like to
> > see that done as a precursor to the main series.
> > If it only matters to accelerator drivers (as in type 3 I think
> > we make this a userspace problem), then limit the code to handle
> > interleave ways == 1 only.  Maybe we will care about higher interleave
> > in the long run, but do you have a multihead accelerator today?  
> 
> 
> I would say this is needed for Type3 as well but current support relies 
> on user space requests. I think Type3 support uses the legacy 
> implementation for memory devices where initially the requirements are 
> quite similar, but I think where CXL is going requires less manual 
> intervention or more automatic assisted manual intervention. I'll wait 
> until Dan can comment on this one for sending it as a precursor or as 
> part of the type2 support.
> 
> 
> Regarding the interleave, I know you are joking ... but who knows what 
> the future will bring. O maybe I'm misunderstanding your comment, 
> because in my view multi-head device and interleave are not directly 
> related. Are they? I think you can have a single head and support 
> interleaving, with multi-head implying different hosts and therefore 
> different HPAs.

Nothing says they heads are connected to different hosts.

For type 3 version the reason you'd do this is to spread load across
multiple root ports.  So it's just a bandwidth play and as far
as the host is concerned they might as well be separate devices.

For accelerators in theory you can do stuff like that but it gets
fiddly fast and in theory you might care that they are the same
device for reasons beyond RAS etc and might interleave access to
device memory across the two heads.

Don't think we care today though, so for now I'd just reject any
interleaving.

Jonathan

 


From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 3353A1CFBC;
	Tue, 27 Aug 2024 15:20:37 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724772039; cv=none; b=P43ZN8PmBMubijIpBRVC1SsfQASHS4v6zBYBpSO7PQCbThWtOmVzHM/T1OcD4IyjOV1C+O8tyhWkdM3xA77lpp5zQff7/LTjomRiwT0ngLPn5NW9mNjidPh02fkrYq6Ivmeu+pR9dEubUvTn630FtXmgBqCX98Hq2XfCGDdPfcA=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724772039; c=relaxed/simple;
	bh=OEClyW8tzUSHpxtCUWDullJ+70jg1UBt0vKBjD8Slqc=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=qSmW5deqNXkRAHQcOyqpcbXgGET8wsQFYJ/4LbwM4BNeqBAxaxfAE40x2MR/DLjpAAAUtvlhdPlsvOCQRUUvpdpdnZXuUIbqHqE6ZVGKUmTrzsuhtxLUuO7dSGgvY8Y5PxGWw3UpehBTx66dIw211AdV/5CyB+RiogtKVJB6vs8=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WtWNP04Lbz6J6gc;
	Tue, 27 Aug 2024 23:16:37 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 7D9B1140A87;
	Tue, 27 Aug 2024 23:20:35 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Tue, 27 Aug
 2024 16:20:34 +0100
Date: Tue, 27 Aug 2024 16:20:34 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: Zhi Wang <zhiw@nvidia.com>, <alejandro.lucero-palau@amd.com>,
	<linux-cxl@vger.kernel.org>, <netdev@vger.kernel.org>,
	<dan.j.williams@intel.com>, <martin.habets@xilinx.com>,
	<edward.cree@amd.com>, <davem@davemloft.net>, <kuba@kernel.org>,
	<pabeni@redhat.com>, <edumazet@google.com>, <richard.hughes@amd.com>,
	<targupta@nvidia.com>, <zhiwang@kernel.org>
Subject: Re: [PATCH v2 12/15] cxl: allow region creation by type2 drivers
Message-ID: <20240827162034.00005ef0@Huawei.com>
In-Reply-To: <17e5cf38-39f2-4136-fe2e-6936d8f45633@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-13-alejandro.lucero-palau@amd.com>
	<20240822161226.00001736.zhiw@nvidia.com>
	<17e5cf38-39f2-4136-fe2e-6936d8f45633@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100004.china.huawei.com (7.191.162.219) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Fri, 23 Aug 2024 10:31:20 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/22/24 14:12, Zhi Wang wrote:
> > On Mon, 15 Jul 2024 18:28:32 +0100
> > <alejandro.lucero-palau@amd.com> wrote:
> >  
> >> From: Alejandro Lucero <alucerop@amd.com>
> >>
> >> Creating a CXL region requires userspace intervention through the cxl
> >> sysfs files. Type2 support should allow accelerator drivers to create
> >> such cxl region from kernel code.
> >>
> >> Adding that functionality and integrating it with current support for
> >> memory expanders.
> >>
> >> diff --git a/drivers/net/ethernet/sfc/efx_cxl.c
> >> b/drivers/net/ethernet/sfc/efx_cxl.c index b5626d724b52..4012e3faa298
> >> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c
> >> +++ b/drivers/net/ethernet/sfc/efx_cxl.c
> >> @@ -92,8 +92,18 @@ void efx_cxl_init(struct efx_nic *efx)
> >>   
> >>   	cxl->cxled = cxl_request_dpa(cxl->endpoint, true,
> >> EFX_CTPIO_BUFFER_SIZE, EFX_CTPIO_BUFFER_SIZE);
> >> -	if (IS_ERR(cxl->cxled))
> >> +	if (IS_ERR(cxl->cxled)) {
> >>   		pci_info(pci_dev, "CXL accel request DPA failed");
> >> +		return;
> >> +	}
> >> +
> >> +	cxl->efx_region = cxl_create_region(cxl->cxlrd, &cxl->cxled,
> >> 1);
> >> +	if (!cxl->efx_region) {  
> > if (IS_ERR(cxl->efx_region))
> >  
> 
> I'll fix it.
> 
> Thanks
Please crop replies. It's really easy to miss the important stuff
otherwise!

Jonathan



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 980751BC073;
	Tue, 27 Aug 2024 15:23:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724772241; cv=none; b=aYV7gHVfrFwmGdVf4M+SIqQZQ6h78EyEXi/N2C0+32z7LIkHX+T79Yrw1c+/e9yXwuGEr13I3fNl9lhqqS1n1oR7cY8bpeAqwWuMI/e3c4vd2Ljyx6WChoAqcQqMOE6/vc/e1DidxqiYy9SNwblwCvKoDCVvOONxrTSQl6RxCKw=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724772241; c=relaxed/simple;
	bh=1o2XwCwyaWcKmYe9S4DCz9zjrQeFOcSC2p5cTt54IMU=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=RNnrrilOMOrmOC1yTyoHHJ0g5NlfrCAopqkgs0fnT6rnOuzoLUYAYe+Tn2ppwp6sHnBBMp17XQbW4liY5/qH2XD0VCCnW/II1cY+GIC9/F+FgcafsnBBzI7/9CxGGEtx+kqFR0bU0Ya/jc4dUQc+qU9TVP9eTsBxcaGYupCHv1s=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4WtWT371qlz6K9Bh;
	Tue, 27 Aug 2024 23:20:39 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id B8392140C9C;
	Tue, 27 Aug 2024 23:23:55 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Tue, 27 Aug
 2024 16:23:55 +0100
Date: Tue, 27 Aug 2024 16:23:54 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 15/15] efx: support pio mapping based on cxl
Message-ID: <20240827162354.00003208@Huawei.com>
In-Reply-To: <7e17a0f9-ef84-5ce1-3574-5d609525b7f1@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-16-alejandro.lucero-palau@amd.com>
	<20240804191339.00001eb9@Huawei.com>
	<7e17a0f9-ef84-5ce1-3574-5d609525b7f1@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100004.china.huawei.com (7.191.162.219) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Mon, 19 Aug 2024 17:28:46 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/4/24 19:13, Jonathan Cameron wrote:
> > On Mon, 15 Jul 2024 18:28:35 +0100
> > alejandro.lucero-palau@amd.com wrote:
> >  
> >> From: Alejandro Lucero <alucerop@amd.com>
> >>
> >> With a device supporting CXL and successfully initialised, use the cxl
> >> region to map the memory range and use this mapping for PIO buffers.  
> > This explains why you weren't worried about any step of the CXL
> > code failing and why that wasn't a 'bug' as such.
> >
> > I'd argue that you should still have the cxl intialization return
> > an error code and cleanup any state it if hits an error.  
> 
> 
> Ideally, but with devm* being used, this is not easy to do if the error 
> is not fatal.

That's usually a strong argument that you shouldn't use devm at that
level of abstraction.  

> 
> 
> > Then the top level driver can of course elect to use an alternative
> > path given that failure.  Logically it belongs there rather than relying
> > on a buffer being mapped or not.
> >  
> 
> Same driver needs to support same functionality which relies on those 
> specific hardware buffers.
> 
> The functionality is expected to be there with or without CXL. If the 
> hardware has no CXL, the system or the device, the functionality will be 
> there with legacy PCIe BAR regions. The green light for CXL use comes 
> from two sources: the firmware and the kernel. Both need to give the 
> thumbs up. If not, legacy PCIe BAR regions will be used.

Rather than going through full setup, see if you can figure out a minimal
(state free) check on whether it should work.

If a system is broken, then it's very different from a legacy system
with no support for CXL and we can maybe just handle the broken system
with errors (or quirks if it's a shipping system).

Jonathan
  
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2063.outbound.protection.outlook.com [40.107.237.63])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id BAA4A15535B;
	Wed, 28 Aug 2024 10:18:22 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.63
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724840304; cv=fail; b=haC62o84wjK66bjb/larWNkjcmMYKz4ak78HMCoHDOkv+vemYe4NHEiSayOKwyua4lCYQj08BSyuQHT3ktfDMnDgOFz9udXIJoEPtpI+oAcS0VQjRK7ZONCOw8MQ5rGPjS+WEU4V0fO6L9uKZdHN9NURFbW3yN1qyixWSPsK8Jc=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724840304; c=relaxed/simple;
	bh=B+MpLnABdrm+ZYbjjWKNCSBHeDPoxJe1QT4YMSMVf3k=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=ZeBFDN46PoNZwriCS+xyaSQAZSHda24mxyY8HYAaiY7JIHFZflpFItqyqbMwzszZ+gOCahVTYlTfTpMaholR0k7vJGvCaxvrJF2EYsM8NL5ay154ZJbMK4ML/No+DNiMN7u9tfbZ8BaR2RF1jNZ2KpaBmuUAQ9nAb8KHM8hgu8A=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=1fSgMzNO; arc=fail smtp.client-ip=40.107.237.63
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="1fSgMzNO"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=XUcTe0ir1raxRxXM9bd/J8YMxH9ZR/991MNbHCl6mFBpZIgEw1fGBfFj/r17KJpYoDo/j+Jv7xqfOR7lNUXrrr5mJBrqhlrGkoRpA435ZJKSAo47hF01p7WVHc8GShSsfYGNAU29UQrb8HuKFNvCCrsSQ07uLfdJDjCTyiD97+qJO88jqV96zZAreJdESH97qdhUfEPF/s0HkLrbeU5vQv6Exeldg1q3xpg7rcPiWZXJVNheak+lwxlaZ4Qn3w1mGven0d4Za1dZKrc0wh8emhEwTFBBtETMrvFZemhQ3plTU6ui3l63MnwIeDRWoEN0xdM4wVYvTWtCUkgOgeZs4g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=JAAMXfh2Vps7uPgDvutZAyCSke9JybSRzvphLjLvv7U=;
 b=HNvuEdX/Qp8T95Fj+MHHAyk3MabhfwmGmi5fA+yr0k+zNweamzz36m6PpIaxas/CrBcIgRXe8dugmRLJHW66cY71hnf1luzhnUutcvU+FRq3Dn+4JP3Hb/ohwoIVoeJE906rGIVozYt6yfeHhachgVcwwavRJ/W35FMVZx+Q9E7SydoklMqa/a0IyZWK0VwvtS7wy2/fOSPKGOOaHrEw+qfADsWTJh+A6GEoBkltlg+fkKLH/0HU9AnCQyhfq1JU5KdNmuhYaqlIru0Fk4ceJDG5zy6lpLw2E7OfXqrSq85d+9LJwwbXflcj3477cNg76nqoDesn2TQ65zh8PVit+w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=JAAMXfh2Vps7uPgDvutZAyCSke9JybSRzvphLjLvv7U=;
 b=1fSgMzNO3ku0uYobaKW826ZkAT3zG1xw5O3T92FaKyV9YXPLuEZD/i9mTWjb+n6gByxKitg8nO2AsPS+ZccmBMDspf8fV5eJQcmcIxUp3aK1V/KNRrfrVZmBpw7Yjvh9cEDnFTvUlGyrYjZv7GlKoH/qHTotPjvfy0M3v3Mne9k=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by PH7PR12MB7987.namprd12.prod.outlook.com (2603:10b6:510:27c::21) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.28; Wed, 28 Aug
 2024 10:18:19 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7897.027; Wed, 28 Aug 2024
 10:18:19 +0000
Message-ID: <a6751e81-7a14-a8c9-b6b6-038e50b1b588@amd.com>
Date: Wed, 28 Aug 2024 11:18:12 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
 <20240804185756.000046c5@Huawei.com>
Content-Language: en-US
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804185756.000046c5@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: DU2PR04CA0243.eurprd04.prod.outlook.com
 (2603:10a6:10:28e::8) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|PH7PR12MB7987:EE_
X-MS-Office365-Filtering-Correlation-Id: 40c31773-3fdf-4217-e1fd-08dcc74abd04
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|1800799024|366016;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?K20zb29rSGhrNG1Xc1NNOEdZSGhkd2Q5RWgxZjAyK2RnbDRXK3RsYTJQS3Rp?=
 =?utf-8?B?eGpjVjZYRHZXQXU5M0ZsYzlEZ3N4WklMbEs3Z1BrZlYwY1p4WXlDRE5xcU1Y?=
 =?utf-8?B?alZZOVlERGlOL1ErN2RSK2pTNzhJSXN2d2FZRWdqQlB5cy9lUUt5dDUzdGRs?=
 =?utf-8?B?VlB5dURPRlpWTnkzQ3J2NjE1Mm9oRWFFcC9lQlM5bDhENTU4M0VuczNKbWhK?=
 =?utf-8?B?V1BmcWZWYStrYTZsWUs5ZjYybkJLNndqTCtUeUNSME1KaVcvZ0ZoRkxNRTI0?=
 =?utf-8?B?YkczM3JLeFhuV2d5bGlySTM0MmJKSjFXZ015cTNSc0dwaFlEbnZpaHhyenJ4?=
 =?utf-8?B?dGRDY1RzcXpvanNLZzgwd2FzVnA0T1VuQzJ5OFRGVlZ6aTFhMHMwejV0YlJa?=
 =?utf-8?B?QVh3T2xLWTFpcm5nSlp2TEtSV1FXRjRkd0dTcWsybGx1ditvYUtIL0pvaCt3?=
 =?utf-8?B?NU5zQ01LRlM3NTNOVjNtaDFKQ2VLWkNFVGhVWGRTYUxRMlhSSUFOUDl1ellW?=
 =?utf-8?B?bmZhaGN2MXZoQ3N3TldYd2Vrb3ViclNRNGllSGlvN0ZwNzFUVFdQY1pmOXc5?=
 =?utf-8?B?aE1La09WUWtMSm43SVBKR2gyWEg5ZEQrWElqUW5JUjllMkR1WXJoeWg2dk94?=
 =?utf-8?B?MXFJVFpka2wxTzJNbjdsWkNFMytiaTErZ3U0TzE0dklQZGNLbnV1OFEvMHlT?=
 =?utf-8?B?Z3Fxbk44NzcwQ0VRN1Q5QXdWckVXbkdFQk5JM3dwemNLTmFwbXRoYzhJYjlO?=
 =?utf-8?B?QTUxT3ltOG1tZlJ4OUNCd2NJQXFybzJhN3RhRnNwV3JCU0RvVEEwZVZFS0Vh?=
 =?utf-8?B?Q3BscGFhSDgyR1BOM09DNGNyMS9PVmFaazNCNGszRFpyWlVQUVh4dXhiR3Ji?=
 =?utf-8?B?b1lnbTRmaTVkNktIZzlnMnE5MTRQQm5UM1hyZGxweVZZaWNPL1R1anBCQTV0?=
 =?utf-8?B?ZmdzSnF3di9ZK2lsQnZpM1NWb0c5VitxNmI1dXdTZTN2N1dxRUhIelRUZ1l3?=
 =?utf-8?B?UW9WdmhYdnZYQU1lMTVidFBIT1NGcUhXZ0tZRFNaOEVPV0l5OTNtVXRScG9N?=
 =?utf-8?B?OWtjdkRtL2xWblJCaXVibDN6R0phcFk2dmwyZ3JNaExleVVXaFl3N2dXTFY5?=
 =?utf-8?B?R0NFRDRMR2VjRUE1dmt5NDFUMC9iOFVRTUd0MVJkRmZjZ2UreUJOdG1tY05q?=
 =?utf-8?B?UkFKb0E5SEd2OVJiYzRCallHWUZRWlROV2xGM1QyN0JmREJCU0ZkUnNXL2Rq?=
 =?utf-8?B?OU91VDIxa0xPcFRnWVUzb3ZubDVUS2J6aWhkeDR1dWI2R0xyZFBxVFdkd3Nz?=
 =?utf-8?B?a3VmdVg0cnBnQTRlQm54SlF5S1pZd3Zkc0tkTFVtRlZZOWozd2o0NlRtMGJE?=
 =?utf-8?B?cnhqRWpCWC9TQ1VhaTVWMmhsdlRRaytScjVBN01oeWlIVG16NjBmNlQxUE1l?=
 =?utf-8?B?RHB2S3NkNTRTYTkzWXBKNksxQU5vMUhvU1ZzTGpCeUV6aTZpYlV4ZW5MWXFV?=
 =?utf-8?B?dm15VW4vbnFJWUN5b1U1ZWJQNU1VYWp0Z093SXgyQ3V1RUNLUzZLWHA1eTdi?=
 =?utf-8?B?RlA5aW9TK04wdmVHdCs0NmVMU0NFcVk5RysrU25WUC9BTEtiVVNnSjhSMG40?=
 =?utf-8?B?TzRCTkdzRHpEOVJFaE5hVFQwdXl0Z0pqcWx5SEFyS3VqSzNSdGtab1FzV1hS?=
 =?utf-8?B?Q3hKMk9xNjJHR0x1MmUyZVltYVl1YXFNUGw1Zi8ydUFkWElCOTZiVENjcnRC?=
 =?utf-8?Q?RYF4USTGpBBAVlsxw4=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(1800799024)(366016);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?cVVLNXprazdkT01MKzhoUFZuUmU3Q2N4dGZhTDMrdVN5MjFyQUtmV1pnV1lp?=
 =?utf-8?B?SFlxemU4eXlWbjNLc21jSnJ5SjlER3kveG5kWFR3eS9WRitBQm5rR0QvQldJ?=
 =?utf-8?B?M0pNRWlhMUkwMjhKd0ZjY0dLaVRFRVd0ZmFkcXc0Ylk0VUs5SmM2TC9zWUFJ?=
 =?utf-8?B?dEowNmFXYnE2NGFYZ3hCeStRVUhCYmVMcTlvS1hockEySEI0YUppT1lkK0hY?=
 =?utf-8?B?OWF6TXNVb0tPRkNkSUJLMTlLWEFJemdkV2hZSTUxUXh4MDhrU1k0SVJEVnNH?=
 =?utf-8?B?NFJnZDV5OVdiSVN1YjJ6d2NRanl5dFRQTmRIZkVNTVMvSGtKTHVzSXM5ajMy?=
 =?utf-8?B?Q09mZWxlR0tSVDR3M0JlNUF2RzBtNHBlVjdDTERuSVdRdElQUFpiakRVcU1m?=
 =?utf-8?B?QzRjTm1VMm05cGM5VTd0OFgrd2x0Zjc0anJGQzZSUG03cTlnaFVqbUNweUJC?=
 =?utf-8?B?NU5wMlVLL0tyTFZVYnFFeFNsQ0x5RTVFWkpuNXErWTkwMkVJR0dNOWRmVGhD?=
 =?utf-8?B?NGFWZkFsdThRVGR6VW5JK3dzWU5RZWNaeHBmdzh3dUJwSmJBWlp4cE1ISFJ5?=
 =?utf-8?B?cEFhZjhqemkvK2FVTWkzNzhkS3k4blI0anZVNHVhU3Jja0RFOTlDRGhiTHc2?=
 =?utf-8?B?ajc1WjI5cVdudEMzbjBJZmZ2dHdSZXhCM1RraFprV0hGeC9RRmZqNHZlMmNw?=
 =?utf-8?B?WEZEZjc4cmpwN3IwUUsySEMraG1WWFI0QkNRMGwzbDJwYjhUbEtrRmVTYmVu?=
 =?utf-8?B?SWV0MkpYMVVOMkM1T2pTbmRPSUVjMENlUjBnVXd6N01XRklrL1A1WmRXK1BL?=
 =?utf-8?B?d2hmTjA2QkQvV3hkWndLYVhkU3VkY25zaXd5N2FEZVRhOWNISUZ4QlVTNUFk?=
 =?utf-8?B?WklxSUhIY2llcE5lZWdkQ05RMG1Sd0szc21MbWZzdTRUUmRjZVViOFJ0ZGNi?=
 =?utf-8?B?OHVIbGplRFlDWlNMUHRmSnByVndyY0pOcktKUXVuei90Vmc1VHlpcHpNcExT?=
 =?utf-8?B?aStobmNhNHZncEpTYzl6VGRZMm9jUklsa1l3WmYxemRJRzczbk9Uelk0U3Iv?=
 =?utf-8?B?amwva3FDY1FoY2I2cDFmbGdQYmJ2amd1RWRFbVBiUWRqaVBHc3BucXJkajhL?=
 =?utf-8?B?bzBRSXZSRnBoYmxZNmZKTEtsYVpqNUlPQUZVelNxd3lheXgvZUVMS3EwSUUy?=
 =?utf-8?B?WjltOURxaFJDc0tlcFhiU2Z6azBtdDRodmgyU1plL3JRbkpWRUlXTzZYWWRw?=
 =?utf-8?B?Q2kxeUFvVWxLcU5BV1lKUWx1cXh0dE5nZS9sMkd0NEZNandTa2tnS2dRZTlk?=
 =?utf-8?B?UHlPVXljaU5UTUc4dVhpWkpKSTkvVnJlMlptenRENVdQeGUyNDNiQThtSTZP?=
 =?utf-8?B?MXFXT3pGK21FLzlVOFYwc0s5MDl5Z01NdFhROTBUM3VVV0ZiQ3YxTjNZcGN5?=
 =?utf-8?B?UjFiRGpCKzFpK1BVeTh3Sm5QMlFLSnE3TTcvODltcFpTSE02T25Db2V6NHBG?=
 =?utf-8?B?ZWF6elJ2emVTZjNIak1WNVExY0ZkUDdoQkpDYUZzVTAzcDM4YklFR1prYjhX?=
 =?utf-8?B?bGU1K2xMdGVaS0ZCc0ZXN0ZEK0pyc1IzV0tzcXNkaU5xSldRZjZTTjNJY212?=
 =?utf-8?B?UXV4cDAxZE5TdGYrVjNuNG1waDVZMWpQS1NvN2NpN2JyTlhpYXJ6azN5MHRy?=
 =?utf-8?B?T1YvZy9oQXJML2RjN2JqdnVCSktIelQranRlam9RSkFUczRXYlRicFJvQUlC?=
 =?utf-8?B?M1RvbVBXdGd1WlBGOHNNRml4Y1NkdzVDUEpqRFpycVYzd2NRUUJ2OGcrVnFv?=
 =?utf-8?B?azM3Tnc4QXNVaVI2SEF6Nm0zcjIrOHltS21JWGtYY1NkWXdrUXRGRDkzYmdK?=
 =?utf-8?B?SjFKU1NDcmdhV3BUMFhTOFpQNUhmb3VDdVZUZDY4dWtObm15ZkpjQnpSZGZ5?=
 =?utf-8?B?ODlRWHVMME5jNGZOTm9GQ1ZkVkFaeHNQdmdkSGN0NEliKzBwUkRUQnR4Mnl4?=
 =?utf-8?B?Ylo2SVQ0cWRIMHJDK2YwbDJ6S25CcVNlZGFGanFEc25rTDNmUVgxcTZmZXdW?=
 =?utf-8?B?cFRkaWcyUVNmNnZ0Q1hHeWFjTDZmcFRRRmFXK2l2L1BIYXlteFlLS2psd3ox?=
 =?utf-8?Q?JRQhxyPoSHIJi9DGr1/cPuOKT?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 40c31773-3fdf-4217-e1fd-08dcc74abd04
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Aug 2024 10:18:19.4464
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: q/sZM9Cv7AJPz8B2J7+Lws9FG/FOf7djKNqyPFjqzv4Fgt8PeN8xm++0esw/SQoA2Ycmkwk8tn4ODhsv9jrQ9A==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PH7PR12MB7987


On 8/4/24 18:57, Jonathan Cameron wrote:
> On Mon, 15 Jul 2024 18:28:29 +0100
> alejandro.lucero-palau@amd.com wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> CXL region creation involves allocating capacity from device DPA
>> (device-physical-address space) and assigning it to decode a given HPA
>> (host-physical-address space). Before determining how much DPA to
>> allocate the amount of available HPA must be determined. Also, not all
>> HPA is create equal, some specifically targets RAM, some target PMEM,
>> some is prepared for device-memory flows like HDM-D and HDM-DB, and some
>> is host-only (HDM-H).
>>
>> Wrap all of those concerns into an API that retrieves a root decoder
>> (platform CXL window) that fits the specified constraints and the
>> capacity available for a new region.
>>
>> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95c8acdc347345b4f
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
> Hi.
>
> This seems a lot more complex than an accelerator would need.
> If plan is to use this in the type3 driver as well, I'd like to
> see that done as a precursor to the main series.
> If it only matters to accelerator drivers (as in type 3 I think
> we make this a userspace problem), then limit the code to handle
> interleave ways == 1 only.  Maybe we will care about higher interleave
> in the long run, but do you have a multihead accelerator today?
>
> Jonathan
>
>> ---
>>   drivers/cxl/core/region.c          | 161 +++++++++++++++++++++++++++++
>>   drivers/cxl/cxl.h                  |   3 +
>>   drivers/cxl/cxlmem.h               |   5 +
>>   drivers/net/ethernet/sfc/efx_cxl.c |  14 +++
>>   include/linux/cxl_accel_mem.h      |   9 ++
>>   5 files changed, 192 insertions(+)
>>
>> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
>> index 538ebd5a64fd..ca464bfef77b 100644
>> --- a/drivers/cxl/core/region.c
>> +++ b/drivers/cxl/core/region.c
>> @@ -702,6 +702,167 @@ static int free_hpa(struct cxl_region *cxlr)
>>   	return 0;
>>   }
>>   
>> +
>> +struct cxlrd_max_context {
>> +	struct device * const *host_bridges;
>> +	int interleave_ways;
>> +	unsigned long flags;
>> +	resource_size_t max_hpa;
>> +	struct cxl_root_decoder *cxlrd;
>> +};
>> +
>> +static int find_max_hpa(struct device *dev, void *data)
>> +{
>> +	struct cxlrd_max_context *ctx = data;
>> +	struct cxl_switch_decoder *cxlsd;
>> +	struct cxl_root_decoder *cxlrd;
>> +	struct resource *res, *prev;
>> +	struct cxl_decoder *cxld;
>> +	resource_size_t max;
>> +	int found;
>> +
>> +	if (!is_root_decoder(dev))
>> +		return 0;
>> +
>> +	cxlrd = to_cxl_root_decoder(dev);
>> +	cxld = &cxlrd->cxlsd.cxld;
>> +	if ((cxld->flags & ctx->flags) != ctx->flags) {
>> +		dev_dbg(dev, "find_max_hpa, flags not matching: %08lx vs %08lx\n",
>> +			      cxld->flags, ctx->flags);
>> +		return 0;
>> +	}
>> +
>> +	/* A Host bridge could have more interleave ways than an
>> +	 * endpoint, couldn´t it?
> EP interleave ways is about working out how the full HPA address (it's
> all sent over the wire) is modified to get to the DPA.  So it needs
> to know what the overall interleave is.  Host bridge can't interleave
> and then have the EP not know about it.  If there are switch HDM decoders
> in the path, the host bridge interleave may be less than that the EP needs
> to deal with.
>
> Does an accelerator actually cope with interleave? Is aim here to ensure
> that IW is never anything other than 1?  Or is this meant to have
> more general use? I guess it is meant to. In which case, I'd like to
> see this used in the type3 driver as well.


I guess an accelerator could cope with interleave ways > 1, but not ours.

And it does not make sense to me an accelerator being an EP for an 
interleaved HPA because the memory does not make sense out of the 
accelerator.

So if the CFMW and the Host Bridge have an interleave way of 2, implying 
accesses to the HPA through different wires, I assume an accelerator 
should not be allowed.


>> +	 *
>> +	 * What does interleave ways mean here in terms of the requestor?
>> +	 * Why the FFMWS has 0 interleave ways but root port has 1?
> FFMWS?


I meant CFMW, and I think this comment is because I found out the CFMW 
is parsed with interleave ways = 0 then the root port having 1, what is 
confusing.


>
>> +	 */
>> +	if (cxld->interleave_ways != ctx->interleave_ways) {
>> +		dev_dbg(dev, "find_max_hpa, interleave_ways  not matching\n");
>> +		return 0;
>> +	}
>> +
>> +	cxlsd = &cxlrd->cxlsd;
>> +
>> +	guard(rwsem_read)(&cxl_region_rwsem);
>> +	found = 0;
>> +	for (int i = 0; i < ctx->interleave_ways; i++)
>> +		for (int j = 0; j < ctx->interleave_ways; j++)
>> +			if (ctx->host_bridges[i] ==
>> +					cxlsd->target[j]->dport_dev) {
>> +				found++;
>> +				break;
>> +			}
>> +
>> +	if (found != ctx->interleave_ways) {
>> +		dev_dbg(dev, "find_max_hpa, no interleave_ways found\n");
>> +		return 0;
>> +	}
>> +
>> +	/*
>> +	 * Walk the root decoder resource range relying on cxl_region_rwsem to
>> +	 * preclude sibling arrival/departure and find the largest free space
>> +	 * gap.
>> +	 */
>> +	lockdep_assert_held_read(&cxl_region_rwsem);
>> +	max = 0;
>> +	res = cxlrd->res->child;
>> +	if (!res)
>> +		max = resource_size(cxlrd->res);
>> +	else
>> +		max = 0;
>> +
>> +	for (prev = NULL; res; prev = res, res = res->sibling) {
>> +		struct resource *next = res->sibling;
>> +		resource_size_t free = 0;
>> +
>> +		if (!prev && res->start > cxlrd->res->start) {
>> +			free = res->start - cxlrd->res->start;
>> +			max = max(free, max);
>> +		}
>> +		if (prev && res->start > prev->end + 1) {
>> +			free = res->start - prev->end + 1;
>> +			max = max(free, max);
>> +		}
>> +		if (next && res->end + 1 < next->start) {
>> +			free = next->start - res->end + 1;
>> +			max = max(free, max);
>> +		}
>> +		if (!next && res->end + 1 < cxlrd->res->end + 1) {
>> +			free = cxlrd->res->end + 1 - res->end + 1;
>> +			max = max(free, max);
>> +		}
>> +	}
>> +
>> +	if (max > ctx->max_hpa) {
>> +		if (ctx->cxlrd)
>> +			put_device(CXLRD_DEV(ctx->cxlrd));
>> +		get_device(CXLRD_DEV(cxlrd));
>> +		ctx->cxlrd = cxlrd;
>> +		ctx->max_hpa = max;
>> +		dev_info(CXLRD_DEV(cxlrd), "found %pa bytes of free space\n", &max);
> dev_dbg()
>
>> +	}
>> +	return 0;
>> +}
>> +
>> +/**
>> + * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
>> + * @endpoint: an endpoint that is mapped by the returned decoder
>> + * @interleave_ways: number of entries in @host_bridges
>> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
>> + * @max: output parameter of bytes available in the returned decoder
> @available_size
> or something along those lines. I'd expect max to be the end address of the available
> region
>
>> + *
>> + * The return tuple of a 'struct cxl_root_decoder' and 'bytes available (@max)'
>> + * is a point in time snapshot. If by the time the caller goes to use this root
>> + * decoder's capacity the capacity is reduced then caller needs to loop and
>> + * retry.
>> + *
>> + * The returned root decoder has an elevated reference count that needs to be
>> + * put with put_device(cxlrd_dev(cxlrd)). Locking context is with
>> + * cxl_{acquire,release}_endpoint(), that ensures removal of the root decoder
>> + * does not race.
>> + */
>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>> +					       int interleave_ways,
>> +					       unsigned long flags,
>> +					       resource_size_t *max)
>> +{
>> +
>> +	struct cxlrd_max_context ctx = {
>> +		.host_bridges = &endpoint->host_bridge,
>> +		.interleave_ways = interleave_ways,
>> +		.flags = flags,
>> +	};
>> +	struct cxl_port *root_port;
>> +	struct cxl_root *root;
>> +
>> +	if (!is_cxl_endpoint(endpoint)) {
>> +		dev_dbg(&endpoint->dev, "hpa requestor is not an endpoint\n");
>> +		return ERR_PTR(-EINVAL);
>> +	}
>> +
>> +	root = find_cxl_root(endpoint);
>> +	if (!root) {
>> +		dev_dbg(&endpoint->dev, "endpoint can not be related to a root port\n");
>> +		return ERR_PTR(-ENXIO);
>> +	}
>> +
>> +	root_port = &root->port;
>> +	down_read(&cxl_region_rwsem);
>> +	device_for_each_child(&root_port->dev, &ctx, find_max_hpa);
>> +	up_read(&cxl_region_rwsem);
>> +	put_device(&root_port->dev);
>> +
>> +	if (!ctx.cxlrd)
>> +		return ERR_PTR(-ENOMEM);
>> +
>> +	*max = ctx.max_hpa;
> Rename max_hpa to available_hpa.
>
>> +	return ctx.cxlrd;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_get_hpa_freespace, CXL);
>> +
>> +

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-DM6-obe.outbound.protection.outlook.com (mail-dm6nam10on2077.outbound.protection.outlook.com [40.107.93.77])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 3A17F5A79B;
	Wed, 28 Aug 2024 10:41:20 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.93.77
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724841682; cv=fail; b=DIsSjKBXSWVIcc59+Je4ZQYIAgZOx8XNT6kfLgzJ+IyEEvQxzWoodG+gyAuUAwiAOug332B/GmwdjuUTzkWecOTmeTfwqFNi1sGyGpLuFgOUEcW3mcq4Ja4lOPju6/vRE8ANHmc1Z8n2tR3o5xOE3CCyDS2Ug5E9x1KpH9NFaj8=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724841682; c=relaxed/simple;
	bh=LGoq/x+h6NzScVEAegH8QFep60DF6S5fxT5G+T/lGxs=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=DtNY+6rxEzi5oIe6gnFctWNt+n9td3K1VFxSGi2oD9YVVD9iMS3ycvmXQ75yINMlRaxmAzvjv/nU2Ljt3Xje67MCgQFuMSRKjPSDOcH006PfwfbizBxal3MkzjtHdG4c1HoT6pGQFQ1sALl7FaTU8vYLioS9dZIKJgDMXCD2Fa4=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=cl4V/vMt; arc=fail smtp.client-ip=40.107.93.77
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="cl4V/vMt"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=BxxLt+HR7XzCZwVkRhpnnt5GJdMaWCc12oE0c9L2yG/SUJxCu5a7hYOH8Im/tY+eFgbeg7/sU5nOE53Qw4EPDEso9OmYebJlN/aEc+mmqXTKkkPqgY/79xZ2zFgeywhp0gd0WieffWhSJG+GFMbgTEC5RP+TxIrbEAODOexxE5e10n4lgvKYylLOe73Z+PCvolrmBVF3ur8WnGxoVWfA0DQtYPLAkcHYwk4cCP5Vbga6IbZqFb8wnWM78QRpg86/IuLbqo1P49kwPMKUHUgKlliI4OalX9qnJTlE5nfwIexw5DuxhQx4dF65IBBO7woCpThozLWf+P7me1QbrPFPjQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=RWfYBpIh45ipZ60ODm7nNbvUVG0Amd2AM1R7zB8hC6o=;
 b=xkORnmLCtkCiyYdRL/3oMWs8XKBM4YmcF4IMANrQw+Ddq8inrsCyMB+jqAJiRnXTAKfi6KlDvqttJmFq1y7K+30KrEAGa0FPwJSR79t4jn4FrmIyL3CPQ7mVgx9ElyBLf7O9V6Y+XzAmOojR40fy7TPsm2IUllr0OgJUhKxHovqZJc7C0/St2MqndzKHFGy7XYgJwsOOplalDV6cyf5smTtDaQM5KKBZnJO8OlYuLpmBAIrY7hPEKZDkhG3Ts4OHRGJMa3jDRbHzCl0VoAOm6hi5lBzAK7v+UH+eO2vm0WNyDXkPVFmAROSAjF0fWQMWSAxSj8YXA1DOQX3o7SgS5g==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=RWfYBpIh45ipZ60ODm7nNbvUVG0Amd2AM1R7zB8hC6o=;
 b=cl4V/vMtYh+Y/6wMhC4RbzxeU+FgN8SHxwHKxfF+TJmeRbOaSDiRrKOX1FES3672GXbiKW0fv02Rq5uXryn+xauDjCBwsbl50a0kwkrheGFe2lnQcdQJHtmNOiBMQrOWbt2mFHd6mno1xjY2BJ5eWll5Fq0PiqPXAo0wQIrFxS0=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by CH3PR12MB9431.namprd12.prod.outlook.com (2603:10b6:610:1c1::7) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.27; Wed, 28 Aug
 2024 10:41:19 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7897.027; Wed, 28 Aug 2024
 10:41:19 +0000
Message-ID: <446d8183-d334-bf5c-8ba8-de957b7e8edb@amd.com>
Date: Wed, 28 Aug 2024 11:41:11 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>,
 alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
 <20240804185756.000046c5@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240804185756.000046c5@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P123CA0677.GBRP123.PROD.OUTLOOK.COM
 (2603:10a6:600:351::20) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|CH3PR12MB9431:EE_
X-MS-Office365-Filtering-Correlation-Id: 54f0625e-f6bd-4f86-857b-08dcc74df344
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|376014|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?TU1McWc1WmtMVm9nV3AyRW9reS82TXF0UWw3OWk2ZHZ4ZE5xVUF1SElWYzFT?=
 =?utf-8?B?STlPZUJtazNOMHRYbVRrMWJheEZ3cnFicEVpZTJCVlRDNEs0RUg3bStZemVu?=
 =?utf-8?B?K0c1OG03YmhYR3A5ZXl6eUplWVI2UjY4Njc5d2l2QUd3LzN2b3BVc1RXSjg0?=
 =?utf-8?B?WWVzcHZpNktpN2wyZ09PUDNnTE5YM2Y2Tk1TaHBab1B6eW1CZXBXWGdWRHZu?=
 =?utf-8?B?R3F6eW1jYUNFZkFSY0VsN2JxbFVpKzlzSVlFUDh0QWpLOVUvdU5ycmRFOXU5?=
 =?utf-8?B?U2g3MU1GbmF3VWtuL0N4cStOd0hhR1lkUitRTFhNc1NISVVrdjZMcStubjV3?=
 =?utf-8?B?V1VmK01pVFppeGpheGkwTlFKUTFkWjIwMlMvS3FWZitQSjRNejBObnJFdDR2?=
 =?utf-8?B?R1BHZ3czQldEQ1BNTmJCc1pRSGhxaVE0NDhXL1FyNnRRbUYvTkRYYnh0R08x?=
 =?utf-8?B?aTFJR05qSGVRdDZVeUp0ODQrWk1mRTFKOG1wZVI3bHJiV3daaktMai9YdGhS?=
 =?utf-8?B?S0pzY0tIMWF2QXc4MHN1R0pOS1NRS3hJS0N5MVIxOEZqdm1RYVlPT2orR0xH?=
 =?utf-8?B?dWgydHB6OFZkUlBhNDFycTVBdlpkQzcyZittTkFNWDFHT1lWaUdsK3V4K1ox?=
 =?utf-8?B?SW1WYVA2YTNCZkd2TUVwejJoSkF5eTFsUmdOVTVTRmkrZStKOXQwUDEzMkkr?=
 =?utf-8?B?R2RLcG5iRmJWTFY3N3dtcXNkTGF0QWZzNTFydEY1S2JvZUhUVW41UTVuYWlG?=
 =?utf-8?B?aC8rK1RmOGZMK29XRTJRQWxyZmpXTjAvVkZmTVowdndVQkpLckt2UXNSamM2?=
 =?utf-8?B?MUVFTThSUkttM0dWYkV4L2ZFWFJPS2c1dkNJSDdlM1pqWXVidENoRHQvVnJh?=
 =?utf-8?B?NVlydURPV09NNUFOQmZOMHZnc283R1dwMmhnbkIyQ0hyenBBeGRpUnlvdEMv?=
 =?utf-8?B?YXRHcW5FQ2p3eXBObnRyaXNYRUpGcWROb3o5UXZjM0JxN1JsOGJpVDAwV01N?=
 =?utf-8?B?SU53Nmt2ZVJyYVRtYzFBVWdBcFN5Y2xGTUdmMTNFdDI1eWV5b2FSMG5lejlj?=
 =?utf-8?B?dFJjZkdnWjhPMWw3ME10L3FOWmFGaUlyMU1EUDdhaEJzODhqdDFURmQrQVRD?=
 =?utf-8?B?TEpkZTFQdWUwZ2s1eXozUTRhSytOVFBhMmtwTGlEVmZGWEJYUkR0Y3g2cTUy?=
 =?utf-8?B?TVJNdUF5SEI4N0dOcGhtNzdEM283TWhBSDlVclhoSVRLQVB1RGdFcHVwSHB5?=
 =?utf-8?B?TVh2VFo4YndOeGozNmFNaFFXZW82dUlVSGJBWDNXVml5K0VscTZyVGhCRjVx?=
 =?utf-8?B?enVIaUZIVUVZVXFEd2ZsYlZhdDduSHdWTC9rY3NmcUNKSllMb0kxVEtkRDJn?=
 =?utf-8?B?OSs3cGNlZVEwUDlUTkhuaGhlWlZHWEdIOTJpcktCc1BxSUltUWx5OUQ4RE9t?=
 =?utf-8?B?dWZKMjU2TjR4WDZnOEtUSXdjSE4zczVSZ0NTM0VIN3hYbGY0NGI5T1UycDFR?=
 =?utf-8?B?cklGVFpkQ3dYQkFqOHpaQkdPcWVESWh1NHhUQVQ4b2owRnZ4RGVqcHd5bmlE?=
 =?utf-8?B?cEhQbGZqQm5iQU40REdWSUMxbTViVlhLRVhLUm5qMWw3bzN2NEJIOXVsNEVX?=
 =?utf-8?B?V0o4RjFIQ282b0d6K20zWGdBdHYveEdOUStUek9oQTZmZ2l3Ym5IN1VmNnVq?=
 =?utf-8?B?OThreFMxR1ptcjJNbXhRbExxMnVkejFCekRtb2FEOWtVdzhjUTdJYUM5ZkNO?=
 =?utf-8?B?Snh1OVZRQ0hldWdjVzg4RHFrMVVGVUdBcWFzVHh3NkFvYnR3L0JaUTN3T2Jx?=
 =?utf-8?B?ZnJvcStJNXA1WWZqUUxtUT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(376014)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?UmJOWlFRdUxWOU5pSUFQM21FMzFiR05SdHprS3RES3VlejN5VndZeTdFb0hO?=
 =?utf-8?B?TDVrZG9XMzZGYjVtTkJRV0xRV1plQ3FNZGJBcWYyREt1TTdldTRCNFpTTU9G?=
 =?utf-8?B?VjlMWnBQd1Jyb0F5dWJrRE5LR3dVQmNUdWpTYXh6aldjeVRXaDBKcHR0SWs2?=
 =?utf-8?B?R3I0N3hSb1lteHVvYWxRUVBmT3JwZ3p0TXA5dnAzN2RKU0JzRk9LbWxJUTJn?=
 =?utf-8?B?aWU5WUhLSG1xQUp0R0NqK3ZDTklEWHNtbnB4SmZUemZ2QUFLOGI5ejFPcjZ4?=
 =?utf-8?B?aERDY0lFMzAwYTdUMklKbnVheDRrWTdvV2dKa0xrRGlhNU0zVEdHdmU3Z3oz?=
 =?utf-8?B?dGpneDM4b2xyTkdzUzlVU3lnZkJaS0dEWXRmL1NTMCsvNHpJcVRMNWxQV0xB?=
 =?utf-8?B?UXpsY0dDdWpTdTU3MTRYY2VuVGw2UUpDRTFHWFRLbysrbG1pcDRBVk8rck1j?=
 =?utf-8?B?ZmNUaXR4UUVGVVRCN0p1NGdrRWpRZDVxeDV5MUxFc1ZXSUY2R1BlU1pGbjdT?=
 =?utf-8?B?U0ZwOGNaNENXcitScGNrWDMyY0tJNDhjck9pQUlreW1WenNIdWJvZXhzaTJQ?=
 =?utf-8?B?eEUyc1VoS0pFL0RBYzFWaXQvOWhrSFFHZnVYcU5wOXlSRW52eEVOc0phQno5?=
 =?utf-8?B?OVd2bG0yYTI2ZDlZTWM4ZU1QTXg1b1hJSy91UVY2T1J2THJTd1NpWG5mVk1K?=
 =?utf-8?B?ZEswMm9JQWdwTkFza0VSTmtzTjhPT2R0TWNyUlowQkRURC91TVBnZy95TWdm?=
 =?utf-8?B?NnU1QVljbGRzeEZUR1VFNjlwTGk1bDRIc05oNm5uUUxPOThWSFpxZlRUTEdn?=
 =?utf-8?B?bVo0RzZpdmFHdUhVdnRsTERMcGlsaHNkVDZ1RjBuY2toRG1RR3dmRUhON242?=
 =?utf-8?B?MlNucTVDaVdEY0RyY2Zxbm5JNTZMV1FtMkYwT3dIVkExM0tvdUUrTHNZVHRX?=
 =?utf-8?B?L2UzWGliTXAwZ1ZxdEFsTGh1WWVPd0FYUmUzdlJrall2QXJBZ2pzM1BqTWYx?=
 =?utf-8?B?T2p4UDUwQzJlR3lUR2Y4K0M5WElCZDdIYUZYU3p2aXpseDJqNHJjdWppWHQy?=
 =?utf-8?B?VVRDSmsrNHRremlQU3EvbUtoTjJSeTJQUEhuRGFKdHZjK1RJNFFqSEwxdEJT?=
 =?utf-8?B?OHZlZXRuSmJGZXJrcmQ2LzVqYndNeU0zTGROMlJJQWh5UFY5RXFZeitqQnFr?=
 =?utf-8?B?Ykx2QXp0TjlQVXkxWGp0OVIvWGZIY3REdVhVQmR0a1VHMHcxMy82UXNFNHNr?=
 =?utf-8?B?QS9xSVkzSE00Z3ZMdENjRDI1ME5jS1pIK1g4bTJZTzZ0MXdhcVBHS0lSRGtR?=
 =?utf-8?B?RitYQUMvSWZIOTFISkxzZEJmV3FWVmk0MFNSUnFlUG5wcHIyVWwvL0xLZEhG?=
 =?utf-8?B?SXBNaEpOVStDdkZ2ZjhmUjZ4bG5ZWGxGY05BZzdiTVFoUHJxMWc1dHNxKzI1?=
 =?utf-8?B?dk5MV2sxZHVidE5MUkdseEYwTnBmMTVRSkZzeVRZKzE0eHE0TTI5eFFjdGlw?=
 =?utf-8?B?UXNrdU5COExWNFc2Q2xVUDhRQ254cTl1K2JBeE5iZXVIazh0NTRCdFY1Z0pY?=
 =?utf-8?B?OHRtTUZzRzJqWXBoYWh6eEFzbzdoa3VnTmRmQU01OElUMG5GcklNSGtCbW82?=
 =?utf-8?B?V3ZOeFZISDM4WFBxSHFrRWp2Skt6UGpNZll6NEQyeDRQdGpMVmc2TXF2Ykpj?=
 =?utf-8?B?QVBVSWMyVFpkdlI4YTZ5MUZSUngrMStXZFBVSStNd2UvTUE2Y04yYllIWHhB?=
 =?utf-8?B?WkdBNkl0OTZFR2ZEVUV3b0x3d1gzUWhtaW92d0FZT25IYml2dnozd0N3YmRY?=
 =?utf-8?B?ZkU1ZFZiZ3Q3QWMrVWRST0N6bVZUY25FU3pxZ1VNNElnV0MrNEg4RFpCRmNI?=
 =?utf-8?B?NHhjUE8yZDUwcXdDSUQ0VGZkZzNWRVI1Qk9wUnNKNW9ZQkFjOHVEbmpveVR3?=
 =?utf-8?B?TEk4dW45b3dDY2lVWDlwbnQzRjdOdXRZQnNGVncvRDJyTW1QK0ZzcVkzTWEy?=
 =?utf-8?B?TWZBNmxCNEd1dXc0dVZyOHhXMnBvTnByL2JyTWJrSW91Yk1TZlBpUzdJZ2pW?=
 =?utf-8?B?NVNnSFBxMXNOaFhjNmI1ekxNV25LLzdnbjVKK2x1SndOSTE2RDlqUkJXL2Vy?=
 =?utf-8?Q?29YUNsGxmoH1ltiMU0hJCWfPz?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 54f0625e-f6bd-4f86-857b-08dcc74df344
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Aug 2024 10:41:18.9730
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: xCJ0aBAckObfQj1OYk8IW/dB+Htb8lObDlXpgvIvJ+uSr7j1Jq4t5O3RRr62xa8x1mw+06d+HdFVBUrGFE3nHQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH3PR12MB9431


On 8/4/24 18:57, Jonathan Cameron wrote:
> + }
>> +	return 0;
>> +}
>> +
>> +/**
>> + * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
>> + * @endpoint: an endpoint that is mapped by the returned decoder
>> + * @interleave_ways: number of entries in @host_bridges
>> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
>> + * @max: output parameter of bytes available in the returned decoder
> @available_size
> or something along those lines. I'd expect max to be the end address of the available
> region


No really. The code looks for the biggest free hole in the HPA. 
Returning available size does not help except from informing about the 
"internal fragmentation".


>> + *
>> + * The return tuple of a 'struct cxl_root_decoder' and 'bytes available (@max)'
>> + * is a point in time snapshot. If by the time the caller goes to use this root
>> + * decoder's capacity the capacity is reduced then caller needs to loop and
>> + * retry.
>> + *
>> + * The returned root decoder has an elevated reference count that needs to be
>> + * put with put_device(cxlrd_dev(cxlrd)). Locking context is with
>> + * cxl_{acquire,release}_endpoint(), that ensures removal of the root decoder
>> + * does not race.
>> + */
>> +struct cxl_root_decoder *cxl_get_hpa_freespace(struct cxl_port *endpoint,
>> +					       int interleave_ways,
>> +					       unsigned long flags,
>> +					       resource_size_t *max)
>> +{
>> +
>> +	struct cxlrd_max_context ctx = {
>> +		.host_bridges = &endpoint->host_bridge,
>> +		.interleave_ways = interleave_ways,
>> +		.flags = flags,
>> +	};
>> +	struct cxl_port *root_port;
>> +	struct cxl_root *root;
>> +
>> +	if (!is_cxl_endpoint(endpoint)) {
>> +		dev_dbg(&endpoint->dev, "hpa requestor is not an endpoint\n");
>> +		return ERR_PTR(-EINVAL);
>> +	}
>> +
>> +	root = find_cxl_root(endpoint);
>> +	if (!root) {
>> +		dev_dbg(&endpoint->dev, "endpoint can not be related to a root port\n");
>> +		return ERR_PTR(-ENXIO);
>> +	}
>> +
>> +	root_port = &root->port;
>> +	down_read(&cxl_region_rwsem);
>> +	device_for_each_child(&root_port->dev, &ctx, find_max_hpa);
>> +	up_read(&cxl_region_rwsem);
>> +	put_device(&root_port->dev);
>> +
>> +	if (!ctx.cxlrd)
>> +		return ERR_PTR(-ENOMEM);
>> +
>> +	*max = ctx.max_hpa;
> Rename max_hpa to available_hpa.
>
>> +	return ctx.cxlrd;
>> +}
>> +EXPORT_SYMBOL_NS_GPL(cxl_get_hpa_freespace, CXL);
>> +
>> +

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 4BF7B16BE1D;
	Wed, 28 Aug 2024 11:19:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724844002; cv=none; b=Y52FAGfBxHDUSgZrTY6tau584jF6nroIMhd1gsr6ZnTJOBHxbA1f+8QKZMI+e5indeu4758j+aDyMlXZJVI/CGUYf+A6jwQqsEGAEd3d/WnqEPJc6ChX+Ad6FbiHwNiFLH4dsH2PCoAu/EtSwj2V2CO6AMQ6pmyMyAAOn1EJq8c=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724844002; c=relaxed/simple;
	bh=Yn1bCe0Ywc5LYHwIAuylM9sxlTZCQHCCKjEHNXtUZP8=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=AlE9rcbYJuvTfi/d15tGAEFfsEllYvOvm2jlhtxypQ3HTSwPS90MrauCig/pYtuNPWo22fkYB4xENvJuwUWb0Cc9YbJPYSmoaAXuxfWm44vHrYzVwJ7BAGkQHNwz5j8l/e8YCGZXK6Es6Q7V7vIyt4FuvIM0NJFeW03lQJwhh0U=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4Wv20y1b5mz6J7Ln;
	Wed, 28 Aug 2024 19:16:34 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id 5C05B14038F;
	Wed, 28 Aug 2024 19:19:50 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Wed, 28 Aug
 2024 12:19:49 +0100
Date: Wed, 28 Aug 2024 12:19:48 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Message-ID: <20240828121948.00001105@Huawei.com>
In-Reply-To: <a6751e81-7a14-a8c9-b6b6-038e50b1b588@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-10-alejandro.lucero-palau@amd.com>
	<20240804185756.000046c5@Huawei.com>
	<a6751e81-7a14-a8c9-b6b6-038e50b1b588@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="ISO-8859-1"
Content-Transfer-Encoding: quoted-printable
X-ClientProxiedBy: lhrpeml100003.china.huawei.com (7.191.160.210) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Wed, 28 Aug 2024 11:18:12 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/4/24 18:57, Jonathan Cameron wrote:
> > On Mon, 15 Jul 2024 18:28:29 +0100
> > alejandro.lucero-palau@amd.com wrote:
> > =20
> >> From: Alejandro Lucero <alucerop@amd.com>
> >>
> >> CXL region creation involves allocating capacity from device DPA
> >> (device-physical-address space) and assigning it to decode a given HPA
> >> (host-physical-address space). Before determining how much DPA to
> >> allocate the amount of available HPA must be determined. Also, not all
> >> HPA is create equal, some specifically targets RAM, some target PMEM,
> >> some is prepared for device-memory flows like HDM-D and HDM-DB, and so=
me
> >> is host-only (HDM-H).
> >>
> >> Wrap all of those concerns into an API that retrieves a root decoder
> >> (platform CXL window) that fits the specified constraints and the
> >> capacity available for a new region.
> >>
> >> Based on https://lore.kernel.org/linux-cxl/168592149709.1948938.866342=
5987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m6fbe775541da3cd477d65fa95=
c8acdc347345b4f
> >>
> >> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
> >> Co-developed-by: Dan Williams <dan.j.williams@intel.com> =20
> > Hi.
> >
> > This seems a lot more complex than an accelerator would need.
> > If plan is to use this in the type3 driver as well, I'd like to
> > see that done as a precursor to the main series.
> > If it only matters to accelerator drivers (as in type 3 I think
> > we make this a userspace problem), then limit the code to handle
> > interleave ways =3D=3D 1 only.  Maybe we will care about higher interle=
ave
> > in the long run, but do you have a multihead accelerator today?
> >
> > Jonathan
> > =20
> >> ---
> >>   drivers/cxl/core/region.c          | 161 +++++++++++++++++++++++++++=
++
> >>   drivers/cxl/cxl.h                  |   3 +
> >>   drivers/cxl/cxlmem.h               |   5 +
> >>   drivers/net/ethernet/sfc/efx_cxl.c |  14 +++
> >>   include/linux/cxl_accel_mem.h      |   9 ++
> >>   5 files changed, 192 insertions(+)
> >>
> >> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
> >> index 538ebd5a64fd..ca464bfef77b 100644
> >> --- a/drivers/cxl/core/region.c
> >> +++ b/drivers/cxl/core/region.c
> >> @@ -702,6 +702,167 @@ static int free_hpa(struct cxl_region *cxlr)
> >>   	return 0;
> >>   }
> >>  =20
> >> +
> >> +struct cxlrd_max_context {
> >> +	struct device * const *host_bridges;
> >> +	int interleave_ways;
> >> +	unsigned long flags;
> >> +	resource_size_t max_hpa;
> >> +	struct cxl_root_decoder *cxlrd;
> >> +};
> >> +
> >> +static int find_max_hpa(struct device *dev, void *data)
> >> +{
> >> +	struct cxlrd_max_context *ctx =3D data;
> >> +	struct cxl_switch_decoder *cxlsd;
> >> +	struct cxl_root_decoder *cxlrd;
> >> +	struct resource *res, *prev;
> >> +	struct cxl_decoder *cxld;
> >> +	resource_size_t max;
> >> +	int found;
> >> +
> >> +	if (!is_root_decoder(dev))
> >> +		return 0;
> >> +
> >> +	cxlrd =3D to_cxl_root_decoder(dev);
> >> +	cxld =3D &cxlrd->cxlsd.cxld;
> >> +	if ((cxld->flags & ctx->flags) !=3D ctx->flags) {
> >> +		dev_dbg(dev, "find_max_hpa, flags not matching: %08lx vs %08lx\n",
> >> +			      cxld->flags, ctx->flags);
> >> +		return 0;
> >> +	}
> >> +
> >> +	/* A Host bridge could have more interleave ways than an
> >> +	 * endpoint, couldn=B4t it? =20
> > EP interleave ways is about working out how the full HPA address (it's
> > all sent over the wire) is modified to get to the DPA.  So it needs
> > to know what the overall interleave is.  Host bridge can't interleave
> > and then have the EP not know about it.  If there are switch HDM decode=
rs
> > in the path, the host bridge interleave may be less than that the EP ne=
eds
> > to deal with.
> >
> > Does an accelerator actually cope with interleave? Is aim here to ensure
> > that IW is never anything other than 1?  Or is this meant to have
> > more general use? I guess it is meant to. In which case, I'd like to
> > see this used in the type3 driver as well. =20
>=20
>=20
> I guess an accelerator could cope with interleave ways > 1, but not ours.
>=20
> And it does not make sense to me an accelerator being an EP for an=20
> interleaved HPA because the memory does not make sense out of the=20
> accelerator.
>=20
> So if the CFMW and the Host Bridge have an interleave way of 2, implying=
=20
> accesses to the HPA through different wires, I assume an accelerator=20
> should not be allowed.
That's certainly fine for now. 'maybe' something will come along that can
make use of interleaving (I'm thinking of Processing near memory type setup
where it's offloading minor stuff more local to the memory but is basically
type 3 memory)
>=20
>=20
> >> +	 *
> >> +	 * What does interleave ways mean here in terms of the requestor?
> >> +	 * Why the FFMWS has 0 interleave ways but root port has 1? =20
> > FFMWS? =20
>=20
>=20
> I meant CFMW, and I think this comment is because I found out the CFMW=20
> is parsed with interleave ways =3D 0 then the root port having 1, what is=
=20
> confusing.
>=20
I'm a bit lost.  Maybe this is just encoded and 'real' values?
1 way interleave is just not interleaving.

Jonathan



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from frasgout.his.huawei.com (frasgout.his.huawei.com [185.176.79.56])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id C87563FEC;
	Wed, 28 Aug 2024 11:26:24 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=185.176.79.56
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724844388; cv=none; b=CI5FtEB1g1FODa0GW5bhfevMXdHHZeHEc3USld50bFK/ULMcYlCyd3ZmSYuQaN/DXQeqnMKZjo0y6Q3ReVhIiD3eN270upMqUIGdQUCjAwuTgBA+neWvDHpqVJNCBvJg660ZvZJg63Ha3T+0ertkVlve2N99nnbHwyxoTQXPpcQ=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724844388; c=relaxed/simple;
	bh=Le1Vfo7fOKhLyWpNlP2q66mH8jrOV4x4y91GBTZVU2k=;
	h=Date:From:To:CC:Subject:Message-ID:In-Reply-To:References:
	 MIME-Version:Content-Type; b=JZGv3iZsI3KoWZwAuPBej4DxauQ4h53+rEP9Bo8pOIKWmwpREE54iVgInMKSr5V50oFGm9HDWRW3zBInsx2vHEC+IiK2dt3SP635/qupkBeXDWw0y+XYka0Q4U7eyTwA/ikwEjB2m640N93oUNcxnTQwerhbcHzM2CoirHLjxN0=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com; spf=pass smtp.mailfrom=huawei.com; arc=none smtp.client-ip=185.176.79.56
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=Huawei.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=huawei.com
Received: from mail.maildlp.com (unknown [172.18.186.31])
	by frasgout.his.huawei.com (SkyGuard) with ESMTP id 4Wv28S5Yvrz6K8n6;
	Wed, 28 Aug 2024 19:23:04 +0800 (CST)
Received: from lhrpeml500005.china.huawei.com (unknown [7.191.163.240])
	by mail.maildlp.com (Postfix) with ESMTPS id E2D30140B20;
	Wed, 28 Aug 2024 19:26:22 +0800 (CST)
Received: from localhost (10.203.177.66) by lhrpeml500005.china.huawei.com
 (7.191.163.240) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.1.2507.39; Wed, 28 Aug
 2024 12:26:14 +0100
Date: Wed, 28 Aug 2024 12:26:13 +0100
From: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
To: Alejandro Lucero Palau <alucerop@amd.com>
CC: <alejandro.lucero-palau@amd.com>, <linux-cxl@vger.kernel.org>,
	<netdev@vger.kernel.org>, <dan.j.williams@intel.com>,
	<martin.habets@xilinx.com>, <edward.cree@amd.com>, <davem@davemloft.net>,
	<kuba@kernel.org>, <pabeni@redhat.com>, <edumazet@google.com>,
	<richard.hughes@amd.com>
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Message-ID: <20240828122613.000032e9@Huawei.com>
In-Reply-To: <446d8183-d334-bf5c-8ba8-de957b7e8edb@amd.com>
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
	<20240715172835.24757-10-alejandro.lucero-palau@amd.com>
	<20240804185756.000046c5@Huawei.com>
	<446d8183-d334-bf5c-8ba8-de957b7e8edb@amd.com>
Organization: Huawei Technologies Research and Development (UK) Ltd.
X-Mailer: Claws Mail 4.1.0 (GTK 3.24.33; x86_64-w64-mingw32)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: lhrpeml100003.china.huawei.com (7.191.160.210) To
 lhrpeml500005.china.huawei.com (7.191.163.240)

On Wed, 28 Aug 2024 11:41:11 +0100
Alejandro Lucero Palau <alucerop@amd.com> wrote:

> On 8/4/24 18:57, Jonathan Cameron wrote:
> > + }  
> >> +	return 0;
> >> +}
> >> +
> >> +/**
> >> + * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
> >> + * @endpoint: an endpoint that is mapped by the returned decoder
> >> + * @interleave_ways: number of entries in @host_bridges
> >> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
> >> + * @max: output parameter of bytes available in the returned decoder  
> > @available_size
> > or something along those lines. I'd expect max to be the end address of the available
> > region  
> 
> 
> No really. The code looks for the biggest free hole in the HPA. 
> Returning available size does not help except from informing about the 
> "internal fragmentation".

I worded that badly.  Intent was that to me 'max' ==  maximum address, not maximum available
contiguous range.  max_hole or max_avail_contig maybe?

> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-MW2-obe.outbound.protection.outlook.com (mail-mw2nam10on2055.outbound.protection.outlook.com [40.107.94.55])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id AEE531862B3;
	Wed, 28 Aug 2024 13:08:28 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.94.55
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724850510; cv=fail; b=R6c/t/K4vAqxMM7pdttPQjmH+RS9bFgBWgl9tFWPzIqJTWSLgex0lwDU7MR2rX2EeiVbzmLDWPaRAOdadqoMuVzpuZDuT4GVIvC7n+TmfP5My83+XYRIXWrI5n0YxeHoJph6kijwiAvD4MIfMZ/9aA6oPvEzsReME5aI1FN5WN0=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724850510; c=relaxed/simple;
	bh=Z4YJ2IluvK3A53Myn1BCmUIP5HVKifPeE9ZkCEGk+FA=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=L1HgK8hDUNoySNmdEGyhmcDPjDBB/Gs8NOCBPc1Oc6drGEU9SeWo2FTWcfLkwOwc0vMezVq0fp5hxr/TNZCbMPjVQI0SjoBmk+TVwGBO1N7S816yI/gcAoOJv7mlit+XiBIqnpXjrAYe83vOirDEKO/UiQngn4SnrZQTFYzFY7s=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=cRMB/7Va; arc=fail smtp.client-ip=40.107.94.55
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="cRMB/7Va"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=u2gCPLmHQNGAUnM/ln20HS0b5jtGrdTDgfslIMOdHjnGhpcGXxA1LHEsgqMF4YikKapfDMY7Jy+HgvcqNWfFi++ib1Okw6lfx9uPIEylCJY5pR0l9r3I/jHgsl3YOY0nxjmYtRYZUoMowxs5lkNzLWnhE5KxMXycpRK7GIyqNHWL8Y9P1Q5q9JoZln6MCOsnVPGR5Sll1KhIRZtn2+6REq7crgeXdTJbQ2o7drtG1Ndi7FKRcv13loZEemyjjlvrbws1ehoGwp7pBQSchbULfGAEGGL7xDo9CEretEwajh3UaJQGYe6JcEsdFhxaQS9O5ITlvCXH/ZLT61M6UjRJcg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=gWhwurftU8MgZgvYjMhKTFTtZFnrMWCueHDxarAz1zU=;
 b=ca5ZTQIDHF3aBnt/5vf+vx+QX5gL9/HmbZvzWdfThurr+uhwxUbuBA62hr518a2t5KERG+kk9+v2445j/Ma3dBV+LvzWAXMTTcbFu5/WsjWnynRjS5EvRtFEzJlT+Z8CZVwdL4Lm0hX4qZ9UJT/GKIX4lQOoLnEBaLF/jba0lrogI/EbC9EQ/Ck+CIB38U+0WowTktvxUAdbppi9VblTyLNMXBAMtNooN8awU2pLU1YfHdfkKuSKcKElAXU/lA+rhXxtdNuoo6L26ti6PkqI2R+Ia09Vk+8F2LKY61XRY8R8n17oMrwWyaP4lJOBxhFOh9kDcsay8/c1P6w/3fHkqA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=gWhwurftU8MgZgvYjMhKTFTtZFnrMWCueHDxarAz1zU=;
 b=cRMB/7VaXvw7+1WEH/SzdmLfkAzTxrsD2F2BW0RieXIvvelrgIrw9/9I3Ff9Jt8c92ug2s4zbd3n55bF6e7s1u0j5IpywefbjosqcPFlK4EVDW04K2yLjvjQPUZ0g49PwQidz/XwcsUN5ApAyqhln4APCGHNLpCaq0q+x9KdJVA=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by SA1PR12MB7344.namprd12.prod.outlook.com (2603:10b6:806:2b7::15) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.25; Wed, 28 Aug
 2024 13:08:26 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7897.027; Wed, 28 Aug 2024
 13:08:26 +0000
Message-ID: <1bdc02f0-c97b-c5d6-af04-c560ab3dc578@amd.com>
Date: Wed, 28 Aug 2024 14:08:18 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Content-Language: en-US
To: Jonathan Cameron <Jonathan.Cameron@Huawei.com>
Cc: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
 netdev@vger.kernel.org, dan.j.williams@intel.com, martin.habets@xilinx.com,
 edward.cree@amd.com, davem@davemloft.net, kuba@kernel.org,
 pabeni@redhat.com, edumazet@google.com, richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
 <20240804185756.000046c5@Huawei.com>
 <446d8183-d334-bf5c-8ba8-de957b7e8edb@amd.com>
 <20240828122613.000032e9@Huawei.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240828122613.000032e9@Huawei.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO4P265CA0127.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:2c6::18) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|SA1PR12MB7344:EE_
X-MS-Office365-Filtering-Correlation-Id: 18b13e4b-ff4c-4358-4866-08dcc76280ad
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?UCsyZ2FXQ1N2MUtkR09NM3ZrRkR4Rzc5UWg3aVpDQUJsWERDRWY3NUVFOEJ0?=
 =?utf-8?B?ODJHZllmRDJQVFhJM2k3U013cTl2N3NqYlNKb0lBUW91bUhVdzB1Qjl5ZmU3?=
 =?utf-8?B?c2FQbnNqYTN5azM5eVQ4dkJ6MzJ5ZnJJZDNHdFdmZG1BaElGK0ZXL0JyT2NT?=
 =?utf-8?B?UjlyTUNpbFYxeWpBckNOV0UyNFpVVXExL2kzZmNGTmdwckRhSk92Q3pOTmJR?=
 =?utf-8?B?cktZYUxJbWo4SjdYUXQrL2U0NW1reDFndElMUVZDcHF4QmxhVTFId2JvZ0Rl?=
 =?utf-8?B?Z3hUUW1kQ00zM3pwMWh4bXlTRWlIWExXRjl4cGVianlPcGJvWkdZNHk2c3o3?=
 =?utf-8?B?NnhPcVRDUmorZlhpeit1NXpxZ3FkM2lNSEx0RlZqZlhSN2ZvVGU3T0EvbGJX?=
 =?utf-8?B?ZmZNLzRYQnpCOFNsSnA3K25JOSs2cWxxREpJbmdFNHZqVEphcFV6Z2VONzVt?=
 =?utf-8?B?elk3STBZSytCeUpoWmJCVHpsT2NJTmNQTzVpbTV6SDloSmtnL1VQbkh6Tmhu?=
 =?utf-8?B?a0Z6WDhRWUlvRy9pYWRCRjJyLzhjbDlCa01JSFFyT2FTWkdTcFdFK2FpTXZh?=
 =?utf-8?B?eHVRR0FXb2FyUWljeGx1Q1lYTzVLTlhpVmh0SUtZZ3lSZlF4Q0N0TGFDZUFW?=
 =?utf-8?B?VXZGMkVKSFh1UVcwblp5N0VCR0trbGJOMUhaOUs0U3BmVHJ5UVMvRmFvSmNM?=
 =?utf-8?B?MGFnUENoMy83WUd4SzlXdVlxV2k2anN1SGRWMC9xYUlCcDcrSzNjWUE1YWdT?=
 =?utf-8?B?SDYydEptTlpVUnNmT1o1WW14SWJvekRTTm9DN3FLcjU3MWw2Uy9RQVFiRkt0?=
 =?utf-8?B?ZW1zb2svaVl5MTFnOHRUTnhnS0tjL05pVStFVVhSUWpIbUtLYUQ5aGtEOUJD?=
 =?utf-8?B?eXdvVmJDeGtLS3ROdzVrbnM3UEhlUDdkQjVOektOSG44SlIxcStVU3Y5T3J0?=
 =?utf-8?B?NUlYZy8xTDh4VzY1dlZ6YkNtb1Z6S2gybDkzbzBLVWFlS0gvR1BSL1VSbytm?=
 =?utf-8?B?Y3p3NlgxM05ubU5MVlBoUzdGNUJteDl0eSsxdytTaHExWXJOQnZNZ0RZNXFz?=
 =?utf-8?B?OHFpR2h1UjR1QTg5ZXNuejFJeUhwMXl5WFRxWFJ2Q0xUOUxHRkxsMFh0TXhO?=
 =?utf-8?B?aVFDUFpYb25XVE9UU2pzUUREZS9rbWJyb0tReHVvTDFoZms2cGVmYU5UZWJI?=
 =?utf-8?B?R1VmVUtPSHU2ZWJlL0dCMDYzcXo1OG53bEtGaGZQc1J2VjdJb3JLeXRQbHJ4?=
 =?utf-8?B?b2dhS2xyUXhyL0VZVkhrZlhLSWFjVDdOSG9ZdjhRQUU0NlRjYSsxNU1wQ21Q?=
 =?utf-8?B?dHllTjBDY1hKdGlKS3IrbVg3a2NHMkVqNzZVS3hNQUlXM3VtSXVKOExBVDE0?=
 =?utf-8?B?bnc2Z3FWajA2eHdmbDZMVHI1ZkFSS1doWUJOcUNDR2k1Y1VabGVSeEg4dXpJ?=
 =?utf-8?B?cmI3amFHb0Fsam5ZNkYxVG44SGU3N20rM1dxUnlkRmpzd0tPWFlRZUxZa1l1?=
 =?utf-8?B?WDhTUVlTaEdGRXJlbHlzcC92TGdJcWRoRDVjRkZUeTlNRzFUZTZ6OGl5TER2?=
 =?utf-8?B?Y0plVHZpRVlEeDNNeU9qRUx1d2tGaGpXQ2ZDVzRXanMvdDdFcFpsRit4aDVD?=
 =?utf-8?B?K2xtaENlY29VVzl2OG5TSDMwNENYOWQ3c2dUcXN4SDIwdG5yalRiOHNrNnBZ?=
 =?utf-8?B?b08xTC9ZVUU0T0dmM1hhNjZWQmVVM2piaFFycUo2Q21DYStta051Z2Z5ZEVS?=
 =?utf-8?B?Z3o1SllhVmJ2a0E4cnJJYjVNcHRrdnl2ZlBjZWYzcFk1VkNYQUN3SklnbzJQ?=
 =?utf-8?B?K05ZUi9sTUM4SXhpOUMxQT09?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(1800799024)(376014);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?RHErQldnM2hCUStjRzFEQUFFVVM5NnNZT1BHZ2hxclQzazhIbThpM1ZTQ1U2?=
 =?utf-8?B?b3dqS2JnbTl2VVlMWGxsRFlNUU53NndpQUVvaHgrb1NkbzljZmNqNlVkY05j?=
 =?utf-8?B?ZnI0V2RHZXdwbmRiSE1ZMFo4dlA1WlA5RWVsczNyOTIxY1NHbXhScFZUTHgx?=
 =?utf-8?B?RVIzaTBZNi82bDVpV0RGZzZrRit5T1QxcTQyT2Q0ZjJyM0NQMFkvSkZkZE9T?=
 =?utf-8?B?bE1xSnBHZUJoOXNIL1RjY2lnUHR6eWNjR29MdG45TjdRMmhBV21MV3JlNyty?=
 =?utf-8?B?cHVmZ0Q4N3dDTVBhbGZpWVQ5bnMzRGJmbkwrYStwQ3BkYkZESmZGa2x3cG55?=
 =?utf-8?B?TEg5dVQ2OC93Z3JvTHdueVBIaWhKS1pqNFpyc0ljQWxNQWdLS01GZjc5MlE2?=
 =?utf-8?B?Um13c0Fmb2RRZGVkUXhsTVRaMS9mNERqVFZ3c0dHOGpWSitxeElxemt3Tlhz?=
 =?utf-8?B?Y3MwNERzVzdxWkMyK3pXcmpnL3dYZ1FERHZzVy92b0VMb0l6QkpKaUNpU1ZX?=
 =?utf-8?B?UDgzQStacDRWMjRDSDFRbzJoa3VMSUJHNmkxci96TEFneWFXWWtNaTRJY2Jk?=
 =?utf-8?B?Y09pL2c4NXg2eEM4WTVseVBua2FoMnNYSjBjYnF3MVdpUHBidk1iQUswSE43?=
 =?utf-8?B?UVZRMkErSFJxeHR5TUVYL0JjRjZGNU9OYWVaazRQQTlEa3cxYnRDLyt6cGxp?=
 =?utf-8?B?dTJKU21SWXllQ0hKcTI0clFsOTJQWHc0aDA0bmFTZEgwVWh6a3ZRMkVidkdJ?=
 =?utf-8?B?N3lzT3VWSVJ5N0RrK0txNURYaC9SYmUxY3VWN3N5cURiZ0tGUkJNTUVaZlRE?=
 =?utf-8?B?R3VCak5ack54b2JheE5kNHhmYWdVS0NKRVVkOVBEekpjUlJObi8wclcyZFNE?=
 =?utf-8?B?OTUrYmJqdUZmZUVkNXhPMnhmRm9HOTBOeFJYREd2SXdQQWlTakQrR0d3S2FP?=
 =?utf-8?B?U3VCVGoyQjdtU0hQRFhKN1h3WU9XWTJsZkc1bk8yQnlUOWNmY202MzhiTjVO?=
 =?utf-8?B?YzhWUkFTUDJwWmxUY1ExYWRXSml2NDY4YXRtaUZOb01EdldqTHNHNzlpN1pO?=
 =?utf-8?B?RVVGZWxxdVdpVlVqcjYvV2V1SXVlTTAya1Y4WWd0NmFudTZERm9aUDJ4M2pX?=
 =?utf-8?B?Z0ZOdGVvbWd5WE0yaEpFRGRDVnZkblovaFdkYkpiczNCd1BkdUEwazEwZkZV?=
 =?utf-8?B?bXdNQ1ZXb3l1Zy83amRpeGRlNUlaWEJUdmNRY3lBSEdwaFhRZE1adHIvanlG?=
 =?utf-8?B?TG51bnRWdlJVZkUwaWlhQitMZ0ZEK0JKWjc0Q2lQdXZpaUlPZjlZZWVTM3pK?=
 =?utf-8?B?bW56SjVacTE1VmIwQ0t5VGJpUk0zUm9rMm5DN1dMZ3lYd09IeXdMaSt5VlM1?=
 =?utf-8?B?c0JDYi83SzQ5cU1ETTVqM1VueW5VUGZMSEgva2NyY1MzRmtVRWs0MWVHVHJ5?=
 =?utf-8?B?NnoxbisySDBMb3piVTY4TnErU05CS2drOEYxOC90U2FzaWFrR2txdzRHcVg1?=
 =?utf-8?B?NDFTQTJudzRRWFdNdXE0S2JtS2JGa0FXYzlRZk1JQmNYM3FJTzNsSzhlQWtL?=
 =?utf-8?B?RDlMTUd0aTlTL1hQbm92VTFFNTY2WmsrZWhNMUdTdENKTzZoRUYwOGkwUVpY?=
 =?utf-8?B?Q255ODJzaEd6UC8vTDMrbThPQm9YYXhkUGVBS0tObzc1SnhKMS85bkptSkQ3?=
 =?utf-8?B?Vm43RllHbWlaTTk4V21iL2ZWVVBvWWhnYW5sZFlWYy9aYTVzWDFHOGZXbGYy?=
 =?utf-8?B?aGdnVXo0T1E5cE9xMmVoeFBpTGNldXk5amNZR1JoNUFOK01qYm5Pb1hEbUxk?=
 =?utf-8?B?YTdiN0Rsb3lJdXYwQUxOaEJxakYyK0dnL3B1UURiRys4QW1OZ3A3T0E4bHZF?=
 =?utf-8?B?TXp6UTJ1b2w0ckV1di9IZ09XTTJ4VmkzK3pwZXRnbEp5S21lVUFoQWFvOXJX?=
 =?utf-8?B?UUlkTHJteUwyKzVsbmhwanJlUnRYbndhR3NIWnRDbXRjNnlXdXVMMnlHbWZ2?=
 =?utf-8?B?MzB4Q1FNYmNDc0pjNkhrZEluS3g4bUlhbkN1cE9jaTNmYlpXZXNNNFQzZVh2?=
 =?utf-8?B?dnZoTytnNmpHNFVzRmdoYmVOdFIxRWZqa3NVT0MwdXMwVDgxWi9SNjRhY3Zs?=
 =?utf-8?Q?5A3qwQLcjWEZUGoHxvxO+p7N8?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 18b13e4b-ff4c-4358-4866-08dcc76280ad
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Aug 2024 13:08:26.1430
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 0or+ks2HVhVPk8qm93EQBUS2TtgPmkKMMejg3HZo4XFTV8VjUl2HQ5BSdubFdlreeieWqe9MrdNsgPZkQ8Bn5Q==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SA1PR12MB7344


On 8/28/24 12:26, Jonathan Cameron wrote:
> On Wed, 28 Aug 2024 11:41:11 +0100
> Alejandro Lucero Palau <alucerop@amd.com> wrote:
>
>> On 8/4/24 18:57, Jonathan Cameron wrote:
>>> + }
>>>> +	return 0;
>>>> +}
>>>> +
>>>> +/**
>>>> + * cxl_get_hpa_freespace - find a root decoder with free capacity per constraints
>>>> + * @endpoint: an endpoint that is mapped by the returned decoder
>>>> + * @interleave_ways: number of entries in @host_bridges
>>>> + * @flags: CXL_DECODER_F flags for selecting RAM vs PMEM, and HDM-H vs HDM-D[B]
>>>> + * @max: output parameter of bytes available in the returned decoder
>>> @available_size
>>> or something along those lines. I'd expect max to be the end address of the available
>>> region
>>
>> No really. The code looks for the biggest free hole in the HPA.
>> Returning available size does not help except from informing about the
>> "internal fragmentation".
> I worded that badly.  Intent was that to me 'max' ==  maximum address, not maximum available
> contiguous range.  max_hole or max_avail_contig maybe?
>

Let's go with max_avail_contig.

Thanks!



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM12-BN8-obe.outbound.protection.outlook.com (mail-bn8nam12on2068.outbound.protection.outlook.com [40.107.237.68])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A2183178CEC;
	Wed, 28 Aug 2024 13:43:58 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.237.68
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724852640; cv=fail; b=IQKvlv3oFSqNDQtFEZjcHAZ9WBiUtLE2dpbeVB3ghZHDWzJsb0SQkxx84s3bIkLOp+/egjaQCeSVish4YeJbR1qezFZJQRTyjq6Ivb83rsO5Viti5ZNtrOce+J4ZB+E6yqdNg1inIjUbrLOCkdoebh3rIXqiWfdKEUK3Zenlb84=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724852640; c=relaxed/simple;
	bh=c8dgK+nZoKpIAC0NhSAvccguDZTq/71jva4eH8i3p9k=;
	h=Message-ID:Date:Subject:To:Cc:References:From:In-Reply-To:
	 Content-Type:MIME-Version; b=sV3Lmc7rJ8H27IBGquAcPq8bu586UsNJ3cmbL5JSMp0tRTXrI1t49Fq0IfqqhZe//oktSS2QeSQnzON4VLuNinrsavCzX3qMVlnQ4BSUgx7LHmrS2OINqRto6mkfj3ygJsgyLZRWE2eOF4+fGu7862D59KIRy5hfH0HcGFgAqqQ=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=TPpBNrq3; arc=fail smtp.client-ip=40.107.237.68
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="TPpBNrq3"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=yKCpYPqwDLNJfCZwyKcUF3bIuJPYr6eZF9aLBLYMa2u+4jo/Obdf4lWDkIlpFg7ZbOKnaoxZ+kVZSMGoJAyTWIdZi6s0l9GMUl82x6MFnKFfrNQhF1Yqysdtk23p7tbrSss4tXaC5wDPcfa74p5R1krTEswMUSMIKAeP+hwfo0fj0JpeW9+sJpws8NzU7MpWW/bdCsGdKgrMIX7CjKEZ1G43obSh/Ij4HOFbfQRoaeKE5txGCwBdyMDH39ttHyXYu9tFeBSiVhpBLWUP4CpWvriYMCV2w3vMzQolCpvExjynX/79XRMUeF9fLigBe1LKDg2iZFltNxTjacil7ZDhhg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=kVP1tywk1E2yvsQmIjPby+1OuSlR4RtkDNjNg4/vXTc=;
 b=OO/ZhN13EVKlgcymLLhdAY2Qc86219vzzweiFFHR8vrTvYThEYzUcXrcHAef8OLlk9qnTFkVkLmtKUwp46Hgte7c9RyWwXsuVgBj6rRfP9kkZ1RRj0PaReMStapoH+3fkiM9fMaPNvF4phvEXOdtt58mWRNVgwz5FruuuoGgBlqU+VgtIeOk2alppLnQSApbB08QOexoBaqkNa78MM6CHBGOK/mXvLR6yihWrd0T7pGG+zJTwlkjFTT0fO34vXqNXyzlukk5i+MTepGvd71Wp3FG/cX7f9CTspg1CnSBtP0xP20y5ibKhaQBEc9/oPIpHHuv0fzHQHgzMy1SmdIdtA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=kVP1tywk1E2yvsQmIjPby+1OuSlR4RtkDNjNg4/vXTc=;
 b=TPpBNrq33nZD2w6VH6KdW1t5xl2b3XOS88g2QrbkIjafnzRii9roIh0V6okNVhYMmayKs32GVE7TELF9DsHOpiYa2HS8Ab4tXKSkwHrsKd2kTy1JsYcqGEWbsalJHhAZ+Wddep2X0uajCWh6MI8OhshhHPmzGH2ohKl7Jk5IFbo=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by BL3PR12MB6594.namprd12.prod.outlook.com (2603:10b6:208:38d::13) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.27; Wed, 28 Aug
 2024 13:43:53 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7897.027; Wed, 28 Aug 2024
 13:43:52 +0000
Message-ID: <301642a1-ae97-7140-3b52-da0e6e69e7c7@amd.com>
Date: Wed, 28 Aug 2024 14:43:44 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 08/15] cxl: indicate probe deferral
Content-Language: en-US
To: Zhi Wang <zhiw@nvidia.com>, alejandro.lucero-palau@amd.com
Cc: linux-cxl@vger.kernel.org, netdev@vger.kernel.org,
 dan.j.williams@intel.com, martin.habets@xilinx.com, edward.cree@amd.com,
 davem@davemloft.net, kuba@kernel.org, pabeni@redhat.com,
 edumazet@google.com, richard.hughes@amd.com, targupta@nvidia.com,
 vsethi@nvidia.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-9-alejandro.lucero-palau@amd.com>
 <20240826204232.000009ce.zhiw@nvidia.com>
From: Alejandro Lucero Palau <alucerop@amd.com>
In-Reply-To: <20240826204232.000009ce.zhiw@nvidia.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-ClientProxiedBy: LO2P265CA0344.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:d::20) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|BL3PR12MB6594:EE_
X-MS-Office365-Filtering-Correlation-Id: edd8e6d3-7240-4e5a-791a-08dcc767744d
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|366016|7416014|376014|1800799024;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?TEtteE9OT1hsQlUzUEZYeHNRb2VwdWhFZWtLaFZFMXJQWGpIQ0ZJSzloeTJ2?=
 =?utf-8?B?U1R1aFdyTzRBWURpZ2lXWHl2NGVpM0pLU29RRElaZFhMY1ZKY2c3RkdMYmsy?=
 =?utf-8?B?eEc4QmxSVDh3QWQzZkRiRm1pSTRpOGZzTTcrdDAyQ0RpTUJlSUVOTWU1OFJ0?=
 =?utf-8?B?NFZJaFNIUEg1VnN3WkVCMlE0MVgyd1R1YVJ1enZNZnJGZFJVSytQRDhuOXVO?=
 =?utf-8?B?bXpzZ2YzTkFtVE1GSzJkTWVuSlFMU2RnNmx1R01hMXVvbkZYdmNSaWxPdkcz?=
 =?utf-8?B?VHJrTEhFVVNIU0grWFZNQy9JSTFsVkoyc1FjSUJHbGQ1R215Zi95ZXR5NjlX?=
 =?utf-8?B?RWFhMDZML1ozdjhtOHR3YkZVQUN1akpqV3pDVHNhU3lEUDhjYWdBYjZJWXNn?=
 =?utf-8?B?dmRqQmlkME5ZK05zcDFJUlI3b0xnemg0eUt5UUdJTy9jQ1l3Wnp0OUtwdkpE?=
 =?utf-8?B?eUlQbU0razNxbjRlaFpwOFRZLzhhT1B2cW12UzhFdGlxUE5aazh0SHE3SFR2?=
 =?utf-8?B?a2JhdDZlWjg3WVk0anVEVWUrQUZRSWk5eEpCMzlXVndIS1JjSnhadFN2dDR5?=
 =?utf-8?B?ZTROanBvOW80bHVDZEdFaDdEbnJjSHFtMzlOYUdqQStnQUhwK1YrNHZWVFdY?=
 =?utf-8?B?L210V3lZa3VtdkRvSytBSWdGMTNJOE1VQW45ZCtQbnNMZVBYRjdVU1JWMGk5?=
 =?utf-8?B?cFFhL0g2Zko5QzNYRzhVRjYyYnRwWjJnUXhRSkZwOHVWdDdWTmtNWmFRSlJn?=
 =?utf-8?B?QitNdTJCaTNYcTN3NkZ6MWI2UTdXVGxFdThjdGxxRTVFdk81dlArbkxXYzNk?=
 =?utf-8?B?aTl5NXh1UURXSW1MdmZQbFVhNDFUTFA4WitaRkllTVZhOUwvTkMrSHNKeTU5?=
 =?utf-8?B?L0FVMzhIVk5Ia29pSVdMaXNkMVBkNURSTEtuN01XLzBDZGozQWxqdGIvTFND?=
 =?utf-8?B?S2ZOcWtRcExDa1J6UW1mQk9tblZWNnFLdm9xTVJjOFFMR0owMVBnMDBvMk1k?=
 =?utf-8?B?Q0VsQnkrMU1ablNxd3Ixc3E4ZGdqRVk2Um4zek50Z2tLaHRpdU8ycHNBUXBW?=
 =?utf-8?B?eHFOekZrVHB2V3VJZWNGSFc0Y0ptbitNU1lyMHpZSWtrZGtVZi9pWGxuSDQ2?=
 =?utf-8?B?Rk4vdGJTYk0xQ3hMS2FDVlMva1BoMXFOR1FpMnQ1VlZhWGppdzdTbUIrMHA4?=
 =?utf-8?B?RE1veWo1dXlTY2J3ZWVLSjBEbldsTUZsNCtQOVdjakpVeTVOZWJSUTlHbTly?=
 =?utf-8?B?UWxYNWJudVFTdUZ1SENjRzZIRXNaZThIdG8wZ3J6RWErWU11RFNKa2dYQ3ZO?=
 =?utf-8?B?S04wcG8rUk9yd0VHM0dMckh1VStESjgwWm9mNFFxeDF0b1k4TDl5S1Y3bEtS?=
 =?utf-8?B?MVA0UStTS01udkt0dHdpZ3ZtWDJGbEVKMGxDcjllMmRvVVZpZDlVOWZSM2wy?=
 =?utf-8?B?VlVwdFdLTzBENjlUT2o1NWtna0EyYjhsWTlCRUlTbTRGTFgzQkNreTF0U1ZX?=
 =?utf-8?B?ZEpnMWt4WTRubi8zV0x4a21uWmpGV1BxV3BmcnJFcXVNd3hRNm5aSTF1YmtC?=
 =?utf-8?B?UW03OVQ1N3QwcFZlZm80a3FiZUtKcXUzODJlWlkremFZL0s1QnVscjZCeWlH?=
 =?utf-8?B?WlNzcXBNRlRCOVp5cDZzUkszSHEyNXpxZGxEcXlHUmpvT05WOGNZTDR0REpt?=
 =?utf-8?B?UUlIRjA1bE11MldzMFdVQnMrUkxSZmR2WW0zeWtTclV0SzBtcGMrdnFxci9Q?=
 =?utf-8?Q?EHxkBqRnGJRIc/4cqw=3D?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(366016)(7416014)(376014)(1800799024);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?eDhMV2RLclpBWmhhZkd6cFpZajFHdXNTMjBJNmlKaG9YWGdJUW1idnVGeS90?=
 =?utf-8?B?UEcyUHZVY29iWG8veVlPMEtla0FmNjlTVjZMTDNwT2ttcjFNcFVHYmg2TUky?=
 =?utf-8?B?UXBUSnF5a2JFdWFsN2Yvb1JpLzFYODQ5clI4M2EzQm9DVFhZcThvbE5IVHZ5?=
 =?utf-8?B?SW9kalllVk10SEdxYUxPOVBGVlcwdWlQQjgxU1BIWGk4c3NUVjA4SEs5c1pQ?=
 =?utf-8?B?OGNyTlE1RzRpbnFlTEsyMDBYUmVKdVBldXpJUUlHTnFQMXkxbXp4WkdQc2pY?=
 =?utf-8?B?R1F6QjhTWWZyUFBwbGdYU2lacEJNVHBGTVRhSlMxcWMzVVBCNDVEellzczhP?=
 =?utf-8?B?NTh2T0VXUUxOSGtzaVVhNTZsVTQ1dmdSWWxwejk5NlRYWDVxRHk4S25pSzlu?=
 =?utf-8?B?ZVBoMjZuZi9QNGJKRno3TERTdDladmVlQ2ViUXhjdk5yY085ZlhSVk1valJi?=
 =?utf-8?B?Ung2Sm1XODFVVndacnBXNEdpMy9ua3d4WkxpaFJmMVhEc2lFYTZCekJ0RVE3?=
 =?utf-8?B?dllXY0t0MHZnRVlXZmdBbWJuYTdReUYwRHhBME5iK2pFcmRWdEErdys2THZp?=
 =?utf-8?B?ZDY5K1NTQmc5dEV4dWxzQ0RqYUUxMzZ2Zm5XVHk2QXJyTDUrTFNxUWFscUxL?=
 =?utf-8?B?TkFmWWVhbWk4b0JINXdNQU5UMkJyeHlDd3daNGtDQkprc0FNQ25SYUMxVmU1?=
 =?utf-8?B?UlNRMEg3dFNxOXlZdlg1MzhrRVlKWVNUd3hsRDFrN24yUVNKN0JMU0ZJNldS?=
 =?utf-8?B?bVBzSHROcS9ZWU9tNGJMK3BrTGFKVlJVVzNhRnNWL2I2WUE5M09aRXNMTlBP?=
 =?utf-8?B?OW4yRnl3ZGllL2kzaDFmaklZb2g0NnozWlF2VlhSNlU2NVowSHorMjJ0SnpY?=
 =?utf-8?B?alRGVldNa0s2K0Z3Q3FIb2QwTHRkclNLcmJnSGwzWlIvQW1wYzVKY3FFZTRN?=
 =?utf-8?B?Y01ZTm1QWTMxZTlkMDF5M2VYRHNQSFFqcnF5bS9nOHV6YlVETDFQUEdvV2Fk?=
 =?utf-8?B?L3pKdVdpd0ZEQ2dnV3FpSjRFN3hXUXEzSGhJemMyeTVNNnhvcFdrc0xFRjVO?=
 =?utf-8?B?bUJLelorcXQxRjRDOURHQ3pVMS8wK210VjhKS2VaSXNGRWxpK2I1MndRMTJa?=
 =?utf-8?B?VVUreVRpZktydndubWthWHBHM1lNZ3FiQzNxOTR2YnVqRFRvQzduM0hISkJ5?=
 =?utf-8?B?QVR1RlNsM0hYaWRJa0VHNlNUd1lxc0IwcnYzcXJjazZoMnFYaC9kNmZXMjBE?=
 =?utf-8?B?Q2VWOTU4QlZ0QmhBelgrQ0NRbkFmbXZkcG5CWGsrVTNZL1FsTTg2cmNodWZB?=
 =?utf-8?B?NUpLUUJiNGRVUlYzMmpNTTR0TUEvdGRjcHN1UVBmTHlBakdpZkxJNWVPakhy?=
 =?utf-8?B?UkM0N0ppMGRCYk1SNi8vdXAyZFRCOFJjaTQyblprUUVPVGFxVjc3dHFKN1JS?=
 =?utf-8?B?cHhkbkxIdVNXWWYzWUhvZklEdzUrTWxwdklYTTJ1OFZYTnRaV2VNdDhkVk5L?=
 =?utf-8?B?L2U0M01HYUNXYmtZT3JjcS8vNnFEcU5rVzhHa0dIM293SStpQlNyQ1NSSFNS?=
 =?utf-8?B?bzNKNDVHOWdzeWNyRkF0YWtmclgvOTNoYUFPZVNGR2I0NlMxK3JiYUw5ckZN?=
 =?utf-8?B?SUNKZnFjTUNVbWZoSG8yTllmZzJFYTUyTVhBZDFiVktFUlF3VEdlbXM3ZGli?=
 =?utf-8?B?TGgzdFlFcFhCM2duSDQrQlhPaHU4RldlU1FiTmhFTkQxQy9rVWtveVVNQ3lQ?=
 =?utf-8?B?MEo4NHUvaVFDQWRndkt6OGE1NWF3a3AyaEJyS3prM1NobXBZUHpSZHRwTFRq?=
 =?utf-8?B?TVcyUFkrNEJrRithWEhuUFJXK3FBd3pyVXQ1U25hQjRTU21PdzE4enlhUjJR?=
 =?utf-8?B?eTZhYUUvcWxtSDB3a3JydXZaYy9OZWtkNlViMVlKTmNQcWdFUmtVb1UwNFdN?=
 =?utf-8?B?MjdJK2dzUzhNcXgxdTZ6cnBTWDRyNFFpUTBsU3I4TDV1Rk1EdHkyTm80NW1X?=
 =?utf-8?B?a0duYmFzenp4elZqK0hsRW9abWNYSGMzTStISjk4NUkrZDRVQlJsdzR3NTZi?=
 =?utf-8?B?VkNoQis3aloxRENNMFpQMU43QkRGUEUyYmVhR0F5YkZDRS95QVVNbVd5Slg1?=
 =?utf-8?Q?vMI/D3ARv9vLj9kasLaFw4brK?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: edd8e6d3-7240-4e5a-791a-08dcc767744d
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Aug 2024 13:43:52.8777
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 4jYNej+Sr2DaaAUh91ErxFBN4e+nSccNGwx74ezfTXRkCGFq5rQg/TAqz+tmJimwr/AsJpX7z9UHYAct8/L5bQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BL3PR12MB6594


On 8/26/24 18:42, Zhi Wang wrote:
> On Mon, 15 Jul 2024 18:28:28 +0100
> <alejandro.lucero-palau@amd.com> wrote:
>
>> From: Alejandro Lucero <alucerop@amd.com>
>>
>> The first stop for a CXL accelerator driver that wants to establish
>> new CXL.mem regions is to register a 'struct cxl_memdev. That kicks
>> off cxl_mem_probe() to enumerate all 'struct cxl_port' instances in
>> the topology up to the root.
>>
>> If the root driver has not attached yet the expectation is that the
>> driver waits until that link is established. The common cxl_pci_driver
>> has reason to keep the 'struct cxl_memdev' device attached to the bus
>> until the root driver attaches. An accelerator may want to instead
>> defer probing until CXL resources can be acquired.
>>
>> Use the @endpoint attribute of a 'struct cxl_memdev' to convey when
>> accelerator driver probing should be defferred vs failed. Provide that
>> indication via a new cxl_acquire_endpoint() API that can retrieve the
>> probe status of the memdev.
>>
>> The first consumer of this API is a test driver that excercises the
>> CXL Type-2 flow.
>>
> Out of curiosity, when and where do we probe CXL_DVSEC_CACHE_CAPABLE and
> enable the CXL_DVSEC_CACHE_ENABLE bit for a type-2 device?
>
> Thanks,
> Zhi.


As It is mentioned in the cover letter, this is a Type2 device but not 
working on CXL.cache yet.

I hope we can discuss how to deal with CXL.cache in the LPC next month. 
I'll be talking about it and current state of this patchset.

Thank you


>> Based on
>> https://lore.kernel.org/linux-cxl/168592149709.1948938.8663425987110396027.stgit@dwillia2-xfh.jf.intel.com/T/#m18497367d2ae38f88e94c06369eaa83fa23e92b2
>>
>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>> Co-developed-by: Dan Williams <dan.j.williams@intel.com>
>> ---
>>   drivers/cxl/core/memdev.c          | 41
>> ++++++++++++++++++++++++++++++ drivers/cxl/core/port.c            |
>> 2 +- drivers/cxl/mem.c                  |  7 +++--
>>   drivers/net/ethernet/sfc/efx_cxl.c | 10 +++++++-
>>   include/linux/cxl_accel_mem.h      |  3 +++
>>   5 files changed, 59 insertions(+), 4 deletions(-)
>>
>> diff --git a/drivers/cxl/core/memdev.c b/drivers/cxl/core/memdev.c
>> index b902948b121f..d51c8bfb32e3 100644
>> --- a/drivers/cxl/core/memdev.c
>> +++ b/drivers/cxl/core/memdev.c
>> @@ -1137,6 +1137,47 @@ struct cxl_memdev *devm_cxl_add_memdev(struct
>> device *host, }
>>   EXPORT_SYMBOL_NS_GPL(devm_cxl_add_memdev, CXL);
>>   
>> +/*
>> + * Try to get a locked reference on a memdev's CXL port topology
>> + * connection. Be careful to observe when cxl_mem_probe() has
>> deposited
>> + * a probe deferral awaiting the arrival of the CXL root driver
>> +*/
>> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd)
>> +{
>> +	struct cxl_port *endpoint;
>> +	int rc = -ENXIO;
>> +
>> +	device_lock(&cxlmd->dev);
>> +	endpoint = cxlmd->endpoint;
>> +	if (!endpoint)
>> +		goto err;
>> +
>> +	if (IS_ERR(endpoint)) {
>> +		rc = PTR_ERR(endpoint);
>> +		goto err;
>> +	}
>> +
>> +	device_lock(&endpoint->dev);
>> +	if (!endpoint->dev.driver)
>> +		goto err_endpoint;
>> +
>> +	return endpoint;
>> +
>> +err_endpoint:
>> +	device_unlock(&endpoint->dev);
>> +err:
>> +	device_unlock(&cxlmd->dev);
>> +	return ERR_PTR(rc);
>> +}
>> +EXPORT_SYMBOL_NS(cxl_acquire_endpoint, CXL);
>> +
>> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port
>> *endpoint) +{
>> +	device_unlock(&endpoint->dev);
>> +	device_unlock(&cxlmd->dev);
>> +}
>> +EXPORT_SYMBOL_NS(cxl_release_endpoint, CXL);
>> +
>>   static void sanitize_teardown_notifier(void *data)
>>   {
>>   	struct cxl_memdev_state *mds = data;
>> diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
>> index d66c6349ed2d..3c6b896c5f65 100644
>> --- a/drivers/cxl/core/port.c
>> +++ b/drivers/cxl/core/port.c
>> @@ -1553,7 +1553,7 @@ static int add_port_attach_ep(struct cxl_memdev
>> *cxlmd, */
>>   		dev_dbg(&cxlmd->dev, "%s is a root dport\n",
>>   			dev_name(dport_dev));
>> -		return -ENXIO;
>> +		return -EPROBE_DEFER;
>>   	}
>>   
>>   	parent_port = find_cxl_port(dparent, &parent_dport);
>> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c
>> index f76af75a87b7..383a6f4829d3 100644
>> --- a/drivers/cxl/mem.c
>> +++ b/drivers/cxl/mem.c
>> @@ -145,13 +145,16 @@ static int cxl_mem_probe(struct device *dev)
>>   		return rc;
>>   
>>   	rc = devm_cxl_enumerate_ports(cxlmd);
>> -	if (rc)
>> +	if (rc) {
>> +		cxlmd->endpoint = ERR_PTR(rc);
>>   		return rc;
>> +	}
>>   
>>   	parent_port = cxl_mem_find_port(cxlmd, &dport);
>>   	if (!parent_port) {
>>   		dev_err(dev, "CXL port topology not found\n");
>> -		return -ENXIO;
>> +		cxlmd->endpoint = ERR_PTR(-EPROBE_DEFER);
>> +		return -EPROBE_DEFER;
>>   	}
>>   
>>   	if (resource_size(&cxlds->pmem_res) &&
>> IS_ENABLED(CONFIG_CXL_PMEM)) { diff --git
>> a/drivers/net/ethernet/sfc/efx_cxl.c
>> b/drivers/net/ethernet/sfc/efx_cxl.c index 0abe66490ef5..2cf4837ddfc1
>> 100644 --- a/drivers/net/ethernet/sfc/efx_cxl.c +++
>> b/drivers/net/ethernet/sfc/efx_cxl.c @@ -65,8 +65,16 @@ void
>> efx_cxl_init(struct efx_nic *efx) }
>>   
>>   	cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
>> -	if (IS_ERR(cxl->cxlmd))
>> +	if (IS_ERR(cxl->cxlmd)) {
>>   		pci_info(pci_dev, "CXL accel memdev creation
>> failed");
>> +		return;
>> +	}
>> +
>> +	cxl->endpoint = cxl_acquire_endpoint(cxl->cxlmd);
>> +	if (IS_ERR(cxl->endpoint))
>> +		pci_info(pci_dev, "CXL accel acquire endpoint
>> failed"); +
>> +	cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
>>   }
>>   
>>   
>> diff --git a/include/linux/cxl_accel_mem.h
>> b/include/linux/cxl_accel_mem.h index 442ed9862292..701910021df8
>> 100644 --- a/include/linux/cxl_accel_mem.h
>> +++ b/include/linux/cxl_accel_mem.h
>> @@ -29,4 +29,7 @@ int cxl_await_media_ready(struct cxl_dev_state
>> *cxlds);
>>   struct cxl_memdev *devm_cxl_add_memdev(struct device *host,
>>   				       struct cxl_dev_state *cxlds);
>> +
>> +struct cxl_port *cxl_acquire_endpoint(struct cxl_memdev *cxlmd);
>> +void cxl_release_endpoint(struct cxl_memdev *cxlmd, struct cxl_port
>> *endpoint); #endif

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2068.outbound.protection.outlook.com [40.107.92.68])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id A30E67E574;
	Wed, 28 Aug 2024 16:06:11 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=fail smtp.client-ip=40.107.92.68
ARC-Seal: i=2; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1724861173; cv=fail; b=DwOmSuHViGwMgtAS3ELeENjsSimSkNMQvzBfPF+b2gT3ekqzk+MmMpFue4U2gsVBL/gv9T7GMJkpF6L78bxqSNQg/4mrJTqEQzJ1YA8vx8Kp9a/6RKZasXmZFJr4kmSDdgN9nzkWKz+nHsbCpH2zNjxK34BA1KofXfOIU7yujJA=
ARC-Message-Signature: i=2; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1724861173; c=relaxed/simple;
	bh=MObUOL7jaPvdgEZjukSvaGIQ56F4yYk407NJyThyAQo=;
	h=Message-ID:Date:Subject:From:To:References:In-Reply-To:
	 Content-Type:MIME-Version; b=SPpdMhF7jbP1qqAQM2IRNrfudDGxUFUmYaqzqCy5VCQFx78QtF61KfKY7W7Rz0L5x8O/5LQsqQDuJQ7SktmRBL9+wkkRFUYIYTggIpWJUrqfxRG1rays/cPhVSQfRAzwsmLyePJVBUsB53R4MGpynFK/XeMSubcYHB788wr05nA=
ARC-Authentication-Results: i=2; smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com; spf=fail smtp.mailfrom=amd.com; dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b=uCaVfZFq; arc=fail smtp.client-ip=40.107.92.68
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=quarantine dis=none) header.from=amd.com
Authentication-Results: smtp.subspace.kernel.org; spf=fail smtp.mailfrom=amd.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (1024-bit key) header.d=amd.com header.i=@amd.com header.b="uCaVfZFq"
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=FNw1q7QhH+l4W4B3ClJFlNI9Oz+aHwjSZOeaWU1Hgz7YX+uGsuLiaHONA9JqLkbSXI3++kDkNuMhN7zl22ViTyP5dB6EUN+JHxHggCY5TCQAd7UyQm//kQFrsJYozdN/MqLNK2A49wJHw6wOUWLr807UbjmrX1YMXNvdJQpnDZ0IW2/Fof4jv3aCqMcDZz9TgAUoB4ZpCXVGgIELlY0OB2JoLk8dI8UH/KfyNQmoHasO4R54kdszlQrYHSVqGPjfOr5b6B8LuXGx9gVOANXqrfOFp9NFm+13JjXXt749CCd6aGebM3tLpCgIeNVjI4JtDQdwPH8xtySCH7j74px76Q==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=BJgBU35XwpqZ7Bst2lDA4a8V61g+L6P95DOGG5QauXY=;
 b=xBL6NUIBX9NqDUSzipQo4AHs8c5PE7B/g3i6rLcM9cnKi949616K9B5BDHC5XwDWxq32T9Ydyt9vjSde9Ezc5sb7FewBK85Vz51GEmt5fb2PS/Psfh5N0Fz40yYPo1wVSu5uJB7tOjQv+y0KBJ9YtY8aeGKHvkXhkxX/KhBa/YIUfWuQ6FxmToPFEdoE/zEfN7K+P1nWN3cPTbixH2I8HnIpvqdqWS75xiRPVjO1FzfU2+7oAFxwj0RWI8JXfYhaRb3JJQA3yM4YgBvlafYp0FwSJ07U3BPax2JVPeeFo6DaaNPvS5R/HDPKad7egPiAVMiPWaYnA3XpfDUoJHH/wQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=BJgBU35XwpqZ7Bst2lDA4a8V61g+L6P95DOGG5QauXY=;
 b=uCaVfZFqCubOmKNHaraxdn6qrOVdjKEgzlw1aCjb52tlwLBRk8ucULI0aCWXieRoNhBzdm6Zs+nwFPwEEVGT4ovLHbA5awd/IVqYQII+75+iUkdFtZuC1Qacbw1tp9qLhqQ5ahJS9YFRpPY5ireJNeHwZyADbwcVoV/f3FmtoOs=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=amd.com;
Received: from DM6PR12MB4202.namprd12.prod.outlook.com (2603:10b6:5:219::22)
 by MW4PR12MB6705.namprd12.prod.outlook.com (2603:10b6:303:1e3::18) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.7897.27; Wed, 28 Aug
 2024 16:06:08 +0000
Received: from DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79]) by DM6PR12MB4202.namprd12.prod.outlook.com
 ([fe80::f943:600c:2558:af79%4]) with mapi id 15.20.7897.027; Wed, 28 Aug 2024
 16:06:08 +0000
Message-ID: <3d97e89e-09ec-01c3-787c-0164c611cc4c@amd.com>
Date: Wed, 28 Aug 2024 17:06:00 +0100
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.11.0
Subject: Re: [PATCH v2 11/15] cxl: make region type based on endpoint type
Content-Language: en-US
From: Alejandro Lucero Palau <alucerop@amd.com>
To: "Li, Ming4" <ming4.li@intel.com>, alejandro.lucero-palau@amd.com,
 linux-cxl@vger.kernel.org, netdev@vger.kernel.org, dan.j.williams@intel.com,
 martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
 kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
 richard.hughes@amd.com
References: <20240715172835.24757-1-alejandro.lucero-palau@amd.com>
 <20240715172835.24757-12-alejandro.lucero-palau@amd.com>
 <1f082012-1ad6-4b12-8eb4-96bcc61704a0@intel.com>
 <1cd50929-35f5-d0f1-9a68-d22e28cdf1b6@amd.com>
In-Reply-To: <1cd50929-35f5-d0f1-9a68-d22e28cdf1b6@amd.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ClientProxiedBy: LO2P265CA0026.GBRP265.PROD.OUTLOOK.COM
 (2603:10a6:600:61::14) To DM6PR12MB4202.namprd12.prod.outlook.com
 (2603:10b6:5:219::22)
Precedence: bulk
X-Mailing-List: linux-cxl@vger.kernel.org
List-Id: <linux-cxl.vger.kernel.org>
List-Subscribe: <mailto:linux-cxl+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-cxl+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: DM6PR12MB4202:EE_|MW4PR12MB6705:EE_
X-MS-Office365-Filtering-Correlation-Id: 65b23269-e131-4bc0-9f36-08dcc77b5409
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;ARA:13230040|376014|366016|1800799024|921020;
X-Microsoft-Antispam-Message-Info: 
	=?utf-8?B?aXE3WTlFSXQ5U0IrQlk5K2tkQ1BERW5YUk9hUzVDdStpZ2pOc2lNa1NwcXFG?=
 =?utf-8?B?aUhRTDhVdWtwa3ZWcGptTjExUmVkeEprL2hRcFlGTEJ3c3hzS0FGMjdVQk0v?=
 =?utf-8?B?VXJMZGE2eXI0ZStxZjhscEZacTFUQ2dKaGxsblQ2UlZ6STc0TmhHRXZvZXFF?=
 =?utf-8?B?MUplR1ZZczhaSkJSK1pJa296VkNobXJrM2JnelJ1ZjBwODE3emlOWlh6UDhu?=
 =?utf-8?B?b2JQNXRoV1JTUmxHQkZ4V0llemZoTWcxVkRQSG9oOE5oZUdFM1ZIb1AyVDd0?=
 =?utf-8?B?ZGNxelNrZ2Nodk5USWJhb3RkeitCeUZkRHBTQXN0M3lRc1laa3hmNklhR1Yv?=
 =?utf-8?B?bGpKanVyYUFCWVd2dWJEYUhqMTB4OXBxMDlZNjZFbWhpVnAyYXJZeEphZmNm?=
 =?utf-8?B?VFhEb2lKbDM3L0tCeGRMS1QyZGF5cUViYkR5ZXhSazUwZG9TTGY3aVlMTXFD?=
 =?utf-8?B?NUlZQngwY2ZpVVVETkdBVjdLYkU2SUI5dndkcjBNU0ZPWkt0eUZxY1RCSmRI?=
 =?utf-8?B?VXpFVXNXb1BQR1lySms2aTNidG5wV0liRzhwNzRkdU4zaTR2WEZDcHlyemJZ?=
 =?utf-8?B?N3pQYU1ndUVPUWIwY0tkelhKSWNRUjlPUnBBSm1jcm1QMXpJanF0VzFCQTd0?=
 =?utf-8?B?WHg3QWRjdnpEb3A2dHBNWUgyN1VpUWZ2a0RtL1NocHVmcHNZR0hpbXhpU1Zu?=
 =?utf-8?B?UnVSUXlvdnFwenNMdVNkSHhzOUtKY1NVTWlEenRWeERVTFRiZk9UTUNPYnUv?=
 =?utf-8?B?QXZINHZpYzVqdTFzL3p3VzRQQUFsdFhpU3JuOFEyWFVXVmk1Zi9rblJsZk1G?=
 =?utf-8?B?NGhFZFFQU0phQUNuRDUybjNDQW93SDNPcVUrVFlzOXMxNjl6eUVqem9JTTZl?=
 =?utf-8?B?SWdIMjdqVEpKZS9nR2l3d2ZiSWxuRFl6QmhzTUxjSEg0QythZC8vMFNTeTE3?=
 =?utf-8?B?VjJBdHhlcC9zM1BQUCs5TUF4NDZrdHN4bSt3STVNZjV2Sm51RmY1WlNNZ0Q3?=
 =?utf-8?B?b2ZadVdvTTZIcmkyNWdFVGdhQzZQVjdIUGVZRHV3SnlKdEQ4TGU5RnVUTjMr?=
 =?utf-8?B?WHg0TFllMmhZYjRuRjdJdGl3aC81K0dUSE9hcFFLTlIvaTFDNWNvVVFIY3Jm?=
 =?utf-8?B?U3o3RUcxczdhR2R3Nk9VODJVSy9NUHliTTZKTzkxN1hVSGtNZ0hITEdhd25w?=
 =?utf-8?B?Q295eEl3K0RjRFJhZC84L3kvM01YNzkxeXhXT0d4c2RXUUx4WmYvMGxFdndU?=
 =?utf-8?B?YVg5UjFwc0FKbmdSbE90QTU1OUJISnRQYktBcWpDRUlRaGIxQzhKeE1maEpj?=
 =?utf-8?B?ZG9GczB1NVVQSzZHd0MyQ0dGSnVsWndGRTdQeGkyOStQVjFpSzVpRVBOYlBh?=
 =?utf-8?B?VkFwT2xhdmxtTXVwZHNBbUt4bGFEMm9Eeml2dWRDc1lDcmNsWnNwbFF1a1pK?=
 =?utf-8?B?NExsTktibnk1NzlxVnNGL0tTT2NOcjhhUzNhb2J4YU5UUk1VS3U5NFk1SlY3?=
 =?utf-8?B?VmNEaXFseXRNTElaUkNXTFk5OFV6SStZVEtaaUdmY1hxYng3SlVLZ2J5bFAy?=
 =?utf-8?B?VExheUtNR01lTmoyMEk4dWV4NmEwSEpCdWhOR1BDWDB2ZFV1OWg3ZExlUnhY?=
 =?utf-8?B?OGxQYUZORUVlcGRYWGdLcHhPVG45a2ZsMStDR1VraE5xS1Q3QTdPRlhiQjN0?=
 =?utf-8?B?UFRNbEp1UG1oTGF5c0V3aE5JTTBtZHhySzZEbmdZZHRtTXB0YmRsNkNBWEtZ?=
 =?utf-8?B?MGtUOTBOQjdUK3haS1FvMVdublpTQ1VkamRCbG5sMkd2SzFKWVhBQXlPSkxv?=
 =?utf-8?B?K1lCemdJdXA0L0g1VFlBWTNJL3JnMFFSVlVCVjZYQ0xqazNnclJmYlRRQ0Jw?=
 =?utf-8?Q?mxEIs/oCMUXzA?=
X-Forefront-Antispam-Report: 
	CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:DM6PR12MB4202.namprd12.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230040)(376014)(366016)(1800799024)(921020);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: 
	=?utf-8?B?eGFBVURjdktYc3dHM2lFWWZjNXVGaFE0Tk5KYklBckdzMHFDUmtNME80czNl?=
 =?utf-8?B?YU8wcHE1NnNmMEZYaHhlYTFBNjhNME43NDdNdDVwbWhDQ1R3MjB0KzBLTFNw?=
 =?utf-8?B?ZW9RYXJJTktRVE5yM1N2UytXVnpIRGhOclk0SmZSVGRYVUN6UG1mbUpYWHpS?=
 =?utf-8?B?SHhVTUFGUHUvVU8yUnJ0bFdKaitYUm5LclpySFEwRTB0TDAzV2tMUjNCWXNk?=
 =?utf-8?B?ZjdxR1o2MWFBMkFKTEVZQjZRVjAxcjY0cyt3ZzJYcnFYNGNtUDlaQ0RnNlQ4?=
 =?utf-8?B?RUM1T01BUTRoczl1WFNqQzU5VDk3eTNOTHVMazU3NTZReVZxeU44aGpaTnJQ?=
 =?utf-8?B?Qk9weXNraG1qVDV1LzAwbzZtU3RMNG5rZk9McVlFOHpIcnFNOXBuRVgzVm1O?=
 =?utf-8?B?aHNMNzVoNXF0akpPWk52YXp6My8rR3NkanlmaFR4bzhLOGk4VkZXTytvMkNq?=
 =?utf-8?B?WmpvRGZKbXh4ODJjR25nR0tINEl6RzNSZVNkcDExRHhJR0JXQWVOa1d3Szg4?=
 =?utf-8?B?TWFQSy9XLzNsajUwaU9WTW5Yd0xNclh3MGpqNDlSQ0x5OGRpTkMzSTFFOGVR?=
 =?utf-8?B?aXhPQ01yVGE2b3oxMnAvcGhwaHlPVmVxeU91TVA1MG9jL0oxekF5M25FaG1D?=
 =?utf-8?B?dEtpdWxlNDVGeHhOWkp2ZEJycWhxM2xPU2dtN284YWJleWxhOEd1b0cvUFE2?=
 =?utf-8?B?MUJEeVk5ZWR2YnFLY2ZodVA4WlB2MDNlVzdVcDUrL1VRREJnOElDcC9FL0tQ?=
 =?utf-8?B?ZkRQY2ZqV0duZGpBSS9ySkNaMDF3VzVFbFJMNC9KMm9xSjdlRUtMcFFZTGto?=
 =?utf-8?B?TDZFencxRW5weFJTakR6cmRnbi9FTzZNRkorK1FlSGVEQTBlSDhycTFOM2E3?=
 =?utf-8?B?TFdZM3RmaVRJNXJQSVFaZ25rVGdjYXR3bDNHSkp1RElCVTdMYjBQZ3RLVlk2?=
 =?utf-8?B?ZXpPY0ZhWXVWZjhhaUhPN1d2SkJuSFBPeERTSGFITFcwSkR6NVVHbm91OWlo?=
 =?utf-8?B?WmJSblhCaG1FaGV2TTFmZTVDVVRxaGZud1VHVWs4S2Y5N2U2MFh4NWpLY0Zx?=
 =?utf-8?B?NkZ5NmJrUkdXY01zcStKMC9PV2R3VnRQMWR5WnlvQkRRTWYxelArZU5FeEl0?=
 =?utf-8?B?eWdjUlJKYXBXRW5QVUp0UkxYY0NQM1R2S0NLWUMxdW51QkVHZ2V4QXgyZkpt?=
 =?utf-8?B?RnpRNlBPMW5BZGxrdzVNSjZjdzF4bThFdUEyMU1Oa0M3cjRobGFEdUltVkFI?=
 =?utf-8?B?RGZHTnZWc0FTOFhzeSsxT1lSYkhuQWZTU1kvV1o4TDNDbjQ0S1NOUVRLa3lT?=
 =?utf-8?B?emUweHZ6Uk8wSkY3MzZJZVZoZ29LTFhOeFByWGdIcWdvcUJzVGhYUUJMN1lF?=
 =?utf-8?B?SlA1OGhXZjVza2d0N3FvcXQrd3dCamQreDlHY1BQV1YvV0JoamtBV3l6VjhF?=
 =?utf-8?B?VHVyZEk5WjQ5Q3M3MU96OFZoM05xODNOOTd5cG1zK25CNWdxcjZBZ2pBS08z?=
 =?utf-8?B?L1NOU3lKaWNhZDc1QStyYVRqbnpXYk9HWThwTHdoNG9oejMvcFEwQ2tsTXN2?=
 =?utf-8?B?blVQSEMvZTFNeVRhdHdiSkxBYmFmMVJjK0ZwWHhXZXhPZnMycU1YODFDQURE?=
 =?utf-8?B?anRPZ1pVanhkOWowQUJzZDJpU2RFVmtvdFF1aURYR09ZUC9WSkZnbFpCWDZ6?=
 =?utf-8?B?MUVCL0JUckRWUG1EcmRiL3NFNUNLSGRNRkhaZkd3ck9wSGNwZHMxb1NWVWI0?=
 =?utf-8?B?d09KRTBDVmM0MmM2Smk2YmxGTmZpK3ZPYlZwcGI3VDJ1RzBjQldmbXdNTDEy?=
 =?utf-8?B?YXA0VjNuY252QUxoS2ExRjBNR0JDZVNBUGIzTjZiaGYveTFKeU0xcWVpSnV3?=
 =?utf-8?B?MGR0eWFnMERLdk5uekprME45bndpYTYzaFlCR3ZDV2FTcys1V3dpc3JCQnRD?=
 =?utf-8?B?L0F2aXBKcjk1MFRYSHhmTTd5amo2TDhaQTNoVi9rYjREZDg3SDhUanc3WE5F?=
 =?utf-8?B?aTh4UjRkclM5TjJDVTVCTkxscUtyNW5rS2FaeFVCbjBDdVp6TGN6U3F3ek9I?=
 =?utf-8?B?RkQzOFViMHZnWWJMb1h4Tis4UzhCTXpBMC96TTVzZ1pla0lKUFZXK1RyK2ha?=
 =?utf-8?Q?YrRT7fsrxG8Duciu45Zw+M0bb?=
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 65b23269-e131-4bc0-9f36-08dcc77b5409
X-MS-Exchange-CrossTenant-AuthSource: DM6PR12MB4202.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 28 Aug 2024 16:06:08.6793
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: u+Zwol1up9t0WOZvnidgUx/sNAUsqngkVlxxWaWRLazkHIg8LU4RM1cTkQnDsDGADBe0jEQWgKhawSf32/Se6g==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MW4PR12MB6705


On 7/16/24 09:13, Alejandro Lucero Palau wrote:
>
> On 7/16/24 08:14, Li, Ming4 wrote:
>> On 7/16/2024 1:28 AM, alejandro.lucero-palau@amd.com wrote:
>>> From: Alejandro Lucero <alucerop@amd.com>
>>>
>>> Current code is expecting Type3 or CXL_DECODER_HOSTONLYMEM devices 
>>> only.
>>> Suport for Type2 implies region type needs to be based on the endpoint
>>> type instead.
>>>
>>> Signed-off-by: Alejandro Lucero <alucerop@amd.com>
>>> ---
>>>   drivers/cxl/core/region.c | 14 +++++++++-----
>>>   1 file changed, 9 insertions(+), 5 deletions(-)
>>>
>>> diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
>>> index ca464bfef77b..5cc71b8868bc 100644
>>> --- a/drivers/cxl/core/region.c
>>> +++ b/drivers/cxl/core/region.c
>>> @@ -2645,7 +2645,8 @@ static ssize_t create_ram_region_show(struct 
>>> device *dev,
>>>   }
>>>     static struct cxl_region *__create_region(struct 
>>> cxl_root_decoder *cxlrd,
>>> -                      enum cxl_decoder_mode mode, int id)
>>> +                      enum cxl_decoder_mode mode, int id,
>>> +                      enum cxl_decoder_type target_type)
>>>   {
>>>       int rc;
>>>   @@ -2667,7 +2668,7 @@ static struct cxl_region 
>>> *__create_region(struct cxl_root_decoder *cxlrd,
>>>           return ERR_PTR(-EBUSY);
>>>       }
>>>   -    return devm_cxl_add_region(cxlrd, id, mode, 
>>> CXL_DECODER_HOSTONLYMEM);
>>> +    return devm_cxl_add_region(cxlrd, id, mode, target_type);
>>>   }
>>>     static ssize_t create_pmem_region_store(struct device *dev,
>>> @@ -2682,7 +2683,8 @@ static ssize_t create_pmem_region_store(struct 
>>> device *dev,
>>>       if (rc != 1)
>>>           return -EINVAL;
>>>   -    cxlr = __create_region(cxlrd, CXL_DECODER_PMEM, id);
>>> +    cxlr = __create_region(cxlrd, CXL_DECODER_PMEM, id,
>>> +                   CXL_DECODER_HOSTONLYMEM);
>>>       if (IS_ERR(cxlr))
>>>           return PTR_ERR(cxlr);
>>>   @@ -2702,7 +2704,8 @@ static ssize_t 
>>> create_ram_region_store(struct device *dev,
>>>       if (rc != 1)
>>>           return -EINVAL;
>>>   -    cxlr = __create_region(cxlrd, CXL_DECODER_RAM, id);
>>> +    cxlr = __create_region(cxlrd, CXL_DECODER_RAM, id,
>>> +                   CXL_DECODER_HOSTONLYMEM);
>>>       if (IS_ERR(cxlr))
>>>           return PTR_ERR(cxlr);
>>>   @@ -3364,7 +3367,8 @@ static struct cxl_region 
>>> *construct_region(struct cxl_root_decoder *cxlrd,
>>>         do {
>>>           cxlr = __create_region(cxlrd, cxled->mode,
>>> - atomic_read(&cxlrd->region_id));
>>> +                       atomic_read(&cxlrd->region_id),
>>> +                       cxled->cxld.target_type);
>>>       } while (IS_ERR(cxlr) && PTR_ERR(cxlr) == -EBUSY);
>>>         if (IS_ERR(cxlr)) {
>> I think that one more check between the type of root decoder and 
>> endpoint decoder is necessary in this case. Currently, root decoder 
>> type is hard coded to CXL_DECODER_HOSTONLYMEM, but it should be 
>> CXL_DECODER_DEVMEM or CXL_DECODER_HOSTONLYMEM based on 
>> cfmws->restrictions.
>>
>
> I think you are completely right.
>
> I will work on this looking also for other implications.
>
> Thanks
>
>
>>

I think the check could be performed inside cxl_attach_region where the 
region type is already matched against the endpoint type. That is the 
check triggering a failure for my Type2 support and the reason behind 
this patch.

However, I think the way encoder type is managed requires a refactoring. 
>From the cedt cfmw restrictions I assume a decoder can support different 
types and not restricted to just one, what is what the code does now 
using a enumeration for the encoder type. With no restrictions, what is 
the current implementation with qemu, I would say a root decoder should 
be fine for a Type3 or a Type2. Adding that check for matching the root 
decoder type with the region type is therefore not possible without 
major changes. Because other potential restrictions like only supporting 
RAM and no PMEM is not currently being managed, I think this initial 
type2 support should be fine without the checking you propose, but a 
following patch should address this problem, of course, assuming I'm not 
wrong with all this.



From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.16])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 523874A2F;
	Tue, 16 Jul 2024 00:54:20 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=198.175.65.16
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721091262; cv=none; b=XFaGxAhX7XgPDMSByDn071NjAwnz4EcycC8eYkguZmG6M/zrvd4Z1GxxtsIfhYG5RtuaTKlw7S/iNwROw73j42t1uEbfeNfrrPIDkubQsit3G1F6W99Wrij1xcUftzbYnxOnhLZlO5ouSdgHkprxnUkFfteiTO+z7+nwvwyE/IE=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721091262; c=relaxed/simple;
	bh=AlcLkl3ZckSTetDqtkbewgaIlrmC0fd1HpPyOnPIDOY=;
	h=Date:From:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=jpVPqVe7iCrlh3YDbvHd+bLgmVEf4hB12qktHNbyUuKaW84O8qkrtS2XxQc3lNXXD6lGoHczOXpfXQYaA+8RXP7kXNgD7OF0hppQnA81Kxbt3A/noe5yJA/BK+8SABhGxi7yOwgoYdIaU7X1dsusI2iXMv4AZd26EKZmHlz3m+0=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=n0f7rM5L; arc=none smtp.client-ip=198.175.65.16
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="n0f7rM5L"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721091260; x=1752627260;
  h=date:from:to:cc:subject:message-id:references:
   mime-version:in-reply-to;
  bh=AlcLkl3ZckSTetDqtkbewgaIlrmC0fd1HpPyOnPIDOY=;
  b=n0f7rM5LQCiaK+ndZzU9tQ3UPFnnfy/fVE+GcHxaCEXvgDGHqf7uE9f5
   TuEwcr9s0FoSyulbWfBrcymhSXEZrYsCgtC+yziKavUCDoiN/oFdDnzKQ
   b7KMtErNscRcH7KXqVIXVLUziLlUF4r8l03stUqnuMgcYzAWrC7Pm6t7f
   adBPFNSyb4yCKmkmyj0VykUreiS80gWxGlv5EFZBw20ZYh/XuMFNOjF5i
   yxyGi6WKUB/y5rvnnbHE/JukYlojPHCf9cDpBvTj74wd3kFGHYZPojhqU
   44ZXpO+aPu6d0RESgj4ThGHbv6rWnKVUYPq93T0hRle40IAqpuIpeBxaq
   A==;
X-CSE-ConnectionGUID: 15W2N+d8TB+PXPlxkbRQUg==
X-CSE-MsgGUID: FCGLv+HATw6GjusZzo6Mqw==
X-IronPort-AV: E=McAfee;i="6700,10204,11134"; a="18642255"
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="18642255"
Received: from fmviesa010.fm.intel.com ([10.60.135.150])
  by orvoesa108.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 15 Jul 2024 17:54:20 -0700
X-CSE-ConnectionGUID: lF6M1kDsQcupE5CgB6cnNw==
X-CSE-MsgGUID: EmctZzIbRMavmTAEQvtPpQ==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="49900247"
Received: from lkp-server01.sh.intel.com (HELO 68891e0c336b) ([10.239.97.150])
  by fmviesa010.fm.intel.com with ESMTP; 15 Jul 2024 17:54:16 -0700
Received: from kbuild by 68891e0c336b with local (Exim 4.96)
	(envelope-from <lkp@intel.com>)
	id 1sTWSM-000eiJ-1i;
	Tue, 16 Jul 2024 00:54:14 +0000
Date: Tue, 16 Jul 2024 08:53:30 +0800
From: kernel test robot <lkp@intel.com>
To: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
	netdev@vger.kernel.org, dan.j.williams@intel.com,
	martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
	kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
	richard.hughes@amd.com
Cc: llvm@lists.linux.dev, oe-kbuild-all@lists.linux.dev,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 09/15] cxl: define a driver interface for HPA free
 space enumaration
Message-ID: <202407160818.7GrterxM-lkp@intel.com>
References: <20240715172835.24757-10-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: oe-kbuild-all@lists.linux.dev
List-Id: <oe-kbuild-all.lists.linux.dev>
List-Subscribe: <mailto:oe-kbuild-all+subscribe@lists.linux.dev>
List-Unsubscribe: <mailto:oe-kbuild-all+unsubscribe@lists.linux.dev>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240715172835.24757-10-alejandro.lucero-palau@amd.com>

Hi,

kernel test robot noticed the following build warnings:

[auto build test WARNING on linus/master]
[also build test WARNING on v6.10 next-20240715]
[cannot apply to cxl/next cxl/pending horms-ipvs/master]
[If your patch is applied to the wrong git tree, kindly drop us a note.
And when submitting patch, we suggest to use '--base' as documented in
https://git-scm.com/docs/git-format-patch#_base_tree_information]

url:    https://github.com/intel-lab-lkp/linux/commits/alejandro-lucero-palau-amd-com/cxl-add-type2-device-basic-support/20240716-015920
base:   linus/master
patch link:    https://lore.kernel.org/r/20240715172835.24757-10-alejandro.lucero-palau%40amd.com
patch subject: [PATCH v2 09/15] cxl: define a driver interface for HPA free space enumaration
config: i386-buildonly-randconfig-004-20240716 (https://download.01.org/0day-ci/archive/20240716/202407160818.7GrterxM-lkp@intel.com/config)
compiler: clang version 18.1.5 (https://github.com/llvm/llvm-project 617a15a9eac96088ae5e9134248d8236e34b91b1)
reproduce (this is a W=1 build): (https://download.01.org/0day-ci/archive/20240716/202407160818.7GrterxM-lkp@intel.com/reproduce)

If you fix the issue in a separate patch/commit (i.e. not just a new version of
the same patch/commit), kindly add following tags
| Reported-by: kernel test robot <lkp@intel.com>
| Closes: https://lore.kernel.org/oe-kbuild-all/202407160818.7GrterxM-lkp@intel.com/

All warnings (new ones prefixed by >>):

   In file included from drivers/net/ethernet/sfc/efx_cxl.c:17:
   drivers/net/ethernet/sfc/efx_cxl.h:11:9: warning: 'EFX_CXL_H' is used as a header guard here, followed by #define of a different macro [-Wheader-guard]
      11 | #ifndef EFX_CXL_H
         |         ^~~~~~~~~
   drivers/net/ethernet/sfc/efx_cxl.h:12:9: note: 'EFX_CLX_H' is defined here; did you mean 'EFX_CXL_H'?
      12 | #define EFX_CLX_H
         |         ^~~~~~~~~
         |         EFX_CXL_H
>> drivers/net/ethernet/sfc/efx_cxl.c:89:7: warning: format specifies type 'unsigned long long' but the argument has type 'resource_size_t' (aka 'unsigned int') [-Wformat]
      88 |                 pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
         |                                                                        ~~~~
         |                                                                        %u
      89 |                                   max, EFX_CTPIO_BUFFER_SIZE);
         |                                   ^~~
   include/linux/pci.h:2683:67: note: expanded from macro 'pci_info'
    2683 | #define pci_info(pdev, fmt, arg...)     dev_info(&(pdev)->dev, fmt, ##arg)
         |                                                                ~~~    ^~~
   include/linux/dev_printk.h:160:67: note: expanded from macro 'dev_info'
     160 |         dev_printk_index_wrap(_dev_info, KERN_INFO, dev, dev_fmt(fmt), ##__VA_ARGS__)
         |                                                                  ~~~     ^~~~~~~~~~~
   include/linux/dev_printk.h:110:23: note: expanded from macro 'dev_printk_index_wrap'
     110 |                 _p_func(dev, fmt, ##__VA_ARGS__);                       \
         |                              ~~~    ^~~~~~~~~~~
   2 warnings generated.


vim +89 drivers/net/ethernet/sfc/efx_cxl.c

    15	
    16	#include "net_driver.h"
  > 17	#include "efx_cxl.h"
    18	
    19	#define EFX_CTPIO_BUFFER_SIZE	(1024*1024*256)
    20	
    21	void efx_cxl_init(struct efx_nic *efx)
    22	{
    23		struct pci_dev *pci_dev = efx->pci_dev;
    24		struct efx_cxl *cxl = efx->cxl;
    25		resource_size_t max = 0;
    26		struct resource res;
    27		u16 dvsec;
    28	
    29		dvsec = pci_find_dvsec_capability(pci_dev, PCI_VENDOR_ID_CXL,
    30						  CXL_DVSEC_PCIE_DEVICE);
    31	
    32		if (!dvsec)
    33			return;
    34	
    35		pci_info(pci_dev, "CXL CXL_DVSEC_PCIE_DEVICE capability found");
    36	
    37		cxl->cxlds = cxl_accel_state_create(&pci_dev->dev,
    38						    CXL_ACCEL_DRIVER_CAP_HDM);
    39		if (IS_ERR(cxl->cxlds)) {
    40			pci_info(pci_dev, "CXL accel device state failed");
    41			return;
    42		}
    43	
    44		cxl_accel_set_dvsec(cxl->cxlds, dvsec);
    45		cxl_accel_set_serial(cxl->cxlds, pci_dev->dev.id);
    46	
    47		res = DEFINE_RES_MEM(0, EFX_CTPIO_BUFFER_SIZE);
    48		cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_DPA);
    49	
    50		res = DEFINE_RES_MEM_NAMED(0, EFX_CTPIO_BUFFER_SIZE, "ram");
    51		cxl_accel_set_resource(cxl->cxlds, res, CXL_ACCEL_RES_RAM);
    52	
    53		if (cxl_pci_accel_setup_regs(pci_dev, cxl->cxlds)) {
    54			pci_info(pci_dev, "CXL accel setup regs failed");
    55			return;
    56		}
    57	
    58		if (cxl_accel_request_resource(cxl->cxlds, true))
    59			pci_info(pci_dev, "CXL accel resource request failed");
    60	
    61		if (!cxl_await_media_ready(cxl->cxlds)) {
    62			cxl_accel_set_media_ready(cxl->cxlds);
    63		} else {
    64			pci_info(pci_dev, "CXL accel media not active");
    65			return;
    66		}
    67	
    68		cxl->cxlmd = devm_cxl_add_memdev(&pci_dev->dev, cxl->cxlds);
    69		if (IS_ERR(cxl->cxlmd)) {
    70			pci_info(pci_dev, "CXL accel memdev creation failed");
    71			return;
    72		}
    73	
    74		cxl->endpoint = cxl_acquire_endpoint(cxl->cxlmd);
    75		if (IS_ERR(cxl->endpoint))
    76			pci_info(pci_dev, "CXL accel acquire endpoint failed");
    77	
    78		cxl->cxlrd = cxl_get_hpa_freespace(cxl->endpoint, 1,
    79						    CXL_DECODER_F_RAM | CXL_DECODER_F_TYPE2,
    80						    &max);
    81	
    82		if (IS_ERR(cxl->cxlrd)) {
    83			pci_info(pci_dev, "CXL accel get HPA failed");
    84			goto out;
    85		}
    86	
    87		if (max < EFX_CTPIO_BUFFER_SIZE)
    88			pci_info(pci_dev, "CXL accel not enough free HPA space %llu < %u\n",
  > 89					  max, EFX_CTPIO_BUFFER_SIZE);
    90	out:
    91		cxl_release_endpoint(cxl->cxlmd, cxl->endpoint);
    92	}
    93	

-- 
0-DAY CI Kernel Test Service
https://github.com/intel/lkp-tests/wiki

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [192.198.163.17])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 0351F4A24;
	Tue, 16 Jul 2024 01:57:22 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=192.198.163.17
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721095046; cv=none; b=TH82yGT1p/akG0EMSAOeupZdrRH0lsrI6FQQJKWpVQB4NmtBZneJc4kfhaJqKK4cDbyEFBYBy/ICo8B2f14YbA/7mH/IHieigYah2SP317Uj+AnJ8zPJ7h6PCFSdkNsnoX2xqyT7nPkb/75fdNFk0jDOeUyoCesKSx4YYpzj4RQ=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721095046; c=relaxed/simple;
	bh=t0XlaqT1tDT/nsM6KCVFb/nb2016vFMXOdVznDehQak=;
	h=Date:From:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=M3bRavAj7MKI2zt6HzmyCqeufPlUJ6EB2WM1gg6BT55o1kgSnpZ/nZ30OXA8o6nyvFJOD+tC0QhxJLXKhUIZVUyQOSXVaaQG5rAXHr4pWsjwo5k9r0owi0hA8FvC5UpDw1vCiytHbTSyT8Sfw7yPTsM6leWXQ/Kbftl2x8QdDxI=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=fIBKteLS; arc=none smtp.client-ip=192.198.163.17
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="fIBKteLS"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721095043; x=1752631043;
  h=date:from:to:cc:subject:message-id:references:
   mime-version:in-reply-to;
  bh=t0XlaqT1tDT/nsM6KCVFb/nb2016vFMXOdVznDehQak=;
  b=fIBKteLSPhZWakjlGU2celfaXfB845tbzVF7DeSc9j4Sr0PSgQcX2AZY
   AXAatQ4++rRQNLDQoggDj+V/7yYXbWTLUYktD6b3sn9vwH7dVjSHTa9rX
   ULA0ty7kDlhwH7YfF5rfg8S7E+ZiPuYx1MFh4i+dfpFsGljgSRLr3KSjd
   yCZEEAJ8TGV/S+4KN6+TleoA+SCtHdkAKcNYGY0dUwmS5XYeY+tphP/dY
   oR1QHRFMPTdr7ZLm3oVl4oRO4gHGED6iRYqbh4Hujhgz/E0zQDVHssjQy
   7JNaVfraSN0tGNtoPeQFtqw1KG/F2IhMJyOQfR2VH4GDvKIHGYqkkQVZR
   Q==;
X-CSE-ConnectionGUID: WpzpiDI4THex67W/mnqi6Q==
X-CSE-MsgGUID: 5mCEcgNyQcuXxr3Ys8v/KQ==
X-IronPort-AV: E=McAfee;i="6700,10204,11134"; a="18377041"
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="18377041"
Received: from orviesa002.jf.intel.com ([10.64.159.142])
  by fmvoesa111.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 15 Jul 2024 18:57:22 -0700
X-CSE-ConnectionGUID: Sy4ZL5sRSuSVdTh3priDpA==
X-CSE-MsgGUID: vtkZ1LHFRvePulM3uhH8xA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="80509954"
Received: from lkp-server01.sh.intel.com (HELO 68891e0c336b) ([10.239.97.150])
  by orviesa002.jf.intel.com with ESMTP; 15 Jul 2024 18:57:19 -0700
Received: from kbuild by 68891e0c336b with local (Exim 4.96)
	(envelope-from <lkp@intel.com>)
	id 1sTXRM-000ekw-0M;
	Tue, 16 Jul 2024 01:57:16 +0000
Date: Tue, 16 Jul 2024 09:57:00 +0800
From: kernel test robot <lkp@intel.com>
To: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
	netdev@vger.kernel.org, dan.j.williams@intel.com,
	martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
	kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
	richard.hughes@amd.com
Cc: llvm@lists.linux.dev, oe-kbuild-all@lists.linux.dev,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 01/15] cxl: add type2 device basic support
Message-ID: <202407160957.L4mIOUtI-lkp@intel.com>
References: <20240715172835.24757-2-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: oe-kbuild-all@lists.linux.dev
List-Id: <oe-kbuild-all.lists.linux.dev>
List-Subscribe: <mailto:oe-kbuild-all+subscribe@lists.linux.dev>
List-Unsubscribe: <mailto:oe-kbuild-all+unsubscribe@lists.linux.dev>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240715172835.24757-2-alejandro.lucero-palau@amd.com>

Hi,

kernel test robot noticed the following build warnings:

[auto build test WARNING on linus/master]
[also build test WARNING on cxl/pending v6.10 next-20240715]
[cannot apply to cxl/next horms-ipvs/master]
[If your patch is applied to the wrong git tree, kindly drop us a note.
And when submitting patch, we suggest to use '--base' as documented in
https://git-scm.com/docs/git-format-patch#_base_tree_information]

url:    https://github.com/intel-lab-lkp/linux/commits/alejandro-lucero-palau-amd-com/cxl-add-type2-device-basic-support/20240716-015920
base:   linus/master
patch link:    https://lore.kernel.org/r/20240715172835.24757-2-alejandro.lucero-palau%40amd.com
patch subject: [PATCH v2 01/15] cxl: add type2 device basic support
config: s390-allmodconfig (https://download.01.org/0day-ci/archive/20240716/202407160957.L4mIOUtI-lkp@intel.com/config)
compiler: clang version 19.0.0git (https://github.com/llvm/llvm-project a0c6b8aef853eedaa0980f07c0a502a5a8a9740e)
reproduce (this is a W=1 build): (https://download.01.org/0day-ci/archive/20240716/202407160957.L4mIOUtI-lkp@intel.com/reproduce)

If you fix the issue in a separate patch/commit (i.e. not just a new version of
the same patch/commit), kindly add following tags
| Reported-by: kernel test robot <lkp@intel.com>
| Closes: https://lore.kernel.org/oe-kbuild-all/202407160957.L4mIOUtI-lkp@intel.com/

All warnings (new ones prefixed by >>):

   In file included from drivers/net/ethernet/sfc/efx.c:8:
   In file included from include/linux/filter.h:9:
   In file included from include/linux/bpf.h:20:
   In file included from include/linux/module.h:19:
   In file included from include/linux/elf.h:6:
   In file included from arch/s390/include/asm/elf.h:173:
   In file included from arch/s390/include/asm/mmu_context.h:11:
   In file included from arch/s390/include/asm/pgalloc.h:18:
   In file included from include/linux/mm.h:2258:
   include/linux/vmstat.h:500:43: warning: arithmetic between different enumeration types ('enum zone_stat_item' and 'enum numa_stat_item') [-Wenum-enum-conversion]
     500 |         return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
         |                            ~~~~~~~~~~~~~~~~~~~~~ ^
     501 |                            item];
         |                            ~~~~
   include/linux/vmstat.h:507:43: warning: arithmetic between different enumeration types ('enum zone_stat_item' and 'enum numa_stat_item') [-Wenum-enum-conversion]
     507 |         return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
         |                            ~~~~~~~~~~~~~~~~~~~~~ ^
     508 |                            NR_VM_NUMA_EVENT_ITEMS +
         |                            ~~~~~~~~~~~~~~~~~~~~~~
   include/linux/vmstat.h:514:36: warning: arithmetic between different enumeration types ('enum node_stat_item' and 'enum lru_list') [-Wenum-enum-conversion]
     514 |         return node_stat_name(NR_LRU_BASE + lru) + 3; // skip "nr_"
         |                               ~~~~~~~~~~~ ^ ~~~
   include/linux/vmstat.h:519:43: warning: arithmetic between different enumeration types ('enum zone_stat_item' and 'enum numa_stat_item') [-Wenum-enum-conversion]
     519 |         return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
         |                            ~~~~~~~~~~~~~~~~~~~~~ ^
     520 |                            NR_VM_NUMA_EVENT_ITEMS +
         |                            ~~~~~~~~~~~~~~~~~~~~~~
   include/linux/vmstat.h:528:43: warning: arithmetic between different enumeration types ('enum zone_stat_item' and 'enum numa_stat_item') [-Wenum-enum-conversion]
     528 |         return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
         |                            ~~~~~~~~~~~~~~~~~~~~~ ^
     529 |                            NR_VM_NUMA_EVENT_ITEMS +
         |                            ~~~~~~~~~~~~~~~~~~~~~~
   In file included from drivers/net/ethernet/sfc/efx.c:8:
   In file included from include/linux/filter.h:12:
   In file included from include/linux/skbuff.h:28:
   In file included from include/linux/dma-mapping.h:11:
   In file included from include/linux/scatterlist.h:9:
   In file included from arch/s390/include/asm/io.h:93:
   include/asm-generic/io.h:548:31: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     548 |         val = __raw_readb(PCI_IOBASE + addr);
         |                           ~~~~~~~~~~ ^
   include/asm-generic/io.h:561:61: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     561 |         val = __le16_to_cpu((__le16 __force)__raw_readw(PCI_IOBASE + addr));
         |                                                         ~~~~~~~~~~ ^
   include/uapi/linux/byteorder/big_endian.h:37:59: note: expanded from macro '__le16_to_cpu'
      37 | #define __le16_to_cpu(x) __swab16((__force __u16)(__le16)(x))
         |                                                           ^
   include/uapi/linux/swab.h:102:54: note: expanded from macro '__swab16'
     102 | #define __swab16(x) (__u16)__builtin_bswap16((__u16)(x))
         |                                                      ^
   In file included from drivers/net/ethernet/sfc/efx.c:8:
   In file included from include/linux/filter.h:12:
   In file included from include/linux/skbuff.h:28:
   In file included from include/linux/dma-mapping.h:11:
   In file included from include/linux/scatterlist.h:9:
   In file included from arch/s390/include/asm/io.h:93:
   include/asm-generic/io.h:574:61: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     574 |         val = __le32_to_cpu((__le32 __force)__raw_readl(PCI_IOBASE + addr));
         |                                                         ~~~~~~~~~~ ^
   include/uapi/linux/byteorder/big_endian.h:35:59: note: expanded from macro '__le32_to_cpu'
      35 | #define __le32_to_cpu(x) __swab32((__force __u32)(__le32)(x))
         |                                                           ^
   include/uapi/linux/swab.h:115:54: note: expanded from macro '__swab32'
     115 | #define __swab32(x) (__u32)__builtin_bswap32((__u32)(x))
         |                                                      ^
   In file included from drivers/net/ethernet/sfc/efx.c:8:
   In file included from include/linux/filter.h:12:
   In file included from include/linux/skbuff.h:28:
   In file included from include/linux/dma-mapping.h:11:
   In file included from include/linux/scatterlist.h:9:
   In file included from arch/s390/include/asm/io.h:93:
   include/asm-generic/io.h:585:33: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     585 |         __raw_writeb(value, PCI_IOBASE + addr);
         |                             ~~~~~~~~~~ ^
   include/asm-generic/io.h:595:59: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     595 |         __raw_writew((u16 __force)cpu_to_le16(value), PCI_IOBASE + addr);
         |                                                       ~~~~~~~~~~ ^
   include/asm-generic/io.h:605:59: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     605 |         __raw_writel((u32 __force)cpu_to_le32(value), PCI_IOBASE + addr);
         |                                                       ~~~~~~~~~~ ^
   include/asm-generic/io.h:693:20: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     693 |         readsb(PCI_IOBASE + addr, buffer, count);
         |                ~~~~~~~~~~ ^
   include/asm-generic/io.h:701:20: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     701 |         readsw(PCI_IOBASE + addr, buffer, count);
         |                ~~~~~~~~~~ ^
   include/asm-generic/io.h:709:20: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     709 |         readsl(PCI_IOBASE + addr, buffer, count);
         |                ~~~~~~~~~~ ^
   include/asm-generic/io.h:718:21: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     718 |         writesb(PCI_IOBASE + addr, buffer, count);
         |                 ~~~~~~~~~~ ^
   include/asm-generic/io.h:727:21: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     727 |         writesw(PCI_IOBASE + addr, buffer, count);
         |                 ~~~~~~~~~~ ^
   include/asm-generic/io.h:736:21: warning: performing pointer arithmetic on a null pointer has undefined behavior [-Wnull-pointer-arithmetic]
     736 |         writesl(PCI_IOBASE + addr, buffer, count);
         |                 ~~~~~~~~~~ ^
   In file included from drivers/net/ethernet/sfc/efx.c:36:
>> drivers/net/ethernet/sfc/efx_cxl.h:11:9: warning: 'EFX_CXL_H' is used as a header guard here, followed by #define of a different macro [-Wheader-guard]
      11 | #ifndef EFX_CXL_H
         |         ^~~~~~~~~
   drivers/net/ethernet/sfc/efx_cxl.h:12:9: note: 'EFX_CLX_H' is defined here; did you mean 'EFX_CXL_H'?
      12 | #define EFX_CLX_H
         |         ^~~~~~~~~
         |         EFX_CXL_H
   18 warnings generated.


vim +/EFX_CXL_H +11 drivers/net/ethernet/sfc/efx_cxl.h

  > 11	#ifndef EFX_CXL_H
    12	#define EFX_CLX_H
    13	

-- 
0-DAY CI Kernel Test Service
https://github.com/intel/lkp-tests/wiki

From mboxrd@z Thu Jan  1 00:00:00 1970
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.18])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 891DC1862C;
	Tue, 16 Jul 2024 03:32:28 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=198.175.65.18
ARC-Seal: i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1721100751; cv=none; b=lOrtOMFNZ05E7YUeLvXoPxjkNLAkwDr/YJOIcLMwDYR+N/jMcpcy2OmzaqSgjeFWN5ISLoTjEZtkNnCYnjNVpqgaF+sYZ9fpc/9MRC18fZ6VJSbGtzMSsyoYsHVNhkTFibRDVmZm1M452nIXmKKsBg74IWQR+zDlFf00S1GwZaE=
ARC-Message-Signature: i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1721100751; c=relaxed/simple;
	bh=GY/1zz50NBZ5rMHvmCnJe4c5+oCSLR2igpJJdQM9su0=;
	h=Date:From:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=CAR2dmXn7aJiQS7jXMA0OHg+BvfEYZh6/21V4IgqjFMc6jh2PJTTEe5fBCYGQ0f0onzDXAhszTFDrBX77GMJdNVjwmIgri52LQrwJDZar2mZmCy+kEiTVdD2g7TbqheAcy8GZEAi9B7LZuocykA0mEuOQN9B0mIiAHhcBElregU=
ARC-Authentication-Results: i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com; spf=pass smtp.mailfrom=intel.com; dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b=Mmht6lpg; arc=none smtp.client-ip=198.175.65.18
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=intel.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=intel.com
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=intel.com header.i=@intel.com header.b="Mmht6lpg"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1721100748; x=1752636748;
  h=date:from:to:cc:subject:message-id:references:
   mime-version:in-reply-to;
  bh=GY/1zz50NBZ5rMHvmCnJe4c5+oCSLR2igpJJdQM9su0=;
  b=Mmht6lpg7SHxkVrodfYoG8hRF0g5QuhPTmEM8YrEqTHyXjnOqOF6R0mf
   RDJnUZfBnaj9fay/0gulaZYoaZgiwWrhOMCDVVKnXo24tCMycpItmDRRG
   9keF6DDKW9g9++aW9jga8AjM13oBWWMAR8hk3CvlepchJ5iY77nj3m4xh
   ey2dK5HKRldOIKikirltrd7bNvfrIeW773KnXBAC/gHC3fgLTfsaKmnZu
   PdtwQcutk9m8NtQVe66imOgj1dxqM8YGMMwNbgzH+JW4A6vUJDkkUOW7C
   7dSt817aIeKD9Kyw1DeFEeX17lqnYuefBc6dyid3UfOoCH5xWXTbEuAhE
   Q==;
X-CSE-ConnectionGUID: tHKC3dt4RYmo8sqhbH4bKA==
X-CSE-MsgGUID: bsfp3DzdSI+M2wnzPlM0Pw==
X-IronPort-AV: E=McAfee;i="6700,10204,11134"; a="18646217"
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="18646217"
Received: from orviesa007.jf.intel.com ([10.64.159.147])
  by orvoesa110.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 15 Jul 2024 20:32:28 -0700
X-CSE-ConnectionGUID: DyVHE1PWQhCwnPJdTEGnnA==
X-CSE-MsgGUID: sodaZD6uRwSgia+JRpf+oA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.09,211,1716274800"; 
   d="scan'208";a="50482525"
Received: from lkp-server01.sh.intel.com (HELO 68891e0c336b) ([10.239.97.150])
  by orviesa007.jf.intel.com with ESMTP; 15 Jul 2024 20:32:24 -0700
Received: from kbuild by 68891e0c336b with local (Exim 4.96)
	(envelope-from <lkp@intel.com>)
	id 1sTYvO-000ery-05;
	Tue, 16 Jul 2024 03:32:22 +0000
Date: Tue, 16 Jul 2024 11:32:09 +0800
From: kernel test robot <lkp@intel.com>
To: alejandro.lucero-palau@amd.com, linux-cxl@vger.kernel.org,
	netdev@vger.kernel.org, dan.j.williams@intel.com,
	martin.habets@xilinx.com, edward.cree@amd.com, davem@davemloft.net,
	kuba@kernel.org, pabeni@redhat.com, edumazet@google.com,
	richard.hughes@amd.com
Cc: llvm@lists.linux.dev, oe-kbuild-all@lists.linux.dev,
	Alejandro Lucero <alucerop@amd.com>
Subject: Re: [PATCH v2 10/15] cxl: define a driver interface for DPA
 allocation
Message-ID: <202407161159.KA2METLk-lkp@intel.com>
References: <20240715172835.24757-11-alejandro.lucero-palau@amd.com>
Precedence: bulk
X-Mailing-List: oe-kbuild-all@lists.linux.dev
List-Id: <oe-kbuild-all.lists.linux.dev>
List-Subscribe: <mailto:oe-kbuild-all+subscribe@lists.linux.dev>
List-Unsubscribe: <mailto:oe-kbuild-all+unsubscribe@lists.linux.dev>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240715172835.24757-11-alejandro.lucero-palau@amd.com>

Hi,

kernel test robot noticed the following build warnings:

[auto build test WARNING on linus/master]
[also build test WARNING on v6.10 next-20240715]
[cannot apply to cxl/next cxl/pending horms-ipvs/master]
[If your patch is applied to the wrong git tree, kindly drop us a note.
And when submitting patch, we suggest to use '--base' as documented in
https://git-scm.com/docs/git-format-patch#_base_tree_information]

url:    https://github.com/intel-lab-lkp/linux/commits/alejandro-lucero-palau-amd-com/cxl-add-type2-device-basic-support/20240716-015920
base:   linus/master
patch link:    https://lore.kernel.org/r/20240715172835.24757-11-alejandro.lucero-palau%40amd.com
patch subject: [PATCH v2 10/15] cxl: define a driver interface for DPA allocation
config: s390-allmodconfig (https://download.01.org/0day-ci/archive/20240716/202407161159.KA2METLk-lkp@intel.com/config)
compiler: clang version 19.0.0git (https://github.com/llvm/llvm-project a0c6b8aef853eedaa0980f07c0a502a5a8a9740e)
reproduce (this is a W=1 build): (https://download.01.org/0day-ci/archive/20240716/202407161159.KA2METLk-lkp@intel.com/reproduce)

If you fix the issue in a separate patch/commit (i.e. not just a new version of
the same patch/commit), kindly add following tags
| Reported-by: kernel test robot <lkp@intel.com>
| Closes: https://lore.kernel.org/oe-kbuild-all/202407161159.KA2METLk-lkp@intel.com/

All warnings (new ones prefixed by >>):

>> drivers/cxl/core/hdm.c:612: warning: Function parameter or struct member 'is_ram' not described in 'cxl_request_dpa'
>> drivers/cxl/core/hdm.c:612: warning: Excess function parameter 'mode' description in 'cxl_request_dpa'


vim +612 drivers/cxl/core/hdm.c

   589	
   590	/**
   591	 * cxl_request_dpa - search and reserve DPA given input constraints
   592	 * @endpoint: an endpoint port with available decoders
   593	 * @mode: DPA operation mode (ram vs pmem)
   594	 * @min: the minimum amount of capacity the call needs
   595	 * @max: extra capacity to allocate after min is satisfied
   596	 *
   597	 * Given that a region needs to allocate from limited HPA capacity it
   598	 * may be the case that a device has more mappable DPA capacity than
   599	 * available HPA. So, the expectation is that @min is a driver known
   600	 * value for how much capacity is needed, and @max is based the limit of
   601	 * how much HPA space is available for a new region.
   602	 *
   603	 * Returns a pinned cxl_decoder with at least @min bytes of capacity
   604	 * reserved, or an error pointer. The caller is also expected to own the
   605	 * lifetime of the memdev registration associated with the endpoint to
   606	 * pin the decoder registered as well.
   607	 */
   608	struct cxl_endpoint_decoder *cxl_request_dpa(struct cxl_port *endpoint,
   609						     bool is_ram,
   610						     resource_size_t min,
   611						     resource_size_t max)
 > 612	{
   613		struct cxl_endpoint_decoder *cxled;
   614		enum cxl_decoder_mode mode;
   615		struct device *cxled_dev;
   616		resource_size_t alloc;
   617		int rc;
   618	
   619		if (!IS_ALIGNED(min | max, SZ_256M))
   620			return ERR_PTR(-EINVAL);
   621	
   622		down_read(&cxl_dpa_rwsem);
   623	
   624		cxled_dev = device_find_child(&endpoint->dev, NULL, find_free_decoder);
   625		if (!cxled_dev)
   626			cxled = ERR_PTR(-ENXIO);
   627		else
   628			cxled = to_cxl_endpoint_decoder(cxled_dev);
   629	
   630		up_read(&cxl_dpa_rwsem);
   631	
   632		if (IS_ERR(cxled))
   633			return cxled;
   634	
   635		if (is_ram)
   636			mode = CXL_DECODER_RAM;
   637		else
   638			mode = CXL_DECODER_PMEM;
   639	
   640		rc = cxl_dpa_set_mode(cxled, mode);
   641		if (rc)
   642			goto err;
   643	
   644		down_read(&cxl_dpa_rwsem);
   645		alloc = cxl_dpa_freespace(cxled, NULL, NULL);
   646		up_read(&cxl_dpa_rwsem);
   647	
   648		if (max)
   649			alloc = min(max, alloc);
   650		if (alloc < min) {
   651			rc = -ENOMEM;
   652			goto err;
   653		}
   654	
   655		rc = cxl_dpa_alloc(cxled, alloc);
   656		if (rc)
   657			goto err;
   658	
   659		return cxled;
   660	err:
   661		put_device(cxled_dev);
   662		return ERR_PTR(rc);
   663	}
   664	EXPORT_SYMBOL_NS_GPL(cxl_request_dpa, CXL);
   665	

-- 
0-DAY CI Kernel Test Service
https://github.com/intel/lkp-tests/wiki

