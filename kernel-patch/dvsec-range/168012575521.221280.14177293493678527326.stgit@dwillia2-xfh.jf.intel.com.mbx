From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D476FC6FD18
	for <linux-cxl@archiver.kernel.org>; Wed, 29 Mar 2023 21:37:05 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229806AbjC2VhF (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Wed, 29 Mar 2023 17:37:05 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:33050 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229767AbjC2Vgq (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Wed, 29 Mar 2023 17:36:46 -0400
Received: from mga17.intel.com (mga17.intel.com [192.55.52.151])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 2B77730C7
        for <linux-cxl@vger.kernel.org>; Wed, 29 Mar 2023 14:36:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1680125805; x=1711661805;
  h=subject:from:to:cc:date:message-id:mime-version:
   content-transfer-encoding;
  bh=iZ//7D047zw5T0ln0QtvlZLMdWGyeOLrS+N9cbPIoVc=;
  b=myo5HvxNoAfp4ax4b3UGdCao1ksmkoyyH/pY/rt+U6UWsMzVDr8BjjqZ
   T6T55cgTl61OPMwm0QC+Y3jMdS2VMNdj3oUBgz9+7Faj/j6ExAJiXAV9g
   sEMNaWN2qudwmLs30UyPAPJpCfRahhCiewCuEmOP+m+5AHQXh52uv0jvw
   h9moJvmYErrI09c4QKWoz1+NHdnG3DVbv6KB0yPI8W2fGpovrPhPawu2u
   N52HHp6uG/S0MI+c5KFyARDKtXs0WYN+8m5EPz9Ezg6AsJArQ3coMJYjL
   TjTspxIMFvJ9/b3PMdnHudCQC2j+dfTaWKFVzZXf5nSP0WWiXH3eUb9Zw
   w==;
X-IronPort-AV: E=McAfee;i="6600,9927,10664"; a="321391436"
X-IronPort-AV: E=Sophos;i="5.98,301,1673942400"; 
   d="scan'208";a="321391436"
Received: from fmsmga004.fm.intel.com ([10.253.24.48])
  by fmsmga107.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 29 Mar 2023 14:35:58 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=McAfee;i="6600,9927,10664"; a="753754492"
X-IronPort-AV: E=Sophos;i="5.98,301,1673942400"; 
   d="scan'208";a="753754492"
Received: from zmutlu-mobl.amr.corp.intel.com (HELO dwillia2-xfh.jf.intel.com) ([10.212.176.100])
  by fmsmga004-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 29 Mar 2023 14:35:55 -0700
Subject: [PATCH] cxl/hdm: Extend DVSEC range register emulation for region
 enumeration
From: Dan Williams <dan.j.williams@intel.com>
To: linux-cxl@vger.kernel.org
Cc: Dave Jiang <dave.jiang@intel.com>
Date: Wed, 29 Mar 2023 14:35:55 -0700
Message-ID: <168012575521.221280.14177293493678527326.stgit@dwillia2-xfh.jf.intel.com>
User-Agent: StGit/0.18-3-g996c
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

One motivation for mapping range registers to decoder objects is
to use those settings for region autodiscovery.

The need to map a region for devices programmed to use range registers
is especially urgent now that the kernel no longer routes "Soft
Reserved" ranges in the memory map to device-dax by default. The CXL
memory range loses all access mechanisms.

Complete the implementation by filling out ways and granularity, marking
the DPA reservation, and setting the endpoint-decoder state to signal
autodiscovery.

Fixes: 09d09e04d2fc ("cxl/dax: Create dax devices for CXL RAM regions")
Tested-by: Dave Jiang <dave.jiang@intel.com>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
---
 drivers/cxl/core/hdm.c |   30 ++++++++++++++++++++++++------
 1 file changed, 24 insertions(+), 6 deletions(-)

diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
index 9884b6d4d930..5339c0719177 100644
--- a/drivers/cxl/core/hdm.c
+++ b/drivers/cxl/core/hdm.c
@@ -738,20 +738,26 @@ static int cxl_decoder_reset(struct cxl_decoder *cxld)
 	return 0;
 }
 
-static int cxl_setup_hdm_decoder_from_dvsec(struct cxl_port *port,
-					    struct cxl_decoder *cxld, int which,
-					    struct cxl_endpoint_dvsec_info *info)
+static int cxl_setup_hdm_decoder_from_dvsec(
+	struct cxl_port *port, struct cxl_decoder *cxld, u64 *dpa_base,
+	int which, struct cxl_endpoint_dvsec_info *info)
 {
+	struct cxl_endpoint_decoder *cxled;
+	struct range *range;
+	int rc;
+
 	if (!is_cxl_endpoint(port))
 		return -EOPNOTSUPP;
 
-	if (!range_len(&info->dvsec_range[which]))
+	cxled = to_cxl_endpoint_decoder(&cxld->dev);
+	range = &info->dvsec_range[which];
+	if (!range_len(range))
 		return -ENOENT;
 
 	cxld->target_type = CXL_DECODER_EXPANDER;
 	cxld->commit = NULL;
 	cxld->reset = NULL;
-	cxld->hpa_range = info->dvsec_range[which];
+	cxld->hpa_range = *range;
 
 	/*
 	 * Set the emulated decoder as locked pending additional support to
@@ -760,6 +766,17 @@ static int cxl_setup_hdm_decoder_from_dvsec(struct cxl_port *port,
 	cxld->flags |= CXL_DECODER_F_ENABLE | CXL_DECODER_F_LOCK;
 	port->commit_end = cxld->id;
 
+	rc = devm_cxl_dpa_reserve(cxled, *dpa_base, range_len(range), 0);
+	if (rc) {
+		dev_err(&port->dev,
+			"decoder%d.%d: Failed to reserve DPA range %#llx - %#llx\n (%d)",
+			port->id, cxld->id, *dpa_base,
+			*dpa_base + range_len(range) - 1, rc);
+		return rc;
+	}
+	*dpa_base += range_len(range);
+	cxled->state = CXL_DECODER_STATE_AUTO;
+
 	return 0;
 }
 
@@ -779,7 +796,8 @@ static int init_hdm_decoder(struct cxl_port *port, struct cxl_decoder *cxld,
 	} target_list;
 
 	if (should_emulate_decoders(info))
-		return cxl_setup_hdm_decoder_from_dvsec(port, cxld, which, info);
+		return cxl_setup_hdm_decoder_from_dvsec(port, cxld, dpa_base,
+							which, info);
 
 	ctrl = readl(hdm + CXL_HDM_DECODER0_CTRL_OFFSET(which));
 	base = ioread64_hi_lo(hdm + CXL_HDM_DECODER0_BASE_LOW_OFFSET(which));


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id A7F82C74A5B
	for <linux-cxl@archiver.kernel.org>; Thu, 30 Mar 2023 00:06:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229886AbjC3AG4 (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Wed, 29 Mar 2023 20:06:56 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:34024 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229560AbjC3AG4 (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Wed, 29 Mar 2023 20:06:56 -0400
Received: from mga04.intel.com (mga04.intel.com [192.55.52.120])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 0E0382D48
        for <linux-cxl@vger.kernel.org>; Wed, 29 Mar 2023 17:06:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1680134815; x=1711670815;
  h=message-id:date:mime-version:subject:to:references:from:
   in-reply-to:content-transfer-encoding;
  bh=dGadilSoT9Vj9/AI9sz+osqg9wohVe/t5ElMIIGFvR0=;
  b=BdLLussT8jAhSmw7dM9V3RCjMFaDHNhRld6BWPENreeixO83Ti5G4JEM
   tgDDWyqNA7TKG7oMestpU9UiTB9jHGBkLw/vPW4G+5ARZMYtuatkWgVZ9
   UVzHp0pU6WpTIJ+lMmI+0WghHN0tz7X9iq8GsYbxQDWTRZ112uZw134MC
   kBc6g5zY0/aj+GQVYzP4DoAU4MuXtnSS1+FefUtfcKkTK57eEP5Bn19Bs
   Cjk8Lb8FE3qIkrPap8KJ7qpEn9K+ZAt9BMNZhUbOFkubU6YbISXOOH7In
   qe9goCkjsRAiij4YhECoN+tpDeCwkkW7maUE/G2LOlXoRF8gtGRW7r5SK
   Q==;
X-IronPort-AV: E=McAfee;i="6600,9927,10664"; a="339752773"
X-IronPort-AV: E=Sophos;i="5.98,301,1673942400"; 
   d="scan'208";a="339752773"
Received: from orsmga001.jf.intel.com ([10.7.209.18])
  by fmsmga104.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 29 Mar 2023 17:06:42 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=McAfee;i="6600,9927,10664"; a="717098550"
X-IronPort-AV: E=Sophos;i="5.98,301,1673942400"; 
   d="scan'208";a="717098550"
Received: from sandrew-mobl2.amr.corp.intel.com (HELO [10.212.109.34]) ([10.212.109.34])
  by orsmga001-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 29 Mar 2023 17:06:41 -0700
Message-ID: <bfdc6772-e62c-e950-415d-a5b3d502295a@intel.com>
Date: Wed, 29 Mar 2023 17:06:41 -0700
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Firefox/102.0 Thunderbird/102.9.0
Subject: Re: [PATCH] cxl/hdm: Extend DVSEC range register emulation for region
 enumeration
Content-Language: en-US
To: Dan Williams <dan.j.williams@intel.com>, linux-cxl@vger.kernel.org
References: <168012575521.221280.14177293493678527326.stgit@dwillia2-xfh.jf.intel.com>
From: Dave Jiang <dave.jiang@intel.com>
In-Reply-To: <168012575521.221280.14177293493678527326.stgit@dwillia2-xfh.jf.intel.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org



On 3/29/23 2:35 PM, Dan Williams wrote:
> One motivation for mapping range registers to decoder objects is
> to use those settings for region autodiscovery.
> 
> The need to map a region for devices programmed to use range registers
> is especially urgent now that the kernel no longer routes "Soft
> Reserved" ranges in the memory map to device-dax by default. The CXL
> memory range loses all access mechanisms.
> 
> Complete the implementation by filling out ways and granularity, marking

Where is the ways and granularity set done in code?

DJ

> the DPA reservation, and setting the endpoint-decoder state to signal
> autodiscovery.
> 
> Fixes: 09d09e04d2fc ("cxl/dax: Create dax devices for CXL RAM regions")
> Tested-by: Dave Jiang <dave.jiang@intel.com>
> Signed-off-by: Dan Williams <dan.j.williams@intel.com>
> ---
>   drivers/cxl/core/hdm.c |   30 ++++++++++++++++++++++++------
>   1 file changed, 24 insertions(+), 6 deletions(-)
> 
> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
> index 9884b6d4d930..5339c0719177 100644
> --- a/drivers/cxl/core/hdm.c
> +++ b/drivers/cxl/core/hdm.c
> @@ -738,20 +738,26 @@ static int cxl_decoder_reset(struct cxl_decoder *cxld)
>   	return 0;
>   }
>   
> -static int cxl_setup_hdm_decoder_from_dvsec(struct cxl_port *port,
> -					    struct cxl_decoder *cxld, int which,
> -					    struct cxl_endpoint_dvsec_info *info)
> +static int cxl_setup_hdm_decoder_from_dvsec(
> +	struct cxl_port *port, struct cxl_decoder *cxld, u64 *dpa_base,
> +	int which, struct cxl_endpoint_dvsec_info *info)
>   {
> +	struct cxl_endpoint_decoder *cxled;
> +	struct range *range;
> +	int rc;
> +
>   	if (!is_cxl_endpoint(port))
>   		return -EOPNOTSUPP;
>   
> -	if (!range_len(&info->dvsec_range[which]))
> +	cxled = to_cxl_endpoint_decoder(&cxld->dev);
> +	range = &info->dvsec_range[which];
> +	if (!range_len(range))
>   		return -ENOENT;
>   
>   	cxld->target_type = CXL_DECODER_EXPANDER;
>   	cxld->commit = NULL;
>   	cxld->reset = NULL;
> -	cxld->hpa_range = info->dvsec_range[which];
> +	cxld->hpa_range = *range;
>   
>   	/*
>   	 * Set the emulated decoder as locked pending additional support to
> @@ -760,6 +766,17 @@ static int cxl_setup_hdm_decoder_from_dvsec(struct cxl_port *port,
>   	cxld->flags |= CXL_DECODER_F_ENABLE | CXL_DECODER_F_LOCK;
>   	port->commit_end = cxld->id;
>   
> +	rc = devm_cxl_dpa_reserve(cxled, *dpa_base, range_len(range), 0);
> +	if (rc) {
> +		dev_err(&port->dev,
> +			"decoder%d.%d: Failed to reserve DPA range %#llx - %#llx\n (%d)",
> +			port->id, cxld->id, *dpa_base,
> +			*dpa_base + range_len(range) - 1, rc);
> +		return rc;
> +	}
> +	*dpa_base += range_len(range);
> +	cxled->state = CXL_DECODER_STATE_AUTO;
> +
>   	return 0;
>   }
>   
> @@ -779,7 +796,8 @@ static int init_hdm_decoder(struct cxl_port *port, struct cxl_decoder *cxld,
>   	} target_list;
>   
>   	if (should_emulate_decoders(info))
> -		return cxl_setup_hdm_decoder_from_dvsec(port, cxld, which, info);
> +		return cxl_setup_hdm_decoder_from_dvsec(port, cxld, dpa_base,
> +							which, info);
>   
>   	ctrl = readl(hdm + CXL_HDM_DECODER0_CTRL_OFFSET(which));
>   	base = ioread64_hi_lo(hdm + CXL_HDM_DECODER0_BASE_LOW_OFFSET(which));
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 15356C74A5B
	for <linux-cxl@archiver.kernel.org>; Thu, 30 Mar 2023 03:25:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229462AbjC3DZw (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Wed, 29 Mar 2023 23:25:52 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:51860 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229634AbjC3DZv (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Wed, 29 Mar 2023 23:25:51 -0400
Received: from NAM11-DM6-obe.outbound.protection.outlook.com (mail-dm6nam11on2056.outbound.protection.outlook.com [40.107.223.56])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 7632C525E
        for <linux-cxl@vger.kernel.org>; Wed, 29 Mar 2023 20:25:48 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=cRXeY27OMc75z8D4IQEC4L0WA3zcSgzjAYlL616JQA3GfxVVR8VhExv6YOYRpbQE4UEfzhMQToAYLbMiZVkWYWfeLhWQW+wjzujdgH0Uq94kptilzvJ/DwfpjVbUK0ODjk7zuxIE+ErnE0TV391IM/8yxmxCA8hVrh5tJF2yPPaQ3iTI1szAXOMopsIpP+FjWBBYt6B0/p2h/nSNa7y095r2prgsJQsOlsJIbh4AKbuVLjuWnGj4m3JCQTlCEK0Nh9n2hJ86BwEybPTuhAEosIdNsZs70iqG9nodRyoz/Vss87NhZXA5G/R3NZRxffPDBkeuW7P+ydGgtYcRo6OFUg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=lYw7XXFdlkgI7OPzzOXTCON8AUMGwqUl3sVjg4XqxpQ=;
 b=aaST1m2OHbpqUx/SX8riWKX4lTnZpDWqpebgEuPbAQfGI2pMbsZZHs1lMF1nHpBcHYI/mFi0jRSWUK564uvUnVvk/PWafHCLmQuKZcv24XF66LvpZX/yhoLGOZ3GabZ5osJQlKjYPACeoUH7m1YRniaVQ+zuaWZ063KPKRfwUch2MiPtPUACANtCXR5JnZycd1aXONqN0rQxOO2dkpA0vOgbA0WkQglaU/kU0OtQR56vclTf2eoouIRI8d9fsoGpHmlYgf094esNXsmJT1BHw9ETQoDrOoB6p0fJpgTK/lFoEGS8ZXbxh0dlX4elbcqACQ+DSfcMwZdMd6gzEvRn3g==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=memverge.com; dmarc=pass action=none header.from=memverge.com;
 dkim=pass header.d=memverge.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=memverge.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=lYw7XXFdlkgI7OPzzOXTCON8AUMGwqUl3sVjg4XqxpQ=;
 b=lItGPXIq8aZMnsLiryuLYsBVF9l6ujD/M0iEFOwck5YvfdvosZM/pi9QEOAbsQcMq/pe0bWtG6JbgNSK+xQBR6Pjkiesq3RhWA8pLFZAsyW70TwBbvjhQtYaYKUOSZBm1iaVbHn9oYJjSexnkUICzAAYRycMD4PYFsZFtQrHQRo=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=memverge.com;
Received: from SJ0PR17MB5512.namprd17.prod.outlook.com (2603:10b6:a03:394::19)
 by DS7PR17MB6659.namprd17.prod.outlook.com (2603:10b6:8:e5::17) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.6222.30; Thu, 30 Mar
 2023 03:25:45 +0000
Received: from SJ0PR17MB5512.namprd17.prod.outlook.com
 ([fe80::7b97:62c3:4602:b47a]) by SJ0PR17MB5512.namprd17.prod.outlook.com
 ([fe80::7b97:62c3:4602:b47a%5]) with mapi id 15.20.6222.033; Thu, 30 Mar 2023
 03:25:44 +0000
Date: Wed, 29 Mar 2023 12:04:21 -0400
From: Gregory Price <gregory.price@memverge.com>
To: Dan Williams <dan.j.williams@intel.com>
Cc: linux-cxl@vger.kernel.org, Dave Jiang <dave.jiang@intel.com>
Subject: Re: [PATCH] cxl/hdm: Extend DVSEC range register emulation for
 region enumeration
Message-ID: <ZCRhhUDcmypVKu0X@memverge.com>
References: <168012575521.221280.14177293493678527326.stgit@dwillia2-xfh.jf.intel.com>
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <168012575521.221280.14177293493678527326.stgit@dwillia2-xfh.jf.intel.com>
X-ClientProxiedBy: BYAPR08CA0070.namprd08.prod.outlook.com
 (2603:10b6:a03:117::47) To SJ0PR17MB5512.namprd17.prod.outlook.com
 (2603:10b6:a03:394::19)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SJ0PR17MB5512:EE_|DS7PR17MB6659:EE_
X-MS-Office365-Filtering-Correlation-Id: 00b90cfe-e2dd-4db9-b0a2-08db30ce7248
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: x16fmKDG1jQGmbhNdhnGIFa1pYZYHig+mZoUpHz2DkDUc3a57qaP5WWuTKByMxZLzMCaqh6bTIppwjD77PFr/DD0c3tDv5xQkuIMbmDQx+SeqMQNVO4b618W94oFupbXGvzxyTzFMiZCl0NvsAh0DuAJqoKbhP+A0QmbiiALDCwxFi4O5rYqJ2q7pHkua30VFxk0f0C1auLSnJg27Asdq2M1BpfUTQ7blgKEVi+IMOAUbg0oSqAyFL+aKx5ifHR6jMje0e7ScWN9F8G7SUgk3gQ34906gIXDUVrd8lXsv/K0lHPRdhLo9nBxu/VjBNuMNF8AH9MRuVCCAIZN9UzzB/dEb7rk2xFA1GF2zVBAWYWnr7EeobJXCRIuojYOutV7utuB8NeLuMvr8JCtcZnSFeDtsM1V197BWXcuu/PLh5P6oKLbufMV1QAnbXTEWGHuSFp6xcV7IzuQNJIKNjaW855YYm5xciGBIFdlCUVrRscEx3F2K3ttKtNzm4Q2WbD4XDy/MsvbjZpLMcSMZOSXC/hGaGFOtkhX41daycmq8CJpZ0OfKsILmLHjA3OtwF7t
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SJ0PR17MB5512.namprd17.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230028)(396003)(376002)(366004)(136003)(39840400004)(346002)(451199021)(316002)(478600001)(36756003)(86362001)(5660300002)(8936002)(66556008)(4326008)(44832011)(38100700002)(66476007)(8676002)(2906002)(6916009)(66946007)(6506007)(41300700001)(186003)(6666004)(26005)(6512007)(83380400001)(2616005)(6486002);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?us-ascii?Q?+/bPohsm6lSUrnH4E1DEi1Dkz2Luix/xobek6+nuwzn6jXHgWYfYZrrgfkJL?=
 =?us-ascii?Q?yl1RDmsXAvf4xWH659I3//2QiWrJDgdOnbSgAcSWmpx4DYJrB4NoI1vlj/Aw?=
 =?us-ascii?Q?UOwmfYaV3YQl2OsI4NZFfIWu6LyZAfzgKCGVLGRk6JNdwZAN1UgNuvCtTZPF?=
 =?us-ascii?Q?U3RuM/SU9eq0nVG0vIOWV9ej7kvMxxJa87oHKxzzFtr2G47ZtNrAmWJd1hj1?=
 =?us-ascii?Q?uultfUUeaGW2NKSm0++7cNQqakR2EwqQsdsJ8znFx2sjILHzo9ZdrJJDuY3g?=
 =?us-ascii?Q?ggFN5bouOlud9hpd13QZZsDLBhu+s6Zm97m1eribRcAwIPaOWb9/NywJk8ol?=
 =?us-ascii?Q?Wq1pelEal9+y6g9k6TsXLfg4TlVOtq/sVEoEotUP1zx44/DbT4Dl9A4xyt3Y?=
 =?us-ascii?Q?fOc6HHyDLmaF3Nf+n4Fj1GxAVCoBo6arNRkRjjOmcTf5FXVYZAYcsImnGejB?=
 =?us-ascii?Q?x5RpWKcqEjBwSitqNfRcr5FcweL5dQ3x2cNDXp7IfzDltck/FWXJhuFakmXQ?=
 =?us-ascii?Q?2EY0Lz5hDQyps4tWFmz7yFKRgwRETpH7ryhqDRPSJAtkn4Q4+sGcL9CGPnWW?=
 =?us-ascii?Q?/k3xImi4GNICEtvXObDNeYjtQQOpTnclGuos6/58r0nTgyvsslsqGvQ4/w3a?=
 =?us-ascii?Q?dssIr6M/N/gmsCf8oW4ovxJEx2NmfeZnGr5XDfmm8tSaNUoPNzNg65F8m7y+?=
 =?us-ascii?Q?MVDMTYBrF2qXqFGuzMmZSZJ6NCCxTRjH/9/yfzuheBfSSbrZ32k1qkcDS24C?=
 =?us-ascii?Q?utTLzQyBOiCKSN4EgUJ/u+ILni3XOytn4JsbfnQYst4+T/ctyV5svZz4w3E4?=
 =?us-ascii?Q?OqIANxAhJ+ejQylW8MOInO2EcaAPLjek/DAyxjAqr72fTMBu1fbaXDeTcUoD?=
 =?us-ascii?Q?loWIyCDgOQ3Q3Ajk4giDBqQmRzmGAzbt4zkRJSM7PXquUmW69T8Xjr8qrp8U?=
 =?us-ascii?Q?TvrhmPn7R4kQX+KgKXFdHIfTEYQ3S6/ft56fYn4bPH8q36iVVShiUkKpsFoY?=
 =?us-ascii?Q?RjoDVDz3wqTvvcWRuwE6W6grtdcATuPsTHjDSoyIN2anDSdBO4Ifg23Hbmcx?=
 =?us-ascii?Q?gc7Z0ATPGCwS8SXwZM8b0sBuuo9k4R0IE3uT1GPRvmjKprksjJt4MpeWJ4s6?=
 =?us-ascii?Q?IaIY0HeH1yKspi5pBMHQpvekulu9Pl4J61EoqyLXC+yAIb/CQOJkH1HXVvwT?=
 =?us-ascii?Q?cG3gWb0lvm3CuK6hrRHc1DeLBTlMdHxEpuyiFvS7v2mC5ufL+HS6aQR3y89E?=
 =?us-ascii?Q?RzSKlFU3/q6yedGyBz/ZvL1kMfrja/L5zz0dp4RU+b+PnUAg6E9GNCgZyAXg?=
 =?us-ascii?Q?b5b2d4D1Vw/rwyP0QJnTULH700vLeeSHlH4s/AleY57t41jQ++49W5oqNQSj?=
 =?us-ascii?Q?aLst1QpA+YWjhc4Xo89GbPFrFp32IDX9FXgJmol+YHO3nIRQgOb6RnNM2LZf?=
 =?us-ascii?Q?SSLl0ZEU4I9s0FooaG4cNo+pnMUwIZvTX8LhyWZiQhVPEcgvJU4ramknOB5D?=
 =?us-ascii?Q?qYm2ecHjGt9nFxA82OPjM8iisJXcwjYNRsdJXk2YYrR7/A1aXAitU/YbJFnI?=
 =?us-ascii?Q?9hPEZa14mSfuoacqPStXUUTxzp427QhLSUO3Pf9VbElUYwBqi0oKYM9DQ+qk?=
 =?us-ascii?Q?oA=3D=3D?=
X-OriginatorOrg: memverge.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 00b90cfe-e2dd-4db9-b0a2-08db30ce7248
X-MS-Exchange-CrossTenant-AuthSource: SJ0PR17MB5512.namprd17.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 30 Mar 2023 03:25:44.4811
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 5c90cb59-37e7-4c81-9c07-00473d5fb682
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: FNy82wf81uQjr5LCJ1R+xpAHYRNKklI0qUj8bHeJ6vUDju97Fn/UbT/HihbsnEl2AAVImefeK2JtxB5hY+HfssI1/Nr+Nj8/tiH2UFbjZGQ=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS7PR17MB6659
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

On Wed, Mar 29, 2023 at 02:35:55PM -0700, Dan Williams wrote:
> One motivation for mapping range registers to decoder objects is
> to use those settings for region autodiscovery.
> 
> The need to map a region for devices programmed to use range registers
> is especially urgent now that the kernel no longer routes "Soft
> Reserved" ranges in the memory map to device-dax by default. The CXL
> memory range loses all access mechanisms.
> 
> Complete the implementation by filling out ways and granularity, marking
> the DPA reservation, and setting the endpoint-decoder state to signal
> autodiscovery.
> 
> Fixes: 09d09e04d2fc ("cxl/dax: Create dax devices for CXL RAM regions")
> Tested-by: Dave Jiang <dave.jiang@intel.com>
> Signed-off-by: Dan Williams <dan.j.williams@intel.com>
> ---
>  drivers/cxl/core/hdm.c |   30 ++++++++++++++++++++++++------
>  1 file changed, 24 insertions(+), 6 deletions(-)
> 
> diff --git a/drivers/cxl/core/hdm.c b/drivers/cxl/core/hdm.c
> index 9884b6d4d930..5339c0719177 100644
> --- a/drivers/cxl/core/hdm.c
> +++ b/drivers/cxl/core/hdm.c
> @@ -738,20 +738,26 @@ static int cxl_decoder_reset(struct cxl_decoder *cxld)
>  	return 0;
>  }
>  
> -static int cxl_setup_hdm_decoder_from_dvsec(struct cxl_port *port,
> -					    struct cxl_decoder *cxld, int which,
> -					    struct cxl_endpoint_dvsec_info *info)
> +static int cxl_setup_hdm_decoder_from_dvsec(
> +	struct cxl_port *port, struct cxl_decoder *cxld, u64 *dpa_base,
> +	int which, struct cxl_endpoint_dvsec_info *info)
>  {
> +	struct cxl_endpoint_decoder *cxled;
> +	struct range *range;
> +	int rc;
> +
>  	if (!is_cxl_endpoint(port))
>  		return -EOPNOTSUPP;
>  
> -	if (!range_len(&info->dvsec_range[which]))
> +	cxled = to_cxl_endpoint_decoder(&cxld->dev);
> +	range = &info->dvsec_range[which];
> +	if (!range_len(range))
>  		return -ENOENT;
>  
>  	cxld->target_type = CXL_DECODER_EXPANDER;
>  	cxld->commit = NULL;
>  	cxld->reset = NULL;
> -	cxld->hpa_range = info->dvsec_range[which];
> +	cxld->hpa_range = *range;
>  
>  	/*
>  	 * Set the emulated decoder as locked pending additional support to
> @@ -760,6 +766,17 @@ static int cxl_setup_hdm_decoder_from_dvsec(struct cxl_port *port,
>  	cxld->flags |= CXL_DECODER_F_ENABLE | CXL_DECODER_F_LOCK;
>  	port->commit_end = cxld->id;
>  
> +	rc = devm_cxl_dpa_reserve(cxled, *dpa_base, range_len(range), 0);

I have an example host where *dpa_base ends up being 0x0 here, and as a
result later down the line the region fails to register with this:

[   21.974117] cxl_pci 0000:3f:00.0: mem0:decoder1.0 no CXL window for range 0x0:0x1fffffffff

this traces back to here:

int devm_cxl_enumerate_decoders(struct cxl_hdm *cxlhdm,
                                struct cxl_endpoint_dvsec_info *info)
{
        u64 dpa_base = 0;    <- dpa_base is set to 0 and never updated
...
        for (i = 0; i < cxlhdm->decoder_count; i++) {
...
                rc = init_hdm_decoder(port, cxld, target_map, hdm, i,
                                      &dpa_base, info);
}


static int init_hdm_decoder(struct cxl_port *port, struct cxl_decoder *cxld,
                            int *target_map, void __iomem *hdm, int which,
                            u64 *dpa_base, struct cxl_endpoint_dvsec_info *info)
{
... passed directly into here
        if (should_emulate_decoders(info))
                return cxl_setup_hdm_decoder_from_dvsec(port, cxld, dpa_base,
                                                        which, info);
...
}

static int cxl_setup_hdm_decoder_from_dvsec(
        struct cxl_port *port, struct cxl_decoder *cxld, u64 *dpa_base,
        int which, struct cxl_endpoint_dvsec_info *info)
{
        rc = devm_cxl_dpa_reserve(cxled, *dpa_base, range_len(range), 0);
        if (rc) {
                dev_err(&port->dev,
                        "decoder%d.%d: Failed to reserve DPA range %#llx - %#llx\n (%d)",
                        port->id, cxld->id, *dpa_base,
                        *dpa_base + range_len(range) - 1, rc);
                return rc;
        }
        *dpa_base += range_len(range);
        cxled->state = CXL_DECODER_STATE_AUTO;

        return 0;
}


(full cxl log with bonus prints i added)
[   21.607034] cxl_pci 0000:3f:00.0: No component registers (-19)
[   21.641831] cxl_pci 0000:3f:00.0: DOE: [d80] failed to cache protocols : -5
[   21.642866] cxl_pci 0000:3f:00.0: Failed to create MB object for MB @ d80
[   21.643686] cxl_pci 0000:3f:00.0: Failed to request region 0x0000000000001fff-0x000000000010201e
[   21.644371] cxl add_dpa_res: (0, 1fffffffff)
[   21.645540] cxl add_dpa_res: (2000000000, 1fffffffff)
[   21.965692] cxl hdm dvsec range: (0, 1fffffffff)
[   21.967045] cxl emulating decoders: dpa_base(0)   <-  *dpa_base
[   21.967778] cxl_add_to_region: searching for root decoder with address range(0, 1fffffffff)
[   21.972824] cxl match decoder: found root decoder, r1(1050000000, 304fffffff) r2(0, 1fffffffff)
[   21.974117] cxl_pci 0000:3f:00.0: mem0:decoder1.0 no CXL window for range 0x0:0x1fffffffff
[   21.974905] cxl discover_region: failed to add to region: 0x0-0x1fffffffff



Ultimately having trouble deciding if this is something broken with
bios, the setup_hdm_decoder code, or the discover_region code.  I'm not
PCI guru, but we should expect the rdm dvsec range to be in the range of
the root decoder window / CFMW:  r1(1050000000, 304fffffff)


confirming this is the issue, i *forced* the dvsec range register to read
out base+0x1050000000


diff --git a/drivers/cxl/core/pci.c b/drivers/cxl/core/pci.c
index 7328a2552411..6fc6df0f7b5a 100644
--- a/drivers/cxl/core/pci.c
+++ b/drivers/cxl/core/pci.c
@@ -340,12 +344,16 @@ int cxl_dvsec_rr_decode(struct device *dev, int d,
                if (rc)
                        return rc;

                base |= temp & CXL_DVSEC_MEM_BASE_LOW_MASK;

                info->dvsec_range[i] = (struct range) {
-                       .start = base,
-                       .end = base + size - 1
+                       .start = 0x1050000000 + base,
+                       .end = 0x1050000000 + base + size - 1
                };


And this resulted in everything working "as one would expect"

[user@host0 ~]# ls /sys/bus/cxl/devices/
dax_region0  decoder0.0  decoder1.0  endpoint1  mem0  region0  root0

[user@host0 ~]# numactl --hardware
available: 2 nodes (0-1)
node 1 cpus:
node 1 size: 0 MB
node 1 free: 0 MB
node distances:
node   0   1
  0:  10  50
  1:  255  10

[user@host0 ~]# echo online_movable > /sys/bus/node/devices/node1/memory33/state
[user@host0 ~]# numactl --hardware
available: 2 nodes (0-1)
node 1 size: 2048 MB
node 1 free: 2048 MB
node distances:
node   0   1
  0:  10  50
  1:  255  10


Basically the question is:

Is the DVSEC Range Register expected to be programmed by bios, and are
not being programmed correctly?

Or is there something else missing here to correct for the CMFW base?



If it's the former, then this patch set is gtg and i'm happy to add my
Tested-by tag.  If it's the latter, can we hotfix it before release?



> +	if (rc) {
> +		dev_err(&port->dev,
> +			"decoder%d.%d: Failed to reserve DPA range %#llx - %#llx\n (%d)",
> +			port->id, cxld->id, *dpa_base,
> +			*dpa_base + range_len(range) - 1, rc);
> +		return rc;
> +	}
> +	*dpa_base += range_len(range);
> +	cxled->state = CXL_DECODER_STATE_AUTO;
> +
>  	return 0;
>  }
>  
> @@ -779,7 +796,8 @@ static int init_hdm_decoder(struct cxl_port *port, struct cxl_decoder *cxld,
>  	} target_list;
>  
>  	if (should_emulate_decoders(info))
> -		return cxl_setup_hdm_decoder_from_dvsec(port, cxld, which, info);
> +		return cxl_setup_hdm_decoder_from_dvsec(port, cxld, dpa_base,
> +							which, info);
>  
>  	ctrl = readl(hdm + CXL_HDM_DECODER0_CTRL_OFFSET(which));
>  	base = ioread64_hi_lo(hdm + CXL_HDM_DECODER0_BASE_LOW_OFFSET(which));
> 

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 1E269C6FD1D
	for <linux-cxl@archiver.kernel.org>; Thu, 30 Mar 2023 04:21:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229456AbjC3EVn (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Thu, 30 Mar 2023 00:21:43 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:54072 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229738AbjC3EVm (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Thu, 30 Mar 2023 00:21:42 -0400
Received: from mga09.intel.com (mga09.intel.com [134.134.136.24])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 54D9A1723
        for <linux-cxl@vger.kernel.org>; Wed, 29 Mar 2023 21:21:41 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
  d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
  t=1680150101; x=1711686101;
  h=date:from:to:cc:subject:message-id:references:
   in-reply-to:mime-version;
  bh=ZNzxFeRlAJHhfYJV/z66KFIvgADtqTEruw/fItg4G1g=;
  b=hdCnrvJaFLZQoKjN7QgWJHOfBhY8KsdnpcGtmj4NmQ+w6zpDh6WHVicF
   i6BQnWcCxn4ovXtVu4E+bX0bemVSDCKNwOLWmIufIIf7UgNSMIUbmxdq7
   aZhAbq34nDlkMzo0IsmMU83HyoZek6YXm7ihatC+aZ9MHvhi+Tu4Hg+CI
   13+2Oe5tW/c+exT23DzuFLDR1/sxmrDAmUAiw9+unran2jAaQM0L4944P
   C3DQdDOSOaLLV9kHWg3V7co/TIztUaZdADpCB6Z9P/ugZgozmP/zfIb/z
   k07m3vrT13aZT1Bfyf9vljpxQJd3q49p3vXttzKWO1jZWPET250iLqhWp
   w==;
X-IronPort-AV: E=McAfee;i="6600,9927,10664"; a="342675465"
X-IronPort-AV: E=Sophos;i="5.98,301,1673942400"; 
   d="scan'208";a="342675465"
Received: from orsmga005.jf.intel.com ([10.7.209.41])
  by orsmga102.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384; 29 Mar 2023 21:21:40 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=McAfee;i="6600,9927,10664"; a="858752716"
X-IronPort-AV: E=Sophos;i="5.98,301,1673942400"; 
   d="scan'208";a="858752716"
Received: from orsmsx603.amr.corp.intel.com ([10.22.229.16])
  by orsmga005.jf.intel.com with ESMTP; 29 Mar 2023 21:21:38 -0700
Received: from orsmsx611.amr.corp.intel.com (10.22.229.24) by
 ORSMSX603.amr.corp.intel.com (10.22.229.16) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21; Wed, 29 Mar 2023 21:21:37 -0700
Received: from orsmsx602.amr.corp.intel.com (10.22.229.15) by
 ORSMSX611.amr.corp.intel.com (10.22.229.24) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21; Wed, 29 Mar 2023 21:21:37 -0700
Received: from ORSEDG602.ED.cps.intel.com (10.7.248.7) by
 orsmsx602.amr.corp.intel.com (10.22.229.15) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.1.2507.21 via Frontend Transport; Wed, 29 Mar 2023 21:21:37 -0700
Received: from NAM12-MW2-obe.outbound.protection.outlook.com (104.47.66.48) by
 edgegateway.intel.com (134.134.137.103) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.1.2507.21; Wed, 29 Mar 2023 21:21:37 -0700
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=jU+sgdcrYVgx8qJuLxOa8ALEYGigjXDJN1q5J9exM9ZdqDoJzGPdNIM+k8Oed7HdgPeO1T1tc/XhInZcUbh2YY9zVSFY+LJII75HDPptgMnL1PPTczwUoQ5iKjNgtOqx0zBTGXqwIeCvHiuR3WDzAn51I9o5CAdjT/HeGVGinb3oJrm1iZ/4Wr/YJ3Tu+FrrIOsmgn8oVn3njkzOdeYkxWtNK1C3NQSWdOwZE67QoCk7p66+te6ChI8QI+wilSNnY6S9ty0urZLSeook7tpNyNFNjS6aQ0MlnseeeJqwKB4SCdLlFROvpk+WfjR6WZq3gi9Lxa187LiBpcKTygGdDA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=yIsCpdD0fcGBmzxrWVpB0TcY7oO+T5k+Cp/ReyuRaNg=;
 b=IwPXaM1arWValDa5BFRv7fesnMoVxeYAIyqEpSi2eEZfQSX3ahlIuSt49epN9F1nnYjXWcbDVNRsXTDbspXDxB8NHSw8VnKC84Z4CDHfhu1ln1bm8JOpDn5jikphHITAtUE+XNKzMDkdeludOQ1x2ZdDTQYRdrybQzyPyobvo0ZnHtPIHbRAqP6j2vdabEPQHXv2H9zp5yBQkKwhYD1ncfYkf7o82JVU6nmHVqtCJUy6gdJQgFsPi8qZbXrSWWNJnKxLKxWR/592Jg73jbHanBVdAtePqIlcmRGs6ZD7c7h9oQT5S9R2qU9RBH71fBMA1wMul021hOd9XJTT+hJXSQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=intel.com; dmarc=pass action=none header.from=intel.com;
 dkim=pass header.d=intel.com; arc=none
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=intel.com;
Received: from PH8PR11MB8107.namprd11.prod.outlook.com (2603:10b6:510:256::6)
 by DS7PR11MB7835.namprd11.prod.outlook.com (2603:10b6:8:db::10) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.6222.33; Thu, 30 Mar
 2023 04:21:30 +0000
Received: from PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233]) by PH8PR11MB8107.namprd11.prod.outlook.com
 ([fe80::ffa1:410b:20b3:6233%4]) with mapi id 15.20.6254.021; Thu, 30 Mar 2023
 04:21:28 +0000
Date: Wed, 29 Mar 2023 21:21:25 -0700
From: Dan Williams <dan.j.williams@intel.com>
To: Gregory Price <gregory.price@memverge.com>,
        Dan Williams <dan.j.williams@intel.com>
CC: <linux-cxl@vger.kernel.org>, Dave Jiang <dave.jiang@intel.com>
Subject: Re: [PATCH] cxl/hdm: Extend DVSEC range register emulation for
 region enumeration
Message-ID: <64250e45bea49_c722294c2@dwillia2-mobl3.amr.corp.intel.com.notmuch>
References: <168012575521.221280.14177293493678527326.stgit@dwillia2-xfh.jf.intel.com>
 <ZCRhhUDcmypVKu0X@memverge.com>
Content-Type: text/plain; charset="us-ascii"
Content-Disposition: inline
In-Reply-To: <ZCRhhUDcmypVKu0X@memverge.com>
X-ClientProxiedBy: SJ0PR03CA0268.namprd03.prod.outlook.com
 (2603:10b6:a03:3a0::33) To PH8PR11MB8107.namprd11.prod.outlook.com
 (2603:10b6:510:256::6)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: PH8PR11MB8107:EE_|DS7PR11MB7835:EE_
X-MS-Office365-Filtering-Correlation-Id: 0fd42269-14d2-49b0-8b8a-08db30d63b71
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: gYPhDTXoxMzX0JyAIq/Owe+YlS5RXmRCgFlVb9T0EOsj+QtA1vQ0SXHrK0SygBEHc0TzqP5gYQcmSs2mhJRiwzPfx7L//p9t27BZsdfFmm4UiUDkqYkM58zWcdkvf8Gx+klGoYj3o0mei5xPczMHm297X0Bb3uHXCPTF+HyLpCOpbg8qsgUYhqDDEkUUcMaaDU+XgcXGyR7ScZoFQeGXQk/LO7dCUJ+brlma8i7dFe3ZIEgRQcUTYYyaI7rPicg2GnvO4M+hCtyWBYCm+SywbowjaE4RVnmPJgm/2gpj8RHALMy7dgqvP77kefNRfkc8O6W7NB9eN+ILnCE+vBcALpsHG4PKqcLeLVY72fkFQnusojmyK46npmJV0gkVkiezkD9zO4o4TnHB/QYvWvSlL88ZkaD8v/cE0zynizRXLKBvXEUsfQYzWJFTquCt6fTxr8b7c+zsP9NUlFdGSke8TOLw83VGqKXqkZJyTDL5dkatgItzhmok4BiBMg2J0mtg6mOEEUQVp91mX2R86o+wtyJdEDtg6krqsesjwfEIVpeD6LkvLKFHSVzUXQh7saNT
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:PH8PR11MB8107.namprd11.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230028)(346002)(39860400002)(376002)(136003)(396003)(366004)(451199021)(186003)(478600001)(6666004)(107886003)(316002)(6512007)(110136005)(9686003)(6506007)(26005)(83380400001)(66476007)(38100700002)(86362001)(8936002)(5660300002)(6486002)(66556008)(4326008)(66946007)(8676002)(2906002)(82960400001)(41300700001);DIR:OUT;SFP:1102;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?us-ascii?Q?cOUx7VUqAFc0vpvvzQcPo2TzTZrmSZO8sXQtVDO8oBPewf96OojIVyY+ISOR?=
 =?us-ascii?Q?T6hp64OlAkHe6Z68VHDu3xlzY/R1i52zhq/1GF3yqxrnsyB0nr18zTt4hSZw?=
 =?us-ascii?Q?12pCNH5EpmKamk+4MLR/GCJFGrAoeXrTkfkDLLozOFP9PRJrK+ygGaZx7PAB?=
 =?us-ascii?Q?vlISLSAieDQmCeyeg9OCKVpnzQ1RnVe2D7sXwWnDlSTaYUdx/wfx5Ri8323+?=
 =?us-ascii?Q?9B6k/HFQhM4CyWyQOIufaOD045t8b7YNS4Nc7VyfFNrCd3FAlW7Ccn/8uPlH?=
 =?us-ascii?Q?0SqPvR0stJlEb/HQLdmKeEQoz+1spu8lvXHXl4VqSZpQrxn6KuHg11k0tH9k?=
 =?us-ascii?Q?oVq1TWDvgleuW3skyMqJtPDYu6BtDpZQUqd3GsCIGF5v6Yj5sC3NaNzUs5MI?=
 =?us-ascii?Q?Au3yBufKITMOpCbOWUOVBGXiFO6YxckTWzee90y5AEUduV/GcCIvDClnXifW?=
 =?us-ascii?Q?uDqRotAxx4TyBMAFY0/VFWweVPDlOl0/YgdBPNn00yuxJo0jHkk9K6J8Sccw?=
 =?us-ascii?Q?3bRgxodf+9UNo9WzEk3wk9LyEGb06hM0xh+VLnG8caV4JnPRk8nbFKv7gmYw?=
 =?us-ascii?Q?6Jmv9mChN/cR7VCqd39XaT8VH75wGB9/tMX+tfgrbyUYCW3vzM6TKIaq2M6F?=
 =?us-ascii?Q?VL6K8E8cAEqlgZksD5wthH86ftO/A6nIELYXqpBC/4kv6eWhnnRTe1SstG+I?=
 =?us-ascii?Q?S2lzIg7gkLo2WJxHn06P5vp60+P+Ys0uYk7cu+PauIFBEa0WQacrHULmY6l/?=
 =?us-ascii?Q?Xnv8sqfcQRPDdHfzvWXCSoWD2CAM1AzegjRyRbHxhohkM2w8/apke0RJEBne?=
 =?us-ascii?Q?U4OgmaGLnaJ+g5q0OfeheTlWXeNXuAf0A90PyTKnVLhGFKd6VM71gNae8PXQ?=
 =?us-ascii?Q?q9jcm0ppEz4PhwTOGN8QpOA3ILj6Xczk5/MfQyFRq3OiyY6zOi//9wzQ3ktw?=
 =?us-ascii?Q?oJwceApNLiRBBxBTH8fg2liQSLlbACCZJx+UWcLSBTxYbUnO0r4JE1XaIiSx?=
 =?us-ascii?Q?kPq19FLN/BfrSaQBI2rU3LUSPzB43A//5CzWP1IUSGav0OXAz8F+pzw8+dRW?=
 =?us-ascii?Q?42SErPAZZmYtlIttD3pv/lOuwH5mDztf0sz7xJ2TE2KDYZuJM6SKlZ8ONel4?=
 =?us-ascii?Q?6Ra4oPUgqe3JH2OAKnY/sSXzbocvA87CGPLlUlOLczBDfWjVTllZ9gpcBgtQ?=
 =?us-ascii?Q?KZyKBcuxsSPuAIOCckZcG5K7ypcqqRvS1RKDa0Ni429khVypUw2O3AaNiDmA?=
 =?us-ascii?Q?Q256VGIxCcSQ8pmUHTK/BIf7LaeOuvUy0VhkIqAwdQPjzaPPhCBd42C1/4pT?=
 =?us-ascii?Q?5hHYf3anAeGC7f3wLI99CZGRES8a+v8/esk98z2udkxX/7RDM5eMbY0KVWG2?=
 =?us-ascii?Q?0Qqf0rQryX4tR3lQOTjL73oE3CiLiso5xQ3RYnZY+f+XrA52/VJKRT/X7brm?=
 =?us-ascii?Q?N+jwvpVhmn4xs5MPB7GQLOzxjhfHoOYBbPglEULgictbiw8L/m/w91WG88HO?=
 =?us-ascii?Q?HW81K6GiagsaNRlT7G97+1FKYz9SOvA+RDFe2JaH3z1glHgTmrJ4GTkQJw+V?=
 =?us-ascii?Q?v5otLo38a+ilKX43XmIV1Gor10rH9AfcyVP3mPn4jzOh3D0Zw3W/0Kxr5X8O?=
 =?us-ascii?Q?DQ=3D=3D?=
X-MS-Exchange-CrossTenant-Network-Message-Id: 0fd42269-14d2-49b0-8b8a-08db30d63b71
X-MS-Exchange-CrossTenant-AuthSource: PH8PR11MB8107.namprd11.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 30 Mar 2023 04:21:28.3888
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 46c98d88-e344-4ed4-8496-4ed7712e255d
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: hbOFyjRISJ9WVPNtSF0Od/zKEA2dVqWNGFaZBSgtrTFRUV16ieRTFyK4fMe0PjiwdhHmU1Yp8HF533/xctfw+S7WtRPKXSCTR3ILT+yWWHw=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DS7PR11MB7835
X-OriginatorOrg: intel.com
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

Gregory Price wrote:
[..]
> I have an example host where *dpa_base ends up being 0x0 here, and as a
> result later down the line the region fails to register with this:

First off, thanks for testing.

> [   21.974117] cxl_pci 0000:3f:00.0: mem0:decoder1.0 no CXL window for range 0x0:0x1fffffffff

So, this debug message is a statement about *HPA*, DPA is the device
local offset, it just so happens that in this case the HPA base and
DPA base are aligned.

[..]
> (full cxl log with bonus prints i added)
> [   21.607034] cxl_pci 0000:3f:00.0: No component registers (-19)
> [   21.641831] cxl_pci 0000:3f:00.0: DOE: [d80] failed to cache protocols : -5
> [   21.642866] cxl_pci 0000:3f:00.0: Failed to create MB object for MB @ d80
> [   21.643686] cxl_pci 0000:3f:00.0: Failed to request region 0x0000000000001fff-0x000000000010201e

I assume that this is the attempt to map the RAS component registers
given the driver load did not fail. Would be interested to see this
platform's /proc/iomem, but this is separate from the DPA mapping issue.
Perhaps this device tries to define the RAS capability with another
block that was already mapped?

> [   21.644371] cxl add_dpa_res: (0, 1fffffffff)
> [   21.645540] cxl add_dpa_res: (2000000000, 1fffffffff)

Ok, this device has a 128G ram region and no pmem.

> [   21.965692] cxl hdm dvsec range: (0, 1fffffffff)
> [   21.967045] cxl emulating decoders: dpa_base(0)   <-  *dpa_base

That's ok...

> [   21.967778] cxl_add_to_region: searching for root decoder with address range(0, 1fffffffff)

Now it switches to search for a CFMWS for the HPA that just to be
identity mapped to DPA by accident.

> [   21.972824] cxl match decoder: found root decoder, r1(1050000000, 304fffffff) r2(0, 1fffffffff)

I am assuming that this means the only CXL window defined for this
platform is 1050000000-304fffffff?

> [   21.974117] cxl_pci 0000:3f:00.0: mem0:decoder1.0 no CXL window for range 0x0:0x1fffffffff
> [   21.974905] cxl discover_region: failed to add to region: 0x0-0x1fffffffff

Driver is giving up for cause because either the BIOS failed to program
the range registers of the device correctly, or it failed to publish a
window for where the device is decoding.

> Ultimately having trouble deciding if this is something broken with
> bios, the setup_hdm_decoder code, or the discover_region code.  I'm not
> PCI guru, but we should expect the rdm dvsec range to be in the range of
> the root decoder window / CFMW:  r1(1050000000, 304fffffff)

Yes, either that or a CFWMS for 0-1fffffffff

> confirming this is the issue, i *forced* the dvsec range register to read
> out base+0x1050000000

Nice!

> diff --git a/drivers/cxl/core/pci.c b/drivers/cxl/core/pci.c
> index 7328a2552411..6fc6df0f7b5a 100644
> --- a/drivers/cxl/core/pci.c
> +++ b/drivers/cxl/core/pci.c
> @@ -340,12 +344,16 @@ int cxl_dvsec_rr_decode(struct device *dev, int d,
>                 if (rc)
>                         return rc;
> 
>                 base |= temp & CXL_DVSEC_MEM_BASE_LOW_MASK;
> 
>                 info->dvsec_range[i] = (struct range) {
> -                       .start = base,
> -                       .end = base + size - 1
> +                       .start = 0x1050000000 + base,
> +                       .end = 0x1050000000 + base + size - 1
>                 };
> 
> 
> And this resulted in everything working "as one would expect"
> 
> [user@host0 ~]# ls /sys/bus/cxl/devices/
> dax_region0  decoder0.0  decoder1.0  endpoint1  mem0  region0  root0
> 
> [user@host0 ~]# numactl --hardware
> available: 2 nodes (0-1)
> node 1 cpus:
> node 1 size: 0 MB
> node 1 free: 0 MB
> node distances:
> node   0   1
>   0:  10  50
>   1:  255  10
> 
> [user@host0 ~]# echo online_movable > /sys/bus/node/devices/node1/memory33/state
> [user@host0 ~]# numactl --hardware
> available: 2 nodes (0-1)
> node 1 size: 2048 MB
> node 1 free: 2048 MB
> node distances:
> node   0   1
>   0:  10  50
>   1:  255  10
> 
> 
> Basically the question is:
> 
> Is the DVSEC Range Register expected to be programmed by bios, and are
> not being programmed correctly?

This debug experiment makes me think perhaps the *device* is at fault,
not the BIOS. Perhaps the device accepts writes to CXL_DVSEC_RANGE_BASE
to set up the decode as expected, but reads return 0? That's the only
way that I can see that forcing that offset results in successfully
talking to memory.

> Or is there something else missing here to correct for the CMFW base?
[..]
> If it's the former, then this patch set is gtg and i'm happy to add my
> Tested-by tag.  If it's the latter, can we hotfix it before release?

Yeah, FWIW, I don't see anything wrong from the kernel side, and would
be curious what the BIOS reports if it reads back what it wrote to the
CXL DVSEC range registers.

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 110F9C74A5B
	for <linux-cxl@archiver.kernel.org>; Thu, 30 Mar 2023 04:35:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229484AbjC3Efm (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Thu, 30 Mar 2023 00:35:42 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:60606 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229459AbjC3Efk (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Thu, 30 Mar 2023 00:35:40 -0400
Received: from NAM10-BN7-obe.outbound.protection.outlook.com (mail-bn7nam10on2073.outbound.protection.outlook.com [40.107.92.73])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 60B2A59C4
        for <linux-cxl@vger.kernel.org>; Wed, 29 Mar 2023 21:35:36 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=MOgY6hvHsy3mTSY+NtmqyCwZiSD/RJU8DapJIqI8p28DFpoMd0xjSw0XtOAgSkWhk0e0n1L5/B722OaDwEIZcx0esuBS5F6/8UjbkaSm40whrd7K2MFskolKpbP4tA2wHiYg1sEHHS3j52V0n8tls/TpaJ/L6wdhtBM0E9BQ7l5BjiPsSdMQd6x9OdFHiVLKFtKSfCyXhwhn6D8aBk9edonesLFqhMSj9S5gAqcidmezVJ1h4LXooUm92+WuCIRTO/fsXE6qn/0Lqg4c/wDFfRXUwTLwE5mJz37qChwN3uA5zfj9Erxzuh8ngp3BYfniJwNBqVE3Zfe3WmcZa67i0A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=D6t9KKUq4VqiKsf62lXsR6VKE6y1fgV6MMGd+sjAlcM=;
 b=kH8ZIJxgi/wuBJN9mbMBkYsZl/BdOxkSzntWldClhQiY9OXErhc5hDGndQgVJgw/zzptTcz2V8GcLSAfVPCawvezP0HHXAfjUAOTnNvZjojtd9YqTYyHaAe5Vhqnj2hEJWjqIzO+Z6Eh6x4vRVub/t/KsyK32rxpofiakiGy6WCYcpDb2cXEM+b04T3cPu2pLrcvt5Usq/lCV02QHE/eKlJKZ40/M0hJiSNOMqyxILz4vyl1QVAGKOt8CDb2cwhB/c1ZEVqDskE+edbLxjhw3KvtRmT6YhBAtdi31qbNIiIM6HuzcQLMEBIzkb6WuIoUw8n+HVWuP1RwbuYy5AwzuA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=memverge.com; dmarc=pass action=none header.from=memverge.com;
 dkim=pass header.d=memverge.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=memverge.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=D6t9KKUq4VqiKsf62lXsR6VKE6y1fgV6MMGd+sjAlcM=;
 b=dwwPECtC+H0ij9idkne8rh18dE4cct4EA+rm15lpKnZa5bSMEJaxsaoJBKhN1/34ncr++VWbg289UUfyoQK/dJ2iOBrwoDntqYKm8zuaLjlsxM2Kt1SUn1NqieVZOUY7V9hSupgHcbpmX8wlnsh0FjZrSOIwowQkprZA/g6lbOQ=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=memverge.com;
Received: from SJ0PR17MB5512.namprd17.prod.outlook.com (2603:10b6:a03:394::19)
 by MW3PR17MB4170.namprd17.prod.outlook.com (2603:10b6:303:46::7) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.6178.41; Thu, 30 Mar
 2023 04:35:33 +0000
Received: from SJ0PR17MB5512.namprd17.prod.outlook.com
 ([fe80::7b97:62c3:4602:b47a]) by SJ0PR17MB5512.namprd17.prod.outlook.com
 ([fe80::7b97:62c3:4602:b47a%5]) with mapi id 15.20.6222.033; Thu, 30 Mar 2023
 04:35:33 +0000
Date: Wed, 29 Mar 2023 13:20:03 -0400
From: Gregory Price <gregory.price@memverge.com>
To: Dan Williams <dan.j.williams@intel.com>
Cc: linux-cxl@vger.kernel.org, Dave Jiang <dave.jiang@intel.com>
Subject: Re: [PATCH] cxl/hdm: Extend DVSEC range register emulation for
 region enumeration
Message-ID: <ZCRzQxmafPCCWJOx@memverge.com>
References: <168012575521.221280.14177293493678527326.stgit@dwillia2-xfh.jf.intel.com>
 <ZCRhhUDcmypVKu0X@memverge.com>
 <64250e45bea49_c722294c2@dwillia2-mobl3.amr.corp.intel.com.notmuch>
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <64250e45bea49_c722294c2@dwillia2-mobl3.amr.corp.intel.com.notmuch>
X-ClientProxiedBy: BY3PR04CA0011.namprd04.prod.outlook.com
 (2603:10b6:a03:217::16) To SJ0PR17MB5512.namprd17.prod.outlook.com
 (2603:10b6:a03:394::19)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SJ0PR17MB5512:EE_|MW3PR17MB4170:EE_
X-MS-Office365-Filtering-Correlation-Id: ef6f5b3c-b3a3-443d-43da-08db30d8330a
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: SbqCuEP+5Qic/URPOYr5zeC8flIO+m2IYuFGxzZv2zIQ5vtS7Oka4dAAsvSpnOPK7hOOFTSonZGokOqKuszjvqrBSNX0cPrXVjSxCTm/EJ24Vm8+cgH6whpPV7QfNwz7SOeax1FQBD8iNUXHO53ukPZGM34vf/78P6T+y7QysJDiJu2W8K2+gULH7vd5ZHpc2bT1oeQKCCPjwQXBWGuEXBTL1BRmv1L9B/jka0HHEWwWloPJ6YuLRuIhqTamQsDd3yxNG6019jMpQpiSPM1jeue2ZnfdR4wPrSIRvXuzHayv0JkfJaZkDJClQDixZDV3ZfyDZxKjFeTGlJGcqSMwIjqUj1AriVxTSW9eqmvcfBnGEWNz/Orrc9i7NuZKUXP2byFP6rKoQmYzPX57zYRSeKY841Wo/v783kCTO23ZabgF/tXe3J7EhwtshPUXOCN52/XNC0r9gecMsrDD68pF3Vf52SM/05ClZl+OLREJioxSW95SU7cXptfcKIxg9KKixOAv3U3KIiMEhwq+j6m8lDeL/kA+qGJ0ApcYS6f9br3EQHZ2wvu2DW9Iw5OEkOPw
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SJ0PR17MB5512.namprd17.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230028)(366004)(39850400004)(136003)(346002)(376002)(396003)(451199021)(316002)(6666004)(26005)(6512007)(6506007)(6486002)(186003)(83380400001)(6916009)(44832011)(4326008)(8936002)(2616005)(66476007)(8676002)(66556008)(66946007)(41300700001)(5660300002)(478600001)(2906002)(36756003)(86362001)(38100700002);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?us-ascii?Q?/FB8AIVsctGfwGfSxCWJ2WEfWZlLmOoly59Lb/FS+R3a/gqDrk7XEZJV41/8?=
 =?us-ascii?Q?dK3ZDVF4lYvhNrNDTf6qC5Pt7ABQUAp0y0w2VPtjdq/p3XzOY3aBMQBhshu1?=
 =?us-ascii?Q?MvKavFgYbjYuNYV7jRhNADkzFyjUt6nZQ1cxtRHDLFHbIuVW0ls7TPBzNBC5?=
 =?us-ascii?Q?9NFkr1rIh1wEGMtaBdygw3OEVmR+gzyBsxlBPFa/PuQ7Dnxoh5mM2ba6NkS9?=
 =?us-ascii?Q?k0jqG5TmLObQPvP868JhUuyEmTCDwxhQE7fhhN8OC37YScqTulFzsYNR29yX?=
 =?us-ascii?Q?HpCl+RP/e4HAlWQBKlQjn2sAg0rO8OICOmPWhBK4st3iotKz+a2i1pp415tk?=
 =?us-ascii?Q?G+lIdhzh8jcUFQJkydq5/C4NlnIkMtE4oGtdQlTYdNvy8CtN/uB+uI1GOIOT?=
 =?us-ascii?Q?YLKtEFnoTFmq8p7qpUZApzyNCIean7/lANlGaSi05/Uznk2LtbAG7/eGlHYv?=
 =?us-ascii?Q?+oCq1CzjM6iCPb8pWZVCc9xLD+uBL9XkGcnRnbmKtQjgvKMAH9FAf+3ztFVc?=
 =?us-ascii?Q?Ksdf4shXolXfnNNVuQ3SdH+yrZjk7Rn9/dZA7z6g+bXjlbLa8IyPx5ZemJUU?=
 =?us-ascii?Q?3NQGL2dDph4ir8FBcblOsE+adPwm9axFNIwo9PfCb73yVFcGpS1NZvdeH9qM?=
 =?us-ascii?Q?hh71BqcsIFZ1K+svs0ggdBiE3tSUZfxYF53ksr2FcBcxLl8qilvD1t0MaCtG?=
 =?us-ascii?Q?hXJBcwdqNsOdWJ4aPmQVjx/ilsy9hrLBhZis/WCOE70xoG+1dOXijSTSogFy?=
 =?us-ascii?Q?A9ZSutHPB5BrKE5tMGJ08R7x5cLg/L8yaOIp06IccV3WOp9KfmA/+6CpPSC/?=
 =?us-ascii?Q?z+uOfCbKBEhjI3IGDHjdijvauNeiMQNz5WqQtMXqyDmlP9z4uGOKxvT6npgf?=
 =?us-ascii?Q?0iYsJAc6plK3jhOzR2BqXQ0kb7Omg2RCXEwkdnQjLT/p5n74oXOsfFe2dswf?=
 =?us-ascii?Q?UQnfr8xbJWYmGP4oWKypXbZul5SNwOlKtRfIX9g4ELXCUZ6LLdDdpbSizf/j?=
 =?us-ascii?Q?Q3QwdYTmnAvaaTiiQoMuvDk0ItA3mrMvPmLiT8ii5smPBcv2KnVrlVZeToLr?=
 =?us-ascii?Q?oqgl2Puny61kxsjC7/gz8ShAxXPOLST3bRKiKq97dg1VbrmZgI3HLtzrheKK?=
 =?us-ascii?Q?b3lc+5wvydWTOiII4f5qNAotWYh6QoFdDOCb6+cB/4D43+lo1SutlFHDkPTF?=
 =?us-ascii?Q?XZEZvyeLvaWxGFS5e6vAFjl53OWrqw5qEncJGUb6b9wLB5LmDY8Dg2ZiBRHc?=
 =?us-ascii?Q?kbfVzl5FF4zXLgKGu6Ks7saGJpP2Ua9tDXldLWD81y9/DIsfV4atYTlzAR2d?=
 =?us-ascii?Q?RC11FVfLb0+HvKbDQybmxKi/6FHE2lkBEx0H8vIMnJaDDFTy0JZnkvLIrneX?=
 =?us-ascii?Q?aUjgXrCEdr2CwreXgX++8ik8LXBWxMYDolVm2nfHUMbWBlrBi857kDA8VcF8?=
 =?us-ascii?Q?C1O92AVvFGHxZORxOBRP31P/yAr9cRGF4IfERhF2Jo8/yH8ArYNf+LYHL8ed?=
 =?us-ascii?Q?QyL88OZkM3BdmbQbHbsjGnCcXMQCZrsSe3SDzM7HD1bUpoh70wIVuoYQCt/m?=
 =?us-ascii?Q?xid9EY9/D/c2Dz2HjRAN3ZJ+bmsAtDiFEArFeFOVMEDn0iUYCn4A7RlxLKB7?=
 =?us-ascii?Q?AQ=3D=3D?=
X-OriginatorOrg: memverge.com
X-MS-Exchange-CrossTenant-Network-Message-Id: ef6f5b3c-b3a3-443d-43da-08db30d8330a
X-MS-Exchange-CrossTenant-AuthSource: SJ0PR17MB5512.namprd17.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 30 Mar 2023 04:35:33.2598
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 5c90cb59-37e7-4c81-9c07-00473d5fb682
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: 4eDwub1zZ1jeWXWtvDNFr5PF+fOTadOHxPIZ/4twuBa52xTEuP9a0ut6AiqDbKBpgnqm3rQ7e1bOQ7NweDZnwHy6pBfcIA6yfatmsPnHRyQ=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MW3PR17MB4170
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

On Wed, Mar 29, 2023 at 09:21:25PM -0700, Dan Williams wrote:
> Gregory Price wrote:
> [..]
> > I have an example host where *dpa_base ends up being 0x0 here, and as a
> > result later down the line the region fails to register with this:
> 
> First off, thanks for testing.
> 
> > [   21.974117] cxl_pci 0000:3f:00.0: mem0:decoder1.0 no CXL window for range 0x0:0x1fffffffff
> 
> So, this debug message is a statement about *HPA*, DPA is the device
> local offset, it just so happens that in this case the HPA base and
> DPA base are aligned.
> 
> [..]
> > (full cxl log with bonus prints i added)
> > [   21.607034] cxl_pci 0000:3f:00.0: No component registers (-19)
> > [   21.641831] cxl_pci 0000:3f:00.0: DOE: [d80] failed to cache protocols : -5
> > [   21.642866] cxl_pci 0000:3f:00.0: Failed to create MB object for MB @ d80
> > [   21.643686] cxl_pci 0000:3f:00.0: Failed to request region 0x0000000000001fff-0x000000000010201e
> 
> I assume that this is the attempt to map the RAS component registers
> given the driver load did not fail. Would be interested to see this
> platform's /proc/iomem, but this is separate from the DPA mapping issue.
> Perhaps this device tries to define the RAS capability with another
> block that was already mapped?
> 

I'll snag more information on this tomorrow when I can do a bit more.

> > [   21.644371] cxl add_dpa_res: (0, 1fffffffff)
> > [   21.645540] cxl add_dpa_res: (2000000000, 1fffffffff)
> 
> Ok, this device has a 128G ram region and no pmem.
> 
> > [   21.965692] cxl hdm dvsec range: (0, 1fffffffff)
> > [   21.967045] cxl emulating decoders: dpa_base(0)   <-  *dpa_base
> 
> That's ok...
> 
> > [   21.967778] cxl_add_to_region: searching for root decoder with address range(0, 1fffffffff)
> 
> Now it switches to search for a CFMWS for the HPA that just to be
> identity mapped to DPA by accident.
> 
> > [   21.972824] cxl match decoder: found root decoder, r1(1050000000, 304fffffff) r2(0, 1fffffffff)
> 
> I am assuming that this means the only CXL window defined for this
> platform is 1050000000-304fffffff?

Yes sorry, r1() is the root decoder which maps to the CFMW, r2 is the
device dvsec defined range.  I actually wrote this out while i was
working towards the second half of the experiment, just left this here
for completeness incase i got something wrong.

> 
> > [   21.974117] cxl_pci 0000:3f:00.0: mem0:decoder1.0 no CXL window for range 0x0:0x1fffffffff
> > [   21.974905] cxl discover_region: failed to add to region: 0x0-0x1fffffffff
> 
> Driver is giving up for cause because either the BIOS failed to program
> the range registers of the device correctly, or it failed to publish a
> window for where the device is decoding.
> 
> > Ultimately having trouble deciding if this is something broken with
> > bios, the setup_hdm_decoder code, or the discover_region code.  I'm not
> > PCI guru, but we should expect the rdm dvsec range to be in the range of
> > the root decoder window / CFMW:  r1(1050000000, 304fffffff)
> 
> Yes, either that or a CFWMS for 0-1fffffffff
>

Given this system is single-socket, and has only a single CXL memory
expander connected to it, and that a CFMWS for 0-1fff.. seems
irrational, I'm going to go with the Range Register is wrong.

> > confirming this is the issue, i *forced* the dvsec range register to read
> > out base+0x1050000000
> 
> Nice!
> 
> > diff --git a/drivers/cxl/core/pci.c b/drivers/cxl/core/pci.c
> > index 7328a2552411..6fc6df0f7b5a 100644
> > --- a/drivers/cxl/core/pci.c
> > +++ b/drivers/cxl/core/pci.c
> > @@ -340,12 +344,16 @@ int cxl_dvsec_rr_decode(struct device *dev, int d,
> >                 if (rc)
> >                         return rc;
> > 
> >                 base |= temp & CXL_DVSEC_MEM_BASE_LOW_MASK;
> > 
> >                 info->dvsec_range[i] = (struct range) {
> > -                       .start = base,
> > -                       .end = base + size - 1
> > +                       .start = 0x1050000000 + base,
> > +                       .end = 0x1050000000 + base + size - 1
> >                 };
> > 
> > 
> > And this resulted in everything working "as one would expect"
> > 
> > [user@host0 ~]# ls /sys/bus/cxl/devices/
> > dax_region0  decoder0.0  decoder1.0  endpoint1  mem0  region0  root0
> > 
> > [user@host0 ~]# numactl --hardware
> > available: 2 nodes (0-1)
> > node 1 cpus:
> > node 1 size: 0 MB
> > node 1 free: 0 MB
> > node distances:
> > node   0   1
> >   0:  10  50
> >   1:  255  10
> > 
> > [user@host0 ~]# echo online_movable > /sys/bus/node/devices/node1/memory33/state
> > [user@host0 ~]# numactl --hardware
> > available: 2 nodes (0-1)
> > node 1 size: 2048 MB
> > node 1 free: 2048 MB
> > node distances:
> > node   0   1
> >   0:  10  50
> >   1:  255  10
> > 
> > 
> > Basically the question is:
> > 
> > Is the DVSEC Range Register expected to be programmed by bios, and are
> > not being programmed correctly?
> 
> This debug experiment makes me think perhaps the *device* is at fault,
> not the BIOS. Perhaps the device accepts writes to CXL_DVSEC_RANGE_BASE
> to set up the decode as expected, but reads return 0? That's the only
> way that I can see that forcing that offset results in successfully
> talking to memory.
> 

Noteably, this is the same system in which i discovered a bios bug with
the CEDT.CMFW base.  I also have a patch in the kernel that corrects the
CFMW interleave target indexing.

So it's entirely possible that the bios is not programming things
correctly and simply leaving the device indexed at 0x0, while the device
sets up most everything else.

But I will investigate a bit further.

> > Or is there something else missing here to correct for the CMFW base?
> [..]
> > If it's the former, then this patch set is gtg and i'm happy to add my
> > Tested-by tag.  If it's the latter, can we hotfix it before release?
> 
> Yeah, FWIW, I don't see anything wrong from the kernel side, and would
> be curious what the BIOS reports if it reads back what it wrote to the
> CXL DVSEC range registers.

At this point I concur, you can add my tested-by to each of the patches
on this line.  I will reach out to the platform and device vendors to
investigate further.  Thanks for the input.

Tested-by: Gregory Price <gregory.price@memverge.com>

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-cxl-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2FDA6C74A5B
	for <linux-cxl@archiver.kernel.org>; Thu, 30 Mar 2023 04:36:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229557AbjC3Egj (ORCPT <rfc822;linux-cxl@archiver.kernel.org>);
        Thu, 30 Mar 2023 00:36:39 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:33076 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229504AbjC3Egi (ORCPT
        <rfc822;linux-cxl@vger.kernel.org>); Thu, 30 Mar 2023 00:36:38 -0400
Received: from NAM11-BN8-obe.outbound.protection.outlook.com (mail-bn8nam11on2041.outbound.protection.outlook.com [40.107.236.41])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id CC8075B86
        for <linux-cxl@vger.kernel.org>; Wed, 29 Mar 2023 21:36:35 -0700 (PDT)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=a4wpRra8aD72DwFGNZQe1eRMGNH09POHBFGj0Gh3T9stR3JeogJ0+yRjQJYYKwoI6ze+fT2PwqVS8FZJxA8kcHYWcNsSszDrj5xiPDDRbvnaq6alF0iyB7b7pZmE5w4poijT6ijbL/xvH+NqQjg9jEwQCM+vS+23vb7wQMby3jad6Gw32a9nJbI1xJObriBPtGMpOpXsu3bJOe9YkD82lesGDK1s52J9Y5qA00ZCaTnbUQHkqQkcQQ6Igomm7invAk7RSOcXymPREC3W3YG/kFD0jLs5oDNBjOPtcSHX9Zgiz18xSjsC9SagQXtsuQGZgxso85rfdwqm8XcHpA++mQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=r0dDOiVMN/+x8n/b6WXkt/ZfftTWu6aPGBjRwwqpn94=;
 b=jyD9I02AlCzJ/q07uo8tn+2iKuMuaC3vjf4/5OPjvePju3up6iRXPnmF4ZTlQ2gwQA23SpF38R1ay2G5rBDKaZM3+1jgIYHQA9i8z6j7TWVHShVCwjsz7/woV6FABHd3n2/zBOiK1zuJaIaeERJ8BZlNPZDMYShNjxWMsUP1z2hNw1pP8uvy22wKKJ2qtwa9LKidR9ei2LpjcYRlX00zQEn+htEp33HR6ABXZjPfLF9mXDnsgLVRhWQ4xBWbfxA041WEuCqdX5q/0R8MX5rHmCgpbtSMgmd4NGMiuOdc8ioV1I0BQkl2AKQUAewOSeSQ/bjjv+UifDYdjHCotZcjSw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=memverge.com; dmarc=pass action=none header.from=memverge.com;
 dkim=pass header.d=memverge.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=memverge.com;
 s=selector2;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=r0dDOiVMN/+x8n/b6WXkt/ZfftTWu6aPGBjRwwqpn94=;
 b=PhwQ09B+UEMAM9vNN0Cmdac/ObcDTnWoWSMIdl4zh3XCsi1cB8YsqVbEwGqsWNd6VUNy0YYSI7b34M1F/slQ4gJA8FSgt5qF1TzWv56xK2dvOy0OWM21GeQnu+3A6sH0DVKPukRkxe0AhWT3cSgzLBUMm0Binuob5/gMs/osmnA=
Authentication-Results: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=memverge.com;
Received: from SJ0PR17MB5512.namprd17.prod.outlook.com (2603:10b6:a03:394::19)
 by MW3PR17MB4170.namprd17.prod.outlook.com (2603:10b6:303:46::7) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.6178.41; Thu, 30 Mar
 2023 04:36:34 +0000
Received: from SJ0PR17MB5512.namprd17.prod.outlook.com
 ([fe80::7b97:62c3:4602:b47a]) by SJ0PR17MB5512.namprd17.prod.outlook.com
 ([fe80::7b97:62c3:4602:b47a%5]) with mapi id 15.20.6222.033; Thu, 30 Mar 2023
 04:36:34 +0000
Date: Wed, 29 Mar 2023 13:21:11 -0400
From: Gregory Price <gregory.price@memverge.com>
To: Dan Williams <dan.j.williams@intel.com>
Cc: linux-cxl@vger.kernel.org, Dave Jiang <dave.jiang@intel.com>
Subject: Re: [PATCH] cxl/hdm: Extend DVSEC range register emulation for
 region enumeration
Message-ID: <ZCRzh0VLSVF/7jya@memverge.com>
References: <168012575521.221280.14177293493678527326.stgit@dwillia2-xfh.jf.intel.com>
 <ZCRhhUDcmypVKu0X@memverge.com>
 <64250e45bea49_c722294c2@dwillia2-mobl3.amr.corp.intel.com.notmuch>
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <64250e45bea49_c722294c2@dwillia2-mobl3.amr.corp.intel.com.notmuch>
X-ClientProxiedBy: BYAPR07CA0023.namprd07.prod.outlook.com
 (2603:10b6:a02:bc::36) To SJ0PR17MB5512.namprd17.prod.outlook.com
 (2603:10b6:a03:394::19)
MIME-Version: 1.0
X-MS-PublicTrafficType: Email
X-MS-TrafficTypeDiagnostic: SJ0PR17MB5512:EE_|MW3PR17MB4170:EE_
X-MS-Office365-Filtering-Correlation-Id: 918ec3ef-21e9-4a20-db64-08db30d85757
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: 2poKxRQ9YAATW9y25+H71j7tnma/pS/Ab3pn1J8TTvS1iZMhHtZ1TFmOsd3gBSswngbkf4LXu9ARIac+EA+Dp76n0U01LafmRIifZUCOqvEYkESvz77VWDSzHkXLPNh3OwPJ6hicuF5otcxZmdPNrgSbCNeMh/Q7Xv1Y/eHQOuNZVVKvXFSRXBzQEm/MxUq3M7tTwa/QJkMSfIY8P2ITwHjIEKK+Ka6gGLG90Ga1rgfkF4rcbr+Xypzdca5AqOG0IjD+UqO57OOZl8d7cmRmNCGnpxUhs9nmbOX8sHa3NpNc7ctE0/DGmqfvd/8UQFGr8YGgKucUjnXW6IWuXBXSkJ4mjO2ovbs/7ca1Gpxp1JasmI7VybRBHff1KZOVdR0aovZKkGWIDPDXoajbFFHdt5zWnD3ieqFnTVDivb33N0ptDgn4viXDCxsMTXydr7xlH3zSyJOWaQ+4/JQ5UXr4/SZpbVLTaUUgFmPM1v8rOP/cOGSffAVP8ik8n8nZBfdq4VM6I7eaygUj/1TdpgV5C/XP3zdnXUAgS8xiIguTL4apvrL8a6UiJR2WotoaWhqf
X-Forefront-Antispam-Report: CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SJ0PR17MB5512.namprd17.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230028)(366004)(39850400004)(136003)(346002)(376002)(396003)(451199021)(316002)(6666004)(26005)(6512007)(6506007)(6486002)(186003)(83380400001)(6916009)(44832011)(4326008)(4744005)(8936002)(2616005)(66476007)(8676002)(66556008)(66946007)(41300700001)(5660300002)(478600001)(2906002)(36756003)(86362001)(38100700002);DIR:OUT;SFP:1101;
X-MS-Exchange-AntiSpam-MessageData-ChunkCount: 1
X-MS-Exchange-AntiSpam-MessageData-0: =?us-ascii?Q?F9vS9yXu1E/qsIhPvuXZwqjLW5GMJe7ztGSJZxvv/prrFXH271viqu8AVPzQ?=
 =?us-ascii?Q?y28np7xeTggGRjFdAUjJIsFw7pdONn2ApdAI4bRut4hPt+gIQbikWbth2Zv4?=
 =?us-ascii?Q?5/VkgsiS8xAZOhQaZEVoi6qDbM8ohY9wJ2ZruTqS7LHVH0tsBM2Qe6w46ARC?=
 =?us-ascii?Q?lA5r7R2D9IBqGvYcuxxvjDEQHYKjMtXeGQfIyfG5qhxJRXvWHJ6aPQgEHIYF?=
 =?us-ascii?Q?VdUKsaCwfedFZOk4SJOUDQvZiTZsVzOd1f1t+jcmNnlj6qLp5HneOQTWRQsv?=
 =?us-ascii?Q?ZnbXY4obVTwzJ/VD6Oitwnrm44NbqtoG5LL+2+dxek0IYwtWcUnDLTweZKW5?=
 =?us-ascii?Q?aoRiUDPMs5Ja2RnujX2Kaf8S/22b9VtkKEaLEIHWgN/cd5FM9uXbyMpUVrWu?=
 =?us-ascii?Q?VmeS+nnTDMKxLxbZuvVOpU/ERzmgUsFhc2P8lR+W3g6VPDrIXYafjIUQhoxv?=
 =?us-ascii?Q?qHrxvpEK7lSNc/yhAx9z4ppNZ7KstB70iG3tGSLHXEfMAVIWgS/pNtw1vuI7?=
 =?us-ascii?Q?YbJD69pQsQl9l6ypDsv7Q1lOOljjBEMlHYdvpyWIcRSmaR7olXCQtBM2BV2Z?=
 =?us-ascii?Q?t+owge0KzHEmABo4+cVOvLE+CVSf2ZPrPIrvLKjpJclYGfNug1nCDlCotb8Y?=
 =?us-ascii?Q?X9HhEW1idmscARCsNgEEjLM6EDq6eNaRl3/T9X4jsLy0zh7dVAz9xqao6Nq6?=
 =?us-ascii?Q?UCDaZZpOuQwfweIQ9drZ3FT4ZaLO6cN/DayWI0HZOouAZz/A2rukivKGXafH?=
 =?us-ascii?Q?GNIxNlkEVPd33MQAmiHKrkYUpBXjw2IH2FiQbJfSfllXsvPQuGkhN+iKeMSS?=
 =?us-ascii?Q?4FGimOoiSCninhSqSxA37xZ1Rxo4xzNg1kdpiNHLj9qZFsfZMFWccBTzvq/k?=
 =?us-ascii?Q?3+29VDLB3tuDLrHrjJwgBdzG1pdtTS2ZWbGaEHVzsczx/Z0WSoVAZy2Z2SF3?=
 =?us-ascii?Q?4qsixwCjFFBm21XrIIlziqWqyFb8CwlbOhWoaKexWM6O5/6yd/KcFl3LHCT8?=
 =?us-ascii?Q?Z1z62WB1TWvnXwQTm2VDP5ZbxBxBicqw6w9DW5JpdLD5mcH8Abh7q/KmvQCU?=
 =?us-ascii?Q?Ymwu2/2deyjH7VsVt9w+ozrgseuPrpx/xZxzUERSkh19J4uBYzORJsFeISsh?=
 =?us-ascii?Q?I6/qqlpzHMYSTp5Yrxw7w2dWbhkY6eeAsEmqzXDWXVjMq6qZUZMn5QcdhDCI?=
 =?us-ascii?Q?JfnqFsIVWO0DwLbzsujPUfMAR5O4YcdA70MnLD8WCcdnQ7wttR1l9OUQqtwf?=
 =?us-ascii?Q?qjSWVagNsyeiNLbBoUa/jFC53+KtifpEcA2O5CnyTPWvzGzoAPyeuF3NcCWf?=
 =?us-ascii?Q?fGX+mijrtazkTvMELjhPe/qzU5pjBimWvPa2cbkGYX54qwEpAI46QXpxnks1?=
 =?us-ascii?Q?7kqoorqUVt19x/rGXFjr2+ho+8nN435+q5Lxg+v+4wGFwF0QlKWoy5XymtEC?=
 =?us-ascii?Q?nCGyAZ/GSV1VqpoQHQbSnKxI1tjoj979KTdscWp1F8PHanZxex241IM2KYsy?=
 =?us-ascii?Q?NzJaD4BTiVOnb9QPbcZBbHTdFCLMI0JLxxXAPmFqTv/Fkpu3FxmTu4dKHdcj?=
 =?us-ascii?Q?H1egh7hjZeOC7l/42DkN1W30EgNUpgGYYMepM8J3VXVN6XOhY56N4VuAkEMb?=
 =?us-ascii?Q?0w=3D=3D?=
X-OriginatorOrg: memverge.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 918ec3ef-21e9-4a20-db64-08db30d85757
X-MS-Exchange-CrossTenant-AuthSource: SJ0PR17MB5512.namprd17.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 30 Mar 2023 04:36:34.1317
 (UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 5c90cb59-37e7-4c81-9c07-00473d5fb682
X-MS-Exchange-CrossTenant-MailboxType: HOSTED
X-MS-Exchange-CrossTenant-UserPrincipalName: zkfCjeZ8+adE3fFDj5qQk4K5j8XbVxhKg0jVE6vHioH2wwNX70gw8lt+p+9b9JTi30/7/lSleIofwvbJD5Vz4twWALkLRwORxoSvx3lUIO4=
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MW3PR17MB4170
Precedence: bulk
List-ID: <linux-cxl.vger.kernel.org>
X-Mailing-List: linux-cxl@vger.kernel.org

On Wed, Mar 29, 2023 at 09:21:25PM -0700, Dan Williams wrote:
> > Is the DVSEC Range Register expected to be programmed by bios, and are
> > not being programmed correctly?
> 
> This debug experiment makes me think perhaps the *device* is at fault,
> not the BIOS. Perhaps the device accepts writes to CXL_DVSEC_RANGE_BASE
> to set up the decode as expected, but reads return 0? That's the only
> way that I can see that forcing that offset results in successfully
> talking to memory.
> 

Oh, i meant to add that i tested whether the memory is accessible via
numactl --membind=1 with both memhog and a python prompt, and things
worked just fine.  So memory works.

